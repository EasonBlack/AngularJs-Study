/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var _jquery=__webpack_require__(1);var _jquery2=_interopRequireDefault(_jquery);var _angular=__webpack_require__(2);var _angular2=_interopRequireDefault(_angular);__webpack_require__(4);__webpack_require__(6);__webpack_require__(8);__webpack_require__(10);__webpack_require__(113);__webpack_require__(114);__webpack_require__(115);__webpack_require__(116);__webpack_require__(117);__webpack_require__(118);__webpack_require__(119);__webpack_require__(120);__webpack_require__(121);__webpack_require__(122);__webpack_require__(123);__webpack_require__(124);__webpack_require__(125);__webpack_require__(126);__webpack_require__(127);__webpack_require__(128);__webpack_require__(129);__webpack_require__(130);__webpack_require__(131);__webpack_require__(132);__webpack_require__(133);__webpack_require__(134);__webpack_require__(135);__webpack_require__(136);__webpack_require__(137);__webpack_require__(138);__webpack_require__(139);__webpack_require__(140);__webpack_require__(141);__webpack_require__(142);__webpack_require__(143);__webpack_require__(144);__webpack_require__(145);__webpack_require__(146);__webpack_require__(147);__webpack_require__(148);__webpack_require__(149);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
	 * jQuery JavaScript Library v2.2.3
	 * http://jquery.com/
	 *
	 * Includes Sizzle.js
	 * http://sizzlejs.com/
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license
	 * http://jquery.org/license
	 *
	 * Date: 2016-04-05T19:26Z
	 */
	
	(function( global, factory ) {
	
		if ( typeof module === "object" && typeof module.exports === "object" ) {
			// For CommonJS and CommonJS-like environments where a proper `window`
			// is present, execute the factory and get jQuery.
			// For environments that do not have a `window` with a `document`
			// (such as Node.js), expose a factory as module.exports.
			// This accentuates the need for the creation of a real `window`.
			// e.g. var jQuery = require("jquery")(window);
			// See ticket #14549 for more info.
			module.exports = global.document ?
				factory( global, true ) :
				function( w ) {
					if ( !w.document ) {
						throw new Error( "jQuery requires a window with a document" );
					}
					return factory( w );
				};
		} else {
			factory( global );
		}
	
	// Pass this if window is not defined yet
	}(typeof window !== "undefined" ? window : this, function( window, noGlobal ) {
	
	// Support: Firefox 18+
	// Can't be in strict mode, several libs including ASP.NET trace
	// the stack via arguments.caller.callee and Firefox dies if
	// you try to trace through "use strict" call chains. (#13335)
	//"use strict";
	var arr = [];
	
	var document = window.document;
	
	var slice = arr.slice;
	
	var concat = arr.concat;
	
	var push = arr.push;
	
	var indexOf = arr.indexOf;
	
	var class2type = {};
	
	var toString = class2type.toString;
	
	var hasOwn = class2type.hasOwnProperty;
	
	var support = {};
	
	
	
	var
		version = "2.2.3",
	
		// Define a local copy of jQuery
		jQuery = function( selector, context ) {
	
			// The jQuery object is actually just the init constructor 'enhanced'
			// Need init if jQuery is called (just allow error to be thrown if not included)
			return new jQuery.fn.init( selector, context );
		},
	
		// Support: Android<4.1
		// Make sure we trim BOM and NBSP
		rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,
	
		// Matches dashed string for camelizing
		rmsPrefix = /^-ms-/,
		rdashAlpha = /-([\da-z])/gi,
	
		// Used by jQuery.camelCase as callback to replace()
		fcamelCase = function( all, letter ) {
			return letter.toUpperCase();
		};
	
	jQuery.fn = jQuery.prototype = {
	
		// The current version of jQuery being used
		jquery: version,
	
		constructor: jQuery,
	
		// Start with an empty selector
		selector: "",
	
		// The default length of a jQuery object is 0
		length: 0,
	
		toArray: function() {
			return slice.call( this );
		},
	
		// Get the Nth element in the matched element set OR
		// Get the whole matched element set as a clean array
		get: function( num ) {
			return num != null ?
	
				// Return just the one element from the set
				( num < 0 ? this[ num + this.length ] : this[ num ] ) :
	
				// Return all the elements in a clean array
				slice.call( this );
		},
	
		// Take an array of elements and push it onto the stack
		// (returning the new matched element set)
		pushStack: function( elems ) {
	
			// Build a new jQuery matched element set
			var ret = jQuery.merge( this.constructor(), elems );
	
			// Add the old object onto the stack (as a reference)
			ret.prevObject = this;
			ret.context = this.context;
	
			// Return the newly-formed element set
			return ret;
		},
	
		// Execute a callback for every element in the matched set.
		each: function( callback ) {
			return jQuery.each( this, callback );
		},
	
		map: function( callback ) {
			return this.pushStack( jQuery.map( this, function( elem, i ) {
				return callback.call( elem, i, elem );
			} ) );
		},
	
		slice: function() {
			return this.pushStack( slice.apply( this, arguments ) );
		},
	
		first: function() {
			return this.eq( 0 );
		},
	
		last: function() {
			return this.eq( -1 );
		},
	
		eq: function( i ) {
			var len = this.length,
				j = +i + ( i < 0 ? len : 0 );
			return this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );
		},
	
		end: function() {
			return this.prevObject || this.constructor();
		},
	
		// For internal use only.
		// Behaves like an Array's method, not like a jQuery method.
		push: push,
		sort: arr.sort,
		splice: arr.splice
	};
	
	jQuery.extend = jQuery.fn.extend = function() {
		var options, name, src, copy, copyIsArray, clone,
			target = arguments[ 0 ] || {},
			i = 1,
			length = arguments.length,
			deep = false;
	
		// Handle a deep copy situation
		if ( typeof target === "boolean" ) {
			deep = target;
	
			// Skip the boolean and the target
			target = arguments[ i ] || {};
			i++;
		}
	
		// Handle case when target is a string or something (possible in deep copy)
		if ( typeof target !== "object" && !jQuery.isFunction( target ) ) {
			target = {};
		}
	
		// Extend jQuery itself if only one argument is passed
		if ( i === length ) {
			target = this;
			i--;
		}
	
		for ( ; i < length; i++ ) {
	
			// Only deal with non-null/undefined values
			if ( ( options = arguments[ i ] ) != null ) {
	
				// Extend the base object
				for ( name in options ) {
					src = target[ name ];
					copy = options[ name ];
	
					// Prevent never-ending loop
					if ( target === copy ) {
						continue;
					}
	
					// Recurse if we're merging plain objects or arrays
					if ( deep && copy && ( jQuery.isPlainObject( copy ) ||
						( copyIsArray = jQuery.isArray( copy ) ) ) ) {
	
						if ( copyIsArray ) {
							copyIsArray = false;
							clone = src && jQuery.isArray( src ) ? src : [];
	
						} else {
							clone = src && jQuery.isPlainObject( src ) ? src : {};
						}
	
						// Never move original objects, clone them
						target[ name ] = jQuery.extend( deep, clone, copy );
	
					// Don't bring in undefined values
					} else if ( copy !== undefined ) {
						target[ name ] = copy;
					}
				}
			}
		}
	
		// Return the modified object
		return target;
	};
	
	jQuery.extend( {
	
		// Unique for each copy of jQuery on the page
		expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),
	
		// Assume jQuery is ready without the ready module
		isReady: true,
	
		error: function( msg ) {
			throw new Error( msg );
		},
	
		noop: function() {},
	
		isFunction: function( obj ) {
			return jQuery.type( obj ) === "function";
		},
	
		isArray: Array.isArray,
	
		isWindow: function( obj ) {
			return obj != null && obj === obj.window;
		},
	
		isNumeric: function( obj ) {
	
			// parseFloat NaNs numeric-cast false positives (null|true|false|"")
			// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
			// subtraction forces infinities to NaN
			// adding 1 corrects loss of precision from parseFloat (#15100)
			var realStringObj = obj && obj.toString();
			return !jQuery.isArray( obj ) && ( realStringObj - parseFloat( realStringObj ) + 1 ) >= 0;
		},
	
		isPlainObject: function( obj ) {
			var key;
	
			// Not plain objects:
			// - Any object or value whose internal [[Class]] property is not "[object Object]"
			// - DOM nodes
			// - window
			if ( jQuery.type( obj ) !== "object" || obj.nodeType || jQuery.isWindow( obj ) ) {
				return false;
			}
	
			// Not own constructor property must be Object
			if ( obj.constructor &&
					!hasOwn.call( obj, "constructor" ) &&
					!hasOwn.call( obj.constructor.prototype || {}, "isPrototypeOf" ) ) {
				return false;
			}
	
			// Own properties are enumerated firstly, so to speed up,
			// if last one is own, then all properties are own
			for ( key in obj ) {}
	
			return key === undefined || hasOwn.call( obj, key );
		},
	
		isEmptyObject: function( obj ) {
			var name;
			for ( name in obj ) {
				return false;
			}
			return true;
		},
	
		type: function( obj ) {
			if ( obj == null ) {
				return obj + "";
			}
	
			// Support: Android<4.0, iOS<6 (functionish RegExp)
			return typeof obj === "object" || typeof obj === "function" ?
				class2type[ toString.call( obj ) ] || "object" :
				typeof obj;
		},
	
		// Evaluates a script in a global context
		globalEval: function( code ) {
			var script,
				indirect = eval;
	
			code = jQuery.trim( code );
	
			if ( code ) {
	
				// If the code includes a valid, prologue position
				// strict mode pragma, execute code by injecting a
				// script tag into the document.
				if ( code.indexOf( "use strict" ) === 1 ) {
					script = document.createElement( "script" );
					script.text = code;
					document.head.appendChild( script ).parentNode.removeChild( script );
				} else {
	
					// Otherwise, avoid the DOM node creation, insertion
					// and removal by using an indirect global eval
	
					indirect( code );
				}
			}
		},
	
		// Convert dashed to camelCase; used by the css and data modules
		// Support: IE9-11+
		// Microsoft forgot to hump their vendor prefix (#9572)
		camelCase: function( string ) {
			return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
		},
	
		nodeName: function( elem, name ) {
			return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
		},
	
		each: function( obj, callback ) {
			var length, i = 0;
	
			if ( isArrayLike( obj ) ) {
				length = obj.length;
				for ( ; i < length; i++ ) {
					if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
						break;
					}
				}
			} else {
				for ( i in obj ) {
					if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
						break;
					}
				}
			}
	
			return obj;
		},
	
		// Support: Android<4.1
		trim: function( text ) {
			return text == null ?
				"" :
				( text + "" ).replace( rtrim, "" );
		},
	
		// results is for internal usage only
		makeArray: function( arr, results ) {
			var ret = results || [];
	
			if ( arr != null ) {
				if ( isArrayLike( Object( arr ) ) ) {
					jQuery.merge( ret,
						typeof arr === "string" ?
						[ arr ] : arr
					);
				} else {
					push.call( ret, arr );
				}
			}
	
			return ret;
		},
	
		inArray: function( elem, arr, i ) {
			return arr == null ? -1 : indexOf.call( arr, elem, i );
		},
	
		merge: function( first, second ) {
			var len = +second.length,
				j = 0,
				i = first.length;
	
			for ( ; j < len; j++ ) {
				first[ i++ ] = second[ j ];
			}
	
			first.length = i;
	
			return first;
		},
	
		grep: function( elems, callback, invert ) {
			var callbackInverse,
				matches = [],
				i = 0,
				length = elems.length,
				callbackExpect = !invert;
	
			// Go through the array, only saving the items
			// that pass the validator function
			for ( ; i < length; i++ ) {
				callbackInverse = !callback( elems[ i ], i );
				if ( callbackInverse !== callbackExpect ) {
					matches.push( elems[ i ] );
				}
			}
	
			return matches;
		},
	
		// arg is for internal usage only
		map: function( elems, callback, arg ) {
			var length, value,
				i = 0,
				ret = [];
	
			// Go through the array, translating each of the items to their new values
			if ( isArrayLike( elems ) ) {
				length = elems.length;
				for ( ; i < length; i++ ) {
					value = callback( elems[ i ], i, arg );
	
					if ( value != null ) {
						ret.push( value );
					}
				}
	
			// Go through every key on the object,
			} else {
				for ( i in elems ) {
					value = callback( elems[ i ], i, arg );
	
					if ( value != null ) {
						ret.push( value );
					}
				}
			}
	
			// Flatten any nested arrays
			return concat.apply( [], ret );
		},
	
		// A global GUID counter for objects
		guid: 1,
	
		// Bind a function to a context, optionally partially applying any
		// arguments.
		proxy: function( fn, context ) {
			var tmp, args, proxy;
	
			if ( typeof context === "string" ) {
				tmp = fn[ context ];
				context = fn;
				fn = tmp;
			}
	
			// Quick check to determine if target is callable, in the spec
			// this throws a TypeError, but we will just return undefined.
			if ( !jQuery.isFunction( fn ) ) {
				return undefined;
			}
	
			// Simulated bind
			args = slice.call( arguments, 2 );
			proxy = function() {
				return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
			};
	
			// Set the guid of unique handler to the same of original handler, so it can be removed
			proxy.guid = fn.guid = fn.guid || jQuery.guid++;
	
			return proxy;
		},
	
		now: Date.now,
	
		// jQuery.support is not used in Core but other projects attach their
		// properties to it so it needs to exist.
		support: support
	} );
	
	// JSHint would error on this code due to the Symbol not being defined in ES5.
	// Defining this global in .jshintrc would create a danger of using the global
	// unguarded in another place, it seems safer to just disable JSHint for these
	// three lines.
	/* jshint ignore: start */
	if ( typeof Symbol === "function" ) {
		jQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];
	}
	/* jshint ignore: end */
	
	// Populate the class2type map
	jQuery.each( "Boolean Number String Function Array Date RegExp Object Error Symbol".split( " " ),
	function( i, name ) {
		class2type[ "[object " + name + "]" ] = name.toLowerCase();
	} );
	
	function isArrayLike( obj ) {
	
		// Support: iOS 8.2 (not reproducible in simulator)
		// `in` check used to prevent JIT error (gh-2145)
		// hasOwn isn't used here due to false negatives
		// regarding Nodelist length in IE
		var length = !!obj && "length" in obj && obj.length,
			type = jQuery.type( obj );
	
		if ( type === "function" || jQuery.isWindow( obj ) ) {
			return false;
		}
	
		return type === "array" || length === 0 ||
			typeof length === "number" && length > 0 && ( length - 1 ) in obj;
	}
	var Sizzle =
	/*!
	 * Sizzle CSS Selector Engine v2.2.1
	 * http://sizzlejs.com/
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license
	 * http://jquery.org/license
	 *
	 * Date: 2015-10-17
	 */
	(function( window ) {
	
	var i,
		support,
		Expr,
		getText,
		isXML,
		tokenize,
		compile,
		select,
		outermostContext,
		sortInput,
		hasDuplicate,
	
		// Local document vars
		setDocument,
		document,
		docElem,
		documentIsHTML,
		rbuggyQSA,
		rbuggyMatches,
		matches,
		contains,
	
		// Instance-specific data
		expando = "sizzle" + 1 * new Date(),
		preferredDoc = window.document,
		dirruns = 0,
		done = 0,
		classCache = createCache(),
		tokenCache = createCache(),
		compilerCache = createCache(),
		sortOrder = function( a, b ) {
			if ( a === b ) {
				hasDuplicate = true;
			}
			return 0;
		},
	
		// General-purpose constants
		MAX_NEGATIVE = 1 << 31,
	
		// Instance methods
		hasOwn = ({}).hasOwnProperty,
		arr = [],
		pop = arr.pop,
		push_native = arr.push,
		push = arr.push,
		slice = arr.slice,
		// Use a stripped-down indexOf as it's faster than native
		// http://jsperf.com/thor-indexof-vs-for/5
		indexOf = function( list, elem ) {
			var i = 0,
				len = list.length;
			for ( ; i < len; i++ ) {
				if ( list[i] === elem ) {
					return i;
				}
			}
			return -1;
		},
	
		booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",
	
		// Regular expressions
	
		// http://www.w3.org/TR/css3-selectors/#whitespace
		whitespace = "[\\x20\\t\\r\\n\\f]",
	
		// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
		identifier = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",
	
		// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
		attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +
			// Operator (capture 2)
			"*([*^$|!~]?=)" + whitespace +
			// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
			"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +
			"*\\]",
	
		pseudos = ":(" + identifier + ")(?:\\((" +
			// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
			// 1. quoted (capture 3; capture 4 or capture 5)
			"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
			// 2. simple (capture 6)
			"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
			// 3. anything else (capture 2)
			".*" +
			")\\)|)",
	
		// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
		rwhitespace = new RegExp( whitespace + "+", "g" ),
		rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),
	
		rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
		rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),
	
		rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g" ),
	
		rpseudo = new RegExp( pseudos ),
		ridentifier = new RegExp( "^" + identifier + "$" ),
	
		matchExpr = {
			"ID": new RegExp( "^#(" + identifier + ")" ),
			"CLASS": new RegExp( "^\\.(" + identifier + ")" ),
			"TAG": new RegExp( "^(" + identifier + "|[*])" ),
			"ATTR": new RegExp( "^" + attributes ),
			"PSEUDO": new RegExp( "^" + pseudos ),
			"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
				"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
				"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
			"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
			// For use in libraries implementing .is()
			// We use this for POS matching in `select`
			"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
				whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
		},
	
		rinputs = /^(?:input|select|textarea|button)$/i,
		rheader = /^h\d$/i,
	
		rnative = /^[^{]+\{\s*\[native \w/,
	
		// Easily-parseable/retrievable ID or TAG or CLASS selectors
		rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,
	
		rsibling = /[+~]/,
		rescape = /'|\\/g,
	
		// CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
		runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
		funescape = function( _, escaped, escapedWhitespace ) {
			var high = "0x" + escaped - 0x10000;
			// NaN means non-codepoint
			// Support: Firefox<24
			// Workaround erroneous numeric interpretation of +"0x"
			return high !== high || escapedWhitespace ?
				escaped :
				high < 0 ?
					// BMP codepoint
					String.fromCharCode( high + 0x10000 ) :
					// Supplemental Plane codepoint (surrogate pair)
					String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
		},
	
		// Used for iframes
		// See setDocument()
		// Removing the function wrapper causes a "Permission Denied"
		// error in IE
		unloadHandler = function() {
			setDocument();
		};
	
	// Optimize for push.apply( _, NodeList )
	try {
		push.apply(
			(arr = slice.call( preferredDoc.childNodes )),
			preferredDoc.childNodes
		);
		// Support: Android<4.0
		// Detect silently failing push.apply
		arr[ preferredDoc.childNodes.length ].nodeType;
	} catch ( e ) {
		push = { apply: arr.length ?
	
			// Leverage slice if possible
			function( target, els ) {
				push_native.apply( target, slice.call(els) );
			} :
	
			// Support: IE<9
			// Otherwise append directly
			function( target, els ) {
				var j = target.length,
					i = 0;
				// Can't trust NodeList.length
				while ( (target[j++] = els[i++]) ) {}
				target.length = j - 1;
			}
		};
	}
	
	function Sizzle( selector, context, results, seed ) {
		var m, i, elem, nid, nidselect, match, groups, newSelector,
			newContext = context && context.ownerDocument,
	
			// nodeType defaults to 9, since context defaults to document
			nodeType = context ? context.nodeType : 9;
	
		results = results || [];
	
		// Return early from calls with invalid selector or context
		if ( typeof selector !== "string" || !selector ||
			nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {
	
			return results;
		}
	
		// Try to shortcut find operations (as opposed to filters) in HTML documents
		if ( !seed ) {
	
			if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
				setDocument( context );
			}
			context = context || document;
	
			if ( documentIsHTML ) {
	
				// If the selector is sufficiently simple, try using a "get*By*" DOM method
				// (excepting DocumentFragment context, where the methods don't exist)
				if ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {
	
					// ID selector
					if ( (m = match[1]) ) {
	
						// Document context
						if ( nodeType === 9 ) {
							if ( (elem = context.getElementById( m )) ) {
	
								// Support: IE, Opera, Webkit
								// TODO: identify versions
								// getElementById can match elements by name instead of ID
								if ( elem.id === m ) {
									results.push( elem );
									return results;
								}
							} else {
								return results;
							}
	
						// Element context
						} else {
	
							// Support: IE, Opera, Webkit
							// TODO: identify versions
							// getElementById can match elements by name instead of ID
							if ( newContext && (elem = newContext.getElementById( m )) &&
								contains( context, elem ) &&
								elem.id === m ) {
	
								results.push( elem );
								return results;
							}
						}
	
					// Type selector
					} else if ( match[2] ) {
						push.apply( results, context.getElementsByTagName( selector ) );
						return results;
	
					// Class selector
					} else if ( (m = match[3]) && support.getElementsByClassName &&
						context.getElementsByClassName ) {
	
						push.apply( results, context.getElementsByClassName( m ) );
						return results;
					}
				}
	
				// Take advantage of querySelectorAll
				if ( support.qsa &&
					!compilerCache[ selector + " " ] &&
					(!rbuggyQSA || !rbuggyQSA.test( selector )) ) {
	
					if ( nodeType !== 1 ) {
						newContext = context;
						newSelector = selector;
	
					// qSA looks outside Element context, which is not what we want
					// Thanks to Andrew Dupont for this workaround technique
					// Support: IE <=8
					// Exclude object elements
					} else if ( context.nodeName.toLowerCase() !== "object" ) {
	
						// Capture the context ID, setting it first if necessary
						if ( (nid = context.getAttribute( "id" )) ) {
							nid = nid.replace( rescape, "\\$&" );
						} else {
							context.setAttribute( "id", (nid = expando) );
						}
	
						// Prefix every selector in the list
						groups = tokenize( selector );
						i = groups.length;
						nidselect = ridentifier.test( nid ) ? "#" + nid : "[id='" + nid + "']";
						while ( i-- ) {
							groups[i] = nidselect + " " + toSelector( groups[i] );
						}
						newSelector = groups.join( "," );
	
						// Expand context for sibling selectors
						newContext = rsibling.test( selector ) && testContext( context.parentNode ) ||
							context;
					}
	
					if ( newSelector ) {
						try {
							push.apply( results,
								newContext.querySelectorAll( newSelector )
							);
							return results;
						} catch ( qsaError ) {
						} finally {
							if ( nid === expando ) {
								context.removeAttribute( "id" );
							}
						}
					}
				}
			}
		}
	
		// All others
		return select( selector.replace( rtrim, "$1" ), context, results, seed );
	}
	
	/**
	 * Create key-value caches of limited size
	 * @returns {function(string, object)} Returns the Object data after storing it on itself with
	 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
	 *	deleting the oldest entry
	 */
	function createCache() {
		var keys = [];
	
		function cache( key, value ) {
			// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
			if ( keys.push( key + " " ) > Expr.cacheLength ) {
				// Only keep the most recent entries
				delete cache[ keys.shift() ];
			}
			return (cache[ key + " " ] = value);
		}
		return cache;
	}
	
	/**
	 * Mark a function for special use by Sizzle
	 * @param {Function} fn The function to mark
	 */
	function markFunction( fn ) {
		fn[ expando ] = true;
		return fn;
	}
	
	/**
	 * Support testing using an element
	 * @param {Function} fn Passed the created div and expects a boolean result
	 */
	function assert( fn ) {
		var div = document.createElement("div");
	
		try {
			return !!fn( div );
		} catch (e) {
			return false;
		} finally {
			// Remove from its parent by default
			if ( div.parentNode ) {
				div.parentNode.removeChild( div );
			}
			// release memory in IE
			div = null;
		}
	}
	
	/**
	 * Adds the same handler for all of the specified attrs
	 * @param {String} attrs Pipe-separated list of attributes
	 * @param {Function} handler The method that will be applied
	 */
	function addHandle( attrs, handler ) {
		var arr = attrs.split("|"),
			i = arr.length;
	
		while ( i-- ) {
			Expr.attrHandle[ arr[i] ] = handler;
		}
	}
	
	/**
	 * Checks document order of two siblings
	 * @param {Element} a
	 * @param {Element} b
	 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
	 */
	function siblingCheck( a, b ) {
		var cur = b && a,
			diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
				( ~b.sourceIndex || MAX_NEGATIVE ) -
				( ~a.sourceIndex || MAX_NEGATIVE );
	
		// Use IE sourceIndex if available on both nodes
		if ( diff ) {
			return diff;
		}
	
		// Check if b follows a
		if ( cur ) {
			while ( (cur = cur.nextSibling) ) {
				if ( cur === b ) {
					return -1;
				}
			}
		}
	
		return a ? 1 : -1;
	}
	
	/**
	 * Returns a function to use in pseudos for input types
	 * @param {String} type
	 */
	function createInputPseudo( type ) {
		return function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === type;
		};
	}
	
	/**
	 * Returns a function to use in pseudos for buttons
	 * @param {String} type
	 */
	function createButtonPseudo( type ) {
		return function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return (name === "input" || name === "button") && elem.type === type;
		};
	}
	
	/**
	 * Returns a function to use in pseudos for positionals
	 * @param {Function} fn
	 */
	function createPositionalPseudo( fn ) {
		return markFunction(function( argument ) {
			argument = +argument;
			return markFunction(function( seed, matches ) {
				var j,
					matchIndexes = fn( [], seed.length, argument ),
					i = matchIndexes.length;
	
				// Match elements found at the specified indexes
				while ( i-- ) {
					if ( seed[ (j = matchIndexes[i]) ] ) {
						seed[j] = !(matches[j] = seed[j]);
					}
				}
			});
		});
	}
	
	/**
	 * Checks a node for validity as a Sizzle context
	 * @param {Element|Object=} context
	 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
	 */
	function testContext( context ) {
		return context && typeof context.getElementsByTagName !== "undefined" && context;
	}
	
	// Expose support vars for convenience
	support = Sizzle.support = {};
	
	/**
	 * Detects XML nodes
	 * @param {Element|Object} elem An element or a document
	 * @returns {Boolean} True iff elem is a non-HTML XML node
	 */
	isXML = Sizzle.isXML = function( elem ) {
		// documentElement is verified for cases where it doesn't yet exist
		// (such as loading iframes in IE - #4833)
		var documentElement = elem && (elem.ownerDocument || elem).documentElement;
		return documentElement ? documentElement.nodeName !== "HTML" : false;
	};
	
	/**
	 * Sets document-related variables once based on the current document
	 * @param {Element|Object} [doc] An element or document object to use to set the document
	 * @returns {Object} Returns the current document
	 */
	setDocument = Sizzle.setDocument = function( node ) {
		var hasCompare, parent,
			doc = node ? node.ownerDocument || node : preferredDoc;
	
		// Return early if doc is invalid or already selected
		if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
			return document;
		}
	
		// Update global variables
		document = doc;
		docElem = document.documentElement;
		documentIsHTML = !isXML( document );
	
		// Support: IE 9-11, Edge
		// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
		if ( (parent = document.defaultView) && parent.top !== parent ) {
			// Support: IE 11
			if ( parent.addEventListener ) {
				parent.addEventListener( "unload", unloadHandler, false );
	
			// Support: IE 9 - 10 only
			} else if ( parent.attachEvent ) {
				parent.attachEvent( "onunload", unloadHandler );
			}
		}
	
		/* Attributes
		---------------------------------------------------------------------- */
	
		// Support: IE<8
		// Verify that getAttribute really returns attributes and not properties
		// (excepting IE8 booleans)
		support.attributes = assert(function( div ) {
			div.className = "i";
			return !div.getAttribute("className");
		});
	
		/* getElement(s)By*
		---------------------------------------------------------------------- */
	
		// Check if getElementsByTagName("*") returns only elements
		support.getElementsByTagName = assert(function( div ) {
			div.appendChild( document.createComment("") );
			return !div.getElementsByTagName("*").length;
		});
	
		// Support: IE<9
		support.getElementsByClassName = rnative.test( document.getElementsByClassName );
	
		// Support: IE<10
		// Check if getElementById returns elements by name
		// The broken getElementById methods don't pick up programatically-set names,
		// so use a roundabout getElementsByName test
		support.getById = assert(function( div ) {
			docElem.appendChild( div ).id = expando;
			return !document.getElementsByName || !document.getElementsByName( expando ).length;
		});
	
		// ID find and filter
		if ( support.getById ) {
			Expr.find["ID"] = function( id, context ) {
				if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
					var m = context.getElementById( id );
					return m ? [ m ] : [];
				}
			};
			Expr.filter["ID"] = function( id ) {
				var attrId = id.replace( runescape, funescape );
				return function( elem ) {
					return elem.getAttribute("id") === attrId;
				};
			};
		} else {
			// Support: IE6/7
			// getElementById is not reliable as a find shortcut
			delete Expr.find["ID"];
	
			Expr.filter["ID"] =  function( id ) {
				var attrId = id.replace( runescape, funescape );
				return function( elem ) {
					var node = typeof elem.getAttributeNode !== "undefined" &&
						elem.getAttributeNode("id");
					return node && node.value === attrId;
				};
			};
		}
	
		// Tag
		Expr.find["TAG"] = support.getElementsByTagName ?
			function( tag, context ) {
				if ( typeof context.getElementsByTagName !== "undefined" ) {
					return context.getElementsByTagName( tag );
	
				// DocumentFragment nodes don't have gEBTN
				} else if ( support.qsa ) {
					return context.querySelectorAll( tag );
				}
			} :
	
			function( tag, context ) {
				var elem,
					tmp = [],
					i = 0,
					// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
					results = context.getElementsByTagName( tag );
	
				// Filter out possible comments
				if ( tag === "*" ) {
					while ( (elem = results[i++]) ) {
						if ( elem.nodeType === 1 ) {
							tmp.push( elem );
						}
					}
	
					return tmp;
				}
				return results;
			};
	
		// Class
		Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
			if ( typeof context.getElementsByClassName !== "undefined" && documentIsHTML ) {
				return context.getElementsByClassName( className );
			}
		};
	
		/* QSA/matchesSelector
		---------------------------------------------------------------------- */
	
		// QSA and matchesSelector support
	
		// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
		rbuggyMatches = [];
	
		// qSa(:focus) reports false when true (Chrome 21)
		// We allow this because of a bug in IE8/9 that throws an error
		// whenever `document.activeElement` is accessed on an iframe
		// So, we allow :focus to pass through QSA all the time to avoid the IE error
		// See http://bugs.jquery.com/ticket/13378
		rbuggyQSA = [];
	
		if ( (support.qsa = rnative.test( document.querySelectorAll )) ) {
			// Build QSA regex
			// Regex strategy adopted from Diego Perini
			assert(function( div ) {
				// Select is set to empty string on purpose
				// This is to test IE's treatment of not explicitly
				// setting a boolean content attribute,
				// since its presence should be enough
				// http://bugs.jquery.com/ticket/12359
				docElem.appendChild( div ).innerHTML = "<a id='" + expando + "'></a>" +
					"<select id='" + expando + "-\r\\' msallowcapture=''>" +
					"<option selected=''></option></select>";
	
				// Support: IE8, Opera 11-12.16
				// Nothing should be selected when empty strings follow ^= or $= or *=
				// The test attribute must be unknown in Opera but "safe" for WinRT
				// http://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
				if ( div.querySelectorAll("[msallowcapture^='']").length ) {
					rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
				}
	
				// Support: IE8
				// Boolean attributes and "value" are not treated correctly
				if ( !div.querySelectorAll("[selected]").length ) {
					rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
				}
	
				// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
				if ( !div.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
					rbuggyQSA.push("~=");
				}
	
				// Webkit/Opera - :checked should return selected option elements
				// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
				// IE8 throws error here and will not see later tests
				if ( !div.querySelectorAll(":checked").length ) {
					rbuggyQSA.push(":checked");
				}
	
				// Support: Safari 8+, iOS 8+
				// https://bugs.webkit.org/show_bug.cgi?id=136851
				// In-page `selector#id sibing-combinator selector` fails
				if ( !div.querySelectorAll( "a#" + expando + "+*" ).length ) {
					rbuggyQSA.push(".#.+[+~]");
				}
			});
	
			assert(function( div ) {
				// Support: Windows 8 Native Apps
				// The type and name attributes are restricted during .innerHTML assignment
				var input = document.createElement("input");
				input.setAttribute( "type", "hidden" );
				div.appendChild( input ).setAttribute( "name", "D" );
	
				// Support: IE8
				// Enforce case-sensitivity of name attribute
				if ( div.querySelectorAll("[name=d]").length ) {
					rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
				}
	
				// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
				// IE8 throws error here and will not see later tests
				if ( !div.querySelectorAll(":enabled").length ) {
					rbuggyQSA.push( ":enabled", ":disabled" );
				}
	
				// Opera 10-11 does not throw on post-comma invalid pseudos
				div.querySelectorAll("*,:x");
				rbuggyQSA.push(",.*:");
			});
		}
	
		if ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||
			docElem.webkitMatchesSelector ||
			docElem.mozMatchesSelector ||
			docElem.oMatchesSelector ||
			docElem.msMatchesSelector) )) ) {
	
			assert(function( div ) {
				// Check to see if it's possible to do matchesSelector
				// on a disconnected node (IE 9)
				support.disconnectedMatch = matches.call( div, "div" );
	
				// This should fail with an exception
				// Gecko does not error, returns false instead
				matches.call( div, "[s!='']:x" );
				rbuggyMatches.push( "!=", pseudos );
			});
		}
	
		rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
		rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );
	
		/* Contains
		---------------------------------------------------------------------- */
		hasCompare = rnative.test( docElem.compareDocumentPosition );
	
		// Element contains another
		// Purposefully self-exclusive
		// As in, an element does not contain itself
		contains = hasCompare || rnative.test( docElem.contains ) ?
			function( a, b ) {
				var adown = a.nodeType === 9 ? a.documentElement : a,
					bup = b && b.parentNode;
				return a === bup || !!( bup && bup.nodeType === 1 && (
					adown.contains ?
						adown.contains( bup ) :
						a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
				));
			} :
			function( a, b ) {
				if ( b ) {
					while ( (b = b.parentNode) ) {
						if ( b === a ) {
							return true;
						}
					}
				}
				return false;
			};
	
		/* Sorting
		---------------------------------------------------------------------- */
	
		// Document order sorting
		sortOrder = hasCompare ?
		function( a, b ) {
	
			// Flag for duplicate removal
			if ( a === b ) {
				hasDuplicate = true;
				return 0;
			}
	
			// Sort on method existence if only one input has compareDocumentPosition
			var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
			if ( compare ) {
				return compare;
			}
	
			// Calculate position if both inputs belong to the same document
			compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?
				a.compareDocumentPosition( b ) :
	
				// Otherwise we know they are disconnected
				1;
	
			// Disconnected nodes
			if ( compare & 1 ||
				(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {
	
				// Choose the first element that is related to our preferred document
				if ( a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {
					return -1;
				}
				if ( b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {
					return 1;
				}
	
				// Maintain original order
				return sortInput ?
					( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
					0;
			}
	
			return compare & 4 ? -1 : 1;
		} :
		function( a, b ) {
			// Exit early if the nodes are identical
			if ( a === b ) {
				hasDuplicate = true;
				return 0;
			}
	
			var cur,
				i = 0,
				aup = a.parentNode,
				bup = b.parentNode,
				ap = [ a ],
				bp = [ b ];
	
			// Parentless nodes are either documents or disconnected
			if ( !aup || !bup ) {
				return a === document ? -1 :
					b === document ? 1 :
					aup ? -1 :
					bup ? 1 :
					sortInput ?
					( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
					0;
	
			// If the nodes are siblings, we can do a quick check
			} else if ( aup === bup ) {
				return siblingCheck( a, b );
			}
	
			// Otherwise we need full lists of their ancestors for comparison
			cur = a;
			while ( (cur = cur.parentNode) ) {
				ap.unshift( cur );
			}
			cur = b;
			while ( (cur = cur.parentNode) ) {
				bp.unshift( cur );
			}
	
			// Walk down the tree looking for a discrepancy
			while ( ap[i] === bp[i] ) {
				i++;
			}
	
			return i ?
				// Do a sibling check if the nodes have a common ancestor
				siblingCheck( ap[i], bp[i] ) :
	
				// Otherwise nodes in our document sort first
				ap[i] === preferredDoc ? -1 :
				bp[i] === preferredDoc ? 1 :
				0;
		};
	
		return document;
	};
	
	Sizzle.matches = function( expr, elements ) {
		return Sizzle( expr, null, null, elements );
	};
	
	Sizzle.matchesSelector = function( elem, expr ) {
		// Set document vars if needed
		if ( ( elem.ownerDocument || elem ) !== document ) {
			setDocument( elem );
		}
	
		// Make sure that attribute selectors are quoted
		expr = expr.replace( rattributeQuotes, "='$1']" );
	
		if ( support.matchesSelector && documentIsHTML &&
			!compilerCache[ expr + " " ] &&
			( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
			( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {
	
			try {
				var ret = matches.call( elem, expr );
	
				// IE 9's matchesSelector returns false on disconnected nodes
				if ( ret || support.disconnectedMatch ||
						// As well, disconnected nodes are said to be in a document
						// fragment in IE 9
						elem.document && elem.document.nodeType !== 11 ) {
					return ret;
				}
			} catch (e) {}
		}
	
		return Sizzle( expr, document, null, [ elem ] ).length > 0;
	};
	
	Sizzle.contains = function( context, elem ) {
		// Set document vars if needed
		if ( ( context.ownerDocument || context ) !== document ) {
			setDocument( context );
		}
		return contains( context, elem );
	};
	
	Sizzle.attr = function( elem, name ) {
		// Set document vars if needed
		if ( ( elem.ownerDocument || elem ) !== document ) {
			setDocument( elem );
		}
	
		var fn = Expr.attrHandle[ name.toLowerCase() ],
			// Don't get fooled by Object.prototype properties (jQuery #13807)
			val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
				fn( elem, name, !documentIsHTML ) :
				undefined;
	
		return val !== undefined ?
			val :
			support.attributes || !documentIsHTML ?
				elem.getAttribute( name ) :
				(val = elem.getAttributeNode(name)) && val.specified ?
					val.value :
					null;
	};
	
	Sizzle.error = function( msg ) {
		throw new Error( "Syntax error, unrecognized expression: " + msg );
	};
	
	/**
	 * Document sorting and removing duplicates
	 * @param {ArrayLike} results
	 */
	Sizzle.uniqueSort = function( results ) {
		var elem,
			duplicates = [],
			j = 0,
			i = 0;
	
		// Unless we *know* we can detect duplicates, assume their presence
		hasDuplicate = !support.detectDuplicates;
		sortInput = !support.sortStable && results.slice( 0 );
		results.sort( sortOrder );
	
		if ( hasDuplicate ) {
			while ( (elem = results[i++]) ) {
				if ( elem === results[ i ] ) {
					j = duplicates.push( i );
				}
			}
			while ( j-- ) {
				results.splice( duplicates[ j ], 1 );
			}
		}
	
		// Clear input after sorting to release objects
		// See https://github.com/jquery/sizzle/pull/225
		sortInput = null;
	
		return results;
	};
	
	/**
	 * Utility function for retrieving the text value of an array of DOM nodes
	 * @param {Array|Element} elem
	 */
	getText = Sizzle.getText = function( elem ) {
		var node,
			ret = "",
			i = 0,
			nodeType = elem.nodeType;
	
		if ( !nodeType ) {
			// If no nodeType, this is expected to be an array
			while ( (node = elem[i++]) ) {
				// Do not traverse comment nodes
				ret += getText( node );
			}
		} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
			// Use textContent for elements
			// innerText usage removed for consistency of new lines (jQuery #11153)
			if ( typeof elem.textContent === "string" ) {
				return elem.textContent;
			} else {
				// Traverse its children
				for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
					ret += getText( elem );
				}
			}
		} else if ( nodeType === 3 || nodeType === 4 ) {
			return elem.nodeValue;
		}
		// Do not include comment or processing instruction nodes
	
		return ret;
	};
	
	Expr = Sizzle.selectors = {
	
		// Can be adjusted by the user
		cacheLength: 50,
	
		createPseudo: markFunction,
	
		match: matchExpr,
	
		attrHandle: {},
	
		find: {},
	
		relative: {
			">": { dir: "parentNode", first: true },
			" ": { dir: "parentNode" },
			"+": { dir: "previousSibling", first: true },
			"~": { dir: "previousSibling" }
		},
	
		preFilter: {
			"ATTR": function( match ) {
				match[1] = match[1].replace( runescape, funescape );
	
				// Move the given value to match[3] whether quoted or unquoted
				match[3] = ( match[3] || match[4] || match[5] || "" ).replace( runescape, funescape );
	
				if ( match[2] === "~=" ) {
					match[3] = " " + match[3] + " ";
				}
	
				return match.slice( 0, 4 );
			},
	
			"CHILD": function( match ) {
				/* matches from matchExpr["CHILD"]
					1 type (only|nth|...)
					2 what (child|of-type)
					3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
					4 xn-component of xn+y argument ([+-]?\d*n|)
					5 sign of xn-component
					6 x of xn-component
					7 sign of y-component
					8 y of y-component
				*/
				match[1] = match[1].toLowerCase();
	
				if ( match[1].slice( 0, 3 ) === "nth" ) {
					// nth-* requires argument
					if ( !match[3] ) {
						Sizzle.error( match[0] );
					}
	
					// numeric x and y parameters for Expr.filter.CHILD
					// remember that false/true cast respectively to 0/1
					match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
					match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );
	
				// other types prohibit arguments
				} else if ( match[3] ) {
					Sizzle.error( match[0] );
				}
	
				return match;
			},
	
			"PSEUDO": function( match ) {
				var excess,
					unquoted = !match[6] && match[2];
	
				if ( matchExpr["CHILD"].test( match[0] ) ) {
					return null;
				}
	
				// Accept quoted arguments as-is
				if ( match[3] ) {
					match[2] = match[4] || match[5] || "";
	
				// Strip excess characters from unquoted arguments
				} else if ( unquoted && rpseudo.test( unquoted ) &&
					// Get excess from tokenize (recursively)
					(excess = tokenize( unquoted, true )) &&
					// advance to the next closing parenthesis
					(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {
	
					// excess is a negative index
					match[0] = match[0].slice( 0, excess );
					match[2] = unquoted.slice( 0, excess );
				}
	
				// Return only captures needed by the pseudo filter method (type and argument)
				return match.slice( 0, 3 );
			}
		},
	
		filter: {
	
			"TAG": function( nodeNameSelector ) {
				var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
				return nodeNameSelector === "*" ?
					function() { return true; } :
					function( elem ) {
						return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
					};
			},
	
			"CLASS": function( className ) {
				var pattern = classCache[ className + " " ];
	
				return pattern ||
					(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
					classCache( className, function( elem ) {
						return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "" );
					});
			},
	
			"ATTR": function( name, operator, check ) {
				return function( elem ) {
					var result = Sizzle.attr( elem, name );
	
					if ( result == null ) {
						return operator === "!=";
					}
					if ( !operator ) {
						return true;
					}
	
					result += "";
	
					return operator === "=" ? result === check :
						operator === "!=" ? result !== check :
						operator === "^=" ? check && result.indexOf( check ) === 0 :
						operator === "*=" ? check && result.indexOf( check ) > -1 :
						operator === "$=" ? check && result.slice( -check.length ) === check :
						operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
						operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
						false;
				};
			},
	
			"CHILD": function( type, what, argument, first, last ) {
				var simple = type.slice( 0, 3 ) !== "nth",
					forward = type.slice( -4 ) !== "last",
					ofType = what === "of-type";
	
				return first === 1 && last === 0 ?
	
					// Shortcut for :nth-*(n)
					function( elem ) {
						return !!elem.parentNode;
					} :
	
					function( elem, context, xml ) {
						var cache, uniqueCache, outerCache, node, nodeIndex, start,
							dir = simple !== forward ? "nextSibling" : "previousSibling",
							parent = elem.parentNode,
							name = ofType && elem.nodeName.toLowerCase(),
							useCache = !xml && !ofType,
							diff = false;
	
						if ( parent ) {
	
							// :(first|last|only)-(child|of-type)
							if ( simple ) {
								while ( dir ) {
									node = elem;
									while ( (node = node[ dir ]) ) {
										if ( ofType ?
											node.nodeName.toLowerCase() === name :
											node.nodeType === 1 ) {
	
											return false;
										}
									}
									// Reverse direction for :only-* (if we haven't yet done so)
									start = dir = type === "only" && !start && "nextSibling";
								}
								return true;
							}
	
							start = [ forward ? parent.firstChild : parent.lastChild ];
	
							// non-xml :nth-child(...) stores cache data on `parent`
							if ( forward && useCache ) {
	
								// Seek `elem` from a previously-cached index
	
								// ...in a gzip-friendly way
								node = parent;
								outerCache = node[ expando ] || (node[ expando ] = {});
	
								// Support: IE <9 only
								// Defend against cloned attroperties (jQuery gh-1709)
								uniqueCache = outerCache[ node.uniqueID ] ||
									(outerCache[ node.uniqueID ] = {});
	
								cache = uniqueCache[ type ] || [];
								nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
								diff = nodeIndex && cache[ 2 ];
								node = nodeIndex && parent.childNodes[ nodeIndex ];
	
								while ( (node = ++nodeIndex && node && node[ dir ] ||
	
									// Fallback to seeking `elem` from the start
									(diff = nodeIndex = 0) || start.pop()) ) {
	
									// When found, cache indexes on `parent` and break
									if ( node.nodeType === 1 && ++diff && node === elem ) {
										uniqueCache[ type ] = [ dirruns, nodeIndex, diff ];
										break;
									}
								}
	
							} else {
								// Use previously-cached element index if available
								if ( useCache ) {
									// ...in a gzip-friendly way
									node = elem;
									outerCache = node[ expando ] || (node[ expando ] = {});
	
									// Support: IE <9 only
									// Defend against cloned attroperties (jQuery gh-1709)
									uniqueCache = outerCache[ node.uniqueID ] ||
										(outerCache[ node.uniqueID ] = {});
	
									cache = uniqueCache[ type ] || [];
									nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
									diff = nodeIndex;
								}
	
								// xml :nth-child(...)
								// or :nth-last-child(...) or :nth(-last)?-of-type(...)
								if ( diff === false ) {
									// Use the same loop as above to seek `elem` from the start
									while ( (node = ++nodeIndex && node && node[ dir ] ||
										(diff = nodeIndex = 0) || start.pop()) ) {
	
										if ( ( ofType ?
											node.nodeName.toLowerCase() === name :
											node.nodeType === 1 ) &&
											++diff ) {
	
											// Cache the index of each encountered element
											if ( useCache ) {
												outerCache = node[ expando ] || (node[ expando ] = {});
	
												// Support: IE <9 only
												// Defend against cloned attroperties (jQuery gh-1709)
												uniqueCache = outerCache[ node.uniqueID ] ||
													(outerCache[ node.uniqueID ] = {});
	
												uniqueCache[ type ] = [ dirruns, diff ];
											}
	
											if ( node === elem ) {
												break;
											}
										}
									}
								}
							}
	
							// Incorporate the offset, then check against cycle size
							diff -= last;
							return diff === first || ( diff % first === 0 && diff / first >= 0 );
						}
					};
			},
	
			"PSEUDO": function( pseudo, argument ) {
				// pseudo-class names are case-insensitive
				// http://www.w3.org/TR/selectors/#pseudo-classes
				// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
				// Remember that setFilters inherits from pseudos
				var args,
					fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
						Sizzle.error( "unsupported pseudo: " + pseudo );
	
				// The user may use createPseudo to indicate that
				// arguments are needed to create the filter function
				// just as Sizzle does
				if ( fn[ expando ] ) {
					return fn( argument );
				}
	
				// But maintain support for old signatures
				if ( fn.length > 1 ) {
					args = [ pseudo, pseudo, "", argument ];
					return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
						markFunction(function( seed, matches ) {
							var idx,
								matched = fn( seed, argument ),
								i = matched.length;
							while ( i-- ) {
								idx = indexOf( seed, matched[i] );
								seed[ idx ] = !( matches[ idx ] = matched[i] );
							}
						}) :
						function( elem ) {
							return fn( elem, 0, args );
						};
				}
	
				return fn;
			}
		},
	
		pseudos: {
			// Potentially complex pseudos
			"not": markFunction(function( selector ) {
				// Trim the selector passed to compile
				// to avoid treating leading and trailing
				// spaces as combinators
				var input = [],
					results = [],
					matcher = compile( selector.replace( rtrim, "$1" ) );
	
				return matcher[ expando ] ?
					markFunction(function( seed, matches, context, xml ) {
						var elem,
							unmatched = matcher( seed, null, xml, [] ),
							i = seed.length;
	
						// Match elements unmatched by `matcher`
						while ( i-- ) {
							if ( (elem = unmatched[i]) ) {
								seed[i] = !(matches[i] = elem);
							}
						}
					}) :
					function( elem, context, xml ) {
						input[0] = elem;
						matcher( input, null, xml, results );
						// Don't keep the element (issue #299)
						input[0] = null;
						return !results.pop();
					};
			}),
	
			"has": markFunction(function( selector ) {
				return function( elem ) {
					return Sizzle( selector, elem ).length > 0;
				};
			}),
	
			"contains": markFunction(function( text ) {
				text = text.replace( runescape, funescape );
				return function( elem ) {
					return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
				};
			}),
	
			// "Whether an element is represented by a :lang() selector
			// is based solely on the element's language value
			// being equal to the identifier C,
			// or beginning with the identifier C immediately followed by "-".
			// The matching of C against the element's language value is performed case-insensitively.
			// The identifier C does not have to be a valid language name."
			// http://www.w3.org/TR/selectors/#lang-pseudo
			"lang": markFunction( function( lang ) {
				// lang value must be a valid identifier
				if ( !ridentifier.test(lang || "") ) {
					Sizzle.error( "unsupported lang: " + lang );
				}
				lang = lang.replace( runescape, funescape ).toLowerCase();
				return function( elem ) {
					var elemLang;
					do {
						if ( (elemLang = documentIsHTML ?
							elem.lang :
							elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {
	
							elemLang = elemLang.toLowerCase();
							return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
						}
					} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
					return false;
				};
			}),
	
			// Miscellaneous
			"target": function( elem ) {
				var hash = window.location && window.location.hash;
				return hash && hash.slice( 1 ) === elem.id;
			},
	
			"root": function( elem ) {
				return elem === docElem;
			},
	
			"focus": function( elem ) {
				return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
			},
	
			// Boolean properties
			"enabled": function( elem ) {
				return elem.disabled === false;
			},
	
			"disabled": function( elem ) {
				return elem.disabled === true;
			},
	
			"checked": function( elem ) {
				// In CSS3, :checked should return both checked and selected elements
				// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
				var nodeName = elem.nodeName.toLowerCase();
				return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
			},
	
			"selected": function( elem ) {
				// Accessing this property makes selected-by-default
				// options in Safari work properly
				if ( elem.parentNode ) {
					elem.parentNode.selectedIndex;
				}
	
				return elem.selected === true;
			},
	
			// Contents
			"empty": function( elem ) {
				// http://www.w3.org/TR/selectors/#empty-pseudo
				// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
				//   but not by others (comment: 8; processing instruction: 7; etc.)
				// nodeType < 6 works because attributes (2) do not appear as children
				for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
					if ( elem.nodeType < 6 ) {
						return false;
					}
				}
				return true;
			},
	
			"parent": function( elem ) {
				return !Expr.pseudos["empty"]( elem );
			},
	
			// Element/input types
			"header": function( elem ) {
				return rheader.test( elem.nodeName );
			},
	
			"input": function( elem ) {
				return rinputs.test( elem.nodeName );
			},
	
			"button": function( elem ) {
				var name = elem.nodeName.toLowerCase();
				return name === "input" && elem.type === "button" || name === "button";
			},
	
			"text": function( elem ) {
				var attr;
				return elem.nodeName.toLowerCase() === "input" &&
					elem.type === "text" &&
	
					// Support: IE<8
					// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
					( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );
			},
	
			// Position-in-collection
			"first": createPositionalPseudo(function() {
				return [ 0 ];
			}),
	
			"last": createPositionalPseudo(function( matchIndexes, length ) {
				return [ length - 1 ];
			}),
	
			"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
				return [ argument < 0 ? argument + length : argument ];
			}),
	
			"even": createPositionalPseudo(function( matchIndexes, length ) {
				var i = 0;
				for ( ; i < length; i += 2 ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			}),
	
			"odd": createPositionalPseudo(function( matchIndexes, length ) {
				var i = 1;
				for ( ; i < length; i += 2 ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			}),
	
			"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
				var i = argument < 0 ? argument + length : argument;
				for ( ; --i >= 0; ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			}),
	
			"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
				var i = argument < 0 ? argument + length : argument;
				for ( ; ++i < length; ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			})
		}
	};
	
	Expr.pseudos["nth"] = Expr.pseudos["eq"];
	
	// Add button/input type pseudos
	for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
		Expr.pseudos[ i ] = createInputPseudo( i );
	}
	for ( i in { submit: true, reset: true } ) {
		Expr.pseudos[ i ] = createButtonPseudo( i );
	}
	
	// Easy API for creating new setFilters
	function setFilters() {}
	setFilters.prototype = Expr.filters = Expr.pseudos;
	Expr.setFilters = new setFilters();
	
	tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
		var matched, match, tokens, type,
			soFar, groups, preFilters,
			cached = tokenCache[ selector + " " ];
	
		if ( cached ) {
			return parseOnly ? 0 : cached.slice( 0 );
		}
	
		soFar = selector;
		groups = [];
		preFilters = Expr.preFilter;
	
		while ( soFar ) {
	
			// Comma and first run
			if ( !matched || (match = rcomma.exec( soFar )) ) {
				if ( match ) {
					// Don't consume trailing commas as valid
					soFar = soFar.slice( match[0].length ) || soFar;
				}
				groups.push( (tokens = []) );
			}
	
			matched = false;
	
			// Combinators
			if ( (match = rcombinators.exec( soFar )) ) {
				matched = match.shift();
				tokens.push({
					value: matched,
					// Cast descendant combinators to space
					type: match[0].replace( rtrim, " " )
				});
				soFar = soFar.slice( matched.length );
			}
	
			// Filters
			for ( type in Expr.filter ) {
				if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
					(match = preFilters[ type ]( match ))) ) {
					matched = match.shift();
					tokens.push({
						value: matched,
						type: type,
						matches: match
					});
					soFar = soFar.slice( matched.length );
				}
			}
	
			if ( !matched ) {
				break;
			}
		}
	
		// Return the length of the invalid excess
		// if we're just parsing
		// Otherwise, throw an error or return tokens
		return parseOnly ?
			soFar.length :
			soFar ?
				Sizzle.error( selector ) :
				// Cache the tokens
				tokenCache( selector, groups ).slice( 0 );
	};
	
	function toSelector( tokens ) {
		var i = 0,
			len = tokens.length,
			selector = "";
		for ( ; i < len; i++ ) {
			selector += tokens[i].value;
		}
		return selector;
	}
	
	function addCombinator( matcher, combinator, base ) {
		var dir = combinator.dir,
			checkNonElements = base && dir === "parentNode",
			doneName = done++;
	
		return combinator.first ?
			// Check against closest ancestor/preceding element
			function( elem, context, xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						return matcher( elem, context, xml );
					}
				}
			} :
	
			// Check against all ancestor/preceding elements
			function( elem, context, xml ) {
				var oldCache, uniqueCache, outerCache,
					newCache = [ dirruns, doneName ];
	
				// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
				if ( xml ) {
					while ( (elem = elem[ dir ]) ) {
						if ( elem.nodeType === 1 || checkNonElements ) {
							if ( matcher( elem, context, xml ) ) {
								return true;
							}
						}
					}
				} else {
					while ( (elem = elem[ dir ]) ) {
						if ( elem.nodeType === 1 || checkNonElements ) {
							outerCache = elem[ expando ] || (elem[ expando ] = {});
	
							// Support: IE <9 only
							// Defend against cloned attroperties (jQuery gh-1709)
							uniqueCache = outerCache[ elem.uniqueID ] || (outerCache[ elem.uniqueID ] = {});
	
							if ( (oldCache = uniqueCache[ dir ]) &&
								oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {
	
								// Assign to newCache so results back-propagate to previous elements
								return (newCache[ 2 ] = oldCache[ 2 ]);
							} else {
								// Reuse newcache so results back-propagate to previous elements
								uniqueCache[ dir ] = newCache;
	
								// A match means we're done; a fail means we have to keep checking
								if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {
									return true;
								}
							}
						}
					}
				}
			};
	}
	
	function elementMatcher( matchers ) {
		return matchers.length > 1 ?
			function( elem, context, xml ) {
				var i = matchers.length;
				while ( i-- ) {
					if ( !matchers[i]( elem, context, xml ) ) {
						return false;
					}
				}
				return true;
			} :
			matchers[0];
	}
	
	function multipleContexts( selector, contexts, results ) {
		var i = 0,
			len = contexts.length;
		for ( ; i < len; i++ ) {
			Sizzle( selector, contexts[i], results );
		}
		return results;
	}
	
	function condense( unmatched, map, filter, context, xml ) {
		var elem,
			newUnmatched = [],
			i = 0,
			len = unmatched.length,
			mapped = map != null;
	
		for ( ; i < len; i++ ) {
			if ( (elem = unmatched[i]) ) {
				if ( !filter || filter( elem, context, xml ) ) {
					newUnmatched.push( elem );
					if ( mapped ) {
						map.push( i );
					}
				}
			}
		}
	
		return newUnmatched;
	}
	
	function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
		if ( postFilter && !postFilter[ expando ] ) {
			postFilter = setMatcher( postFilter );
		}
		if ( postFinder && !postFinder[ expando ] ) {
			postFinder = setMatcher( postFinder, postSelector );
		}
		return markFunction(function( seed, results, context, xml ) {
			var temp, i, elem,
				preMap = [],
				postMap = [],
				preexisting = results.length,
	
				// Get initial elements from seed or context
				elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),
	
				// Prefilter to get matcher input, preserving a map for seed-results synchronization
				matcherIn = preFilter && ( seed || !selector ) ?
					condense( elems, preMap, preFilter, context, xml ) :
					elems,
	
				matcherOut = matcher ?
					// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
					postFinder || ( seed ? preFilter : preexisting || postFilter ) ?
	
						// ...intermediate processing is necessary
						[] :
	
						// ...otherwise use results directly
						results :
					matcherIn;
	
			// Find primary matches
			if ( matcher ) {
				matcher( matcherIn, matcherOut, context, xml );
			}
	
			// Apply postFilter
			if ( postFilter ) {
				temp = condense( matcherOut, postMap );
				postFilter( temp, [], context, xml );
	
				// Un-match failing elements by moving them back to matcherIn
				i = temp.length;
				while ( i-- ) {
					if ( (elem = temp[i]) ) {
						matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
					}
				}
			}
	
			if ( seed ) {
				if ( postFinder || preFilter ) {
					if ( postFinder ) {
						// Get the final matcherOut by condensing this intermediate into postFinder contexts
						temp = [];
						i = matcherOut.length;
						while ( i-- ) {
							if ( (elem = matcherOut[i]) ) {
								// Restore matcherIn since elem is not yet a final match
								temp.push( (matcherIn[i] = elem) );
							}
						}
						postFinder( null, (matcherOut = []), temp, xml );
					}
	
					// Move matched elements from seed to results to keep them synchronized
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) &&
							(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {
	
							seed[temp] = !(results[temp] = elem);
						}
					}
				}
	
			// Add elements to results, through postFinder if defined
			} else {
				matcherOut = condense(
					matcherOut === results ?
						matcherOut.splice( preexisting, matcherOut.length ) :
						matcherOut
				);
				if ( postFinder ) {
					postFinder( null, results, matcherOut, xml );
				} else {
					push.apply( results, matcherOut );
				}
			}
		});
	}
	
	function matcherFromTokens( tokens ) {
		var checkContext, matcher, j,
			len = tokens.length,
			leadingRelative = Expr.relative[ tokens[0].type ],
			implicitRelative = leadingRelative || Expr.relative[" "],
			i = leadingRelative ? 1 : 0,
	
			// The foundational matcher ensures that elements are reachable from top-level context(s)
			matchContext = addCombinator( function( elem ) {
				return elem === checkContext;
			}, implicitRelative, true ),
			matchAnyContext = addCombinator( function( elem ) {
				return indexOf( checkContext, elem ) > -1;
			}, implicitRelative, true ),
			matchers = [ function( elem, context, xml ) {
				var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
					(checkContext = context).nodeType ?
						matchContext( elem, context, xml ) :
						matchAnyContext( elem, context, xml ) );
				// Avoid hanging onto element (issue #299)
				checkContext = null;
				return ret;
			} ];
	
		for ( ; i < len; i++ ) {
			if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
				matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
			} else {
				matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );
	
				// Return special upon seeing a positional matcher
				if ( matcher[ expando ] ) {
					// Find the next relative operator (if any) for proper handling
					j = ++i;
					for ( ; j < len; j++ ) {
						if ( Expr.relative[ tokens[j].type ] ) {
							break;
						}
					}
					return setMatcher(
						i > 1 && elementMatcher( matchers ),
						i > 1 && toSelector(
							// If the preceding token was a descendant combinator, insert an implicit any-element `*`
							tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
						).replace( rtrim, "$1" ),
						matcher,
						i < j && matcherFromTokens( tokens.slice( i, j ) ),
						j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
						j < len && toSelector( tokens )
					);
				}
				matchers.push( matcher );
			}
		}
	
		return elementMatcher( matchers );
	}
	
	function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
		var bySet = setMatchers.length > 0,
			byElement = elementMatchers.length > 0,
			superMatcher = function( seed, context, xml, results, outermost ) {
				var elem, j, matcher,
					matchedCount = 0,
					i = "0",
					unmatched = seed && [],
					setMatched = [],
					contextBackup = outermostContext,
					// We must always have either seed elements or outermost context
					elems = seed || byElement && Expr.find["TAG"]( "*", outermost ),
					// Use integer dirruns iff this is the outermost matcher
					dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
					len = elems.length;
	
				if ( outermost ) {
					outermostContext = context === document || context || outermost;
				}
	
				// Add elements passing elementMatchers directly to results
				// Support: IE<9, Safari
				// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
				for ( ; i !== len && (elem = elems[i]) != null; i++ ) {
					if ( byElement && elem ) {
						j = 0;
						if ( !context && elem.ownerDocument !== document ) {
							setDocument( elem );
							xml = !documentIsHTML;
						}
						while ( (matcher = elementMatchers[j++]) ) {
							if ( matcher( elem, context || document, xml) ) {
								results.push( elem );
								break;
							}
						}
						if ( outermost ) {
							dirruns = dirrunsUnique;
						}
					}
	
					// Track unmatched elements for set filters
					if ( bySet ) {
						// They will have gone through all possible matchers
						if ( (elem = !matcher && elem) ) {
							matchedCount--;
						}
	
						// Lengthen the array for every element, matched or not
						if ( seed ) {
							unmatched.push( elem );
						}
					}
				}
	
				// `i` is now the count of elements visited above, and adding it to `matchedCount`
				// makes the latter nonnegative.
				matchedCount += i;
	
				// Apply set filters to unmatched elements
				// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
				// equals `i`), unless we didn't visit _any_ elements in the above loop because we have
				// no element matchers and no seed.
				// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
				// case, which will result in a "00" `matchedCount` that differs from `i` but is also
				// numerically zero.
				if ( bySet && i !== matchedCount ) {
					j = 0;
					while ( (matcher = setMatchers[j++]) ) {
						matcher( unmatched, setMatched, context, xml );
					}
	
					if ( seed ) {
						// Reintegrate element matches to eliminate the need for sorting
						if ( matchedCount > 0 ) {
							while ( i-- ) {
								if ( !(unmatched[i] || setMatched[i]) ) {
									setMatched[i] = pop.call( results );
								}
							}
						}
	
						// Discard index placeholder values to get only actual matches
						setMatched = condense( setMatched );
					}
	
					// Add matches to results
					push.apply( results, setMatched );
	
					// Seedless set matches succeeding multiple successful matchers stipulate sorting
					if ( outermost && !seed && setMatched.length > 0 &&
						( matchedCount + setMatchers.length ) > 1 ) {
	
						Sizzle.uniqueSort( results );
					}
				}
	
				// Override manipulation of globals by nested matchers
				if ( outermost ) {
					dirruns = dirrunsUnique;
					outermostContext = contextBackup;
				}
	
				return unmatched;
			};
	
		return bySet ?
			markFunction( superMatcher ) :
			superMatcher;
	}
	
	compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
		var i,
			setMatchers = [],
			elementMatchers = [],
			cached = compilerCache[ selector + " " ];
	
		if ( !cached ) {
			// Generate a function of recursive functions that can be used to check each element
			if ( !match ) {
				match = tokenize( selector );
			}
			i = match.length;
			while ( i-- ) {
				cached = matcherFromTokens( match[i] );
				if ( cached[ expando ] ) {
					setMatchers.push( cached );
				} else {
					elementMatchers.push( cached );
				}
			}
	
			// Cache the compiled function
			cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );
	
			// Save selector and tokenization
			cached.selector = selector;
		}
		return cached;
	};
	
	/**
	 * A low-level selection function that works with Sizzle's compiled
	 *  selector functions
	 * @param {String|Function} selector A selector or a pre-compiled
	 *  selector function built with Sizzle.compile
	 * @param {Element} context
	 * @param {Array} [results]
	 * @param {Array} [seed] A set of elements to match against
	 */
	select = Sizzle.select = function( selector, context, results, seed ) {
		var i, tokens, token, type, find,
			compiled = typeof selector === "function" && selector,
			match = !seed && tokenize( (selector = compiled.selector || selector) );
	
		results = results || [];
	
		// Try to minimize operations if there is only one selector in the list and no seed
		// (the latter of which guarantees us context)
		if ( match.length === 1 ) {
	
			// Reduce context if the leading compound selector is an ID
			tokens = match[0] = match[0].slice( 0 );
			if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
					support.getById && context.nodeType === 9 && documentIsHTML &&
					Expr.relative[ tokens[1].type ] ) {
	
				context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
				if ( !context ) {
					return results;
	
				// Precompiled matchers will still verify ancestry, so step up a level
				} else if ( compiled ) {
					context = context.parentNode;
				}
	
				selector = selector.slice( tokens.shift().value.length );
			}
	
			// Fetch a seed set for right-to-left matching
			i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
			while ( i-- ) {
				token = tokens[i];
	
				// Abort if we hit a combinator
				if ( Expr.relative[ (type = token.type) ] ) {
					break;
				}
				if ( (find = Expr.find[ type ]) ) {
					// Search, expanding context for leading sibling combinators
					if ( (seed = find(
						token.matches[0].replace( runescape, funescape ),
						rsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context
					)) ) {
	
						// If seed is empty or no tokens remain, we can return early
						tokens.splice( i, 1 );
						selector = seed.length && toSelector( tokens );
						if ( !selector ) {
							push.apply( results, seed );
							return results;
						}
	
						break;
					}
				}
			}
		}
	
		// Compile and execute a filtering function if one is not provided
		// Provide `match` to avoid retokenization if we modified the selector above
		( compiled || compile( selector, match ) )(
			seed,
			context,
			!documentIsHTML,
			results,
			!context || rsibling.test( selector ) && testContext( context.parentNode ) || context
		);
		return results;
	};
	
	// One-time assignments
	
	// Sort stability
	support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;
	
	// Support: Chrome 14-35+
	// Always assume duplicates if they aren't passed to the comparison function
	support.detectDuplicates = !!hasDuplicate;
	
	// Initialize against the default document
	setDocument();
	
	// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
	// Detached nodes confoundingly follow *each other*
	support.sortDetached = assert(function( div1 ) {
		// Should return 1, but returns 4 (following)
		return div1.compareDocumentPosition( document.createElement("div") ) & 1;
	});
	
	// Support: IE<8
	// Prevent attribute/property "interpolation"
	// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
	if ( !assert(function( div ) {
		div.innerHTML = "<a href='#'></a>";
		return div.firstChild.getAttribute("href") === "#" ;
	}) ) {
		addHandle( "type|href|height|width", function( elem, name, isXML ) {
			if ( !isXML ) {
				return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
			}
		});
	}
	
	// Support: IE<9
	// Use defaultValue in place of getAttribute("value")
	if ( !support.attributes || !assert(function( div ) {
		div.innerHTML = "<input/>";
		div.firstChild.setAttribute( "value", "" );
		return div.firstChild.getAttribute( "value" ) === "";
	}) ) {
		addHandle( "value", function( elem, name, isXML ) {
			if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
				return elem.defaultValue;
			}
		});
	}
	
	// Support: IE<9
	// Use getAttributeNode to fetch booleans when getAttribute lies
	if ( !assert(function( div ) {
		return div.getAttribute("disabled") == null;
	}) ) {
		addHandle( booleans, function( elem, name, isXML ) {
			var val;
			if ( !isXML ) {
				return elem[ name ] === true ? name.toLowerCase() :
						(val = elem.getAttributeNode( name )) && val.specified ?
						val.value :
					null;
			}
		});
	}
	
	return Sizzle;
	
	})( window );
	
	
	
	jQuery.find = Sizzle;
	jQuery.expr = Sizzle.selectors;
	jQuery.expr[ ":" ] = jQuery.expr.pseudos;
	jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
	jQuery.text = Sizzle.getText;
	jQuery.isXMLDoc = Sizzle.isXML;
	jQuery.contains = Sizzle.contains;
	
	
	
	var dir = function( elem, dir, until ) {
		var matched = [],
			truncate = until !== undefined;
	
		while ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {
			if ( elem.nodeType === 1 ) {
				if ( truncate && jQuery( elem ).is( until ) ) {
					break;
				}
				matched.push( elem );
			}
		}
		return matched;
	};
	
	
	var siblings = function( n, elem ) {
		var matched = [];
	
		for ( ; n; n = n.nextSibling ) {
			if ( n.nodeType === 1 && n !== elem ) {
				matched.push( n );
			}
		}
	
		return matched;
	};
	
	
	var rneedsContext = jQuery.expr.match.needsContext;
	
	var rsingleTag = ( /^<([\w-]+)\s*\/?>(?:<\/\1>|)$/ );
	
	
	
	var risSimple = /^.[^:#\[\.,]*$/;
	
	// Implement the identical functionality for filter and not
	function winnow( elements, qualifier, not ) {
		if ( jQuery.isFunction( qualifier ) ) {
			return jQuery.grep( elements, function( elem, i ) {
				/* jshint -W018 */
				return !!qualifier.call( elem, i, elem ) !== not;
			} );
	
		}
	
		if ( qualifier.nodeType ) {
			return jQuery.grep( elements, function( elem ) {
				return ( elem === qualifier ) !== not;
			} );
	
		}
	
		if ( typeof qualifier === "string" ) {
			if ( risSimple.test( qualifier ) ) {
				return jQuery.filter( qualifier, elements, not );
			}
	
			qualifier = jQuery.filter( qualifier, elements );
		}
	
		return jQuery.grep( elements, function( elem ) {
			return ( indexOf.call( qualifier, elem ) > -1 ) !== not;
		} );
	}
	
	jQuery.filter = function( expr, elems, not ) {
		var elem = elems[ 0 ];
	
		if ( not ) {
			expr = ":not(" + expr + ")";
		}
	
		return elems.length === 1 && elem.nodeType === 1 ?
			jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [] :
			jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
				return elem.nodeType === 1;
			} ) );
	};
	
	jQuery.fn.extend( {
		find: function( selector ) {
			var i,
				len = this.length,
				ret = [],
				self = this;
	
			if ( typeof selector !== "string" ) {
				return this.pushStack( jQuery( selector ).filter( function() {
					for ( i = 0; i < len; i++ ) {
						if ( jQuery.contains( self[ i ], this ) ) {
							return true;
						}
					}
				} ) );
			}
	
			for ( i = 0; i < len; i++ ) {
				jQuery.find( selector, self[ i ], ret );
			}
	
			// Needed because $( selector, context ) becomes $( context ).find( selector )
			ret = this.pushStack( len > 1 ? jQuery.unique( ret ) : ret );
			ret.selector = this.selector ? this.selector + " " + selector : selector;
			return ret;
		},
		filter: function( selector ) {
			return this.pushStack( winnow( this, selector || [], false ) );
		},
		not: function( selector ) {
			return this.pushStack( winnow( this, selector || [], true ) );
		},
		is: function( selector ) {
			return !!winnow(
				this,
	
				// If this is a positional/relative selector, check membership in the returned set
				// so $("p:first").is("p:last") won't return true for a doc with two "p".
				typeof selector === "string" && rneedsContext.test( selector ) ?
					jQuery( selector ) :
					selector || [],
				false
			).length;
		}
	} );
	
	
	// Initialize a jQuery object
	
	
	// A central reference to the root jQuery(document)
	var rootjQuery,
	
		// A simple way to check for HTML strings
		// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
		// Strict HTML recognition (#11290: must start with <)
		rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,
	
		init = jQuery.fn.init = function( selector, context, root ) {
			var match, elem;
	
			// HANDLE: $(""), $(null), $(undefined), $(false)
			if ( !selector ) {
				return this;
			}
	
			// Method init() accepts an alternate rootjQuery
			// so migrate can support jQuery.sub (gh-2101)
			root = root || rootjQuery;
	
			// Handle HTML strings
			if ( typeof selector === "string" ) {
				if ( selector[ 0 ] === "<" &&
					selector[ selector.length - 1 ] === ">" &&
					selector.length >= 3 ) {
	
					// Assume that strings that start and end with <> are HTML and skip the regex check
					match = [ null, selector, null ];
	
				} else {
					match = rquickExpr.exec( selector );
				}
	
				// Match html or make sure no context is specified for #id
				if ( match && ( match[ 1 ] || !context ) ) {
	
					// HANDLE: $(html) -> $(array)
					if ( match[ 1 ] ) {
						context = context instanceof jQuery ? context[ 0 ] : context;
	
						// Option to run scripts is true for back-compat
						// Intentionally let the error be thrown if parseHTML is not present
						jQuery.merge( this, jQuery.parseHTML(
							match[ 1 ],
							context && context.nodeType ? context.ownerDocument || context : document,
							true
						) );
	
						// HANDLE: $(html, props)
						if ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {
							for ( match in context ) {
	
								// Properties of context are called as methods if possible
								if ( jQuery.isFunction( this[ match ] ) ) {
									this[ match ]( context[ match ] );
	
								// ...and otherwise set as attributes
								} else {
									this.attr( match, context[ match ] );
								}
							}
						}
	
						return this;
	
					// HANDLE: $(#id)
					} else {
						elem = document.getElementById( match[ 2 ] );
	
						// Support: Blackberry 4.6
						// gEBID returns nodes no longer in the document (#6963)
						if ( elem && elem.parentNode ) {
	
							// Inject the element directly into the jQuery object
							this.length = 1;
							this[ 0 ] = elem;
						}
	
						this.context = document;
						this.selector = selector;
						return this;
					}
	
				// HANDLE: $(expr, $(...))
				} else if ( !context || context.jquery ) {
					return ( context || root ).find( selector );
	
				// HANDLE: $(expr, context)
				// (which is just equivalent to: $(context).find(expr)
				} else {
					return this.constructor( context ).find( selector );
				}
	
			// HANDLE: $(DOMElement)
			} else if ( selector.nodeType ) {
				this.context = this[ 0 ] = selector;
				this.length = 1;
				return this;
	
			// HANDLE: $(function)
			// Shortcut for document ready
			} else if ( jQuery.isFunction( selector ) ) {
				return root.ready !== undefined ?
					root.ready( selector ) :
	
					// Execute immediately if ready is not present
					selector( jQuery );
			}
	
			if ( selector.selector !== undefined ) {
				this.selector = selector.selector;
				this.context = selector.context;
			}
	
			return jQuery.makeArray( selector, this );
		};
	
	// Give the init function the jQuery prototype for later instantiation
	init.prototype = jQuery.fn;
	
	// Initialize central reference
	rootjQuery = jQuery( document );
	
	
	var rparentsprev = /^(?:parents|prev(?:Until|All))/,
	
		// Methods guaranteed to produce a unique set when starting from a unique set
		guaranteedUnique = {
			children: true,
			contents: true,
			next: true,
			prev: true
		};
	
	jQuery.fn.extend( {
		has: function( target ) {
			var targets = jQuery( target, this ),
				l = targets.length;
	
			return this.filter( function() {
				var i = 0;
				for ( ; i < l; i++ ) {
					if ( jQuery.contains( this, targets[ i ] ) ) {
						return true;
					}
				}
			} );
		},
	
		closest: function( selectors, context ) {
			var cur,
				i = 0,
				l = this.length,
				matched = [],
				pos = rneedsContext.test( selectors ) || typeof selectors !== "string" ?
					jQuery( selectors, context || this.context ) :
					0;
	
			for ( ; i < l; i++ ) {
				for ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {
	
					// Always skip document fragments
					if ( cur.nodeType < 11 && ( pos ?
						pos.index( cur ) > -1 :
	
						// Don't pass non-elements to Sizzle
						cur.nodeType === 1 &&
							jQuery.find.matchesSelector( cur, selectors ) ) ) {
	
						matched.push( cur );
						break;
					}
				}
			}
	
			return this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );
		},
	
		// Determine the position of an element within the set
		index: function( elem ) {
	
			// No argument, return index in parent
			if ( !elem ) {
				return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
			}
	
			// Index in selector
			if ( typeof elem === "string" ) {
				return indexOf.call( jQuery( elem ), this[ 0 ] );
			}
	
			// Locate the position of the desired element
			return indexOf.call( this,
	
				// If it receives a jQuery object, the first element is used
				elem.jquery ? elem[ 0 ] : elem
			);
		},
	
		add: function( selector, context ) {
			return this.pushStack(
				jQuery.uniqueSort(
					jQuery.merge( this.get(), jQuery( selector, context ) )
				)
			);
		},
	
		addBack: function( selector ) {
			return this.add( selector == null ?
				this.prevObject : this.prevObject.filter( selector )
			);
		}
	} );
	
	function sibling( cur, dir ) {
		while ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}
		return cur;
	}
	
	jQuery.each( {
		parent: function( elem ) {
			var parent = elem.parentNode;
			return parent && parent.nodeType !== 11 ? parent : null;
		},
		parents: function( elem ) {
			return dir( elem, "parentNode" );
		},
		parentsUntil: function( elem, i, until ) {
			return dir( elem, "parentNode", until );
		},
		next: function( elem ) {
			return sibling( elem, "nextSibling" );
		},
		prev: function( elem ) {
			return sibling( elem, "previousSibling" );
		},
		nextAll: function( elem ) {
			return dir( elem, "nextSibling" );
		},
		prevAll: function( elem ) {
			return dir( elem, "previousSibling" );
		},
		nextUntil: function( elem, i, until ) {
			return dir( elem, "nextSibling", until );
		},
		prevUntil: function( elem, i, until ) {
			return dir( elem, "previousSibling", until );
		},
		siblings: function( elem ) {
			return siblings( ( elem.parentNode || {} ).firstChild, elem );
		},
		children: function( elem ) {
			return siblings( elem.firstChild );
		},
		contents: function( elem ) {
			return elem.contentDocument || jQuery.merge( [], elem.childNodes );
		}
	}, function( name, fn ) {
		jQuery.fn[ name ] = function( until, selector ) {
			var matched = jQuery.map( this, fn, until );
	
			if ( name.slice( -5 ) !== "Until" ) {
				selector = until;
			}
	
			if ( selector && typeof selector === "string" ) {
				matched = jQuery.filter( selector, matched );
			}
	
			if ( this.length > 1 ) {
	
				// Remove duplicates
				if ( !guaranteedUnique[ name ] ) {
					jQuery.uniqueSort( matched );
				}
	
				// Reverse order for parents* and prev-derivatives
				if ( rparentsprev.test( name ) ) {
					matched.reverse();
				}
			}
	
			return this.pushStack( matched );
		};
	} );
	var rnotwhite = ( /\S+/g );
	
	
	
	// Convert String-formatted options into Object-formatted ones
	function createOptions( options ) {
		var object = {};
		jQuery.each( options.match( rnotwhite ) || [], function( _, flag ) {
			object[ flag ] = true;
		} );
		return object;
	}
	
	/*
	 * Create a callback list using the following parameters:
	 *
	 *	options: an optional list of space-separated options that will change how
	 *			the callback list behaves or a more traditional option object
	 *
	 * By default a callback list will act like an event callback list and can be
	 * "fired" multiple times.
	 *
	 * Possible options:
	 *
	 *	once:			will ensure the callback list can only be fired once (like a Deferred)
	 *
	 *	memory:			will keep track of previous values and will call any callback added
	 *					after the list has been fired right away with the latest "memorized"
	 *					values (like a Deferred)
	 *
	 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
	 *
	 *	stopOnFalse:	interrupt callings when a callback returns false
	 *
	 */
	jQuery.Callbacks = function( options ) {
	
		// Convert options from String-formatted to Object-formatted if needed
		// (we check in cache first)
		options = typeof options === "string" ?
			createOptions( options ) :
			jQuery.extend( {}, options );
	
		var // Flag to know if list is currently firing
			firing,
	
			// Last fire value for non-forgettable lists
			memory,
	
			// Flag to know if list was already fired
			fired,
	
			// Flag to prevent firing
			locked,
	
			// Actual callback list
			list = [],
	
			// Queue of execution data for repeatable lists
			queue = [],
	
			// Index of currently firing callback (modified by add/remove as needed)
			firingIndex = -1,
	
			// Fire callbacks
			fire = function() {
	
				// Enforce single-firing
				locked = options.once;
	
				// Execute callbacks for all pending executions,
				// respecting firingIndex overrides and runtime changes
				fired = firing = true;
				for ( ; queue.length; firingIndex = -1 ) {
					memory = queue.shift();
					while ( ++firingIndex < list.length ) {
	
						// Run callback and check for early termination
						if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&
							options.stopOnFalse ) {
	
							// Jump to end and forget the data so .add doesn't re-fire
							firingIndex = list.length;
							memory = false;
						}
					}
				}
	
				// Forget the data if we're done with it
				if ( !options.memory ) {
					memory = false;
				}
	
				firing = false;
	
				// Clean up if we're done firing for good
				if ( locked ) {
	
					// Keep an empty list if we have data for future add calls
					if ( memory ) {
						list = [];
	
					// Otherwise, this object is spent
					} else {
						list = "";
					}
				}
			},
	
			// Actual Callbacks object
			self = {
	
				// Add a callback or a collection of callbacks to the list
				add: function() {
					if ( list ) {
	
						// If we have memory from a past run, we should fire after adding
						if ( memory && !firing ) {
							firingIndex = list.length - 1;
							queue.push( memory );
						}
	
						( function add( args ) {
							jQuery.each( args, function( _, arg ) {
								if ( jQuery.isFunction( arg ) ) {
									if ( !options.unique || !self.has( arg ) ) {
										list.push( arg );
									}
								} else if ( arg && arg.length && jQuery.type( arg ) !== "string" ) {
	
									// Inspect recursively
									add( arg );
								}
							} );
						} )( arguments );
	
						if ( memory && !firing ) {
							fire();
						}
					}
					return this;
				},
	
				// Remove a callback from the list
				remove: function() {
					jQuery.each( arguments, function( _, arg ) {
						var index;
						while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
							list.splice( index, 1 );
	
							// Handle firing indexes
							if ( index <= firingIndex ) {
								firingIndex--;
							}
						}
					} );
					return this;
				},
	
				// Check if a given callback is in the list.
				// If no argument is given, return whether or not list has callbacks attached.
				has: function( fn ) {
					return fn ?
						jQuery.inArray( fn, list ) > -1 :
						list.length > 0;
				},
	
				// Remove all callbacks from the list
				empty: function() {
					if ( list ) {
						list = [];
					}
					return this;
				},
	
				// Disable .fire and .add
				// Abort any current/pending executions
				// Clear all callbacks and values
				disable: function() {
					locked = queue = [];
					list = memory = "";
					return this;
				},
				disabled: function() {
					return !list;
				},
	
				// Disable .fire
				// Also disable .add unless we have memory (since it would have no effect)
				// Abort any pending executions
				lock: function() {
					locked = queue = [];
					if ( !memory ) {
						list = memory = "";
					}
					return this;
				},
				locked: function() {
					return !!locked;
				},
	
				// Call all callbacks with the given context and arguments
				fireWith: function( context, args ) {
					if ( !locked ) {
						args = args || [];
						args = [ context, args.slice ? args.slice() : args ];
						queue.push( args );
						if ( !firing ) {
							fire();
						}
					}
					return this;
				},
	
				// Call all the callbacks with the given arguments
				fire: function() {
					self.fireWith( this, arguments );
					return this;
				},
	
				// To know if the callbacks have already been called at least once
				fired: function() {
					return !!fired;
				}
			};
	
		return self;
	};
	
	
	jQuery.extend( {
	
		Deferred: function( func ) {
			var tuples = [
	
					// action, add listener, listener list, final state
					[ "resolve", "done", jQuery.Callbacks( "once memory" ), "resolved" ],
					[ "reject", "fail", jQuery.Callbacks( "once memory" ), "rejected" ],
					[ "notify", "progress", jQuery.Callbacks( "memory" ) ]
				],
				state = "pending",
				promise = {
					state: function() {
						return state;
					},
					always: function() {
						deferred.done( arguments ).fail( arguments );
						return this;
					},
					then: function( /* fnDone, fnFail, fnProgress */ ) {
						var fns = arguments;
						return jQuery.Deferred( function( newDefer ) {
							jQuery.each( tuples, function( i, tuple ) {
								var fn = jQuery.isFunction( fns[ i ] ) && fns[ i ];
	
								// deferred[ done | fail | progress ] for forwarding actions to newDefer
								deferred[ tuple[ 1 ] ]( function() {
									var returned = fn && fn.apply( this, arguments );
									if ( returned && jQuery.isFunction( returned.promise ) ) {
										returned.promise()
											.progress( newDefer.notify )
											.done( newDefer.resolve )
											.fail( newDefer.reject );
									} else {
										newDefer[ tuple[ 0 ] + "With" ](
											this === promise ? newDefer.promise() : this,
											fn ? [ returned ] : arguments
										);
									}
								} );
							} );
							fns = null;
						} ).promise();
					},
	
					// Get a promise for this deferred
					// If obj is provided, the promise aspect is added to the object
					promise: function( obj ) {
						return obj != null ? jQuery.extend( obj, promise ) : promise;
					}
				},
				deferred = {};
	
			// Keep pipe for back-compat
			promise.pipe = promise.then;
	
			// Add list-specific methods
			jQuery.each( tuples, function( i, tuple ) {
				var list = tuple[ 2 ],
					stateString = tuple[ 3 ];
	
				// promise[ done | fail | progress ] = list.add
				promise[ tuple[ 1 ] ] = list.add;
	
				// Handle state
				if ( stateString ) {
					list.add( function() {
	
						// state = [ resolved | rejected ]
						state = stateString;
	
					// [ reject_list | resolve_list ].disable; progress_list.lock
					}, tuples[ i ^ 1 ][ 2 ].disable, tuples[ 2 ][ 2 ].lock );
				}
	
				// deferred[ resolve | reject | notify ]
				deferred[ tuple[ 0 ] ] = function() {
					deferred[ tuple[ 0 ] + "With" ]( this === deferred ? promise : this, arguments );
					return this;
				};
				deferred[ tuple[ 0 ] + "With" ] = list.fireWith;
			} );
	
			// Make the deferred a promise
			promise.promise( deferred );
	
			// Call given func if any
			if ( func ) {
				func.call( deferred, deferred );
			}
	
			// All done!
			return deferred;
		},
	
		// Deferred helper
		when: function( subordinate /* , ..., subordinateN */ ) {
			var i = 0,
				resolveValues = slice.call( arguments ),
				length = resolveValues.length,
	
				// the count of uncompleted subordinates
				remaining = length !== 1 ||
					( subordinate && jQuery.isFunction( subordinate.promise ) ) ? length : 0,
	
				// the master Deferred.
				// If resolveValues consist of only a single Deferred, just use that.
				deferred = remaining === 1 ? subordinate : jQuery.Deferred(),
	
				// Update function for both resolve and progress values
				updateFunc = function( i, contexts, values ) {
					return function( value ) {
						contexts[ i ] = this;
						values[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
						if ( values === progressValues ) {
							deferred.notifyWith( contexts, values );
						} else if ( !( --remaining ) ) {
							deferred.resolveWith( contexts, values );
						}
					};
				},
	
				progressValues, progressContexts, resolveContexts;
	
			// Add listeners to Deferred subordinates; treat others as resolved
			if ( length > 1 ) {
				progressValues = new Array( length );
				progressContexts = new Array( length );
				resolveContexts = new Array( length );
				for ( ; i < length; i++ ) {
					if ( resolveValues[ i ] && jQuery.isFunction( resolveValues[ i ].promise ) ) {
						resolveValues[ i ].promise()
							.progress( updateFunc( i, progressContexts, progressValues ) )
							.done( updateFunc( i, resolveContexts, resolveValues ) )
							.fail( deferred.reject );
					} else {
						--remaining;
					}
				}
			}
	
			// If we're not waiting on anything, resolve the master
			if ( !remaining ) {
				deferred.resolveWith( resolveContexts, resolveValues );
			}
	
			return deferred.promise();
		}
	} );
	
	
	// The deferred used on DOM ready
	var readyList;
	
	jQuery.fn.ready = function( fn ) {
	
		// Add the callback
		jQuery.ready.promise().done( fn );
	
		return this;
	};
	
	jQuery.extend( {
	
		// Is the DOM ready to be used? Set to true once it occurs.
		isReady: false,
	
		// A counter to track how many items to wait for before
		// the ready event fires. See #6781
		readyWait: 1,
	
		// Hold (or release) the ready event
		holdReady: function( hold ) {
			if ( hold ) {
				jQuery.readyWait++;
			} else {
				jQuery.ready( true );
			}
		},
	
		// Handle when the DOM is ready
		ready: function( wait ) {
	
			// Abort if there are pending holds or we're already ready
			if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
				return;
			}
	
			// Remember that the DOM is ready
			jQuery.isReady = true;
	
			// If a normal DOM Ready event fired, decrement, and wait if need be
			if ( wait !== true && --jQuery.readyWait > 0 ) {
				return;
			}
	
			// If there are functions bound, to execute
			readyList.resolveWith( document, [ jQuery ] );
	
			// Trigger any bound ready events
			if ( jQuery.fn.triggerHandler ) {
				jQuery( document ).triggerHandler( "ready" );
				jQuery( document ).off( "ready" );
			}
		}
	} );
	
	/**
	 * The ready event handler and self cleanup method
	 */
	function completed() {
		document.removeEventListener( "DOMContentLoaded", completed );
		window.removeEventListener( "load", completed );
		jQuery.ready();
	}
	
	jQuery.ready.promise = function( obj ) {
		if ( !readyList ) {
	
			readyList = jQuery.Deferred();
	
			// Catch cases where $(document).ready() is called
			// after the browser event has already occurred.
			// Support: IE9-10 only
			// Older IE sometimes signals "interactive" too soon
			if ( document.readyState === "complete" ||
				( document.readyState !== "loading" && !document.documentElement.doScroll ) ) {
	
				// Handle it asynchronously to allow scripts the opportunity to delay ready
				window.setTimeout( jQuery.ready );
	
			} else {
	
				// Use the handy event callback
				document.addEventListener( "DOMContentLoaded", completed );
	
				// A fallback to window.onload, that will always work
				window.addEventListener( "load", completed );
			}
		}
		return readyList.promise( obj );
	};
	
	// Kick off the DOM ready check even if the user does not
	jQuery.ready.promise();
	
	
	
	
	// Multifunctional method to get and set values of a collection
	// The value/s can optionally be executed if it's a function
	var access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
		var i = 0,
			len = elems.length,
			bulk = key == null;
	
		// Sets many values
		if ( jQuery.type( key ) === "object" ) {
			chainable = true;
			for ( i in key ) {
				access( elems, fn, i, key[ i ], true, emptyGet, raw );
			}
	
		// Sets one value
		} else if ( value !== undefined ) {
			chainable = true;
	
			if ( !jQuery.isFunction( value ) ) {
				raw = true;
			}
	
			if ( bulk ) {
	
				// Bulk operations run against the entire set
				if ( raw ) {
					fn.call( elems, value );
					fn = null;
	
				// ...except when executing function values
				} else {
					bulk = fn;
					fn = function( elem, key, value ) {
						return bulk.call( jQuery( elem ), value );
					};
				}
			}
	
			if ( fn ) {
				for ( ; i < len; i++ ) {
					fn(
						elems[ i ], key, raw ?
						value :
						value.call( elems[ i ], i, fn( elems[ i ], key ) )
					);
				}
			}
		}
	
		return chainable ?
			elems :
	
			// Gets
			bulk ?
				fn.call( elems ) :
				len ? fn( elems[ 0 ], key ) : emptyGet;
	};
	var acceptData = function( owner ) {
	
		// Accepts only:
		//  - Node
		//    - Node.ELEMENT_NODE
		//    - Node.DOCUMENT_NODE
		//  - Object
		//    - Any
		/* jshint -W018 */
		return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );
	};
	
	
	
	
	function Data() {
		this.expando = jQuery.expando + Data.uid++;
	}
	
	Data.uid = 1;
	
	Data.prototype = {
	
		register: function( owner, initial ) {
			var value = initial || {};
	
			// If it is a node unlikely to be stringify-ed or looped over
			// use plain assignment
			if ( owner.nodeType ) {
				owner[ this.expando ] = value;
	
			// Otherwise secure it in a non-enumerable, non-writable property
			// configurability must be true to allow the property to be
			// deleted with the delete operator
			} else {
				Object.defineProperty( owner, this.expando, {
					value: value,
					writable: true,
					configurable: true
				} );
			}
			return owner[ this.expando ];
		},
		cache: function( owner ) {
	
			// We can accept data for non-element nodes in modern browsers,
			// but we should not, see #8335.
			// Always return an empty object.
			if ( !acceptData( owner ) ) {
				return {};
			}
	
			// Check if the owner object already has a cache
			var value = owner[ this.expando ];
	
			// If not, create one
			if ( !value ) {
				value = {};
	
				// We can accept data for non-element nodes in modern browsers,
				// but we should not, see #8335.
				// Always return an empty object.
				if ( acceptData( owner ) ) {
	
					// If it is a node unlikely to be stringify-ed or looped over
					// use plain assignment
					if ( owner.nodeType ) {
						owner[ this.expando ] = value;
	
					// Otherwise secure it in a non-enumerable property
					// configurable must be true to allow the property to be
					// deleted when data is removed
					} else {
						Object.defineProperty( owner, this.expando, {
							value: value,
							configurable: true
						} );
					}
				}
			}
	
			return value;
		},
		set: function( owner, data, value ) {
			var prop,
				cache = this.cache( owner );
	
			// Handle: [ owner, key, value ] args
			if ( typeof data === "string" ) {
				cache[ data ] = value;
	
			// Handle: [ owner, { properties } ] args
			} else {
	
				// Copy the properties one-by-one to the cache object
				for ( prop in data ) {
					cache[ prop ] = data[ prop ];
				}
			}
			return cache;
		},
		get: function( owner, key ) {
			return key === undefined ?
				this.cache( owner ) :
				owner[ this.expando ] && owner[ this.expando ][ key ];
		},
		access: function( owner, key, value ) {
			var stored;
	
			// In cases where either:
			//
			//   1. No key was specified
			//   2. A string key was specified, but no value provided
			//
			// Take the "read" path and allow the get method to determine
			// which value to return, respectively either:
			//
			//   1. The entire cache object
			//   2. The data stored at the key
			//
			if ( key === undefined ||
					( ( key && typeof key === "string" ) && value === undefined ) ) {
	
				stored = this.get( owner, key );
	
				return stored !== undefined ?
					stored : this.get( owner, jQuery.camelCase( key ) );
			}
	
			// When the key is not a string, or both a key and value
			// are specified, set or extend (existing objects) with either:
			//
			//   1. An object of properties
			//   2. A key and value
			//
			this.set( owner, key, value );
	
			// Since the "set" path can have two possible entry points
			// return the expected data based on which path was taken[*]
			return value !== undefined ? value : key;
		},
		remove: function( owner, key ) {
			var i, name, camel,
				cache = owner[ this.expando ];
	
			if ( cache === undefined ) {
				return;
			}
	
			if ( key === undefined ) {
				this.register( owner );
	
			} else {
	
				// Support array or space separated string of keys
				if ( jQuery.isArray( key ) ) {
	
					// If "name" is an array of keys...
					// When data is initially created, via ("key", "val") signature,
					// keys will be converted to camelCase.
					// Since there is no way to tell _how_ a key was added, remove
					// both plain key and camelCase key. #12786
					// This will only penalize the array argument path.
					name = key.concat( key.map( jQuery.camelCase ) );
				} else {
					camel = jQuery.camelCase( key );
	
					// Try the string as a key before any manipulation
					if ( key in cache ) {
						name = [ key, camel ];
					} else {
	
						// If a key with the spaces exists, use it.
						// Otherwise, create an array by matching non-whitespace
						name = camel;
						name = name in cache ?
							[ name ] : ( name.match( rnotwhite ) || [] );
					}
				}
	
				i = name.length;
	
				while ( i-- ) {
					delete cache[ name[ i ] ];
				}
			}
	
			// Remove the expando if there's no more data
			if ( key === undefined || jQuery.isEmptyObject( cache ) ) {
	
				// Support: Chrome <= 35-45+
				// Webkit & Blink performance suffers when deleting properties
				// from DOM nodes, so set to undefined instead
				// https://code.google.com/p/chromium/issues/detail?id=378607
				if ( owner.nodeType ) {
					owner[ this.expando ] = undefined;
				} else {
					delete owner[ this.expando ];
				}
			}
		},
		hasData: function( owner ) {
			var cache = owner[ this.expando ];
			return cache !== undefined && !jQuery.isEmptyObject( cache );
		}
	};
	var dataPriv = new Data();
	
	var dataUser = new Data();
	
	
	
	//	Implementation Summary
	//
	//	1. Enforce API surface and semantic compatibility with 1.9.x branch
	//	2. Improve the module's maintainability by reducing the storage
	//		paths to a single mechanism.
	//	3. Use the same single mechanism to support "private" and "user" data.
	//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
	//	5. Avoid exposing implementation details on user objects (eg. expando properties)
	//	6. Provide a clear path for implementation upgrade to WeakMap in 2014
	
	var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
		rmultiDash = /[A-Z]/g;
	
	function dataAttr( elem, key, data ) {
		var name;
	
		// If nothing was found internally, try to fetch any
		// data from the HTML5 data-* attribute
		if ( data === undefined && elem.nodeType === 1 ) {
			name = "data-" + key.replace( rmultiDash, "-$&" ).toLowerCase();
			data = elem.getAttribute( name );
	
			if ( typeof data === "string" ) {
				try {
					data = data === "true" ? true :
						data === "false" ? false :
						data === "null" ? null :
	
						// Only convert to a number if it doesn't change the string
						+data + "" === data ? +data :
						rbrace.test( data ) ? jQuery.parseJSON( data ) :
						data;
				} catch ( e ) {}
	
				// Make sure we set the data so it isn't changed later
				dataUser.set( elem, key, data );
			} else {
				data = undefined;
			}
		}
		return data;
	}
	
	jQuery.extend( {
		hasData: function( elem ) {
			return dataUser.hasData( elem ) || dataPriv.hasData( elem );
		},
	
		data: function( elem, name, data ) {
			return dataUser.access( elem, name, data );
		},
	
		removeData: function( elem, name ) {
			dataUser.remove( elem, name );
		},
	
		// TODO: Now that all calls to _data and _removeData have been replaced
		// with direct calls to dataPriv methods, these can be deprecated.
		_data: function( elem, name, data ) {
			return dataPriv.access( elem, name, data );
		},
	
		_removeData: function( elem, name ) {
			dataPriv.remove( elem, name );
		}
	} );
	
	jQuery.fn.extend( {
		data: function( key, value ) {
			var i, name, data,
				elem = this[ 0 ],
				attrs = elem && elem.attributes;
	
			// Gets all values
			if ( key === undefined ) {
				if ( this.length ) {
					data = dataUser.get( elem );
	
					if ( elem.nodeType === 1 && !dataPriv.get( elem, "hasDataAttrs" ) ) {
						i = attrs.length;
						while ( i-- ) {
	
							// Support: IE11+
							// The attrs elements can be null (#14894)
							if ( attrs[ i ] ) {
								name = attrs[ i ].name;
								if ( name.indexOf( "data-" ) === 0 ) {
									name = jQuery.camelCase( name.slice( 5 ) );
									dataAttr( elem, name, data[ name ] );
								}
							}
						}
						dataPriv.set( elem, "hasDataAttrs", true );
					}
				}
	
				return data;
			}
	
			// Sets multiple values
			if ( typeof key === "object" ) {
				return this.each( function() {
					dataUser.set( this, key );
				} );
			}
	
			return access( this, function( value ) {
				var data, camelKey;
	
				// The calling jQuery object (element matches) is not empty
				// (and therefore has an element appears at this[ 0 ]) and the
				// `value` parameter was not undefined. An empty jQuery object
				// will result in `undefined` for elem = this[ 0 ] which will
				// throw an exception if an attempt to read a data cache is made.
				if ( elem && value === undefined ) {
	
					// Attempt to get data from the cache
					// with the key as-is
					data = dataUser.get( elem, key ) ||
	
						// Try to find dashed key if it exists (gh-2779)
						// This is for 2.2.x only
						dataUser.get( elem, key.replace( rmultiDash, "-$&" ).toLowerCase() );
	
					if ( data !== undefined ) {
						return data;
					}
	
					camelKey = jQuery.camelCase( key );
	
					// Attempt to get data from the cache
					// with the key camelized
					data = dataUser.get( elem, camelKey );
					if ( data !== undefined ) {
						return data;
					}
	
					// Attempt to "discover" the data in
					// HTML5 custom data-* attrs
					data = dataAttr( elem, camelKey, undefined );
					if ( data !== undefined ) {
						return data;
					}
	
					// We tried really hard, but the data doesn't exist.
					return;
				}
	
				// Set the data...
				camelKey = jQuery.camelCase( key );
				this.each( function() {
	
					// First, attempt to store a copy or reference of any
					// data that might've been store with a camelCased key.
					var data = dataUser.get( this, camelKey );
	
					// For HTML5 data-* attribute interop, we have to
					// store property names with dashes in a camelCase form.
					// This might not apply to all properties...*
					dataUser.set( this, camelKey, value );
	
					// *... In the case of properties that might _actually_
					// have dashes, we need to also store a copy of that
					// unchanged property.
					if ( key.indexOf( "-" ) > -1 && data !== undefined ) {
						dataUser.set( this, key, value );
					}
				} );
			}, null, value, arguments.length > 1, null, true );
		},
	
		removeData: function( key ) {
			return this.each( function() {
				dataUser.remove( this, key );
			} );
		}
	} );
	
	
	jQuery.extend( {
		queue: function( elem, type, data ) {
			var queue;
	
			if ( elem ) {
				type = ( type || "fx" ) + "queue";
				queue = dataPriv.get( elem, type );
	
				// Speed up dequeue by getting out quickly if this is just a lookup
				if ( data ) {
					if ( !queue || jQuery.isArray( data ) ) {
						queue = dataPriv.access( elem, type, jQuery.makeArray( data ) );
					} else {
						queue.push( data );
					}
				}
				return queue || [];
			}
		},
	
		dequeue: function( elem, type ) {
			type = type || "fx";
	
			var queue = jQuery.queue( elem, type ),
				startLength = queue.length,
				fn = queue.shift(),
				hooks = jQuery._queueHooks( elem, type ),
				next = function() {
					jQuery.dequeue( elem, type );
				};
	
			// If the fx queue is dequeued, always remove the progress sentinel
			if ( fn === "inprogress" ) {
				fn = queue.shift();
				startLength--;
			}
	
			if ( fn ) {
	
				// Add a progress sentinel to prevent the fx queue from being
				// automatically dequeued
				if ( type === "fx" ) {
					queue.unshift( "inprogress" );
				}
	
				// Clear up the last queue stop function
				delete hooks.stop;
				fn.call( elem, next, hooks );
			}
	
			if ( !startLength && hooks ) {
				hooks.empty.fire();
			}
		},
	
		// Not public - generate a queueHooks object, or return the current one
		_queueHooks: function( elem, type ) {
			var key = type + "queueHooks";
			return dataPriv.get( elem, key ) || dataPriv.access( elem, key, {
				empty: jQuery.Callbacks( "once memory" ).add( function() {
					dataPriv.remove( elem, [ type + "queue", key ] );
				} )
			} );
		}
	} );
	
	jQuery.fn.extend( {
		queue: function( type, data ) {
			var setter = 2;
	
			if ( typeof type !== "string" ) {
				data = type;
				type = "fx";
				setter--;
			}
	
			if ( arguments.length < setter ) {
				return jQuery.queue( this[ 0 ], type );
			}
	
			return data === undefined ?
				this :
				this.each( function() {
					var queue = jQuery.queue( this, type, data );
	
					// Ensure a hooks for this queue
					jQuery._queueHooks( this, type );
	
					if ( type === "fx" && queue[ 0 ] !== "inprogress" ) {
						jQuery.dequeue( this, type );
					}
				} );
		},
		dequeue: function( type ) {
			return this.each( function() {
				jQuery.dequeue( this, type );
			} );
		},
		clearQueue: function( type ) {
			return this.queue( type || "fx", [] );
		},
	
		// Get a promise resolved when queues of a certain type
		// are emptied (fx is the type by default)
		promise: function( type, obj ) {
			var tmp,
				count = 1,
				defer = jQuery.Deferred(),
				elements = this,
				i = this.length,
				resolve = function() {
					if ( !( --count ) ) {
						defer.resolveWith( elements, [ elements ] );
					}
				};
	
			if ( typeof type !== "string" ) {
				obj = type;
				type = undefined;
			}
			type = type || "fx";
	
			while ( i-- ) {
				tmp = dataPriv.get( elements[ i ], type + "queueHooks" );
				if ( tmp && tmp.empty ) {
					count++;
					tmp.empty.add( resolve );
				}
			}
			resolve();
			return defer.promise( obj );
		}
	} );
	var pnum = ( /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/ ).source;
	
	var rcssNum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" );
	
	
	var cssExpand = [ "Top", "Right", "Bottom", "Left" ];
	
	var isHidden = function( elem, el ) {
	
			// isHidden might be called from jQuery#filter function;
			// in that case, element will be second argument
			elem = el || elem;
			return jQuery.css( elem, "display" ) === "none" ||
				!jQuery.contains( elem.ownerDocument, elem );
		};
	
	
	
	function adjustCSS( elem, prop, valueParts, tween ) {
		var adjusted,
			scale = 1,
			maxIterations = 20,
			currentValue = tween ?
				function() { return tween.cur(); } :
				function() { return jQuery.css( elem, prop, "" ); },
			initial = currentValue(),
			unit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),
	
			// Starting value computation is required for potential unit mismatches
			initialInUnit = ( jQuery.cssNumber[ prop ] || unit !== "px" && +initial ) &&
				rcssNum.exec( jQuery.css( elem, prop ) );
	
		if ( initialInUnit && initialInUnit[ 3 ] !== unit ) {
	
			// Trust units reported by jQuery.css
			unit = unit || initialInUnit[ 3 ];
	
			// Make sure we update the tween properties later on
			valueParts = valueParts || [];
	
			// Iteratively approximate from a nonzero starting point
			initialInUnit = +initial || 1;
	
			do {
	
				// If previous iteration zeroed out, double until we get *something*.
				// Use string for doubling so we don't accidentally see scale as unchanged below
				scale = scale || ".5";
	
				// Adjust and apply
				initialInUnit = initialInUnit / scale;
				jQuery.style( elem, prop, initialInUnit + unit );
	
			// Update scale, tolerating zero or NaN from tween.cur()
			// Break the loop if scale is unchanged or perfect, or if we've just had enough.
			} while (
				scale !== ( scale = currentValue() / initial ) && scale !== 1 && --maxIterations
			);
		}
	
		if ( valueParts ) {
			initialInUnit = +initialInUnit || +initial || 0;
	
			// Apply relative offset (+=/-=) if specified
			adjusted = valueParts[ 1 ] ?
				initialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :
				+valueParts[ 2 ];
			if ( tween ) {
				tween.unit = unit;
				tween.start = initialInUnit;
				tween.end = adjusted;
			}
		}
		return adjusted;
	}
	var rcheckableType = ( /^(?:checkbox|radio)$/i );
	
	var rtagName = ( /<([\w:-]+)/ );
	
	var rscriptType = ( /^$|\/(?:java|ecma)script/i );
	
	
	
	// We have to close these tags to support XHTML (#13200)
	var wrapMap = {
	
		// Support: IE9
		option: [ 1, "<select multiple='multiple'>", "</select>" ],
	
		// XHTML parsers do not magically insert elements in the
		// same way that tag soup parsers do. So we cannot shorten
		// this by omitting <tbody> or other required elements.
		thead: [ 1, "<table>", "</table>" ],
		col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
		tr: [ 2, "<table><tbody>", "</tbody></table>" ],
		td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],
	
		_default: [ 0, "", "" ]
	};
	
	// Support: IE9
	wrapMap.optgroup = wrapMap.option;
	
	wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
	wrapMap.th = wrapMap.td;
	
	
	function getAll( context, tag ) {
	
		// Support: IE9-11+
		// Use typeof to avoid zero-argument method invocation on host objects (#15151)
		var ret = typeof context.getElementsByTagName !== "undefined" ?
				context.getElementsByTagName( tag || "*" ) :
				typeof context.querySelectorAll !== "undefined" ?
					context.querySelectorAll( tag || "*" ) :
				[];
	
		return tag === undefined || tag && jQuery.nodeName( context, tag ) ?
			jQuery.merge( [ context ], ret ) :
			ret;
	}
	
	
	// Mark scripts as having already been evaluated
	function setGlobalEval( elems, refElements ) {
		var i = 0,
			l = elems.length;
	
		for ( ; i < l; i++ ) {
			dataPriv.set(
				elems[ i ],
				"globalEval",
				!refElements || dataPriv.get( refElements[ i ], "globalEval" )
			);
		}
	}
	
	
	var rhtml = /<|&#?\w+;/;
	
	function buildFragment( elems, context, scripts, selection, ignored ) {
		var elem, tmp, tag, wrap, contains, j,
			fragment = context.createDocumentFragment(),
			nodes = [],
			i = 0,
			l = elems.length;
	
		for ( ; i < l; i++ ) {
			elem = elems[ i ];
	
			if ( elem || elem === 0 ) {
	
				// Add nodes directly
				if ( jQuery.type( elem ) === "object" ) {
	
					// Support: Android<4.1, PhantomJS<2
					// push.apply(_, arraylike) throws on ancient WebKit
					jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );
	
				// Convert non-html into a text node
				} else if ( !rhtml.test( elem ) ) {
					nodes.push( context.createTextNode( elem ) );
	
				// Convert html into DOM nodes
				} else {
					tmp = tmp || fragment.appendChild( context.createElement( "div" ) );
	
					// Deserialize a standard representation
					tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
					wrap = wrapMap[ tag ] || wrapMap._default;
					tmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];
	
					// Descend through wrappers to the right content
					j = wrap[ 0 ];
					while ( j-- ) {
						tmp = tmp.lastChild;
					}
	
					// Support: Android<4.1, PhantomJS<2
					// push.apply(_, arraylike) throws on ancient WebKit
					jQuery.merge( nodes, tmp.childNodes );
	
					// Remember the top-level container
					tmp = fragment.firstChild;
	
					// Ensure the created nodes are orphaned (#12392)
					tmp.textContent = "";
				}
			}
		}
	
		// Remove wrapper from fragment
		fragment.textContent = "";
	
		i = 0;
		while ( ( elem = nodes[ i++ ] ) ) {
	
			// Skip elements already in the context collection (trac-4087)
			if ( selection && jQuery.inArray( elem, selection ) > -1 ) {
				if ( ignored ) {
					ignored.push( elem );
				}
				continue;
			}
	
			contains = jQuery.contains( elem.ownerDocument, elem );
	
			// Append to fragment
			tmp = getAll( fragment.appendChild( elem ), "script" );
	
			// Preserve script evaluation history
			if ( contains ) {
				setGlobalEval( tmp );
			}
	
			// Capture executables
			if ( scripts ) {
				j = 0;
				while ( ( elem = tmp[ j++ ] ) ) {
					if ( rscriptType.test( elem.type || "" ) ) {
						scripts.push( elem );
					}
				}
			}
		}
	
		return fragment;
	}
	
	
	( function() {
		var fragment = document.createDocumentFragment(),
			div = fragment.appendChild( document.createElement( "div" ) ),
			input = document.createElement( "input" );
	
		// Support: Android 4.0-4.3, Safari<=5.1
		// Check state lost if the name is set (#11217)
		// Support: Windows Web Apps (WWA)
		// `name` and `type` must use .setAttribute for WWA (#14901)
		input.setAttribute( "type", "radio" );
		input.setAttribute( "checked", "checked" );
		input.setAttribute( "name", "t" );
	
		div.appendChild( input );
	
		// Support: Safari<=5.1, Android<4.2
		// Older WebKit doesn't clone checked state correctly in fragments
		support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;
	
		// Support: IE<=11+
		// Make sure textarea (and checkbox) defaultValue is properly cloned
		div.innerHTML = "<textarea>x</textarea>";
		support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;
	} )();
	
	
	var
		rkeyEvent = /^key/,
		rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
		rtypenamespace = /^([^.]*)(?:\.(.+)|)/;
	
	function returnTrue() {
		return true;
	}
	
	function returnFalse() {
		return false;
	}
	
	// Support: IE9
	// See #13393 for more info
	function safeActiveElement() {
		try {
			return document.activeElement;
		} catch ( err ) { }
	}
	
	function on( elem, types, selector, data, fn, one ) {
		var origFn, type;
	
		// Types can be a map of types/handlers
		if ( typeof types === "object" ) {
	
			// ( types-Object, selector, data )
			if ( typeof selector !== "string" ) {
	
				// ( types-Object, data )
				data = data || selector;
				selector = undefined;
			}
			for ( type in types ) {
				on( elem, type, selector, data, types[ type ], one );
			}
			return elem;
		}
	
		if ( data == null && fn == null ) {
	
			// ( types, fn )
			fn = selector;
			data = selector = undefined;
		} else if ( fn == null ) {
			if ( typeof selector === "string" ) {
	
				// ( types, selector, fn )
				fn = data;
				data = undefined;
			} else {
	
				// ( types, data, fn )
				fn = data;
				data = selector;
				selector = undefined;
			}
		}
		if ( fn === false ) {
			fn = returnFalse;
		} else if ( !fn ) {
			return elem;
		}
	
		if ( one === 1 ) {
			origFn = fn;
			fn = function( event ) {
	
				// Can use an empty set, since event contains the info
				jQuery().off( event );
				return origFn.apply( this, arguments );
			};
	
			// Use same guid so caller can remove using origFn
			fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
		}
		return elem.each( function() {
			jQuery.event.add( this, types, fn, data, selector );
		} );
	}
	
	/*
	 * Helper functions for managing events -- not part of the public interface.
	 * Props to Dean Edwards' addEvent library for many of the ideas.
	 */
	jQuery.event = {
	
		global: {},
	
		add: function( elem, types, handler, data, selector ) {
	
			var handleObjIn, eventHandle, tmp,
				events, t, handleObj,
				special, handlers, type, namespaces, origType,
				elemData = dataPriv.get( elem );
	
			// Don't attach events to noData or text/comment nodes (but allow plain objects)
			if ( !elemData ) {
				return;
			}
	
			// Caller can pass in an object of custom data in lieu of the handler
			if ( handler.handler ) {
				handleObjIn = handler;
				handler = handleObjIn.handler;
				selector = handleObjIn.selector;
			}
	
			// Make sure that the handler has a unique ID, used to find/remove it later
			if ( !handler.guid ) {
				handler.guid = jQuery.guid++;
			}
	
			// Init the element's event structure and main handler, if this is the first
			if ( !( events = elemData.events ) ) {
				events = elemData.events = {};
			}
			if ( !( eventHandle = elemData.handle ) ) {
				eventHandle = elemData.handle = function( e ) {
	
					// Discard the second event of a jQuery.event.trigger() and
					// when an event is called after a page has unloaded
					return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ?
						jQuery.event.dispatch.apply( elem, arguments ) : undefined;
				};
			}
	
			// Handle multiple events separated by a space
			types = ( types || "" ).match( rnotwhite ) || [ "" ];
			t = types.length;
			while ( t-- ) {
				tmp = rtypenamespace.exec( types[ t ] ) || [];
				type = origType = tmp[ 1 ];
				namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();
	
				// There *must* be a type, no attaching namespace-only handlers
				if ( !type ) {
					continue;
				}
	
				// If event changes its type, use the special event handlers for the changed type
				special = jQuery.event.special[ type ] || {};
	
				// If selector defined, determine special event api type, otherwise given type
				type = ( selector ? special.delegateType : special.bindType ) || type;
	
				// Update special based on newly reset type
				special = jQuery.event.special[ type ] || {};
	
				// handleObj is passed to all event handlers
				handleObj = jQuery.extend( {
					type: type,
					origType: origType,
					data: data,
					handler: handler,
					guid: handler.guid,
					selector: selector,
					needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
					namespace: namespaces.join( "." )
				}, handleObjIn );
	
				// Init the event handler queue if we're the first
				if ( !( handlers = events[ type ] ) ) {
					handlers = events[ type ] = [];
					handlers.delegateCount = 0;
	
					// Only use addEventListener if the special events handler returns false
					if ( !special.setup ||
						special.setup.call( elem, data, namespaces, eventHandle ) === false ) {
	
						if ( elem.addEventListener ) {
							elem.addEventListener( type, eventHandle );
						}
					}
				}
	
				if ( special.add ) {
					special.add.call( elem, handleObj );
	
					if ( !handleObj.handler.guid ) {
						handleObj.handler.guid = handler.guid;
					}
				}
	
				// Add to the element's handler list, delegates in front
				if ( selector ) {
					handlers.splice( handlers.delegateCount++, 0, handleObj );
				} else {
					handlers.push( handleObj );
				}
	
				// Keep track of which events have ever been used, for event optimization
				jQuery.event.global[ type ] = true;
			}
	
		},
	
		// Detach an event or set of events from an element
		remove: function( elem, types, handler, selector, mappedTypes ) {
	
			var j, origCount, tmp,
				events, t, handleObj,
				special, handlers, type, namespaces, origType,
				elemData = dataPriv.hasData( elem ) && dataPriv.get( elem );
	
			if ( !elemData || !( events = elemData.events ) ) {
				return;
			}
	
			// Once for each type.namespace in types; type may be omitted
			types = ( types || "" ).match( rnotwhite ) || [ "" ];
			t = types.length;
			while ( t-- ) {
				tmp = rtypenamespace.exec( types[ t ] ) || [];
				type = origType = tmp[ 1 ];
				namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();
	
				// Unbind all events (on this namespace, if provided) for the element
				if ( !type ) {
					for ( type in events ) {
						jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
					}
					continue;
				}
	
				special = jQuery.event.special[ type ] || {};
				type = ( selector ? special.delegateType : special.bindType ) || type;
				handlers = events[ type ] || [];
				tmp = tmp[ 2 ] &&
					new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" );
	
				// Remove matching events
				origCount = j = handlers.length;
				while ( j-- ) {
					handleObj = handlers[ j ];
	
					if ( ( mappedTypes || origType === handleObj.origType ) &&
						( !handler || handler.guid === handleObj.guid ) &&
						( !tmp || tmp.test( handleObj.namespace ) ) &&
						( !selector || selector === handleObj.selector ||
							selector === "**" && handleObj.selector ) ) {
						handlers.splice( j, 1 );
	
						if ( handleObj.selector ) {
							handlers.delegateCount--;
						}
						if ( special.remove ) {
							special.remove.call( elem, handleObj );
						}
					}
				}
	
				// Remove generic event handler if we removed something and no more handlers exist
				// (avoids potential for endless recursion during removal of special event handlers)
				if ( origCount && !handlers.length ) {
					if ( !special.teardown ||
						special.teardown.call( elem, namespaces, elemData.handle ) === false ) {
	
						jQuery.removeEvent( elem, type, elemData.handle );
					}
	
					delete events[ type ];
				}
			}
	
			// Remove data and the expando if it's no longer used
			if ( jQuery.isEmptyObject( events ) ) {
				dataPriv.remove( elem, "handle events" );
			}
		},
	
		dispatch: function( event ) {
	
			// Make a writable jQuery.Event from the native event object
			event = jQuery.event.fix( event );
	
			var i, j, ret, matched, handleObj,
				handlerQueue = [],
				args = slice.call( arguments ),
				handlers = ( dataPriv.get( this, "events" ) || {} )[ event.type ] || [],
				special = jQuery.event.special[ event.type ] || {};
	
			// Use the fix-ed jQuery.Event rather than the (read-only) native event
			args[ 0 ] = event;
			event.delegateTarget = this;
	
			// Call the preDispatch hook for the mapped type, and let it bail if desired
			if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
				return;
			}
	
			// Determine handlers
			handlerQueue = jQuery.event.handlers.call( this, event, handlers );
	
			// Run delegates first; they may want to stop propagation beneath us
			i = 0;
			while ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {
				event.currentTarget = matched.elem;
	
				j = 0;
				while ( ( handleObj = matched.handlers[ j++ ] ) &&
					!event.isImmediatePropagationStopped() ) {
	
					// Triggered event must either 1) have no namespace, or 2) have namespace(s)
					// a subset or equal to those in the bound event (both can have no namespace).
					if ( !event.rnamespace || event.rnamespace.test( handleObj.namespace ) ) {
	
						event.handleObj = handleObj;
						event.data = handleObj.data;
	
						ret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||
							handleObj.handler ).apply( matched.elem, args );
	
						if ( ret !== undefined ) {
							if ( ( event.result = ret ) === false ) {
								event.preventDefault();
								event.stopPropagation();
							}
						}
					}
				}
			}
	
			// Call the postDispatch hook for the mapped type
			if ( special.postDispatch ) {
				special.postDispatch.call( this, event );
			}
	
			return event.result;
		},
	
		handlers: function( event, handlers ) {
			var i, matches, sel, handleObj,
				handlerQueue = [],
				delegateCount = handlers.delegateCount,
				cur = event.target;
	
			// Support (at least): Chrome, IE9
			// Find delegate handlers
			// Black-hole SVG <use> instance trees (#13180)
			//
			// Support: Firefox<=42+
			// Avoid non-left-click in FF but don't block IE radio events (#3861, gh-2343)
			if ( delegateCount && cur.nodeType &&
				( event.type !== "click" || isNaN( event.button ) || event.button < 1 ) ) {
	
				for ( ; cur !== this; cur = cur.parentNode || this ) {
	
					// Don't check non-elements (#13208)
					// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
					if ( cur.nodeType === 1 && ( cur.disabled !== true || event.type !== "click" ) ) {
						matches = [];
						for ( i = 0; i < delegateCount; i++ ) {
							handleObj = handlers[ i ];
	
							// Don't conflict with Object.prototype properties (#13203)
							sel = handleObj.selector + " ";
	
							if ( matches[ sel ] === undefined ) {
								matches[ sel ] = handleObj.needsContext ?
									jQuery( sel, this ).index( cur ) > -1 :
									jQuery.find( sel, this, null, [ cur ] ).length;
							}
							if ( matches[ sel ] ) {
								matches.push( handleObj );
							}
						}
						if ( matches.length ) {
							handlerQueue.push( { elem: cur, handlers: matches } );
						}
					}
				}
			}
	
			// Add the remaining (directly-bound) handlers
			if ( delegateCount < handlers.length ) {
				handlerQueue.push( { elem: this, handlers: handlers.slice( delegateCount ) } );
			}
	
			return handlerQueue;
		},
	
		// Includes some event props shared by KeyEvent and MouseEvent
		props: ( "altKey bubbles cancelable ctrlKey currentTarget detail eventPhase " +
			"metaKey relatedTarget shiftKey target timeStamp view which" ).split( " " ),
	
		fixHooks: {},
	
		keyHooks: {
			props: "char charCode key keyCode".split( " " ),
			filter: function( event, original ) {
	
				// Add which for key events
				if ( event.which == null ) {
					event.which = original.charCode != null ? original.charCode : original.keyCode;
				}
	
				return event;
			}
		},
	
		mouseHooks: {
			props: ( "button buttons clientX clientY offsetX offsetY pageX pageY " +
				"screenX screenY toElement" ).split( " " ),
			filter: function( event, original ) {
				var eventDoc, doc, body,
					button = original.button;
	
				// Calculate pageX/Y if missing and clientX/Y available
				if ( event.pageX == null && original.clientX != null ) {
					eventDoc = event.target.ownerDocument || document;
					doc = eventDoc.documentElement;
					body = eventDoc.body;
	
					event.pageX = original.clientX +
						( doc && doc.scrollLeft || body && body.scrollLeft || 0 ) -
						( doc && doc.clientLeft || body && body.clientLeft || 0 );
					event.pageY = original.clientY +
						( doc && doc.scrollTop  || body && body.scrollTop  || 0 ) -
						( doc && doc.clientTop  || body && body.clientTop  || 0 );
				}
	
				// Add which for click: 1 === left; 2 === middle; 3 === right
				// Note: button is not normalized, so don't use it
				if ( !event.which && button !== undefined ) {
					event.which = ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );
				}
	
				return event;
			}
		},
	
		fix: function( event ) {
			if ( event[ jQuery.expando ] ) {
				return event;
			}
	
			// Create a writable copy of the event object and normalize some properties
			var i, prop, copy,
				type = event.type,
				originalEvent = event,
				fixHook = this.fixHooks[ type ];
	
			if ( !fixHook ) {
				this.fixHooks[ type ] = fixHook =
					rmouseEvent.test( type ) ? this.mouseHooks :
					rkeyEvent.test( type ) ? this.keyHooks :
					{};
			}
			copy = fixHook.props ? this.props.concat( fixHook.props ) : this.props;
	
			event = new jQuery.Event( originalEvent );
	
			i = copy.length;
			while ( i-- ) {
				prop = copy[ i ];
				event[ prop ] = originalEvent[ prop ];
			}
	
			// Support: Cordova 2.5 (WebKit) (#13255)
			// All events should have a target; Cordova deviceready doesn't
			if ( !event.target ) {
				event.target = document;
			}
	
			// Support: Safari 6.0+, Chrome<28
			// Target should not be a text node (#504, #13143)
			if ( event.target.nodeType === 3 ) {
				event.target = event.target.parentNode;
			}
	
			return fixHook.filter ? fixHook.filter( event, originalEvent ) : event;
		},
	
		special: {
			load: {
	
				// Prevent triggered image.load events from bubbling to window.load
				noBubble: true
			},
			focus: {
	
				// Fire native event if possible so blur/focus sequence is correct
				trigger: function() {
					if ( this !== safeActiveElement() && this.focus ) {
						this.focus();
						return false;
					}
				},
				delegateType: "focusin"
			},
			blur: {
				trigger: function() {
					if ( this === safeActiveElement() && this.blur ) {
						this.blur();
						return false;
					}
				},
				delegateType: "focusout"
			},
			click: {
	
				// For checkbox, fire native event so checked state will be right
				trigger: function() {
					if ( this.type === "checkbox" && this.click && jQuery.nodeName( this, "input" ) ) {
						this.click();
						return false;
					}
				},
	
				// For cross-browser consistency, don't fire native .click() on links
				_default: function( event ) {
					return jQuery.nodeName( event.target, "a" );
				}
			},
	
			beforeunload: {
				postDispatch: function( event ) {
	
					// Support: Firefox 20+
					// Firefox doesn't alert if the returnValue field is not set.
					if ( event.result !== undefined && event.originalEvent ) {
						event.originalEvent.returnValue = event.result;
					}
				}
			}
		}
	};
	
	jQuery.removeEvent = function( elem, type, handle ) {
	
		// This "if" is needed for plain objects
		if ( elem.removeEventListener ) {
			elem.removeEventListener( type, handle );
		}
	};
	
	jQuery.Event = function( src, props ) {
	
		// Allow instantiation without the 'new' keyword
		if ( !( this instanceof jQuery.Event ) ) {
			return new jQuery.Event( src, props );
		}
	
		// Event object
		if ( src && src.type ) {
			this.originalEvent = src;
			this.type = src.type;
	
			// Events bubbling up the document may have been marked as prevented
			// by a handler lower down the tree; reflect the correct value.
			this.isDefaultPrevented = src.defaultPrevented ||
					src.defaultPrevented === undefined &&
	
					// Support: Android<4.0
					src.returnValue === false ?
				returnTrue :
				returnFalse;
	
		// Event type
		} else {
			this.type = src;
		}
	
		// Put explicitly provided properties onto the event object
		if ( props ) {
			jQuery.extend( this, props );
		}
	
		// Create a timestamp if incoming event doesn't have one
		this.timeStamp = src && src.timeStamp || jQuery.now();
	
		// Mark it as fixed
		this[ jQuery.expando ] = true;
	};
	
	// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
	// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
	jQuery.Event.prototype = {
		constructor: jQuery.Event,
		isDefaultPrevented: returnFalse,
		isPropagationStopped: returnFalse,
		isImmediatePropagationStopped: returnFalse,
	
		preventDefault: function() {
			var e = this.originalEvent;
	
			this.isDefaultPrevented = returnTrue;
	
			if ( e ) {
				e.preventDefault();
			}
		},
		stopPropagation: function() {
			var e = this.originalEvent;
	
			this.isPropagationStopped = returnTrue;
	
			if ( e ) {
				e.stopPropagation();
			}
		},
		stopImmediatePropagation: function() {
			var e = this.originalEvent;
	
			this.isImmediatePropagationStopped = returnTrue;
	
			if ( e ) {
				e.stopImmediatePropagation();
			}
	
			this.stopPropagation();
		}
	};
	
	// Create mouseenter/leave events using mouseover/out and event-time checks
	// so that event delegation works in jQuery.
	// Do the same for pointerenter/pointerleave and pointerover/pointerout
	//
	// Support: Safari 7 only
	// Safari sends mouseenter too often; see:
	// https://code.google.com/p/chromium/issues/detail?id=470258
	// for the description of the bug (it existed in older Chrome versions as well).
	jQuery.each( {
		mouseenter: "mouseover",
		mouseleave: "mouseout",
		pointerenter: "pointerover",
		pointerleave: "pointerout"
	}, function( orig, fix ) {
		jQuery.event.special[ orig ] = {
			delegateType: fix,
			bindType: fix,
	
			handle: function( event ) {
				var ret,
					target = this,
					related = event.relatedTarget,
					handleObj = event.handleObj;
	
				// For mouseenter/leave call the handler if related is outside the target.
				// NB: No relatedTarget if the mouse left/entered the browser window
				if ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {
					event.type = handleObj.origType;
					ret = handleObj.handler.apply( this, arguments );
					event.type = fix;
				}
				return ret;
			}
		};
	} );
	
	jQuery.fn.extend( {
		on: function( types, selector, data, fn ) {
			return on( this, types, selector, data, fn );
		},
		one: function( types, selector, data, fn ) {
			return on( this, types, selector, data, fn, 1 );
		},
		off: function( types, selector, fn ) {
			var handleObj, type;
			if ( types && types.preventDefault && types.handleObj ) {
	
				// ( event )  dispatched jQuery.Event
				handleObj = types.handleObj;
				jQuery( types.delegateTarget ).off(
					handleObj.namespace ?
						handleObj.origType + "." + handleObj.namespace :
						handleObj.origType,
					handleObj.selector,
					handleObj.handler
				);
				return this;
			}
			if ( typeof types === "object" ) {
	
				// ( types-object [, selector] )
				for ( type in types ) {
					this.off( type, selector, types[ type ] );
				}
				return this;
			}
			if ( selector === false || typeof selector === "function" ) {
	
				// ( types [, fn] )
				fn = selector;
				selector = undefined;
			}
			if ( fn === false ) {
				fn = returnFalse;
			}
			return this.each( function() {
				jQuery.event.remove( this, types, fn, selector );
			} );
		}
	} );
	
	
	var
		rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi,
	
		// Support: IE 10-11, Edge 10240+
		// In IE/Edge using regex groups here causes severe slowdowns.
		// See https://connect.microsoft.com/IE/feedback/details/1736512/
		rnoInnerhtml = /<script|<style|<link/i,
	
		// checked="checked" or checked
		rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
		rscriptTypeMasked = /^true\/(.*)/,
		rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;
	
	// Manipulating tables requires a tbody
	function manipulationTarget( elem, content ) {
		return jQuery.nodeName( elem, "table" ) &&
			jQuery.nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ?
	
			elem.getElementsByTagName( "tbody" )[ 0 ] ||
				elem.appendChild( elem.ownerDocument.createElement( "tbody" ) ) :
			elem;
	}
	
	// Replace/restore the type attribute of script elements for safe DOM manipulation
	function disableScript( elem ) {
		elem.type = ( elem.getAttribute( "type" ) !== null ) + "/" + elem.type;
		return elem;
	}
	function restoreScript( elem ) {
		var match = rscriptTypeMasked.exec( elem.type );
	
		if ( match ) {
			elem.type = match[ 1 ];
		} else {
			elem.removeAttribute( "type" );
		}
	
		return elem;
	}
	
	function cloneCopyEvent( src, dest ) {
		var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;
	
		if ( dest.nodeType !== 1 ) {
			return;
		}
	
		// 1. Copy private data: events, handlers, etc.
		if ( dataPriv.hasData( src ) ) {
			pdataOld = dataPriv.access( src );
			pdataCur = dataPriv.set( dest, pdataOld );
			events = pdataOld.events;
	
			if ( events ) {
				delete pdataCur.handle;
				pdataCur.events = {};
	
				for ( type in events ) {
					for ( i = 0, l = events[ type ].length; i < l; i++ ) {
						jQuery.event.add( dest, type, events[ type ][ i ] );
					}
				}
			}
		}
	
		// 2. Copy user data
		if ( dataUser.hasData( src ) ) {
			udataOld = dataUser.access( src );
			udataCur = jQuery.extend( {}, udataOld );
	
			dataUser.set( dest, udataCur );
		}
	}
	
	// Fix IE bugs, see support tests
	function fixInput( src, dest ) {
		var nodeName = dest.nodeName.toLowerCase();
	
		// Fails to persist the checked state of a cloned checkbox or radio button.
		if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
			dest.checked = src.checked;
	
		// Fails to return the selected option to the default selected state when cloning options
		} else if ( nodeName === "input" || nodeName === "textarea" ) {
			dest.defaultValue = src.defaultValue;
		}
	}
	
	function domManip( collection, args, callback, ignored ) {
	
		// Flatten any nested arrays
		args = concat.apply( [], args );
	
		var fragment, first, scripts, hasScripts, node, doc,
			i = 0,
			l = collection.length,
			iNoClone = l - 1,
			value = args[ 0 ],
			isFunction = jQuery.isFunction( value );
	
		// We can't cloneNode fragments that contain checked, in WebKit
		if ( isFunction ||
				( l > 1 && typeof value === "string" &&
					!support.checkClone && rchecked.test( value ) ) ) {
			return collection.each( function( index ) {
				var self = collection.eq( index );
				if ( isFunction ) {
					args[ 0 ] = value.call( this, index, self.html() );
				}
				domManip( self, args, callback, ignored );
			} );
		}
	
		if ( l ) {
			fragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );
			first = fragment.firstChild;
	
			if ( fragment.childNodes.length === 1 ) {
				fragment = first;
			}
	
			// Require either new content or an interest in ignored elements to invoke the callback
			if ( first || ignored ) {
				scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
				hasScripts = scripts.length;
	
				// Use the original fragment for the last item
				// instead of the first because it can end up
				// being emptied incorrectly in certain situations (#8070).
				for ( ; i < l; i++ ) {
					node = fragment;
	
					if ( i !== iNoClone ) {
						node = jQuery.clone( node, true, true );
	
						// Keep references to cloned scripts for later restoration
						if ( hasScripts ) {
	
							// Support: Android<4.1, PhantomJS<2
							// push.apply(_, arraylike) throws on ancient WebKit
							jQuery.merge( scripts, getAll( node, "script" ) );
						}
					}
	
					callback.call( collection[ i ], node, i );
				}
	
				if ( hasScripts ) {
					doc = scripts[ scripts.length - 1 ].ownerDocument;
	
					// Reenable scripts
					jQuery.map( scripts, restoreScript );
	
					// Evaluate executable scripts on first document insertion
					for ( i = 0; i < hasScripts; i++ ) {
						node = scripts[ i ];
						if ( rscriptType.test( node.type || "" ) &&
							!dataPriv.access( node, "globalEval" ) &&
							jQuery.contains( doc, node ) ) {
	
							if ( node.src ) {
	
								// Optional AJAX dependency, but won't run scripts if not present
								if ( jQuery._evalUrl ) {
									jQuery._evalUrl( node.src );
								}
							} else {
								jQuery.globalEval( node.textContent.replace( rcleanScript, "" ) );
							}
						}
					}
				}
			}
		}
	
		return collection;
	}
	
	function remove( elem, selector, keepData ) {
		var node,
			nodes = selector ? jQuery.filter( selector, elem ) : elem,
			i = 0;
	
		for ( ; ( node = nodes[ i ] ) != null; i++ ) {
			if ( !keepData && node.nodeType === 1 ) {
				jQuery.cleanData( getAll( node ) );
			}
	
			if ( node.parentNode ) {
				if ( keepData && jQuery.contains( node.ownerDocument, node ) ) {
					setGlobalEval( getAll( node, "script" ) );
				}
				node.parentNode.removeChild( node );
			}
		}
	
		return elem;
	}
	
	jQuery.extend( {
		htmlPrefilter: function( html ) {
			return html.replace( rxhtmlTag, "<$1></$2>" );
		},
	
		clone: function( elem, dataAndEvents, deepDataAndEvents ) {
			var i, l, srcElements, destElements,
				clone = elem.cloneNode( true ),
				inPage = jQuery.contains( elem.ownerDocument, elem );
	
			// Fix IE cloning issues
			if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&
					!jQuery.isXMLDoc( elem ) ) {
	
				// We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2
				destElements = getAll( clone );
				srcElements = getAll( elem );
	
				for ( i = 0, l = srcElements.length; i < l; i++ ) {
					fixInput( srcElements[ i ], destElements[ i ] );
				}
			}
	
			// Copy the events from the original to the clone
			if ( dataAndEvents ) {
				if ( deepDataAndEvents ) {
					srcElements = srcElements || getAll( elem );
					destElements = destElements || getAll( clone );
	
					for ( i = 0, l = srcElements.length; i < l; i++ ) {
						cloneCopyEvent( srcElements[ i ], destElements[ i ] );
					}
				} else {
					cloneCopyEvent( elem, clone );
				}
			}
	
			// Preserve script evaluation history
			destElements = getAll( clone, "script" );
			if ( destElements.length > 0 ) {
				setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
			}
	
			// Return the cloned set
			return clone;
		},
	
		cleanData: function( elems ) {
			var data, elem, type,
				special = jQuery.event.special,
				i = 0;
	
			for ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {
				if ( acceptData( elem ) ) {
					if ( ( data = elem[ dataPriv.expando ] ) ) {
						if ( data.events ) {
							for ( type in data.events ) {
								if ( special[ type ] ) {
									jQuery.event.remove( elem, type );
	
								// This is a shortcut to avoid jQuery.event.remove's overhead
								} else {
									jQuery.removeEvent( elem, type, data.handle );
								}
							}
						}
	
						// Support: Chrome <= 35-45+
						// Assign undefined instead of using delete, see Data#remove
						elem[ dataPriv.expando ] = undefined;
					}
					if ( elem[ dataUser.expando ] ) {
	
						// Support: Chrome <= 35-45+
						// Assign undefined instead of using delete, see Data#remove
						elem[ dataUser.expando ] = undefined;
					}
				}
			}
		}
	} );
	
	jQuery.fn.extend( {
	
		// Keep domManip exposed until 3.0 (gh-2225)
		domManip: domManip,
	
		detach: function( selector ) {
			return remove( this, selector, true );
		},
	
		remove: function( selector ) {
			return remove( this, selector );
		},
	
		text: function( value ) {
			return access( this, function( value ) {
				return value === undefined ?
					jQuery.text( this ) :
					this.empty().each( function() {
						if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
							this.textContent = value;
						}
					} );
			}, null, value, arguments.length );
		},
	
		append: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
					var target = manipulationTarget( this, elem );
					target.appendChild( elem );
				}
			} );
		},
	
		prepend: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
					var target = manipulationTarget( this, elem );
					target.insertBefore( elem, target.firstChild );
				}
			} );
		},
	
		before: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.parentNode ) {
					this.parentNode.insertBefore( elem, this );
				}
			} );
		},
	
		after: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.parentNode ) {
					this.parentNode.insertBefore( elem, this.nextSibling );
				}
			} );
		},
	
		empty: function() {
			var elem,
				i = 0;
	
			for ( ; ( elem = this[ i ] ) != null; i++ ) {
				if ( elem.nodeType === 1 ) {
	
					// Prevent memory leaks
					jQuery.cleanData( getAll( elem, false ) );
	
					// Remove any remaining nodes
					elem.textContent = "";
				}
			}
	
			return this;
		},
	
		clone: function( dataAndEvents, deepDataAndEvents ) {
			dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
			deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;
	
			return this.map( function() {
				return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
			} );
		},
	
		html: function( value ) {
			return access( this, function( value ) {
				var elem = this[ 0 ] || {},
					i = 0,
					l = this.length;
	
				if ( value === undefined && elem.nodeType === 1 ) {
					return elem.innerHTML;
				}
	
				// See if we can take a shortcut and just use innerHTML
				if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
					!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {
	
					value = jQuery.htmlPrefilter( value );
	
					try {
						for ( ; i < l; i++ ) {
							elem = this[ i ] || {};
	
							// Remove element nodes and prevent memory leaks
							if ( elem.nodeType === 1 ) {
								jQuery.cleanData( getAll( elem, false ) );
								elem.innerHTML = value;
							}
						}
	
						elem = 0;
	
					// If using innerHTML throws an exception, use the fallback method
					} catch ( e ) {}
				}
	
				if ( elem ) {
					this.empty().append( value );
				}
			}, null, value, arguments.length );
		},
	
		replaceWith: function() {
			var ignored = [];
	
			// Make the changes, replacing each non-ignored context element with the new content
			return domManip( this, arguments, function( elem ) {
				var parent = this.parentNode;
	
				if ( jQuery.inArray( this, ignored ) < 0 ) {
					jQuery.cleanData( getAll( this ) );
					if ( parent ) {
						parent.replaceChild( elem, this );
					}
				}
	
			// Force callback invocation
			}, ignored );
		}
	} );
	
	jQuery.each( {
		appendTo: "append",
		prependTo: "prepend",
		insertBefore: "before",
		insertAfter: "after",
		replaceAll: "replaceWith"
	}, function( name, original ) {
		jQuery.fn[ name ] = function( selector ) {
			var elems,
				ret = [],
				insert = jQuery( selector ),
				last = insert.length - 1,
				i = 0;
	
			for ( ; i <= last; i++ ) {
				elems = i === last ? this : this.clone( true );
				jQuery( insert[ i ] )[ original ]( elems );
	
				// Support: QtWebKit
				// .get() because push.apply(_, arraylike) throws
				push.apply( ret, elems.get() );
			}
	
			return this.pushStack( ret );
		};
	} );
	
	
	var iframe,
		elemdisplay = {
	
			// Support: Firefox
			// We have to pre-define these values for FF (#10227)
			HTML: "block",
			BODY: "block"
		};
	
	/**
	 * Retrieve the actual display of a element
	 * @param {String} name nodeName of the element
	 * @param {Object} doc Document object
	 */
	
	// Called only from within defaultDisplay
	function actualDisplay( name, doc ) {
		var elem = jQuery( doc.createElement( name ) ).appendTo( doc.body ),
	
			display = jQuery.css( elem[ 0 ], "display" );
	
		// We don't have any data stored on the element,
		// so use "detach" method as fast way to get rid of the element
		elem.detach();
	
		return display;
	}
	
	/**
	 * Try to determine the default display value of an element
	 * @param {String} nodeName
	 */
	function defaultDisplay( nodeName ) {
		var doc = document,
			display = elemdisplay[ nodeName ];
	
		if ( !display ) {
			display = actualDisplay( nodeName, doc );
	
			// If the simple way fails, read from inside an iframe
			if ( display === "none" || !display ) {
	
				// Use the already-created iframe if possible
				iframe = ( iframe || jQuery( "<iframe frameborder='0' width='0' height='0'/>" ) )
					.appendTo( doc.documentElement );
	
				// Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse
				doc = iframe[ 0 ].contentDocument;
	
				// Support: IE
				doc.write();
				doc.close();
	
				display = actualDisplay( nodeName, doc );
				iframe.detach();
			}
	
			// Store the correct default display
			elemdisplay[ nodeName ] = display;
		}
	
		return display;
	}
	var rmargin = ( /^margin/ );
	
	var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );
	
	var getStyles = function( elem ) {
	
			// Support: IE<=11+, Firefox<=30+ (#15098, #14150)
			// IE throws on elements created in popups
			// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
			var view = elem.ownerDocument.defaultView;
	
			if ( !view || !view.opener ) {
				view = window;
			}
	
			return view.getComputedStyle( elem );
		};
	
	var swap = function( elem, options, callback, args ) {
		var ret, name,
			old = {};
	
		// Remember the old values, and insert the new ones
		for ( name in options ) {
			old[ name ] = elem.style[ name ];
			elem.style[ name ] = options[ name ];
		}
	
		ret = callback.apply( elem, args || [] );
	
		// Revert the old values
		for ( name in options ) {
			elem.style[ name ] = old[ name ];
		}
	
		return ret;
	};
	
	
	var documentElement = document.documentElement;
	
	
	
	( function() {
		var pixelPositionVal, boxSizingReliableVal, pixelMarginRightVal, reliableMarginLeftVal,
			container = document.createElement( "div" ),
			div = document.createElement( "div" );
	
		// Finish early in limited (non-browser) environments
		if ( !div.style ) {
			return;
		}
	
		// Support: IE9-11+
		// Style of cloned element affects source element cloned (#8908)
		div.style.backgroundClip = "content-box";
		div.cloneNode( true ).style.backgroundClip = "";
		support.clearCloneStyle = div.style.backgroundClip === "content-box";
	
		container.style.cssText = "border:0;width:8px;height:0;top:0;left:-9999px;" +
			"padding:0;margin-top:1px;position:absolute";
		container.appendChild( div );
	
		// Executing both pixelPosition & boxSizingReliable tests require only one layout
		// so they're executed at the same time to save the second computation.
		function computeStyleTests() {
			div.style.cssText =
	
				// Support: Firefox<29, Android 2.3
				// Vendor-prefix box-sizing
				"-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;" +
				"position:relative;display:block;" +
				"margin:auto;border:1px;padding:1px;" +
				"top:1%;width:50%";
			div.innerHTML = "";
			documentElement.appendChild( container );
	
			var divStyle = window.getComputedStyle( div );
			pixelPositionVal = divStyle.top !== "1%";
			reliableMarginLeftVal = divStyle.marginLeft === "2px";
			boxSizingReliableVal = divStyle.width === "4px";
	
			// Support: Android 4.0 - 4.3 only
			// Some styles come back with percentage values, even though they shouldn't
			div.style.marginRight = "50%";
			pixelMarginRightVal = divStyle.marginRight === "4px";
	
			documentElement.removeChild( container );
		}
	
		jQuery.extend( support, {
			pixelPosition: function() {
	
				// This test is executed only once but we still do memoizing
				// since we can use the boxSizingReliable pre-computing.
				// No need to check if the test was already performed, though.
				computeStyleTests();
				return pixelPositionVal;
			},
			boxSizingReliable: function() {
				if ( boxSizingReliableVal == null ) {
					computeStyleTests();
				}
				return boxSizingReliableVal;
			},
			pixelMarginRight: function() {
	
				// Support: Android 4.0-4.3
				// We're checking for boxSizingReliableVal here instead of pixelMarginRightVal
				// since that compresses better and they're computed together anyway.
				if ( boxSizingReliableVal == null ) {
					computeStyleTests();
				}
				return pixelMarginRightVal;
			},
			reliableMarginLeft: function() {
	
				// Support: IE <=8 only, Android 4.0 - 4.3 only, Firefox <=3 - 37
				if ( boxSizingReliableVal == null ) {
					computeStyleTests();
				}
				return reliableMarginLeftVal;
			},
			reliableMarginRight: function() {
	
				// Support: Android 2.3
				// Check if div with explicit width and no margin-right incorrectly
				// gets computed margin-right based on width of container. (#3333)
				// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
				// This support function is only executed once so no memoizing is needed.
				var ret,
					marginDiv = div.appendChild( document.createElement( "div" ) );
	
				// Reset CSS: box-sizing; display; margin; border; padding
				marginDiv.style.cssText = div.style.cssText =
	
					// Support: Android 2.3
					// Vendor-prefix box-sizing
					"-webkit-box-sizing:content-box;box-sizing:content-box;" +
					"display:block;margin:0;border:0;padding:0";
				marginDiv.style.marginRight = marginDiv.style.width = "0";
				div.style.width = "1px";
				documentElement.appendChild( container );
	
				ret = !parseFloat( window.getComputedStyle( marginDiv ).marginRight );
	
				documentElement.removeChild( container );
				div.removeChild( marginDiv );
	
				return ret;
			}
		} );
	} )();
	
	
	function curCSS( elem, name, computed ) {
		var width, minWidth, maxWidth, ret,
			style = elem.style;
	
		computed = computed || getStyles( elem );
		ret = computed ? computed.getPropertyValue( name ) || computed[ name ] : undefined;
	
		// Support: Opera 12.1x only
		// Fall back to style even without computed
		// computed is undefined for elems on document fragments
		if ( ( ret === "" || ret === undefined ) && !jQuery.contains( elem.ownerDocument, elem ) ) {
			ret = jQuery.style( elem, name );
		}
	
		// Support: IE9
		// getPropertyValue is only needed for .css('filter') (#12537)
		if ( computed ) {
	
			// A tribute to the "awesome hack by Dean Edwards"
			// Android Browser returns percentage for some values,
			// but width seems to be reliably pixels.
			// This is against the CSSOM draft spec:
			// http://dev.w3.org/csswg/cssom/#resolved-values
			if ( !support.pixelMarginRight() && rnumnonpx.test( ret ) && rmargin.test( name ) ) {
	
				// Remember the original values
				width = style.width;
				minWidth = style.minWidth;
				maxWidth = style.maxWidth;
	
				// Put in the new values to get a computed value out
				style.minWidth = style.maxWidth = style.width = ret;
				ret = computed.width;
	
				// Revert the changed values
				style.width = width;
				style.minWidth = minWidth;
				style.maxWidth = maxWidth;
			}
		}
	
		return ret !== undefined ?
	
			// Support: IE9-11+
			// IE returns zIndex value as an integer.
			ret + "" :
			ret;
	}
	
	
	function addGetHookIf( conditionFn, hookFn ) {
	
		// Define the hook, we'll check on the first run if it's really needed.
		return {
			get: function() {
				if ( conditionFn() ) {
	
					// Hook not needed (or it's not possible to use it due
					// to missing dependency), remove it.
					delete this.get;
					return;
				}
	
				// Hook needed; redefine it so that the support test is not executed again.
				return ( this.get = hookFn ).apply( this, arguments );
			}
		};
	}
	
	
	var
	
		// Swappable if display is none or starts with table
		// except "table", "table-cell", or "table-caption"
		// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
		rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	
		cssShow = { position: "absolute", visibility: "hidden", display: "block" },
		cssNormalTransform = {
			letterSpacing: "0",
			fontWeight: "400"
		},
	
		cssPrefixes = [ "Webkit", "O", "Moz", "ms" ],
		emptyStyle = document.createElement( "div" ).style;
	
	// Return a css property mapped to a potentially vendor prefixed property
	function vendorPropName( name ) {
	
		// Shortcut for names that are not vendor prefixed
		if ( name in emptyStyle ) {
			return name;
		}
	
		// Check for vendor prefixed names
		var capName = name[ 0 ].toUpperCase() + name.slice( 1 ),
			i = cssPrefixes.length;
	
		while ( i-- ) {
			name = cssPrefixes[ i ] + capName;
			if ( name in emptyStyle ) {
				return name;
			}
		}
	}
	
	function setPositiveNumber( elem, value, subtract ) {
	
		// Any relative (+/-) values have already been
		// normalized at this point
		var matches = rcssNum.exec( value );
		return matches ?
	
			// Guard against undefined "subtract", e.g., when used as in cssHooks
			Math.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || "px" ) :
			value;
	}
	
	function augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {
		var i = extra === ( isBorderBox ? "border" : "content" ) ?
	
			// If we already have the right measurement, avoid augmentation
			4 :
	
			// Otherwise initialize for horizontal or vertical properties
			name === "width" ? 1 : 0,
	
			val = 0;
	
		for ( ; i < 4; i += 2 ) {
	
			// Both box models exclude margin, so add it if we want it
			if ( extra === "margin" ) {
				val += jQuery.css( elem, extra + cssExpand[ i ], true, styles );
			}
	
			if ( isBorderBox ) {
	
				// border-box includes padding, so remove it if we want content
				if ( extra === "content" ) {
					val -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
				}
	
				// At this point, extra isn't border nor margin, so remove border
				if ( extra !== "margin" ) {
					val -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
				}
			} else {
	
				// At this point, extra isn't content, so add padding
				val += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
	
				// At this point, extra isn't content nor padding, so add border
				if ( extra !== "padding" ) {
					val += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
				}
			}
		}
	
		return val;
	}
	
	function getWidthOrHeight( elem, name, extra ) {
	
		// Start with offset property, which is equivalent to the border-box value
		var valueIsBorderBox = true,
			val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
			styles = getStyles( elem ),
			isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box";
	
		// Support: IE11 only
		// In IE 11 fullscreen elements inside of an iframe have
		// 100x too small dimensions (gh-1764).
		if ( document.msFullscreenElement && window.top !== window ) {
	
			// Support: IE11 only
			// Running getBoundingClientRect on a disconnected node
			// in IE throws an error.
			if ( elem.getClientRects().length ) {
				val = Math.round( elem.getBoundingClientRect()[ name ] * 100 );
			}
		}
	
		// Some non-html elements return undefined for offsetWidth, so check for null/undefined
		// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
		// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
		if ( val <= 0 || val == null ) {
	
			// Fall back to computed then uncomputed css if necessary
			val = curCSS( elem, name, styles );
			if ( val < 0 || val == null ) {
				val = elem.style[ name ];
			}
	
			// Computed unit is not pixels. Stop here and return.
			if ( rnumnonpx.test( val ) ) {
				return val;
			}
	
			// Check for style in case a browser which returns unreliable values
			// for getComputedStyle silently falls back to the reliable elem.style
			valueIsBorderBox = isBorderBox &&
				( support.boxSizingReliable() || val === elem.style[ name ] );
	
			// Normalize "", auto, and prepare for extra
			val = parseFloat( val ) || 0;
		}
	
		// Use the active box-sizing model to add/subtract irrelevant styles
		return ( val +
			augmentWidthOrHeight(
				elem,
				name,
				extra || ( isBorderBox ? "border" : "content" ),
				valueIsBorderBox,
				styles
			)
		) + "px";
	}
	
	function showHide( elements, show ) {
		var display, elem, hidden,
			values = [],
			index = 0,
			length = elements.length;
	
		for ( ; index < length; index++ ) {
			elem = elements[ index ];
			if ( !elem.style ) {
				continue;
			}
	
			values[ index ] = dataPriv.get( elem, "olddisplay" );
			display = elem.style.display;
			if ( show ) {
	
				// Reset the inline display of this element to learn if it is
				// being hidden by cascaded rules or not
				if ( !values[ index ] && display === "none" ) {
					elem.style.display = "";
				}
	
				// Set elements which have been overridden with display: none
				// in a stylesheet to whatever the default browser style is
				// for such an element
				if ( elem.style.display === "" && isHidden( elem ) ) {
					values[ index ] = dataPriv.access(
						elem,
						"olddisplay",
						defaultDisplay( elem.nodeName )
					);
				}
			} else {
				hidden = isHidden( elem );
	
				if ( display !== "none" || !hidden ) {
					dataPriv.set(
						elem,
						"olddisplay",
						hidden ? display : jQuery.css( elem, "display" )
					);
				}
			}
		}
	
		// Set the display of most of the elements in a second loop
		// to avoid the constant reflow
		for ( index = 0; index < length; index++ ) {
			elem = elements[ index ];
			if ( !elem.style ) {
				continue;
			}
			if ( !show || elem.style.display === "none" || elem.style.display === "" ) {
				elem.style.display = show ? values[ index ] || "" : "none";
			}
		}
	
		return elements;
	}
	
	jQuery.extend( {
	
		// Add in style property hooks for overriding the default
		// behavior of getting and setting a style property
		cssHooks: {
			opacity: {
				get: function( elem, computed ) {
					if ( computed ) {
	
						// We should always get a number back from opacity
						var ret = curCSS( elem, "opacity" );
						return ret === "" ? "1" : ret;
					}
				}
			}
		},
	
		// Don't automatically add "px" to these possibly-unitless properties
		cssNumber: {
			"animationIterationCount": true,
			"columnCount": true,
			"fillOpacity": true,
			"flexGrow": true,
			"flexShrink": true,
			"fontWeight": true,
			"lineHeight": true,
			"opacity": true,
			"order": true,
			"orphans": true,
			"widows": true,
			"zIndex": true,
			"zoom": true
		},
	
		// Add in properties whose names you wish to fix before
		// setting or getting the value
		cssProps: {
			"float": "cssFloat"
		},
	
		// Get and set the style property on a DOM Node
		style: function( elem, name, value, extra ) {
	
			// Don't set styles on text and comment nodes
			if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
				return;
			}
	
			// Make sure that we're working with the right name
			var ret, type, hooks,
				origName = jQuery.camelCase( name ),
				style = elem.style;
	
			name = jQuery.cssProps[ origName ] ||
				( jQuery.cssProps[ origName ] = vendorPropName( origName ) || origName );
	
			// Gets hook for the prefixed version, then unprefixed version
			hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];
	
			// Check if we're setting a value
			if ( value !== undefined ) {
				type = typeof value;
	
				// Convert "+=" or "-=" to relative numbers (#7345)
				if ( type === "string" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {
					value = adjustCSS( elem, name, ret );
	
					// Fixes bug #9237
					type = "number";
				}
	
				// Make sure that null and NaN values aren't set (#7116)
				if ( value == null || value !== value ) {
					return;
				}
	
				// If a number was passed in, add the unit (except for certain CSS properties)
				if ( type === "number" ) {
					value += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? "" : "px" );
				}
	
				// Support: IE9-11+
				// background-* props affect original clone's values
				if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
					style[ name ] = "inherit";
				}
	
				// If a hook was provided, use that value, otherwise just set the specified value
				if ( !hooks || !( "set" in hooks ) ||
					( value = hooks.set( elem, value, extra ) ) !== undefined ) {
	
					style[ name ] = value;
				}
	
			} else {
	
				// If a hook was provided get the non-computed value from there
				if ( hooks && "get" in hooks &&
					( ret = hooks.get( elem, false, extra ) ) !== undefined ) {
	
					return ret;
				}
	
				// Otherwise just get the value from the style object
				return style[ name ];
			}
		},
	
		css: function( elem, name, extra, styles ) {
			var val, num, hooks,
				origName = jQuery.camelCase( name );
	
			// Make sure that we're working with the right name
			name = jQuery.cssProps[ origName ] ||
				( jQuery.cssProps[ origName ] = vendorPropName( origName ) || origName );
	
			// Try prefixed name followed by the unprefixed name
			hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];
	
			// If a hook was provided get the computed value from there
			if ( hooks && "get" in hooks ) {
				val = hooks.get( elem, true, extra );
			}
	
			// Otherwise, if a way to get the computed value exists, use that
			if ( val === undefined ) {
				val = curCSS( elem, name, styles );
			}
	
			// Convert "normal" to computed value
			if ( val === "normal" && name in cssNormalTransform ) {
				val = cssNormalTransform[ name ];
			}
	
			// Make numeric if forced or a qualifier was provided and val looks numeric
			if ( extra === "" || extra ) {
				num = parseFloat( val );
				return extra === true || isFinite( num ) ? num || 0 : val;
			}
			return val;
		}
	} );
	
	jQuery.each( [ "height", "width" ], function( i, name ) {
		jQuery.cssHooks[ name ] = {
			get: function( elem, computed, extra ) {
				if ( computed ) {
	
					// Certain elements can have dimension info if we invisibly show them
					// but it must have a current display style that would benefit
					return rdisplayswap.test( jQuery.css( elem, "display" ) ) &&
						elem.offsetWidth === 0 ?
							swap( elem, cssShow, function() {
								return getWidthOrHeight( elem, name, extra );
							} ) :
							getWidthOrHeight( elem, name, extra );
				}
			},
	
			set: function( elem, value, extra ) {
				var matches,
					styles = extra && getStyles( elem ),
					subtract = extra && augmentWidthOrHeight(
						elem,
						name,
						extra,
						jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
						styles
					);
	
				// Convert to pixels if value adjustment is needed
				if ( subtract && ( matches = rcssNum.exec( value ) ) &&
					( matches[ 3 ] || "px" ) !== "px" ) {
	
					elem.style[ name ] = value;
					value = jQuery.css( elem, name );
				}
	
				return setPositiveNumber( elem, value, subtract );
			}
		};
	} );
	
	jQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,
		function( elem, computed ) {
			if ( computed ) {
				return ( parseFloat( curCSS( elem, "marginLeft" ) ) ||
					elem.getBoundingClientRect().left -
						swap( elem, { marginLeft: 0 }, function() {
							return elem.getBoundingClientRect().left;
						} )
					) + "px";
			}
		}
	);
	
	// Support: Android 2.3
	jQuery.cssHooks.marginRight = addGetHookIf( support.reliableMarginRight,
		function( elem, computed ) {
			if ( computed ) {
				return swap( elem, { "display": "inline-block" },
					curCSS, [ elem, "marginRight" ] );
			}
		}
	);
	
	// These hooks are used by animate to expand properties
	jQuery.each( {
		margin: "",
		padding: "",
		border: "Width"
	}, function( prefix, suffix ) {
		jQuery.cssHooks[ prefix + suffix ] = {
			expand: function( value ) {
				var i = 0,
					expanded = {},
	
					// Assumes a single number if not a string
					parts = typeof value === "string" ? value.split( " " ) : [ value ];
	
				for ( ; i < 4; i++ ) {
					expanded[ prefix + cssExpand[ i ] + suffix ] =
						parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
				}
	
				return expanded;
			}
		};
	
		if ( !rmargin.test( prefix ) ) {
			jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
		}
	} );
	
	jQuery.fn.extend( {
		css: function( name, value ) {
			return access( this, function( elem, name, value ) {
				var styles, len,
					map = {},
					i = 0;
	
				if ( jQuery.isArray( name ) ) {
					styles = getStyles( elem );
					len = name.length;
	
					for ( ; i < len; i++ ) {
						map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
					}
	
					return map;
				}
	
				return value !== undefined ?
					jQuery.style( elem, name, value ) :
					jQuery.css( elem, name );
			}, name, value, arguments.length > 1 );
		},
		show: function() {
			return showHide( this, true );
		},
		hide: function() {
			return showHide( this );
		},
		toggle: function( state ) {
			if ( typeof state === "boolean" ) {
				return state ? this.show() : this.hide();
			}
	
			return this.each( function() {
				if ( isHidden( this ) ) {
					jQuery( this ).show();
				} else {
					jQuery( this ).hide();
				}
			} );
		}
	} );
	
	
	function Tween( elem, options, prop, end, easing ) {
		return new Tween.prototype.init( elem, options, prop, end, easing );
	}
	jQuery.Tween = Tween;
	
	Tween.prototype = {
		constructor: Tween,
		init: function( elem, options, prop, end, easing, unit ) {
			this.elem = elem;
			this.prop = prop;
			this.easing = easing || jQuery.easing._default;
			this.options = options;
			this.start = this.now = this.cur();
			this.end = end;
			this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
		},
		cur: function() {
			var hooks = Tween.propHooks[ this.prop ];
	
			return hooks && hooks.get ?
				hooks.get( this ) :
				Tween.propHooks._default.get( this );
		},
		run: function( percent ) {
			var eased,
				hooks = Tween.propHooks[ this.prop ];
	
			if ( this.options.duration ) {
				this.pos = eased = jQuery.easing[ this.easing ](
					percent, this.options.duration * percent, 0, 1, this.options.duration
				);
			} else {
				this.pos = eased = percent;
			}
			this.now = ( this.end - this.start ) * eased + this.start;
	
			if ( this.options.step ) {
				this.options.step.call( this.elem, this.now, this );
			}
	
			if ( hooks && hooks.set ) {
				hooks.set( this );
			} else {
				Tween.propHooks._default.set( this );
			}
			return this;
		}
	};
	
	Tween.prototype.init.prototype = Tween.prototype;
	
	Tween.propHooks = {
		_default: {
			get: function( tween ) {
				var result;
	
				// Use a property on the element directly when it is not a DOM element,
				// or when there is no matching style property that exists.
				if ( tween.elem.nodeType !== 1 ||
					tween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {
					return tween.elem[ tween.prop ];
				}
	
				// Passing an empty string as a 3rd parameter to .css will automatically
				// attempt a parseFloat and fallback to a string if the parse fails.
				// Simple values such as "10px" are parsed to Float;
				// complex values such as "rotate(1rad)" are returned as-is.
				result = jQuery.css( tween.elem, tween.prop, "" );
	
				// Empty strings, null, undefined and "auto" are converted to 0.
				return !result || result === "auto" ? 0 : result;
			},
			set: function( tween ) {
	
				// Use step hook for back compat.
				// Use cssHook if its there.
				// Use .style if available and use plain properties where available.
				if ( jQuery.fx.step[ tween.prop ] ) {
					jQuery.fx.step[ tween.prop ]( tween );
				} else if ( tween.elem.nodeType === 1 &&
					( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null ||
						jQuery.cssHooks[ tween.prop ] ) ) {
					jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
				} else {
					tween.elem[ tween.prop ] = tween.now;
				}
			}
		}
	};
	
	// Support: IE9
	// Panic based approach to setting things on disconnected nodes
	Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
		set: function( tween ) {
			if ( tween.elem.nodeType && tween.elem.parentNode ) {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	};
	
	jQuery.easing = {
		linear: function( p ) {
			return p;
		},
		swing: function( p ) {
			return 0.5 - Math.cos( p * Math.PI ) / 2;
		},
		_default: "swing"
	};
	
	jQuery.fx = Tween.prototype.init;
	
	// Back Compat <1.8 extension point
	jQuery.fx.step = {};
	
	
	
	
	var
		fxNow, timerId,
		rfxtypes = /^(?:toggle|show|hide)$/,
		rrun = /queueHooks$/;
	
	// Animations created synchronously will run synchronously
	function createFxNow() {
		window.setTimeout( function() {
			fxNow = undefined;
		} );
		return ( fxNow = jQuery.now() );
	}
	
	// Generate parameters to create a standard animation
	function genFx( type, includeWidth ) {
		var which,
			i = 0,
			attrs = { height: type };
	
		// If we include width, step value is 1 to do all cssExpand values,
		// otherwise step value is 2 to skip over Left and Right
		includeWidth = includeWidth ? 1 : 0;
		for ( ; i < 4 ; i += 2 - includeWidth ) {
			which = cssExpand[ i ];
			attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
		}
	
		if ( includeWidth ) {
			attrs.opacity = attrs.width = type;
		}
	
		return attrs;
	}
	
	function createTween( value, prop, animation ) {
		var tween,
			collection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ "*" ] ),
			index = 0,
			length = collection.length;
		for ( ; index < length; index++ ) {
			if ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {
	
				// We're done with this property
				return tween;
			}
		}
	}
	
	function defaultPrefilter( elem, props, opts ) {
		/* jshint validthis: true */
		var prop, value, toggle, tween, hooks, oldfire, display, checkDisplay,
			anim = this,
			orig = {},
			style = elem.style,
			hidden = elem.nodeType && isHidden( elem ),
			dataShow = dataPriv.get( elem, "fxshow" );
	
		// Handle queue: false promises
		if ( !opts.queue ) {
			hooks = jQuery._queueHooks( elem, "fx" );
			if ( hooks.unqueued == null ) {
				hooks.unqueued = 0;
				oldfire = hooks.empty.fire;
				hooks.empty.fire = function() {
					if ( !hooks.unqueued ) {
						oldfire();
					}
				};
			}
			hooks.unqueued++;
	
			anim.always( function() {
	
				// Ensure the complete handler is called before this completes
				anim.always( function() {
					hooks.unqueued--;
					if ( !jQuery.queue( elem, "fx" ).length ) {
						hooks.empty.fire();
					}
				} );
			} );
		}
	
		// Height/width overflow pass
		if ( elem.nodeType === 1 && ( "height" in props || "width" in props ) ) {
	
			// Make sure that nothing sneaks out
			// Record all 3 overflow attributes because IE9-10 do not
			// change the overflow attribute when overflowX and
			// overflowY are set to the same value
			opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];
	
			// Set display property to inline-block for height/width
			// animations on inline elements that are having width/height animated
			display = jQuery.css( elem, "display" );
	
			// Test default display if display is currently "none"
			checkDisplay = display === "none" ?
				dataPriv.get( elem, "olddisplay" ) || defaultDisplay( elem.nodeName ) : display;
	
			if ( checkDisplay === "inline" && jQuery.css( elem, "float" ) === "none" ) {
				style.display = "inline-block";
			}
		}
	
		if ( opts.overflow ) {
			style.overflow = "hidden";
			anim.always( function() {
				style.overflow = opts.overflow[ 0 ];
				style.overflowX = opts.overflow[ 1 ];
				style.overflowY = opts.overflow[ 2 ];
			} );
		}
	
		// show/hide pass
		for ( prop in props ) {
			value = props[ prop ];
			if ( rfxtypes.exec( value ) ) {
				delete props[ prop ];
				toggle = toggle || value === "toggle";
				if ( value === ( hidden ? "hide" : "show" ) ) {
	
					// If there is dataShow left over from a stopped hide or show
					// and we are going to proceed with show, we should pretend to be hidden
					if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
						hidden = true;
					} else {
						continue;
					}
				}
				orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );
	
			// Any non-fx value stops us from restoring the original display value
			} else {
				display = undefined;
			}
		}
	
		if ( !jQuery.isEmptyObject( orig ) ) {
			if ( dataShow ) {
				if ( "hidden" in dataShow ) {
					hidden = dataShow.hidden;
				}
			} else {
				dataShow = dataPriv.access( elem, "fxshow", {} );
			}
	
			// Store state if its toggle - enables .stop().toggle() to "reverse"
			if ( toggle ) {
				dataShow.hidden = !hidden;
			}
			if ( hidden ) {
				jQuery( elem ).show();
			} else {
				anim.done( function() {
					jQuery( elem ).hide();
				} );
			}
			anim.done( function() {
				var prop;
	
				dataPriv.remove( elem, "fxshow" );
				for ( prop in orig ) {
					jQuery.style( elem, prop, orig[ prop ] );
				}
			} );
			for ( prop in orig ) {
				tween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );
	
				if ( !( prop in dataShow ) ) {
					dataShow[ prop ] = tween.start;
					if ( hidden ) {
						tween.end = tween.start;
						tween.start = prop === "width" || prop === "height" ? 1 : 0;
					}
				}
			}
	
		// If this is a noop like .hide().hide(), restore an overwritten display value
		} else if ( ( display === "none" ? defaultDisplay( elem.nodeName ) : display ) === "inline" ) {
			style.display = display;
		}
	}
	
	function propFilter( props, specialEasing ) {
		var index, name, easing, value, hooks;
	
		// camelCase, specialEasing and expand cssHook pass
		for ( index in props ) {
			name = jQuery.camelCase( index );
			easing = specialEasing[ name ];
			value = props[ index ];
			if ( jQuery.isArray( value ) ) {
				easing = value[ 1 ];
				value = props[ index ] = value[ 0 ];
			}
	
			if ( index !== name ) {
				props[ name ] = value;
				delete props[ index ];
			}
	
			hooks = jQuery.cssHooks[ name ];
			if ( hooks && "expand" in hooks ) {
				value = hooks.expand( value );
				delete props[ name ];
	
				// Not quite $.extend, this won't overwrite existing keys.
				// Reusing 'index' because we have the correct "name"
				for ( index in value ) {
					if ( !( index in props ) ) {
						props[ index ] = value[ index ];
						specialEasing[ index ] = easing;
					}
				}
			} else {
				specialEasing[ name ] = easing;
			}
		}
	}
	
	function Animation( elem, properties, options ) {
		var result,
			stopped,
			index = 0,
			length = Animation.prefilters.length,
			deferred = jQuery.Deferred().always( function() {
	
				// Don't match elem in the :animated selector
				delete tick.elem;
			} ),
			tick = function() {
				if ( stopped ) {
					return false;
				}
				var currentTime = fxNow || createFxNow(),
					remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),
	
					// Support: Android 2.3
					// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
					temp = remaining / animation.duration || 0,
					percent = 1 - temp,
					index = 0,
					length = animation.tweens.length;
	
				for ( ; index < length ; index++ ) {
					animation.tweens[ index ].run( percent );
				}
	
				deferred.notifyWith( elem, [ animation, percent, remaining ] );
	
				if ( percent < 1 && length ) {
					return remaining;
				} else {
					deferred.resolveWith( elem, [ animation ] );
					return false;
				}
			},
			animation = deferred.promise( {
				elem: elem,
				props: jQuery.extend( {}, properties ),
				opts: jQuery.extend( true, {
					specialEasing: {},
					easing: jQuery.easing._default
				}, options ),
				originalProperties: properties,
				originalOptions: options,
				startTime: fxNow || createFxNow(),
				duration: options.duration,
				tweens: [],
				createTween: function( prop, end ) {
					var tween = jQuery.Tween( elem, animation.opts, prop, end,
							animation.opts.specialEasing[ prop ] || animation.opts.easing );
					animation.tweens.push( tween );
					return tween;
				},
				stop: function( gotoEnd ) {
					var index = 0,
	
						// If we are going to the end, we want to run all the tweens
						// otherwise we skip this part
						length = gotoEnd ? animation.tweens.length : 0;
					if ( stopped ) {
						return this;
					}
					stopped = true;
					for ( ; index < length ; index++ ) {
						animation.tweens[ index ].run( 1 );
					}
	
					// Resolve when we played the last frame; otherwise, reject
					if ( gotoEnd ) {
						deferred.notifyWith( elem, [ animation, 1, 0 ] );
						deferred.resolveWith( elem, [ animation, gotoEnd ] );
					} else {
						deferred.rejectWith( elem, [ animation, gotoEnd ] );
					}
					return this;
				}
			} ),
			props = animation.props;
	
		propFilter( props, animation.opts.specialEasing );
	
		for ( ; index < length ; index++ ) {
			result = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );
			if ( result ) {
				if ( jQuery.isFunction( result.stop ) ) {
					jQuery._queueHooks( animation.elem, animation.opts.queue ).stop =
						jQuery.proxy( result.stop, result );
				}
				return result;
			}
		}
	
		jQuery.map( props, createTween, animation );
	
		if ( jQuery.isFunction( animation.opts.start ) ) {
			animation.opts.start.call( elem, animation );
		}
	
		jQuery.fx.timer(
			jQuery.extend( tick, {
				elem: elem,
				anim: animation,
				queue: animation.opts.queue
			} )
		);
	
		// attach callbacks from options
		return animation.progress( animation.opts.progress )
			.done( animation.opts.done, animation.opts.complete )
			.fail( animation.opts.fail )
			.always( animation.opts.always );
	}
	
	jQuery.Animation = jQuery.extend( Animation, {
		tweeners: {
			"*": [ function( prop, value ) {
				var tween = this.createTween( prop, value );
				adjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );
				return tween;
			} ]
		},
	
		tweener: function( props, callback ) {
			if ( jQuery.isFunction( props ) ) {
				callback = props;
				props = [ "*" ];
			} else {
				props = props.match( rnotwhite );
			}
	
			var prop,
				index = 0,
				length = props.length;
	
			for ( ; index < length ; index++ ) {
				prop = props[ index ];
				Animation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];
				Animation.tweeners[ prop ].unshift( callback );
			}
		},
	
		prefilters: [ defaultPrefilter ],
	
		prefilter: function( callback, prepend ) {
			if ( prepend ) {
				Animation.prefilters.unshift( callback );
			} else {
				Animation.prefilters.push( callback );
			}
		}
	} );
	
	jQuery.speed = function( speed, easing, fn ) {
		var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
			complete: fn || !fn && easing ||
				jQuery.isFunction( speed ) && speed,
			duration: speed,
			easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing
		};
	
		opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ?
			opt.duration : opt.duration in jQuery.fx.speeds ?
				jQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;
	
		// Normalize opt.queue - true/undefined/null -> "fx"
		if ( opt.queue == null || opt.queue === true ) {
			opt.queue = "fx";
		}
	
		// Queueing
		opt.old = opt.complete;
	
		opt.complete = function() {
			if ( jQuery.isFunction( opt.old ) ) {
				opt.old.call( this );
			}
	
			if ( opt.queue ) {
				jQuery.dequeue( this, opt.queue );
			}
		};
	
		return opt;
	};
	
	jQuery.fn.extend( {
		fadeTo: function( speed, to, easing, callback ) {
	
			// Show any hidden elements after setting opacity to 0
			return this.filter( isHidden ).css( "opacity", 0 ).show()
	
				// Animate to the value specified
				.end().animate( { opacity: to }, speed, easing, callback );
		},
		animate: function( prop, speed, easing, callback ) {
			var empty = jQuery.isEmptyObject( prop ),
				optall = jQuery.speed( speed, easing, callback ),
				doAnimation = function() {
	
					// Operate on a copy of prop so per-property easing won't be lost
					var anim = Animation( this, jQuery.extend( {}, prop ), optall );
	
					// Empty animations, or finishing resolves immediately
					if ( empty || dataPriv.get( this, "finish" ) ) {
						anim.stop( true );
					}
				};
				doAnimation.finish = doAnimation;
	
			return empty || optall.queue === false ?
				this.each( doAnimation ) :
				this.queue( optall.queue, doAnimation );
		},
		stop: function( type, clearQueue, gotoEnd ) {
			var stopQueue = function( hooks ) {
				var stop = hooks.stop;
				delete hooks.stop;
				stop( gotoEnd );
			};
	
			if ( typeof type !== "string" ) {
				gotoEnd = clearQueue;
				clearQueue = type;
				type = undefined;
			}
			if ( clearQueue && type !== false ) {
				this.queue( type || "fx", [] );
			}
	
			return this.each( function() {
				var dequeue = true,
					index = type != null && type + "queueHooks",
					timers = jQuery.timers,
					data = dataPriv.get( this );
	
				if ( index ) {
					if ( data[ index ] && data[ index ].stop ) {
						stopQueue( data[ index ] );
					}
				} else {
					for ( index in data ) {
						if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
							stopQueue( data[ index ] );
						}
					}
				}
	
				for ( index = timers.length; index--; ) {
					if ( timers[ index ].elem === this &&
						( type == null || timers[ index ].queue === type ) ) {
	
						timers[ index ].anim.stop( gotoEnd );
						dequeue = false;
						timers.splice( index, 1 );
					}
				}
	
				// Start the next in the queue if the last step wasn't forced.
				// Timers currently will call their complete callbacks, which
				// will dequeue but only if they were gotoEnd.
				if ( dequeue || !gotoEnd ) {
					jQuery.dequeue( this, type );
				}
			} );
		},
		finish: function( type ) {
			if ( type !== false ) {
				type = type || "fx";
			}
			return this.each( function() {
				var index,
					data = dataPriv.get( this ),
					queue = data[ type + "queue" ],
					hooks = data[ type + "queueHooks" ],
					timers = jQuery.timers,
					length = queue ? queue.length : 0;
	
				// Enable finishing flag on private data
				data.finish = true;
	
				// Empty the queue first
				jQuery.queue( this, type, [] );
	
				if ( hooks && hooks.stop ) {
					hooks.stop.call( this, true );
				}
	
				// Look for any active animations, and finish them
				for ( index = timers.length; index--; ) {
					if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
						timers[ index ].anim.stop( true );
						timers.splice( index, 1 );
					}
				}
	
				// Look for any animations in the old queue and finish them
				for ( index = 0; index < length; index++ ) {
					if ( queue[ index ] && queue[ index ].finish ) {
						queue[ index ].finish.call( this );
					}
				}
	
				// Turn off finishing flag
				delete data.finish;
			} );
		}
	} );
	
	jQuery.each( [ "toggle", "show", "hide" ], function( i, name ) {
		var cssFn = jQuery.fn[ name ];
		jQuery.fn[ name ] = function( speed, easing, callback ) {
			return speed == null || typeof speed === "boolean" ?
				cssFn.apply( this, arguments ) :
				this.animate( genFx( name, true ), speed, easing, callback );
		};
	} );
	
	// Generate shortcuts for custom animations
	jQuery.each( {
		slideDown: genFx( "show" ),
		slideUp: genFx( "hide" ),
		slideToggle: genFx( "toggle" ),
		fadeIn: { opacity: "show" },
		fadeOut: { opacity: "hide" },
		fadeToggle: { opacity: "toggle" }
	}, function( name, props ) {
		jQuery.fn[ name ] = function( speed, easing, callback ) {
			return this.animate( props, speed, easing, callback );
		};
	} );
	
	jQuery.timers = [];
	jQuery.fx.tick = function() {
		var timer,
			i = 0,
			timers = jQuery.timers;
	
		fxNow = jQuery.now();
	
		for ( ; i < timers.length; i++ ) {
			timer = timers[ i ];
	
			// Checks the timer has not already been removed
			if ( !timer() && timers[ i ] === timer ) {
				timers.splice( i--, 1 );
			}
		}
	
		if ( !timers.length ) {
			jQuery.fx.stop();
		}
		fxNow = undefined;
	};
	
	jQuery.fx.timer = function( timer ) {
		jQuery.timers.push( timer );
		if ( timer() ) {
			jQuery.fx.start();
		} else {
			jQuery.timers.pop();
		}
	};
	
	jQuery.fx.interval = 13;
	jQuery.fx.start = function() {
		if ( !timerId ) {
			timerId = window.setInterval( jQuery.fx.tick, jQuery.fx.interval );
		}
	};
	
	jQuery.fx.stop = function() {
		window.clearInterval( timerId );
	
		timerId = null;
	};
	
	jQuery.fx.speeds = {
		slow: 600,
		fast: 200,
	
		// Default speed
		_default: 400
	};
	
	
	// Based off of the plugin by Clint Helfers, with permission.
	// http://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
	jQuery.fn.delay = function( time, type ) {
		time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
		type = type || "fx";
	
		return this.queue( type, function( next, hooks ) {
			var timeout = window.setTimeout( next, time );
			hooks.stop = function() {
				window.clearTimeout( timeout );
			};
		} );
	};
	
	
	( function() {
		var input = document.createElement( "input" ),
			select = document.createElement( "select" ),
			opt = select.appendChild( document.createElement( "option" ) );
	
		input.type = "checkbox";
	
		// Support: iOS<=5.1, Android<=4.2+
		// Default value for a checkbox should be "on"
		support.checkOn = input.value !== "";
	
		// Support: IE<=11+
		// Must access selectedIndex to make default options select
		support.optSelected = opt.selected;
	
		// Support: Android<=2.3
		// Options inside disabled selects are incorrectly marked as disabled
		select.disabled = true;
		support.optDisabled = !opt.disabled;
	
		// Support: IE<=11+
		// An input loses its value after becoming a radio
		input = document.createElement( "input" );
		input.value = "t";
		input.type = "radio";
		support.radioValue = input.value === "t";
	} )();
	
	
	var boolHook,
		attrHandle = jQuery.expr.attrHandle;
	
	jQuery.fn.extend( {
		attr: function( name, value ) {
			return access( this, jQuery.attr, name, value, arguments.length > 1 );
		},
	
		removeAttr: function( name ) {
			return this.each( function() {
				jQuery.removeAttr( this, name );
			} );
		}
	} );
	
	jQuery.extend( {
		attr: function( elem, name, value ) {
			var ret, hooks,
				nType = elem.nodeType;
	
			// Don't get/set attributes on text, comment and attribute nodes
			if ( nType === 3 || nType === 8 || nType === 2 ) {
				return;
			}
	
			// Fallback to prop when attributes are not supported
			if ( typeof elem.getAttribute === "undefined" ) {
				return jQuery.prop( elem, name, value );
			}
	
			// All attributes are lowercase
			// Grab necessary hook if one is defined
			if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
				name = name.toLowerCase();
				hooks = jQuery.attrHooks[ name ] ||
					( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );
			}
	
			if ( value !== undefined ) {
				if ( value === null ) {
					jQuery.removeAttr( elem, name );
					return;
				}
	
				if ( hooks && "set" in hooks &&
					( ret = hooks.set( elem, value, name ) ) !== undefined ) {
					return ret;
				}
	
				elem.setAttribute( name, value + "" );
				return value;
			}
	
			if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
				return ret;
			}
	
			ret = jQuery.find.attr( elem, name );
	
			// Non-existent attributes return null, we normalize to undefined
			return ret == null ? undefined : ret;
		},
	
		attrHooks: {
			type: {
				set: function( elem, value ) {
					if ( !support.radioValue && value === "radio" &&
						jQuery.nodeName( elem, "input" ) ) {
						var val = elem.value;
						elem.setAttribute( "type", value );
						if ( val ) {
							elem.value = val;
						}
						return value;
					}
				}
			}
		},
	
		removeAttr: function( elem, value ) {
			var name, propName,
				i = 0,
				attrNames = value && value.match( rnotwhite );
	
			if ( attrNames && elem.nodeType === 1 ) {
				while ( ( name = attrNames[ i++ ] ) ) {
					propName = jQuery.propFix[ name ] || name;
	
					// Boolean attributes get special treatment (#10870)
					if ( jQuery.expr.match.bool.test( name ) ) {
	
						// Set corresponding property to false
						elem[ propName ] = false;
					}
	
					elem.removeAttribute( name );
				}
			}
		}
	} );
	
	// Hooks for boolean attributes
	boolHook = {
		set: function( elem, value, name ) {
			if ( value === false ) {
	
				// Remove boolean attributes when set to false
				jQuery.removeAttr( elem, name );
			} else {
				elem.setAttribute( name, name );
			}
			return name;
		}
	};
	jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {
		var getter = attrHandle[ name ] || jQuery.find.attr;
	
		attrHandle[ name ] = function( elem, name, isXML ) {
			var ret, handle;
			if ( !isXML ) {
	
				// Avoid an infinite loop by temporarily removing this function from the getter
				handle = attrHandle[ name ];
				attrHandle[ name ] = ret;
				ret = getter( elem, name, isXML ) != null ?
					name.toLowerCase() :
					null;
				attrHandle[ name ] = handle;
			}
			return ret;
		};
	} );
	
	
	
	
	var rfocusable = /^(?:input|select|textarea|button)$/i,
		rclickable = /^(?:a|area)$/i;
	
	jQuery.fn.extend( {
		prop: function( name, value ) {
			return access( this, jQuery.prop, name, value, arguments.length > 1 );
		},
	
		removeProp: function( name ) {
			return this.each( function() {
				delete this[ jQuery.propFix[ name ] || name ];
			} );
		}
	} );
	
	jQuery.extend( {
		prop: function( elem, name, value ) {
			var ret, hooks,
				nType = elem.nodeType;
	
			// Don't get/set properties on text, comment and attribute nodes
			if ( nType === 3 || nType === 8 || nType === 2 ) {
				return;
			}
	
			if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
	
				// Fix name and attach hooks
				name = jQuery.propFix[ name ] || name;
				hooks = jQuery.propHooks[ name ];
			}
	
			if ( value !== undefined ) {
				if ( hooks && "set" in hooks &&
					( ret = hooks.set( elem, value, name ) ) !== undefined ) {
					return ret;
				}
	
				return ( elem[ name ] = value );
			}
	
			if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
				return ret;
			}
	
			return elem[ name ];
		},
	
		propHooks: {
			tabIndex: {
				get: function( elem ) {
	
					// elem.tabIndex doesn't always return the
					// correct value when it hasn't been explicitly set
					// http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
					// Use proper attribute retrieval(#12072)
					var tabindex = jQuery.find.attr( elem, "tabindex" );
	
					return tabindex ?
						parseInt( tabindex, 10 ) :
						rfocusable.test( elem.nodeName ) ||
							rclickable.test( elem.nodeName ) && elem.href ?
								0 :
								-1;
				}
			}
		},
	
		propFix: {
			"for": "htmlFor",
			"class": "className"
		}
	} );
	
	// Support: IE <=11 only
	// Accessing the selectedIndex property
	// forces the browser to respect setting selected
	// on the option
	// The getter ensures a default option is selected
	// when in an optgroup
	if ( !support.optSelected ) {
		jQuery.propHooks.selected = {
			get: function( elem ) {
				var parent = elem.parentNode;
				if ( parent && parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
				return null;
			},
			set: function( elem ) {
				var parent = elem.parentNode;
				if ( parent ) {
					parent.selectedIndex;
	
					if ( parent.parentNode ) {
						parent.parentNode.selectedIndex;
					}
				}
			}
		};
	}
	
	jQuery.each( [
		"tabIndex",
		"readOnly",
		"maxLength",
		"cellSpacing",
		"cellPadding",
		"rowSpan",
		"colSpan",
		"useMap",
		"frameBorder",
		"contentEditable"
	], function() {
		jQuery.propFix[ this.toLowerCase() ] = this;
	} );
	
	
	
	
	var rclass = /[\t\r\n\f]/g;
	
	function getClass( elem ) {
		return elem.getAttribute && elem.getAttribute( "class" ) || "";
	}
	
	jQuery.fn.extend( {
		addClass: function( value ) {
			var classes, elem, cur, curValue, clazz, j, finalValue,
				i = 0;
	
			if ( jQuery.isFunction( value ) ) {
				return this.each( function( j ) {
					jQuery( this ).addClass( value.call( this, j, getClass( this ) ) );
				} );
			}
	
			if ( typeof value === "string" && value ) {
				classes = value.match( rnotwhite ) || [];
	
				while ( ( elem = this[ i++ ] ) ) {
					curValue = getClass( elem );
					cur = elem.nodeType === 1 &&
						( " " + curValue + " " ).replace( rclass, " " );
	
					if ( cur ) {
						j = 0;
						while ( ( clazz = classes[ j++ ] ) ) {
							if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
								cur += clazz + " ";
							}
						}
	
						// Only assign if different to avoid unneeded rendering.
						finalValue = jQuery.trim( cur );
						if ( curValue !== finalValue ) {
							elem.setAttribute( "class", finalValue );
						}
					}
				}
			}
	
			return this;
		},
	
		removeClass: function( value ) {
			var classes, elem, cur, curValue, clazz, j, finalValue,
				i = 0;
	
			if ( jQuery.isFunction( value ) ) {
				return this.each( function( j ) {
					jQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );
				} );
			}
	
			if ( !arguments.length ) {
				return this.attr( "class", "" );
			}
	
			if ( typeof value === "string" && value ) {
				classes = value.match( rnotwhite ) || [];
	
				while ( ( elem = this[ i++ ] ) ) {
					curValue = getClass( elem );
	
					// This expression is here for better compressibility (see addClass)
					cur = elem.nodeType === 1 &&
						( " " + curValue + " " ).replace( rclass, " " );
	
					if ( cur ) {
						j = 0;
						while ( ( clazz = classes[ j++ ] ) ) {
	
							// Remove *all* instances
							while ( cur.indexOf( " " + clazz + " " ) > -1 ) {
								cur = cur.replace( " " + clazz + " ", " " );
							}
						}
	
						// Only assign if different to avoid unneeded rendering.
						finalValue = jQuery.trim( cur );
						if ( curValue !== finalValue ) {
							elem.setAttribute( "class", finalValue );
						}
					}
				}
			}
	
			return this;
		},
	
		toggleClass: function( value, stateVal ) {
			var type = typeof value;
	
			if ( typeof stateVal === "boolean" && type === "string" ) {
				return stateVal ? this.addClass( value ) : this.removeClass( value );
			}
	
			if ( jQuery.isFunction( value ) ) {
				return this.each( function( i ) {
					jQuery( this ).toggleClass(
						value.call( this, i, getClass( this ), stateVal ),
						stateVal
					);
				} );
			}
	
			return this.each( function() {
				var className, i, self, classNames;
	
				if ( type === "string" ) {
	
					// Toggle individual class names
					i = 0;
					self = jQuery( this );
					classNames = value.match( rnotwhite ) || [];
	
					while ( ( className = classNames[ i++ ] ) ) {
	
						// Check each className given, space separated list
						if ( self.hasClass( className ) ) {
							self.removeClass( className );
						} else {
							self.addClass( className );
						}
					}
	
				// Toggle whole class name
				} else if ( value === undefined || type === "boolean" ) {
					className = getClass( this );
					if ( className ) {
	
						// Store className if set
						dataPriv.set( this, "__className__", className );
					}
	
					// If the element has a class name or if we're passed `false`,
					// then remove the whole classname (if there was one, the above saved it).
					// Otherwise bring back whatever was previously saved (if anything),
					// falling back to the empty string if nothing was stored.
					if ( this.setAttribute ) {
						this.setAttribute( "class",
							className || value === false ?
							"" :
							dataPriv.get( this, "__className__" ) || ""
						);
					}
				}
			} );
		},
	
		hasClass: function( selector ) {
			var className, elem,
				i = 0;
	
			className = " " + selector + " ";
			while ( ( elem = this[ i++ ] ) ) {
				if ( elem.nodeType === 1 &&
					( " " + getClass( elem ) + " " ).replace( rclass, " " )
						.indexOf( className ) > -1
				) {
					return true;
				}
			}
	
			return false;
		}
	} );
	
	
	
	
	var rreturn = /\r/g,
		rspaces = /[\x20\t\r\n\f]+/g;
	
	jQuery.fn.extend( {
		val: function( value ) {
			var hooks, ret, isFunction,
				elem = this[ 0 ];
	
			if ( !arguments.length ) {
				if ( elem ) {
					hooks = jQuery.valHooks[ elem.type ] ||
						jQuery.valHooks[ elem.nodeName.toLowerCase() ];
	
					if ( hooks &&
						"get" in hooks &&
						( ret = hooks.get( elem, "value" ) ) !== undefined
					) {
						return ret;
					}
	
					ret = elem.value;
	
					return typeof ret === "string" ?
	
						// Handle most common string cases
						ret.replace( rreturn, "" ) :
	
						// Handle cases where value is null/undef or number
						ret == null ? "" : ret;
				}
	
				return;
			}
	
			isFunction = jQuery.isFunction( value );
	
			return this.each( function( i ) {
				var val;
	
				if ( this.nodeType !== 1 ) {
					return;
				}
	
				if ( isFunction ) {
					val = value.call( this, i, jQuery( this ).val() );
				} else {
					val = value;
				}
	
				// Treat null/undefined as ""; convert numbers to string
				if ( val == null ) {
					val = "";
	
				} else if ( typeof val === "number" ) {
					val += "";
	
				} else if ( jQuery.isArray( val ) ) {
					val = jQuery.map( val, function( value ) {
						return value == null ? "" : value + "";
					} );
				}
	
				hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];
	
				// If set returns undefined, fall back to normal setting
				if ( !hooks || !( "set" in hooks ) || hooks.set( this, val, "value" ) === undefined ) {
					this.value = val;
				}
			} );
		}
	} );
	
	jQuery.extend( {
		valHooks: {
			option: {
				get: function( elem ) {
	
					var val = jQuery.find.attr( elem, "value" );
					return val != null ?
						val :
	
						// Support: IE10-11+
						// option.text throws exceptions (#14686, #14858)
						// Strip and collapse whitespace
						// https://html.spec.whatwg.org/#strip-and-collapse-whitespace
						jQuery.trim( jQuery.text( elem ) ).replace( rspaces, " " );
				}
			},
			select: {
				get: function( elem ) {
					var value, option,
						options = elem.options,
						index = elem.selectedIndex,
						one = elem.type === "select-one" || index < 0,
						values = one ? null : [],
						max = one ? index + 1 : options.length,
						i = index < 0 ?
							max :
							one ? index : 0;
	
					// Loop through all the selected options
					for ( ; i < max; i++ ) {
						option = options[ i ];
	
						// IE8-9 doesn't update selected after form reset (#2551)
						if ( ( option.selected || i === index ) &&
	
								// Don't return options that are disabled or in a disabled optgroup
								( support.optDisabled ?
									!option.disabled : option.getAttribute( "disabled" ) === null ) &&
								( !option.parentNode.disabled ||
									!jQuery.nodeName( option.parentNode, "optgroup" ) ) ) {
	
							// Get the specific value for the option
							value = jQuery( option ).val();
	
							// We don't need an array for one selects
							if ( one ) {
								return value;
							}
	
							// Multi-Selects return an array
							values.push( value );
						}
					}
	
					return values;
				},
	
				set: function( elem, value ) {
					var optionSet, option,
						options = elem.options,
						values = jQuery.makeArray( value ),
						i = options.length;
	
					while ( i-- ) {
						option = options[ i ];
						if ( option.selected =
							jQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1
						) {
							optionSet = true;
						}
					}
	
					// Force browsers to behave consistently when non-matching value is set
					if ( !optionSet ) {
						elem.selectedIndex = -1;
					}
					return values;
				}
			}
		}
	} );
	
	// Radios and checkboxes getter/setter
	jQuery.each( [ "radio", "checkbox" ], function() {
		jQuery.valHooks[ this ] = {
			set: function( elem, value ) {
				if ( jQuery.isArray( value ) ) {
					return ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );
				}
			}
		};
		if ( !support.checkOn ) {
			jQuery.valHooks[ this ].get = function( elem ) {
				return elem.getAttribute( "value" ) === null ? "on" : elem.value;
			};
		}
	} );
	
	
	
	
	// Return jQuery for attributes-only inclusion
	
	
	var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/;
	
	jQuery.extend( jQuery.event, {
	
		trigger: function( event, data, elem, onlyHandlers ) {
	
			var i, cur, tmp, bubbleType, ontype, handle, special,
				eventPath = [ elem || document ],
				type = hasOwn.call( event, "type" ) ? event.type : event,
				namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split( "." ) : [];
	
			cur = tmp = elem = elem || document;
	
			// Don't do events on text and comment nodes
			if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
				return;
			}
	
			// focus/blur morphs to focusin/out; ensure we're not firing them right now
			if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
				return;
			}
	
			if ( type.indexOf( "." ) > -1 ) {
	
				// Namespaced trigger; create a regexp to match event type in handle()
				namespaces = type.split( "." );
				type = namespaces.shift();
				namespaces.sort();
			}
			ontype = type.indexOf( ":" ) < 0 && "on" + type;
	
			// Caller can pass in a jQuery.Event object, Object, or just an event type string
			event = event[ jQuery.expando ] ?
				event :
				new jQuery.Event( type, typeof event === "object" && event );
	
			// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
			event.isTrigger = onlyHandlers ? 2 : 3;
			event.namespace = namespaces.join( "." );
			event.rnamespace = event.namespace ?
				new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" ) :
				null;
	
			// Clean up the event in case it is being reused
			event.result = undefined;
			if ( !event.target ) {
				event.target = elem;
			}
	
			// Clone any incoming data and prepend the event, creating the handler arg list
			data = data == null ?
				[ event ] :
				jQuery.makeArray( data, [ event ] );
	
			// Allow special events to draw outside the lines
			special = jQuery.event.special[ type ] || {};
			if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
				return;
			}
	
			// Determine event propagation path in advance, per W3C events spec (#9951)
			// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
			if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {
	
				bubbleType = special.delegateType || type;
				if ( !rfocusMorph.test( bubbleType + type ) ) {
					cur = cur.parentNode;
				}
				for ( ; cur; cur = cur.parentNode ) {
					eventPath.push( cur );
					tmp = cur;
				}
	
				// Only add window if we got to document (e.g., not plain obj or detached DOM)
				if ( tmp === ( elem.ownerDocument || document ) ) {
					eventPath.push( tmp.defaultView || tmp.parentWindow || window );
				}
			}
	
			// Fire handlers on the event path
			i = 0;
			while ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {
	
				event.type = i > 1 ?
					bubbleType :
					special.bindType || type;
	
				// jQuery handler
				handle = ( dataPriv.get( cur, "events" ) || {} )[ event.type ] &&
					dataPriv.get( cur, "handle" );
				if ( handle ) {
					handle.apply( cur, data );
				}
	
				// Native handler
				handle = ontype && cur[ ontype ];
				if ( handle && handle.apply && acceptData( cur ) ) {
					event.result = handle.apply( cur, data );
					if ( event.result === false ) {
						event.preventDefault();
					}
				}
			}
			event.type = type;
	
			// If nobody prevented the default action, do it now
			if ( !onlyHandlers && !event.isDefaultPrevented() ) {
	
				if ( ( !special._default ||
					special._default.apply( eventPath.pop(), data ) === false ) &&
					acceptData( elem ) ) {
	
					// Call a native DOM method on the target with the same name name as the event.
					// Don't do default actions on window, that's where global variables be (#6170)
					if ( ontype && jQuery.isFunction( elem[ type ] ) && !jQuery.isWindow( elem ) ) {
	
						// Don't re-trigger an onFOO event when we call its FOO() method
						tmp = elem[ ontype ];
	
						if ( tmp ) {
							elem[ ontype ] = null;
						}
	
						// Prevent re-triggering of the same event, since we already bubbled it above
						jQuery.event.triggered = type;
						elem[ type ]();
						jQuery.event.triggered = undefined;
	
						if ( tmp ) {
							elem[ ontype ] = tmp;
						}
					}
				}
			}
	
			return event.result;
		},
	
		// Piggyback on a donor event to simulate a different one
		simulate: function( type, elem, event ) {
			var e = jQuery.extend(
				new jQuery.Event(),
				event,
				{
					type: type,
					isSimulated: true
	
					// Previously, `originalEvent: {}` was set here, so stopPropagation call
					// would not be triggered on donor event, since in our own
					// jQuery.event.stopPropagation function we had a check for existence of
					// originalEvent.stopPropagation method, so, consequently it would be a noop.
					//
					// But now, this "simulate" function is used only for events
					// for which stopPropagation() is noop, so there is no need for that anymore.
					//
					// For the 1.x branch though, guard for "click" and "submit"
					// events is still used, but was moved to jQuery.event.stopPropagation function
					// because `originalEvent` should point to the original event for the constancy
					// with other events and for more focused logic
				}
			);
	
			jQuery.event.trigger( e, null, elem );
	
			if ( e.isDefaultPrevented() ) {
				event.preventDefault();
			}
		}
	
	} );
	
	jQuery.fn.extend( {
	
		trigger: function( type, data ) {
			return this.each( function() {
				jQuery.event.trigger( type, data, this );
			} );
		},
		triggerHandler: function( type, data ) {
			var elem = this[ 0 ];
			if ( elem ) {
				return jQuery.event.trigger( type, data, elem, true );
			}
		}
	} );
	
	
	jQuery.each( ( "blur focus focusin focusout load resize scroll unload click dblclick " +
		"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
		"change select submit keydown keypress keyup error contextmenu" ).split( " " ),
		function( i, name ) {
	
		// Handle event binding
		jQuery.fn[ name ] = function( data, fn ) {
			return arguments.length > 0 ?
				this.on( name, null, data, fn ) :
				this.trigger( name );
		};
	} );
	
	jQuery.fn.extend( {
		hover: function( fnOver, fnOut ) {
			return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
		}
	} );
	
	
	
	
	support.focusin = "onfocusin" in window;
	
	
	// Support: Firefox
	// Firefox doesn't have focus(in | out) events
	// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
	//
	// Support: Chrome, Safari
	// focus(in | out) events fire after focus & blur events,
	// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
	// Related ticket - https://code.google.com/p/chromium/issues/detail?id=449857
	if ( !support.focusin ) {
		jQuery.each( { focus: "focusin", blur: "focusout" }, function( orig, fix ) {
	
			// Attach a single capturing handler on the document while someone wants focusin/focusout
			var handler = function( event ) {
				jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );
			};
	
			jQuery.event.special[ fix ] = {
				setup: function() {
					var doc = this.ownerDocument || this,
						attaches = dataPriv.access( doc, fix );
	
					if ( !attaches ) {
						doc.addEventListener( orig, handler, true );
					}
					dataPriv.access( doc, fix, ( attaches || 0 ) + 1 );
				},
				teardown: function() {
					var doc = this.ownerDocument || this,
						attaches = dataPriv.access( doc, fix ) - 1;
	
					if ( !attaches ) {
						doc.removeEventListener( orig, handler, true );
						dataPriv.remove( doc, fix );
	
					} else {
						dataPriv.access( doc, fix, attaches );
					}
				}
			};
		} );
	}
	var location = window.location;
	
	var nonce = jQuery.now();
	
	var rquery = ( /\?/ );
	
	
	
	// Support: Android 2.3
	// Workaround failure to string-cast null input
	jQuery.parseJSON = function( data ) {
		return JSON.parse( data + "" );
	};
	
	
	// Cross-browser xml parsing
	jQuery.parseXML = function( data ) {
		var xml;
		if ( !data || typeof data !== "string" ) {
			return null;
		}
	
		// Support: IE9
		try {
			xml = ( new window.DOMParser() ).parseFromString( data, "text/xml" );
		} catch ( e ) {
			xml = undefined;
		}
	
		if ( !xml || xml.getElementsByTagName( "parsererror" ).length ) {
			jQuery.error( "Invalid XML: " + data );
		}
		return xml;
	};
	
	
	var
		rhash = /#.*$/,
		rts = /([?&])_=[^&]*/,
		rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,
	
		// #7653, #8125, #8152: local protocol detection
		rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
		rnoContent = /^(?:GET|HEAD)$/,
		rprotocol = /^\/\//,
	
		/* Prefilters
		 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
		 * 2) These are called:
		 *    - BEFORE asking for a transport
		 *    - AFTER param serialization (s.data is a string if s.processData is true)
		 * 3) key is the dataType
		 * 4) the catchall symbol "*" can be used
		 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
		 */
		prefilters = {},
	
		/* Transports bindings
		 * 1) key is the dataType
		 * 2) the catchall symbol "*" can be used
		 * 3) selection will start with transport dataType and THEN go to "*" if needed
		 */
		transports = {},
	
		// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
		allTypes = "*/".concat( "*" ),
	
		// Anchor tag for parsing the document origin
		originAnchor = document.createElement( "a" );
		originAnchor.href = location.href;
	
	// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
	function addToPrefiltersOrTransports( structure ) {
	
		// dataTypeExpression is optional and defaults to "*"
		return function( dataTypeExpression, func ) {
	
			if ( typeof dataTypeExpression !== "string" ) {
				func = dataTypeExpression;
				dataTypeExpression = "*";
			}
	
			var dataType,
				i = 0,
				dataTypes = dataTypeExpression.toLowerCase().match( rnotwhite ) || [];
	
			if ( jQuery.isFunction( func ) ) {
	
				// For each dataType in the dataTypeExpression
				while ( ( dataType = dataTypes[ i++ ] ) ) {
	
					// Prepend if requested
					if ( dataType[ 0 ] === "+" ) {
						dataType = dataType.slice( 1 ) || "*";
						( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );
	
					// Otherwise append
					} else {
						( structure[ dataType ] = structure[ dataType ] || [] ).push( func );
					}
				}
			}
		};
	}
	
	// Base inspection function for prefilters and transports
	function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {
	
		var inspected = {},
			seekingTransport = ( structure === transports );
	
		function inspect( dataType ) {
			var selected;
			inspected[ dataType ] = true;
			jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
				var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
				if ( typeof dataTypeOrTransport === "string" &&
					!seekingTransport && !inspected[ dataTypeOrTransport ] ) {
	
					options.dataTypes.unshift( dataTypeOrTransport );
					inspect( dataTypeOrTransport );
					return false;
				} else if ( seekingTransport ) {
					return !( selected = dataTypeOrTransport );
				}
			} );
			return selected;
		}
	
		return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
	}
	
	// A special extend for ajax options
	// that takes "flat" options (not to be deep extended)
	// Fixes #9887
	function ajaxExtend( target, src ) {
		var key, deep,
			flatOptions = jQuery.ajaxSettings.flatOptions || {};
	
		for ( key in src ) {
			if ( src[ key ] !== undefined ) {
				( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
			}
		}
		if ( deep ) {
			jQuery.extend( true, target, deep );
		}
	
		return target;
	}
	
	/* Handles responses to an ajax request:
	 * - finds the right dataType (mediates between content-type and expected dataType)
	 * - returns the corresponding response
	 */
	function ajaxHandleResponses( s, jqXHR, responses ) {
	
		var ct, type, finalDataType, firstDataType,
			contents = s.contents,
			dataTypes = s.dataTypes;
	
		// Remove auto dataType and get content-type in the process
		while ( dataTypes[ 0 ] === "*" ) {
			dataTypes.shift();
			if ( ct === undefined ) {
				ct = s.mimeType || jqXHR.getResponseHeader( "Content-Type" );
			}
		}
	
		// Check if we're dealing with a known content-type
		if ( ct ) {
			for ( type in contents ) {
				if ( contents[ type ] && contents[ type ].test( ct ) ) {
					dataTypes.unshift( type );
					break;
				}
			}
		}
	
		// Check to see if we have a response for the expected dataType
		if ( dataTypes[ 0 ] in responses ) {
			finalDataType = dataTypes[ 0 ];
		} else {
	
			// Try convertible dataTypes
			for ( type in responses ) {
				if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[ 0 ] ] ) {
					finalDataType = type;
					break;
				}
				if ( !firstDataType ) {
					firstDataType = type;
				}
			}
	
			// Or just use first one
			finalDataType = finalDataType || firstDataType;
		}
	
		// If we found a dataType
		// We add the dataType to the list if needed
		// and return the corresponding response
		if ( finalDataType ) {
			if ( finalDataType !== dataTypes[ 0 ] ) {
				dataTypes.unshift( finalDataType );
			}
			return responses[ finalDataType ];
		}
	}
	
	/* Chain conversions given the request and the original response
	 * Also sets the responseXXX fields on the jqXHR instance
	 */
	function ajaxConvert( s, response, jqXHR, isSuccess ) {
		var conv2, current, conv, tmp, prev,
			converters = {},
	
			// Work with a copy of dataTypes in case we need to modify it for conversion
			dataTypes = s.dataTypes.slice();
	
		// Create converters map with lowercased keys
		if ( dataTypes[ 1 ] ) {
			for ( conv in s.converters ) {
				converters[ conv.toLowerCase() ] = s.converters[ conv ];
			}
		}
	
		current = dataTypes.shift();
	
		// Convert to each sequential dataType
		while ( current ) {
	
			if ( s.responseFields[ current ] ) {
				jqXHR[ s.responseFields[ current ] ] = response;
			}
	
			// Apply the dataFilter if provided
			if ( !prev && isSuccess && s.dataFilter ) {
				response = s.dataFilter( response, s.dataType );
			}
	
			prev = current;
			current = dataTypes.shift();
	
			if ( current ) {
	
			// There's only work to do if current dataType is non-auto
				if ( current === "*" ) {
	
					current = prev;
	
				// Convert response if prev dataType is non-auto and differs from current
				} else if ( prev !== "*" && prev !== current ) {
	
					// Seek a direct converter
					conv = converters[ prev + " " + current ] || converters[ "* " + current ];
	
					// If none found, seek a pair
					if ( !conv ) {
						for ( conv2 in converters ) {
	
							// If conv2 outputs current
							tmp = conv2.split( " " );
							if ( tmp[ 1 ] === current ) {
	
								// If prev can be converted to accepted input
								conv = converters[ prev + " " + tmp[ 0 ] ] ||
									converters[ "* " + tmp[ 0 ] ];
								if ( conv ) {
	
									// Condense equivalence converters
									if ( conv === true ) {
										conv = converters[ conv2 ];
	
									// Otherwise, insert the intermediate dataType
									} else if ( converters[ conv2 ] !== true ) {
										current = tmp[ 0 ];
										dataTypes.unshift( tmp[ 1 ] );
									}
									break;
								}
							}
						}
					}
	
					// Apply converter (if not an equivalence)
					if ( conv !== true ) {
	
						// Unless errors are allowed to bubble, catch and return them
						if ( conv && s.throws ) {
							response = conv( response );
						} else {
							try {
								response = conv( response );
							} catch ( e ) {
								return {
									state: "parsererror",
									error: conv ? e : "No conversion from " + prev + " to " + current
								};
							}
						}
					}
				}
			}
		}
	
		return { state: "success", data: response };
	}
	
	jQuery.extend( {
	
		// Counter for holding the number of active queries
		active: 0,
	
		// Last-Modified header cache for next request
		lastModified: {},
		etag: {},
	
		ajaxSettings: {
			url: location.href,
			type: "GET",
			isLocal: rlocalProtocol.test( location.protocol ),
			global: true,
			processData: true,
			async: true,
			contentType: "application/x-www-form-urlencoded; charset=UTF-8",
			/*
			timeout: 0,
			data: null,
			dataType: null,
			username: null,
			password: null,
			cache: null,
			throws: false,
			traditional: false,
			headers: {},
			*/
	
			accepts: {
				"*": allTypes,
				text: "text/plain",
				html: "text/html",
				xml: "application/xml, text/xml",
				json: "application/json, text/javascript"
			},
	
			contents: {
				xml: /\bxml\b/,
				html: /\bhtml/,
				json: /\bjson\b/
			},
	
			responseFields: {
				xml: "responseXML",
				text: "responseText",
				json: "responseJSON"
			},
	
			// Data converters
			// Keys separate source (or catchall "*") and destination types with a single space
			converters: {
	
				// Convert anything to text
				"* text": String,
	
				// Text to html (true = no transformation)
				"text html": true,
	
				// Evaluate text as a json expression
				"text json": jQuery.parseJSON,
	
				// Parse text as xml
				"text xml": jQuery.parseXML
			},
	
			// For options that shouldn't be deep extended:
			// you can add your own custom options here if
			// and when you create one that shouldn't be
			// deep extended (see ajaxExtend)
			flatOptions: {
				url: true,
				context: true
			}
		},
	
		// Creates a full fledged settings object into target
		// with both ajaxSettings and settings fields.
		// If target is omitted, writes into ajaxSettings.
		ajaxSetup: function( target, settings ) {
			return settings ?
	
				// Building a settings object
				ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :
	
				// Extending ajaxSettings
				ajaxExtend( jQuery.ajaxSettings, target );
		},
	
		ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
		ajaxTransport: addToPrefiltersOrTransports( transports ),
	
		// Main method
		ajax: function( url, options ) {
	
			// If url is an object, simulate pre-1.5 signature
			if ( typeof url === "object" ) {
				options = url;
				url = undefined;
			}
	
			// Force options to be an object
			options = options || {};
	
			var transport,
	
				// URL without anti-cache param
				cacheURL,
	
				// Response headers
				responseHeadersString,
				responseHeaders,
	
				// timeout handle
				timeoutTimer,
	
				// Url cleanup var
				urlAnchor,
	
				// To know if global events are to be dispatched
				fireGlobals,
	
				// Loop variable
				i,
	
				// Create the final options object
				s = jQuery.ajaxSetup( {}, options ),
	
				// Callbacks context
				callbackContext = s.context || s,
	
				// Context for global events is callbackContext if it is a DOM node or jQuery collection
				globalEventContext = s.context &&
					( callbackContext.nodeType || callbackContext.jquery ) ?
						jQuery( callbackContext ) :
						jQuery.event,
	
				// Deferreds
				deferred = jQuery.Deferred(),
				completeDeferred = jQuery.Callbacks( "once memory" ),
	
				// Status-dependent callbacks
				statusCode = s.statusCode || {},
	
				// Headers (they are sent all at once)
				requestHeaders = {},
				requestHeadersNames = {},
	
				// The jqXHR state
				state = 0,
	
				// Default abort message
				strAbort = "canceled",
	
				// Fake xhr
				jqXHR = {
					readyState: 0,
	
					// Builds headers hashtable if needed
					getResponseHeader: function( key ) {
						var match;
						if ( state === 2 ) {
							if ( !responseHeaders ) {
								responseHeaders = {};
								while ( ( match = rheaders.exec( responseHeadersString ) ) ) {
									responseHeaders[ match[ 1 ].toLowerCase() ] = match[ 2 ];
								}
							}
							match = responseHeaders[ key.toLowerCase() ];
						}
						return match == null ? null : match;
					},
	
					// Raw string
					getAllResponseHeaders: function() {
						return state === 2 ? responseHeadersString : null;
					},
	
					// Caches the header
					setRequestHeader: function( name, value ) {
						var lname = name.toLowerCase();
						if ( !state ) {
							name = requestHeadersNames[ lname ] = requestHeadersNames[ lname ] || name;
							requestHeaders[ name ] = value;
						}
						return this;
					},
	
					// Overrides response content-type header
					overrideMimeType: function( type ) {
						if ( !state ) {
							s.mimeType = type;
						}
						return this;
					},
	
					// Status-dependent callbacks
					statusCode: function( map ) {
						var code;
						if ( map ) {
							if ( state < 2 ) {
								for ( code in map ) {
	
									// Lazy-add the new callback in a way that preserves old ones
									statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
								}
							} else {
	
								// Execute the appropriate callbacks
								jqXHR.always( map[ jqXHR.status ] );
							}
						}
						return this;
					},
	
					// Cancel the request
					abort: function( statusText ) {
						var finalText = statusText || strAbort;
						if ( transport ) {
							transport.abort( finalText );
						}
						done( 0, finalText );
						return this;
					}
				};
	
			// Attach deferreds
			deferred.promise( jqXHR ).complete = completeDeferred.add;
			jqXHR.success = jqXHR.done;
			jqXHR.error = jqXHR.fail;
	
			// Remove hash character (#7531: and string promotion)
			// Add protocol if not provided (prefilters might expect it)
			// Handle falsy url in the settings object (#10093: consistency with old signature)
			// We also use the url parameter if available
			s.url = ( ( url || s.url || location.href ) + "" ).replace( rhash, "" )
				.replace( rprotocol, location.protocol + "//" );
	
			// Alias method option to type as per ticket #12004
			s.type = options.method || options.type || s.method || s.type;
	
			// Extract dataTypes list
			s.dataTypes = jQuery.trim( s.dataType || "*" ).toLowerCase().match( rnotwhite ) || [ "" ];
	
			// A cross-domain request is in order when the origin doesn't match the current origin.
			if ( s.crossDomain == null ) {
				urlAnchor = document.createElement( "a" );
	
				// Support: IE8-11+
				// IE throws exception if url is malformed, e.g. http://example.com:80x/
				try {
					urlAnchor.href = s.url;
	
					// Support: IE8-11+
					// Anchor's host property isn't correctly set when s.url is relative
					urlAnchor.href = urlAnchor.href;
					s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !==
						urlAnchor.protocol + "//" + urlAnchor.host;
				} catch ( e ) {
	
					// If there is an error parsing the URL, assume it is crossDomain,
					// it can be rejected by the transport if it is invalid
					s.crossDomain = true;
				}
			}
	
			// Convert data if not already a string
			if ( s.data && s.processData && typeof s.data !== "string" ) {
				s.data = jQuery.param( s.data, s.traditional );
			}
	
			// Apply prefilters
			inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );
	
			// If request was aborted inside a prefilter, stop there
			if ( state === 2 ) {
				return jqXHR;
			}
	
			// We can fire global events as of now if asked to
			// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
			fireGlobals = jQuery.event && s.global;
	
			// Watch for a new set of requests
			if ( fireGlobals && jQuery.active++ === 0 ) {
				jQuery.event.trigger( "ajaxStart" );
			}
	
			// Uppercase the type
			s.type = s.type.toUpperCase();
	
			// Determine if request has content
			s.hasContent = !rnoContent.test( s.type );
	
			// Save the URL in case we're toying with the If-Modified-Since
			// and/or If-None-Match header later on
			cacheURL = s.url;
	
			// More options handling for requests with no content
			if ( !s.hasContent ) {
	
				// If data is available, append data to url
				if ( s.data ) {
					cacheURL = ( s.url += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data );
	
					// #9682: remove data so that it's not used in an eventual retry
					delete s.data;
				}
	
				// Add anti-cache in url if needed
				if ( s.cache === false ) {
					s.url = rts.test( cacheURL ) ?
	
						// If there is already a '_' parameter, set its value
						cacheURL.replace( rts, "$1_=" + nonce++ ) :
	
						// Otherwise add one to the end
						cacheURL + ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + nonce++;
				}
			}
	
			// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
			if ( s.ifModified ) {
				if ( jQuery.lastModified[ cacheURL ] ) {
					jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
				}
				if ( jQuery.etag[ cacheURL ] ) {
					jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
				}
			}
	
			// Set the correct header, if data is being sent
			if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
				jqXHR.setRequestHeader( "Content-Type", s.contentType );
			}
	
			// Set the Accepts header for the server, depending on the dataType
			jqXHR.setRequestHeader(
				"Accept",
				s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?
					s.accepts[ s.dataTypes[ 0 ] ] +
						( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
					s.accepts[ "*" ]
			);
	
			// Check for headers option
			for ( i in s.headers ) {
				jqXHR.setRequestHeader( i, s.headers[ i ] );
			}
	
			// Allow custom headers/mimetypes and early abort
			if ( s.beforeSend &&
				( s.beforeSend.call( callbackContext, jqXHR, s ) === false || state === 2 ) ) {
	
				// Abort if not done already and return
				return jqXHR.abort();
			}
	
			// Aborting is no longer a cancellation
			strAbort = "abort";
	
			// Install callbacks on deferreds
			for ( i in { success: 1, error: 1, complete: 1 } ) {
				jqXHR[ i ]( s[ i ] );
			}
	
			// Get transport
			transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );
	
			// If no transport, we auto-abort
			if ( !transport ) {
				done( -1, "No Transport" );
			} else {
				jqXHR.readyState = 1;
	
				// Send global event
				if ( fireGlobals ) {
					globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
				}
	
				// If request was aborted inside ajaxSend, stop there
				if ( state === 2 ) {
					return jqXHR;
				}
	
				// Timeout
				if ( s.async && s.timeout > 0 ) {
					timeoutTimer = window.setTimeout( function() {
						jqXHR.abort( "timeout" );
					}, s.timeout );
				}
	
				try {
					state = 1;
					transport.send( requestHeaders, done );
				} catch ( e ) {
	
					// Propagate exception as error if not done
					if ( state < 2 ) {
						done( -1, e );
	
					// Simply rethrow otherwise
					} else {
						throw e;
					}
				}
			}
	
			// Callback for when everything is done
			function done( status, nativeStatusText, responses, headers ) {
				var isSuccess, success, error, response, modified,
					statusText = nativeStatusText;
	
				// Called once
				if ( state === 2 ) {
					return;
				}
	
				// State is "done" now
				state = 2;
	
				// Clear timeout if it exists
				if ( timeoutTimer ) {
					window.clearTimeout( timeoutTimer );
				}
	
				// Dereference transport for early garbage collection
				// (no matter how long the jqXHR object will be used)
				transport = undefined;
	
				// Cache response headers
				responseHeadersString = headers || "";
	
				// Set readyState
				jqXHR.readyState = status > 0 ? 4 : 0;
	
				// Determine if successful
				isSuccess = status >= 200 && status < 300 || status === 304;
	
				// Get response data
				if ( responses ) {
					response = ajaxHandleResponses( s, jqXHR, responses );
				}
	
				// Convert no matter what (that way responseXXX fields are always set)
				response = ajaxConvert( s, response, jqXHR, isSuccess );
	
				// If successful, handle type chaining
				if ( isSuccess ) {
	
					// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
					if ( s.ifModified ) {
						modified = jqXHR.getResponseHeader( "Last-Modified" );
						if ( modified ) {
							jQuery.lastModified[ cacheURL ] = modified;
						}
						modified = jqXHR.getResponseHeader( "etag" );
						if ( modified ) {
							jQuery.etag[ cacheURL ] = modified;
						}
					}
	
					// if no content
					if ( status === 204 || s.type === "HEAD" ) {
						statusText = "nocontent";
	
					// if not modified
					} else if ( status === 304 ) {
						statusText = "notmodified";
	
					// If we have data, let's convert it
					} else {
						statusText = response.state;
						success = response.data;
						error = response.error;
						isSuccess = !error;
					}
				} else {
	
					// Extract error from statusText and normalize for non-aborts
					error = statusText;
					if ( status || !statusText ) {
						statusText = "error";
						if ( status < 0 ) {
							status = 0;
						}
					}
				}
	
				// Set data for the fake xhr object
				jqXHR.status = status;
				jqXHR.statusText = ( nativeStatusText || statusText ) + "";
	
				// Success/Error
				if ( isSuccess ) {
					deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
				} else {
					deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
				}
	
				// Status-dependent callbacks
				jqXHR.statusCode( statusCode );
				statusCode = undefined;
	
				if ( fireGlobals ) {
					globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
						[ jqXHR, s, isSuccess ? success : error ] );
				}
	
				// Complete
				completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );
	
				if ( fireGlobals ) {
					globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );
	
					// Handle the global AJAX counter
					if ( !( --jQuery.active ) ) {
						jQuery.event.trigger( "ajaxStop" );
					}
				}
			}
	
			return jqXHR;
		},
	
		getJSON: function( url, data, callback ) {
			return jQuery.get( url, data, callback, "json" );
		},
	
		getScript: function( url, callback ) {
			return jQuery.get( url, undefined, callback, "script" );
		}
	} );
	
	jQuery.each( [ "get", "post" ], function( i, method ) {
		jQuery[ method ] = function( url, data, callback, type ) {
	
			// Shift arguments if data argument was omitted
			if ( jQuery.isFunction( data ) ) {
				type = type || callback;
				callback = data;
				data = undefined;
			}
	
			// The url can be an options object (which then must have .url)
			return jQuery.ajax( jQuery.extend( {
				url: url,
				type: method,
				dataType: type,
				data: data,
				success: callback
			}, jQuery.isPlainObject( url ) && url ) );
		};
	} );
	
	
	jQuery._evalUrl = function( url ) {
		return jQuery.ajax( {
			url: url,
	
			// Make this explicit, since user can override this through ajaxSetup (#11264)
			type: "GET",
			dataType: "script",
			async: false,
			global: false,
			"throws": true
		} );
	};
	
	
	jQuery.fn.extend( {
		wrapAll: function( html ) {
			var wrap;
	
			if ( jQuery.isFunction( html ) ) {
				return this.each( function( i ) {
					jQuery( this ).wrapAll( html.call( this, i ) );
				} );
			}
	
			if ( this[ 0 ] ) {
	
				// The elements to wrap the target around
				wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );
	
				if ( this[ 0 ].parentNode ) {
					wrap.insertBefore( this[ 0 ] );
				}
	
				wrap.map( function() {
					var elem = this;
	
					while ( elem.firstElementChild ) {
						elem = elem.firstElementChild;
					}
	
					return elem;
				} ).append( this );
			}
	
			return this;
		},
	
		wrapInner: function( html ) {
			if ( jQuery.isFunction( html ) ) {
				return this.each( function( i ) {
					jQuery( this ).wrapInner( html.call( this, i ) );
				} );
			}
	
			return this.each( function() {
				var self = jQuery( this ),
					contents = self.contents();
	
				if ( contents.length ) {
					contents.wrapAll( html );
	
				} else {
					self.append( html );
				}
			} );
		},
	
		wrap: function( html ) {
			var isFunction = jQuery.isFunction( html );
	
			return this.each( function( i ) {
				jQuery( this ).wrapAll( isFunction ? html.call( this, i ) : html );
			} );
		},
	
		unwrap: function() {
			return this.parent().each( function() {
				if ( !jQuery.nodeName( this, "body" ) ) {
					jQuery( this ).replaceWith( this.childNodes );
				}
			} ).end();
		}
	} );
	
	
	jQuery.expr.filters.hidden = function( elem ) {
		return !jQuery.expr.filters.visible( elem );
	};
	jQuery.expr.filters.visible = function( elem ) {
	
		// Support: Opera <= 12.12
		// Opera reports offsetWidths and offsetHeights less than zero on some elements
		// Use OR instead of AND as the element is not visible if either is true
		// See tickets #10406 and #13132
		return elem.offsetWidth > 0 || elem.offsetHeight > 0 || elem.getClientRects().length > 0;
	};
	
	
	
	
	var r20 = /%20/g,
		rbracket = /\[\]$/,
		rCRLF = /\r?\n/g,
		rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
		rsubmittable = /^(?:input|select|textarea|keygen)/i;
	
	function buildParams( prefix, obj, traditional, add ) {
		var name;
	
		if ( jQuery.isArray( obj ) ) {
	
			// Serialize array item.
			jQuery.each( obj, function( i, v ) {
				if ( traditional || rbracket.test( prefix ) ) {
	
					// Treat each array item as a scalar.
					add( prefix, v );
	
				} else {
	
					// Item is non-scalar (array or object), encode its numeric index.
					buildParams(
						prefix + "[" + ( typeof v === "object" && v != null ? i : "" ) + "]",
						v,
						traditional,
						add
					);
				}
			} );
	
		} else if ( !traditional && jQuery.type( obj ) === "object" ) {
	
			// Serialize object item.
			for ( name in obj ) {
				buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
			}
	
		} else {
	
			// Serialize scalar item.
			add( prefix, obj );
		}
	}
	
	// Serialize an array of form elements or a set of
	// key/values into a query string
	jQuery.param = function( a, traditional ) {
		var prefix,
			s = [],
			add = function( key, value ) {
	
				// If value is a function, invoke it and return its value
				value = jQuery.isFunction( value ) ? value() : ( value == null ? "" : value );
				s[ s.length ] = encodeURIComponent( key ) + "=" + encodeURIComponent( value );
			};
	
		// Set traditional to true for jQuery <= 1.3.2 behavior.
		if ( traditional === undefined ) {
			traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
		}
	
		// If an array was passed in, assume that it is an array of form elements.
		if ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {
	
			// Serialize the form elements
			jQuery.each( a, function() {
				add( this.name, this.value );
			} );
	
		} else {
	
			// If traditional, encode the "old" way (the way 1.3.2 or older
			// did it), otherwise encode params recursively.
			for ( prefix in a ) {
				buildParams( prefix, a[ prefix ], traditional, add );
			}
		}
	
		// Return the resulting serialization
		return s.join( "&" ).replace( r20, "+" );
	};
	
	jQuery.fn.extend( {
		serialize: function() {
			return jQuery.param( this.serializeArray() );
		},
		serializeArray: function() {
			return this.map( function() {
	
				// Can add propHook for "elements" to filter or add form elements
				var elements = jQuery.prop( this, "elements" );
				return elements ? jQuery.makeArray( elements ) : this;
			} )
			.filter( function() {
				var type = this.type;
	
				// Use .is( ":disabled" ) so that fieldset[disabled] works
				return this.name && !jQuery( this ).is( ":disabled" ) &&
					rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
					( this.checked || !rcheckableType.test( type ) );
			} )
			.map( function( i, elem ) {
				var val = jQuery( this ).val();
	
				return val == null ?
					null :
					jQuery.isArray( val ) ?
						jQuery.map( val, function( val ) {
							return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
						} ) :
						{ name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
			} ).get();
		}
	} );
	
	
	jQuery.ajaxSettings.xhr = function() {
		try {
			return new window.XMLHttpRequest();
		} catch ( e ) {}
	};
	
	var xhrSuccessStatus = {
	
			// File protocol always yields status code 0, assume 200
			0: 200,
	
			// Support: IE9
			// #1450: sometimes IE returns 1223 when it should be 204
			1223: 204
		},
		xhrSupported = jQuery.ajaxSettings.xhr();
	
	support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
	support.ajax = xhrSupported = !!xhrSupported;
	
	jQuery.ajaxTransport( function( options ) {
		var callback, errorCallback;
	
		// Cross domain only allowed if supported through XMLHttpRequest
		if ( support.cors || xhrSupported && !options.crossDomain ) {
			return {
				send: function( headers, complete ) {
					var i,
						xhr = options.xhr();
	
					xhr.open(
						options.type,
						options.url,
						options.async,
						options.username,
						options.password
					);
	
					// Apply custom fields if provided
					if ( options.xhrFields ) {
						for ( i in options.xhrFields ) {
							xhr[ i ] = options.xhrFields[ i ];
						}
					}
	
					// Override mime type if needed
					if ( options.mimeType && xhr.overrideMimeType ) {
						xhr.overrideMimeType( options.mimeType );
					}
	
					// X-Requested-With header
					// For cross-domain requests, seeing as conditions for a preflight are
					// akin to a jigsaw puzzle, we simply never set it to be sure.
					// (it can always be set on a per-request basis or even using ajaxSetup)
					// For same-domain requests, won't change header if already provided.
					if ( !options.crossDomain && !headers[ "X-Requested-With" ] ) {
						headers[ "X-Requested-With" ] = "XMLHttpRequest";
					}
	
					// Set headers
					for ( i in headers ) {
						xhr.setRequestHeader( i, headers[ i ] );
					}
	
					// Callback
					callback = function( type ) {
						return function() {
							if ( callback ) {
								callback = errorCallback = xhr.onload =
									xhr.onerror = xhr.onabort = xhr.onreadystatechange = null;
	
								if ( type === "abort" ) {
									xhr.abort();
								} else if ( type === "error" ) {
	
									// Support: IE9
									// On a manual native abort, IE9 throws
									// errors on any property access that is not readyState
									if ( typeof xhr.status !== "number" ) {
										complete( 0, "error" );
									} else {
										complete(
	
											// File: protocol always yields status 0; see #8605, #14207
											xhr.status,
											xhr.statusText
										);
									}
								} else {
									complete(
										xhrSuccessStatus[ xhr.status ] || xhr.status,
										xhr.statusText,
	
										// Support: IE9 only
										// IE9 has no XHR2 but throws on binary (trac-11426)
										// For XHR2 non-text, let the caller handle it (gh-2498)
										( xhr.responseType || "text" ) !== "text"  ||
										typeof xhr.responseText !== "string" ?
											{ binary: xhr.response } :
											{ text: xhr.responseText },
										xhr.getAllResponseHeaders()
									);
								}
							}
						};
					};
	
					// Listen to events
					xhr.onload = callback();
					errorCallback = xhr.onerror = callback( "error" );
	
					// Support: IE9
					// Use onreadystatechange to replace onabort
					// to handle uncaught aborts
					if ( xhr.onabort !== undefined ) {
						xhr.onabort = errorCallback;
					} else {
						xhr.onreadystatechange = function() {
	
							// Check readyState before timeout as it changes
							if ( xhr.readyState === 4 ) {
	
								// Allow onerror to be called first,
								// but that will not handle a native abort
								// Also, save errorCallback to a variable
								// as xhr.onerror cannot be accessed
								window.setTimeout( function() {
									if ( callback ) {
										errorCallback();
									}
								} );
							}
						};
					}
	
					// Create the abort callback
					callback = callback( "abort" );
	
					try {
	
						// Do send the request (this may raise an exception)
						xhr.send( options.hasContent && options.data || null );
					} catch ( e ) {
	
						// #14683: Only rethrow if this hasn't been notified as an error yet
						if ( callback ) {
							throw e;
						}
					}
				},
	
				abort: function() {
					if ( callback ) {
						callback();
					}
				}
			};
		}
	} );
	
	
	
	
	// Install script dataType
	jQuery.ajaxSetup( {
		accepts: {
			script: "text/javascript, application/javascript, " +
				"application/ecmascript, application/x-ecmascript"
		},
		contents: {
			script: /\b(?:java|ecma)script\b/
		},
		converters: {
			"text script": function( text ) {
				jQuery.globalEval( text );
				return text;
			}
		}
	} );
	
	// Handle cache's special case and crossDomain
	jQuery.ajaxPrefilter( "script", function( s ) {
		if ( s.cache === undefined ) {
			s.cache = false;
		}
		if ( s.crossDomain ) {
			s.type = "GET";
		}
	} );
	
	// Bind script tag hack transport
	jQuery.ajaxTransport( "script", function( s ) {
	
		// This transport only deals with cross domain requests
		if ( s.crossDomain ) {
			var script, callback;
			return {
				send: function( _, complete ) {
					script = jQuery( "<script>" ).prop( {
						charset: s.scriptCharset,
						src: s.url
					} ).on(
						"load error",
						callback = function( evt ) {
							script.remove();
							callback = null;
							if ( evt ) {
								complete( evt.type === "error" ? 404 : 200, evt.type );
							}
						}
					);
	
					// Use native DOM manipulation to avoid our domManip AJAX trickery
					document.head.appendChild( script[ 0 ] );
				},
				abort: function() {
					if ( callback ) {
						callback();
					}
				}
			};
		}
	} );
	
	
	
	
	var oldCallbacks = [],
		rjsonp = /(=)\?(?=&|$)|\?\?/;
	
	// Default jsonp settings
	jQuery.ajaxSetup( {
		jsonp: "callback",
		jsonpCallback: function() {
			var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );
			this[ callback ] = true;
			return callback;
		}
	} );
	
	// Detect, normalize options and install callbacks for jsonp requests
	jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {
	
		var callbackName, overwritten, responseContainer,
			jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
				"url" :
				typeof s.data === "string" &&
					( s.contentType || "" )
						.indexOf( "application/x-www-form-urlencoded" ) === 0 &&
					rjsonp.test( s.data ) && "data"
			);
	
		// Handle iff the expected data type is "jsonp" or we have a parameter to set
		if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {
	
			// Get callback name, remembering preexisting value associated with it
			callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?
				s.jsonpCallback() :
				s.jsonpCallback;
	
			// Insert callback into url or form data
			if ( jsonProp ) {
				s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
			} else if ( s.jsonp !== false ) {
				s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
			}
	
			// Use data converter to retrieve json after script execution
			s.converters[ "script json" ] = function() {
				if ( !responseContainer ) {
					jQuery.error( callbackName + " was not called" );
				}
				return responseContainer[ 0 ];
			};
	
			// Force json dataType
			s.dataTypes[ 0 ] = "json";
	
			// Install callback
			overwritten = window[ callbackName ];
			window[ callbackName ] = function() {
				responseContainer = arguments;
			};
	
			// Clean-up function (fires after converters)
			jqXHR.always( function() {
	
				// If previous value didn't exist - remove it
				if ( overwritten === undefined ) {
					jQuery( window ).removeProp( callbackName );
	
				// Otherwise restore preexisting value
				} else {
					window[ callbackName ] = overwritten;
				}
	
				// Save back as free
				if ( s[ callbackName ] ) {
	
					// Make sure that re-using the options doesn't screw things around
					s.jsonpCallback = originalSettings.jsonpCallback;
	
					// Save the callback name for future use
					oldCallbacks.push( callbackName );
				}
	
				// Call if it was a function and we have a response
				if ( responseContainer && jQuery.isFunction( overwritten ) ) {
					overwritten( responseContainer[ 0 ] );
				}
	
				responseContainer = overwritten = undefined;
			} );
	
			// Delegate to script
			return "script";
		}
	} );
	
	
	
	
	// Argument "data" should be string of html
	// context (optional): If specified, the fragment will be created in this context,
	// defaults to document
	// keepScripts (optional): If true, will include scripts passed in the html string
	jQuery.parseHTML = function( data, context, keepScripts ) {
		if ( !data || typeof data !== "string" ) {
			return null;
		}
		if ( typeof context === "boolean" ) {
			keepScripts = context;
			context = false;
		}
		context = context || document;
	
		var parsed = rsingleTag.exec( data ),
			scripts = !keepScripts && [];
	
		// Single tag
		if ( parsed ) {
			return [ context.createElement( parsed[ 1 ] ) ];
		}
	
		parsed = buildFragment( [ data ], context, scripts );
	
		if ( scripts && scripts.length ) {
			jQuery( scripts ).remove();
		}
	
		return jQuery.merge( [], parsed.childNodes );
	};
	
	
	// Keep a copy of the old load method
	var _load = jQuery.fn.load;
	
	/**
	 * Load a url into a page
	 */
	jQuery.fn.load = function( url, params, callback ) {
		if ( typeof url !== "string" && _load ) {
			return _load.apply( this, arguments );
		}
	
		var selector, type, response,
			self = this,
			off = url.indexOf( " " );
	
		if ( off > -1 ) {
			selector = jQuery.trim( url.slice( off ) );
			url = url.slice( 0, off );
		}
	
		// If it's a function
		if ( jQuery.isFunction( params ) ) {
	
			// We assume that it's the callback
			callback = params;
			params = undefined;
	
		// Otherwise, build a param string
		} else if ( params && typeof params === "object" ) {
			type = "POST";
		}
	
		// If we have elements to modify, make the request
		if ( self.length > 0 ) {
			jQuery.ajax( {
				url: url,
	
				// If "type" variable is undefined, then "GET" method will be used.
				// Make value of this field explicit since
				// user can override it through ajaxSetup method
				type: type || "GET",
				dataType: "html",
				data: params
			} ).done( function( responseText ) {
	
				// Save response for use in complete callback
				response = arguments;
	
				self.html( selector ?
	
					// If a selector was specified, locate the right elements in a dummy div
					// Exclude scripts to avoid IE 'Permission Denied' errors
					jQuery( "<div>" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :
	
					// Otherwise use the full result
					responseText );
	
			// If the request succeeds, this function gets "data", "status", "jqXHR"
			// but they are ignored because response was set above.
			// If it fails, this function gets "jqXHR", "status", "error"
			} ).always( callback && function( jqXHR, status ) {
				self.each( function() {
					callback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );
				} );
			} );
		}
	
		return this;
	};
	
	
	
	
	// Attach a bunch of functions for handling common AJAX events
	jQuery.each( [
		"ajaxStart",
		"ajaxStop",
		"ajaxComplete",
		"ajaxError",
		"ajaxSuccess",
		"ajaxSend"
	], function( i, type ) {
		jQuery.fn[ type ] = function( fn ) {
			return this.on( type, fn );
		};
	} );
	
	
	
	
	jQuery.expr.filters.animated = function( elem ) {
		return jQuery.grep( jQuery.timers, function( fn ) {
			return elem === fn.elem;
		} ).length;
	};
	
	
	
	
	/**
	 * Gets a window from an element
	 */
	function getWindow( elem ) {
		return jQuery.isWindow( elem ) ? elem : elem.nodeType === 9 && elem.defaultView;
	}
	
	jQuery.offset = {
		setOffset: function( elem, options, i ) {
			var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
				position = jQuery.css( elem, "position" ),
				curElem = jQuery( elem ),
				props = {};
	
			// Set position first, in-case top/left are set even on static elem
			if ( position === "static" ) {
				elem.style.position = "relative";
			}
	
			curOffset = curElem.offset();
			curCSSTop = jQuery.css( elem, "top" );
			curCSSLeft = jQuery.css( elem, "left" );
			calculatePosition = ( position === "absolute" || position === "fixed" ) &&
				( curCSSTop + curCSSLeft ).indexOf( "auto" ) > -1;
	
			// Need to be able to calculate position if either
			// top or left is auto and position is either absolute or fixed
			if ( calculatePosition ) {
				curPosition = curElem.position();
				curTop = curPosition.top;
				curLeft = curPosition.left;
	
			} else {
				curTop = parseFloat( curCSSTop ) || 0;
				curLeft = parseFloat( curCSSLeft ) || 0;
			}
	
			if ( jQuery.isFunction( options ) ) {
	
				// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
				options = options.call( elem, i, jQuery.extend( {}, curOffset ) );
			}
	
			if ( options.top != null ) {
				props.top = ( options.top - curOffset.top ) + curTop;
			}
			if ( options.left != null ) {
				props.left = ( options.left - curOffset.left ) + curLeft;
			}
	
			if ( "using" in options ) {
				options.using.call( elem, props );
	
			} else {
				curElem.css( props );
			}
		}
	};
	
	jQuery.fn.extend( {
		offset: function( options ) {
			if ( arguments.length ) {
				return options === undefined ?
					this :
					this.each( function( i ) {
						jQuery.offset.setOffset( this, options, i );
					} );
			}
	
			var docElem, win,
				elem = this[ 0 ],
				box = { top: 0, left: 0 },
				doc = elem && elem.ownerDocument;
	
			if ( !doc ) {
				return;
			}
	
			docElem = doc.documentElement;
	
			// Make sure it's not a disconnected DOM node
			if ( !jQuery.contains( docElem, elem ) ) {
				return box;
			}
	
			box = elem.getBoundingClientRect();
			win = getWindow( doc );
			return {
				top: box.top + win.pageYOffset - docElem.clientTop,
				left: box.left + win.pageXOffset - docElem.clientLeft
			};
		},
	
		position: function() {
			if ( !this[ 0 ] ) {
				return;
			}
	
			var offsetParent, offset,
				elem = this[ 0 ],
				parentOffset = { top: 0, left: 0 };
	
			// Fixed elements are offset from window (parentOffset = {top:0, left: 0},
			// because it is its only offset parent
			if ( jQuery.css( elem, "position" ) === "fixed" ) {
	
				// Assume getBoundingClientRect is there when computed position is fixed
				offset = elem.getBoundingClientRect();
	
			} else {
	
				// Get *real* offsetParent
				offsetParent = this.offsetParent();
	
				// Get correct offsets
				offset = this.offset();
				if ( !jQuery.nodeName( offsetParent[ 0 ], "html" ) ) {
					parentOffset = offsetParent.offset();
				}
	
				// Add offsetParent borders
				parentOffset.top += jQuery.css( offsetParent[ 0 ], "borderTopWidth", true );
				parentOffset.left += jQuery.css( offsetParent[ 0 ], "borderLeftWidth", true );
			}
	
			// Subtract parent offsets and element margins
			return {
				top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
				left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
			};
		},
	
		// This method will return documentElement in the following cases:
		// 1) For the element inside the iframe without offsetParent, this method will return
		//    documentElement of the parent window
		// 2) For the hidden or detached element
		// 3) For body or html element, i.e. in case of the html node - it will return itself
		//
		// but those exceptions were never presented as a real life use-cases
		// and might be considered as more preferable results.
		//
		// This logic, however, is not guaranteed and can change at any point in the future
		offsetParent: function() {
			return this.map( function() {
				var offsetParent = this.offsetParent;
	
				while ( offsetParent && jQuery.css( offsetParent, "position" ) === "static" ) {
					offsetParent = offsetParent.offsetParent;
				}
	
				return offsetParent || documentElement;
			} );
		}
	} );
	
	// Create scrollLeft and scrollTop methods
	jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
		var top = "pageYOffset" === prop;
	
		jQuery.fn[ method ] = function( val ) {
			return access( this, function( elem, method, val ) {
				var win = getWindow( elem );
	
				if ( val === undefined ) {
					return win ? win[ prop ] : elem[ method ];
				}
	
				if ( win ) {
					win.scrollTo(
						!top ? val : win.pageXOffset,
						top ? val : win.pageYOffset
					);
	
				} else {
					elem[ method ] = val;
				}
			}, method, val, arguments.length );
		};
	} );
	
	// Support: Safari<7-8+, Chrome<37-44+
	// Add the top/left cssHooks using jQuery.fn.position
	// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
	// Blink bug: https://code.google.com/p/chromium/issues/detail?id=229280
	// getComputedStyle returns percent when specified for top/left/bottom/right;
	// rather than make the css module depend on the offset module, just check for it here
	jQuery.each( [ "top", "left" ], function( i, prop ) {
		jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
			function( elem, computed ) {
				if ( computed ) {
					computed = curCSS( elem, prop );
	
					// If curCSS returns percentage, fallback to offset
					return rnumnonpx.test( computed ) ?
						jQuery( elem ).position()[ prop ] + "px" :
						computed;
				}
			}
		);
	} );
	
	
	// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
	jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
		jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name },
			function( defaultExtra, funcName ) {
	
			// Margin is only for outerHeight, outerWidth
			jQuery.fn[ funcName ] = function( margin, value ) {
				var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
					extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );
	
				return access( this, function( elem, type, value ) {
					var doc;
	
					if ( jQuery.isWindow( elem ) ) {
	
						// As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there
						// isn't a whole lot we can do. See pull request at this URL for discussion:
						// https://github.com/jquery/jquery/pull/764
						return elem.document.documentElement[ "client" + name ];
					}
	
					// Get document width or height
					if ( elem.nodeType === 9 ) {
						doc = elem.documentElement;
	
						// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
						// whichever is greatest
						return Math.max(
							elem.body[ "scroll" + name ], doc[ "scroll" + name ],
							elem.body[ "offset" + name ], doc[ "offset" + name ],
							doc[ "client" + name ]
						);
					}
	
					return value === undefined ?
	
						// Get width or height on the element, requesting but not forcing parseFloat
						jQuery.css( elem, type, extra ) :
	
						// Set width or height on the element
						jQuery.style( elem, type, value, extra );
				}, type, chainable ? margin : undefined, chainable, null );
			};
		} );
	} );
	
	
	jQuery.fn.extend( {
	
		bind: function( types, data, fn ) {
			return this.on( types, null, data, fn );
		},
		unbind: function( types, fn ) {
			return this.off( types, null, fn );
		},
	
		delegate: function( selector, types, data, fn ) {
			return this.on( types, selector, data, fn );
		},
		undelegate: function( selector, types, fn ) {
	
			// ( namespace ) or ( selector, types [, fn] )
			return arguments.length === 1 ?
				this.off( selector, "**" ) :
				this.off( types, selector || "**", fn );
		},
		size: function() {
			return this.length;
		}
	} );
	
	jQuery.fn.andSelf = jQuery.fn.addBack;
	
	
	
	
	// Register as a named AMD module, since jQuery can be concatenated with other
	// files that may use define, but not via a proper concatenation script that
	// understands anonymous AMD modules. A named AMD is safest and most robust
	// way to register. Lowercase jquery is used because AMD module names are
	// derived from file names, and jQuery is normally delivered in a lowercase
	// file name. Do this after creating the global so that if an AMD module wants
	// to call noConflict to hide this version of jQuery, it will work.
	
	// Note that for maximum portability, libraries that are not jQuery should
	// declare themselves as anonymous modules, and avoid setting a global if an
	// AMD loader is present. jQuery is a special case. For more information, see
	// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon
	
	if ( true ) {
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
			return jQuery;
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	}
	
	
	
	var
	
		// Map over jQuery in case of overwrite
		_jQuery = window.jQuery,
	
		// Map over the $ in case of overwrite
		_$ = window.$;
	
	jQuery.noConflict = function( deep ) {
		if ( window.$ === jQuery ) {
			window.$ = _$;
		}
	
		if ( deep && window.jQuery === jQuery ) {
			window.jQuery = _jQuery;
		}
	
		return jQuery;
	};
	
	// Expose jQuery and $ identifiers, even in AMD
	// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
	// and CommonJS for browser emulators (#13566)
	if ( !noGlobal ) {
		window.jQuery = window.$ = jQuery;
	}
	
	return jQuery;
	}));


/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(3);
	module.exports = angular;


/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(__webpack_provided_window_dot_jQuery) {/**
	 * @license AngularJS v1.5.5
	 * (c) 2010-2016 Google, Inc. http://angularjs.org
	 * License: MIT
	 */
	(function(window) {'use strict';
	
	/**
	 * @description
	 *
	 * This object provides a utility for producing rich Error messages within
	 * Angular. It can be called as follows:
	 *
	 * var exampleMinErr = minErr('example');
	 * throw exampleMinErr('one', 'This {0} is {1}', foo, bar);
	 *
	 * The above creates an instance of minErr in the example namespace. The
	 * resulting error will have a namespaced error code of example.one.  The
	 * resulting error will replace {0} with the value of foo, and {1} with the
	 * value of bar. The object is not restricted in the number of arguments it can
	 * take.
	 *
	 * If fewer arguments are specified than necessary for interpolation, the extra
	 * interpolation markers will be preserved in the final string.
	 *
	 * Since data will be parsed statically during a build step, some restrictions
	 * are applied with respect to how minErr instances are created and called.
	 * Instances should have names of the form namespaceMinErr for a minErr created
	 * using minErr('namespace') . Error codes, namespaces and template strings
	 * should all be static strings, not variables or general expressions.
	 *
	 * @param {string} module The namespace to use for the new minErr instance.
	 * @param {function} ErrorConstructor Custom error constructor to be instantiated when returning
	 *   error from returned function, for cases when a particular type of error is useful.
	 * @returns {function(code:string, template:string, ...templateArgs): Error} minErr instance
	 */
	
	function minErr(module, ErrorConstructor) {
	  ErrorConstructor = ErrorConstructor || Error;
	  return function() {
	    var SKIP_INDEXES = 2;
	
	    var templateArgs = arguments,
	      code = templateArgs[0],
	      message = '[' + (module ? module + ':' : '') + code + '] ',
	      template = templateArgs[1],
	      paramPrefix, i;
	
	    message += template.replace(/\{\d+\}/g, function(match) {
	      var index = +match.slice(1, -1),
	        shiftedIndex = index + SKIP_INDEXES;
	
	      if (shiftedIndex < templateArgs.length) {
	        return toDebugString(templateArgs[shiftedIndex]);
	      }
	
	      return match;
	    });
	
	    message += '\nhttp://errors.angularjs.org/1.5.5/' +
	      (module ? module + '/' : '') + code;
	
	    for (i = SKIP_INDEXES, paramPrefix = '?'; i < templateArgs.length; i++, paramPrefix = '&') {
	      message += paramPrefix + 'p' + (i - SKIP_INDEXES) + '=' +
	        encodeURIComponent(toDebugString(templateArgs[i]));
	    }
	
	    return new ErrorConstructor(message);
	  };
	}
	
	/* We need to tell jshint what variables are being exported */
	/* global angular: true,
	  msie: true,
	  jqLite: true,
	  jQuery: true,
	  slice: true,
	  splice: true,
	  push: true,
	  toString: true,
	  ngMinErr: true,
	  angularModule: true,
	  uid: true,
	  REGEX_STRING_REGEXP: true,
	  VALIDITY_STATE_PROPERTY: true,
	
	  lowercase: true,
	  uppercase: true,
	  manualLowercase: true,
	  manualUppercase: true,
	  nodeName_: true,
	  isArrayLike: true,
	  forEach: true,
	  forEachSorted: true,
	  reverseParams: true,
	  nextUid: true,
	  setHashKey: true,
	  extend: true,
	  toInt: true,
	  inherit: true,
	  merge: true,
	  noop: true,
	  identity: true,
	  valueFn: true,
	  isUndefined: true,
	  isDefined: true,
	  isObject: true,
	  isBlankObject: true,
	  isString: true,
	  isNumber: true,
	  isDate: true,
	  isArray: true,
	  isFunction: true,
	  isRegExp: true,
	  isWindow: true,
	  isScope: true,
	  isFile: true,
	  isFormData: true,
	  isBlob: true,
	  isBoolean: true,
	  isPromiseLike: true,
	  trim: true,
	  escapeForRegexp: true,
	  isElement: true,
	  makeMap: true,
	  includes: true,
	  arrayRemove: true,
	  copy: true,
	  shallowCopy: true,
	  equals: true,
	  csp: true,
	  jq: true,
	  concat: true,
	  sliceArgs: true,
	  bind: true,
	  toJsonReplacer: true,
	  toJson: true,
	  fromJson: true,
	  convertTimezoneToLocal: true,
	  timezoneToOffset: true,
	  startingTag: true,
	  tryDecodeURIComponent: true,
	  parseKeyValue: true,
	  toKeyValue: true,
	  encodeUriSegment: true,
	  encodeUriQuery: true,
	  angularInit: true,
	  bootstrap: true,
	  getTestability: true,
	  snake_case: true,
	  bindJQuery: true,
	  assertArg: true,
	  assertArgFn: true,
	  assertNotHasOwnProperty: true,
	  getter: true,
	  getBlockNodes: true,
	  hasOwnProperty: true,
	  createMap: true,
	
	  NODE_TYPE_ELEMENT: true,
	  NODE_TYPE_ATTRIBUTE: true,
	  NODE_TYPE_TEXT: true,
	  NODE_TYPE_COMMENT: true,
	  NODE_TYPE_DOCUMENT: true,
	  NODE_TYPE_DOCUMENT_FRAGMENT: true,
	*/
	
	////////////////////////////////////
	
	/**
	 * @ngdoc module
	 * @name ng
	 * @module ng
	 * @installation
	 * @description
	 *
	 * # ng (core module)
	 * The ng module is loaded by default when an AngularJS application is started. The module itself
	 * contains the essential components for an AngularJS application to function. The table below
	 * lists a high level breakdown of each of the services/factories, filters, directives and testing
	 * components available within this core module.
	 *
	 * <div doc-module-components="ng"></div>
	 */
	
	var REGEX_STRING_REGEXP = /^\/(.+)\/([a-z]*)$/;
	
	// The name of a form control's ValidityState property.
	// This is used so that it's possible for internal tests to create mock ValidityStates.
	var VALIDITY_STATE_PROPERTY = 'validity';
	
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	
	var lowercase = function(string) {return isString(string) ? string.toLowerCase() : string;};
	var uppercase = function(string) {return isString(string) ? string.toUpperCase() : string;};
	
	
	var manualLowercase = function(s) {
	  /* jshint bitwise: false */
	  return isString(s)
	      ? s.replace(/[A-Z]/g, function(ch) {return String.fromCharCode(ch.charCodeAt(0) | 32);})
	      : s;
	};
	var manualUppercase = function(s) {
	  /* jshint bitwise: false */
	  return isString(s)
	      ? s.replace(/[a-z]/g, function(ch) {return String.fromCharCode(ch.charCodeAt(0) & ~32);})
	      : s;
	};
	
	
	// String#toLowerCase and String#toUpperCase don't produce correct results in browsers with Turkish
	// locale, for this reason we need to detect this case and redefine lowercase/uppercase methods
	// with correct but slower alternatives. See https://github.com/angular/angular.js/issues/11387
	if ('i' !== 'I'.toLowerCase()) {
	  lowercase = manualLowercase;
	  uppercase = manualUppercase;
	}
	
	
	var
	    msie,             // holds major version number for IE, or NaN if UA is not IE.
	    jqLite,           // delay binding since jQuery could be loaded after us.
	    jQuery,           // delay binding
	    slice             = [].slice,
	    splice            = [].splice,
	    push              = [].push,
	    toString          = Object.prototype.toString,
	    getPrototypeOf    = Object.getPrototypeOf,
	    ngMinErr          = minErr('ng'),
	
	    /** @name angular */
	    angular           = window.angular || (window.angular = {}),
	    angularModule,
	    uid               = 0;
	
	/**
	 * documentMode is an IE-only property
	 * http://msdn.microsoft.com/en-us/library/ie/cc196988(v=vs.85).aspx
	 */
	msie = window.document.documentMode;
	
	
	/**
	 * @private
	 * @param {*} obj
	 * @return {boolean} Returns true if `obj` is an array or array-like object (NodeList, Arguments,
	 *                   String ...)
	 */
	function isArrayLike(obj) {
	
	  // `null`, `undefined` and `window` are not array-like
	  if (obj == null || isWindow(obj)) return false;
	
	  // arrays, strings and jQuery/jqLite objects are array like
	  // * jqLite is either the jQuery or jqLite constructor function
	  // * we have to check the existence of jqLite first as this method is called
	  //   via the forEach method when constructing the jqLite object in the first place
	  if (isArray(obj) || isString(obj) || (jqLite && obj instanceof jqLite)) return true;
	
	  // Support: iOS 8.2 (not reproducible in simulator)
	  // "length" in obj used to prevent JIT error (gh-11508)
	  var length = "length" in Object(obj) && obj.length;
	
	  // NodeList objects (with `item` method) and
	  // other objects with suitable length characteristics are array-like
	  return isNumber(length) &&
	    (length >= 0 && ((length - 1) in obj || obj instanceof Array) || typeof obj.item == 'function');
	
	}
	
	/**
	 * @ngdoc function
	 * @name angular.forEach
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Invokes the `iterator` function once for each item in `obj` collection, which can be either an
	 * object or an array. The `iterator` function is invoked with `iterator(value, key, obj)`, where `value`
	 * is the value of an object property or an array element, `key` is the object property key or
	 * array element index and obj is the `obj` itself. Specifying a `context` for the function is optional.
	 *
	 * It is worth noting that `.forEach` does not iterate over inherited properties because it filters
	 * using the `hasOwnProperty` method.
	 *
	 * Unlike ES262's
	 * [Array.prototype.forEach](http://www.ecma-international.org/ecma-262/5.1/#sec-15.4.4.18),
	 * providing 'undefined' or 'null' values for `obj` will not throw a TypeError, but rather just
	 * return the value provided.
	 *
	   ```js
	     var values = {name: 'misko', gender: 'male'};
	     var log = [];
	     angular.forEach(values, function(value, key) {
	       this.push(key + ': ' + value);
	     }, log);
	     expect(log).toEqual(['name: misko', 'gender: male']);
	   ```
	 *
	 * @param {Object|Array} obj Object to iterate over.
	 * @param {Function} iterator Iterator function.
	 * @param {Object=} context Object to become context (`this`) for the iterator function.
	 * @returns {Object|Array} Reference to `obj`.
	 */
	
	function forEach(obj, iterator, context) {
	  var key, length;
	  if (obj) {
	    if (isFunction(obj)) {
	      for (key in obj) {
	        // Need to check if hasOwnProperty exists,
	        // as on IE8 the result of querySelectorAll is an object without a hasOwnProperty function
	        if (key != 'prototype' && key != 'length' && key != 'name' && (!obj.hasOwnProperty || obj.hasOwnProperty(key))) {
	          iterator.call(context, obj[key], key, obj);
	        }
	      }
	    } else if (isArray(obj) || isArrayLike(obj)) {
	      var isPrimitive = typeof obj !== 'object';
	      for (key = 0, length = obj.length; key < length; key++) {
	        if (isPrimitive || key in obj) {
	          iterator.call(context, obj[key], key, obj);
	        }
	      }
	    } else if (obj.forEach && obj.forEach !== forEach) {
	        obj.forEach(iterator, context, obj);
	    } else if (isBlankObject(obj)) {
	      // createMap() fast path --- Safe to avoid hasOwnProperty check because prototype chain is empty
	      for (key in obj) {
	        iterator.call(context, obj[key], key, obj);
	      }
	    } else if (typeof obj.hasOwnProperty === 'function') {
	      // Slow path for objects inheriting Object.prototype, hasOwnProperty check needed
	      for (key in obj) {
	        if (obj.hasOwnProperty(key)) {
	          iterator.call(context, obj[key], key, obj);
	        }
	      }
	    } else {
	      // Slow path for objects which do not have a method `hasOwnProperty`
	      for (key in obj) {
	        if (hasOwnProperty.call(obj, key)) {
	          iterator.call(context, obj[key], key, obj);
	        }
	      }
	    }
	  }
	  return obj;
	}
	
	function forEachSorted(obj, iterator, context) {
	  var keys = Object.keys(obj).sort();
	  for (var i = 0; i < keys.length; i++) {
	    iterator.call(context, obj[keys[i]], keys[i]);
	  }
	  return keys;
	}
	
	
	/**
	 * when using forEach the params are value, key, but it is often useful to have key, value.
	 * @param {function(string, *)} iteratorFn
	 * @returns {function(*, string)}
	 */
	function reverseParams(iteratorFn) {
	  return function(value, key) {iteratorFn(key, value);};
	}
	
	/**
	 * A consistent way of creating unique IDs in angular.
	 *
	 * Using simple numbers allows us to generate 28.6 million unique ids per second for 10 years before
	 * we hit number precision issues in JavaScript.
	 *
	 * Math.pow(2,53) / 60 / 60 / 24 / 365 / 10 = 28.6M
	 *
	 * @returns {number} an unique alpha-numeric string
	 */
	function nextUid() {
	  return ++uid;
	}
	
	
	/**
	 * Set or clear the hashkey for an object.
	 * @param obj object
	 * @param h the hashkey (!truthy to delete the hashkey)
	 */
	function setHashKey(obj, h) {
	  if (h) {
	    obj.$$hashKey = h;
	  } else {
	    delete obj.$$hashKey;
	  }
	}
	
	
	function baseExtend(dst, objs, deep) {
	  var h = dst.$$hashKey;
	
	  for (var i = 0, ii = objs.length; i < ii; ++i) {
	    var obj = objs[i];
	    if (!isObject(obj) && !isFunction(obj)) continue;
	    var keys = Object.keys(obj);
	    for (var j = 0, jj = keys.length; j < jj; j++) {
	      var key = keys[j];
	      var src = obj[key];
	
	      if (deep && isObject(src)) {
	        if (isDate(src)) {
	          dst[key] = new Date(src.valueOf());
	        } else if (isRegExp(src)) {
	          dst[key] = new RegExp(src);
	        } else if (src.nodeName) {
	          dst[key] = src.cloneNode(true);
	        } else if (isElement(src)) {
	          dst[key] = src.clone();
	        } else {
	          if (!isObject(dst[key])) dst[key] = isArray(src) ? [] : {};
	          baseExtend(dst[key], [src], true);
	        }
	      } else {
	        dst[key] = src;
	      }
	    }
	  }
	
	  setHashKey(dst, h);
	  return dst;
	}
	
	/**
	 * @ngdoc function
	 * @name angular.extend
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Extends the destination object `dst` by copying own enumerable properties from the `src` object(s)
	 * to `dst`. You can specify multiple `src` objects. If you want to preserve original objects, you can do so
	 * by passing an empty object as the target: `var object = angular.extend({}, object1, object2)`.
	 *
	 * **Note:** Keep in mind that `angular.extend` does not support recursive merge (deep copy). Use
	 * {@link angular.merge} for this.
	 *
	 * @param {Object} dst Destination object.
	 * @param {...Object} src Source object(s).
	 * @returns {Object} Reference to `dst`.
	 */
	function extend(dst) {
	  return baseExtend(dst, slice.call(arguments, 1), false);
	}
	
	
	/**
	* @ngdoc function
	* @name angular.merge
	* @module ng
	* @kind function
	*
	* @description
	* Deeply extends the destination object `dst` by copying own enumerable properties from the `src` object(s)
	* to `dst`. You can specify multiple `src` objects. If you want to preserve original objects, you can do so
	* by passing an empty object as the target: `var object = angular.merge({}, object1, object2)`.
	*
	* Unlike {@link angular.extend extend()}, `merge()` recursively descends into object properties of source
	* objects, performing a deep copy.
	*
	* @param {Object} dst Destination object.
	* @param {...Object} src Source object(s).
	* @returns {Object} Reference to `dst`.
	*/
	function merge(dst) {
	  return baseExtend(dst, slice.call(arguments, 1), true);
	}
	
	
	
	function toInt(str) {
	  return parseInt(str, 10);
	}
	
	
	function inherit(parent, extra) {
	  return extend(Object.create(parent), extra);
	}
	
	/**
	 * @ngdoc function
	 * @name angular.noop
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * A function that performs no operations. This function can be useful when writing code in the
	 * functional style.
	   ```js
	     function foo(callback) {
	       var result = calculateResult();
	       (callback || angular.noop)(result);
	     }
	   ```
	 */
	function noop() {}
	noop.$inject = [];
	
	
	/**
	 * @ngdoc function
	 * @name angular.identity
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * A function that returns its first argument. This function is useful when writing code in the
	 * functional style.
	 *
	   ```js
	     function transformer(transformationFn, value) {
	       return (transformationFn || angular.identity)(value);
	     };
	   ```
	  * @param {*} value to be returned.
	  * @returns {*} the value passed in.
	 */
	function identity($) {return $;}
	identity.$inject = [];
	
	
	function valueFn(value) {return function valueRef() {return value;};}
	
	function hasCustomToString(obj) {
	  return isFunction(obj.toString) && obj.toString !== toString;
	}
	
	
	/**
	 * @ngdoc function
	 * @name angular.isUndefined
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Determines if a reference is undefined.
	 *
	 * @param {*} value Reference to check.
	 * @returns {boolean} True if `value` is undefined.
	 */
	function isUndefined(value) {return typeof value === 'undefined';}
	
	
	/**
	 * @ngdoc function
	 * @name angular.isDefined
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Determines if a reference is defined.
	 *
	 * @param {*} value Reference to check.
	 * @returns {boolean} True if `value` is defined.
	 */
	function isDefined(value) {return typeof value !== 'undefined';}
	
	
	/**
	 * @ngdoc function
	 * @name angular.isObject
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Determines if a reference is an `Object`. Unlike `typeof` in JavaScript, `null`s are not
	 * considered to be objects. Note that JavaScript arrays are objects.
	 *
	 * @param {*} value Reference to check.
	 * @returns {boolean} True if `value` is an `Object` but not `null`.
	 */
	function isObject(value) {
	  // http://jsperf.com/isobject4
	  return value !== null && typeof value === 'object';
	}
	
	
	/**
	 * Determine if a value is an object with a null prototype
	 *
	 * @returns {boolean} True if `value` is an `Object` with a null prototype
	 */
	function isBlankObject(value) {
	  return value !== null && typeof value === 'object' && !getPrototypeOf(value);
	}
	
	
	/**
	 * @ngdoc function
	 * @name angular.isString
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Determines if a reference is a `String`.
	 *
	 * @param {*} value Reference to check.
	 * @returns {boolean} True if `value` is a `String`.
	 */
	function isString(value) {return typeof value === 'string';}
	
	
	/**
	 * @ngdoc function
	 * @name angular.isNumber
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Determines if a reference is a `Number`.
	 *
	 * This includes the "special" numbers `NaN`, `+Infinity` and `-Infinity`.
	 *
	 * If you wish to exclude these then you can use the native
	 * [`isFinite'](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/isFinite)
	 * method.
	 *
	 * @param {*} value Reference to check.
	 * @returns {boolean} True if `value` is a `Number`.
	 */
	function isNumber(value) {return typeof value === 'number';}
	
	
	/**
	 * @ngdoc function
	 * @name angular.isDate
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Determines if a value is a date.
	 *
	 * @param {*} value Reference to check.
	 * @returns {boolean} True if `value` is a `Date`.
	 */
	function isDate(value) {
	  return toString.call(value) === '[object Date]';
	}
	
	
	/**
	 * @ngdoc function
	 * @name angular.isArray
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Determines if a reference is an `Array`.
	 *
	 * @param {*} value Reference to check.
	 * @returns {boolean} True if `value` is an `Array`.
	 */
	var isArray = Array.isArray;
	
	/**
	 * @ngdoc function
	 * @name angular.isFunction
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Determines if a reference is a `Function`.
	 *
	 * @param {*} value Reference to check.
	 * @returns {boolean} True if `value` is a `Function`.
	 */
	function isFunction(value) {return typeof value === 'function';}
	
	
	/**
	 * Determines if a value is a regular expression object.
	 *
	 * @private
	 * @param {*} value Reference to check.
	 * @returns {boolean} True if `value` is a `RegExp`.
	 */
	function isRegExp(value) {
	  return toString.call(value) === '[object RegExp]';
	}
	
	
	/**
	 * Checks if `obj` is a window object.
	 *
	 * @private
	 * @param {*} obj Object to check
	 * @returns {boolean} True if `obj` is a window obj.
	 */
	function isWindow(obj) {
	  return obj && obj.window === obj;
	}
	
	
	function isScope(obj) {
	  return obj && obj.$evalAsync && obj.$watch;
	}
	
	
	function isFile(obj) {
	  return toString.call(obj) === '[object File]';
	}
	
	
	function isFormData(obj) {
	  return toString.call(obj) === '[object FormData]';
	}
	
	
	function isBlob(obj) {
	  return toString.call(obj) === '[object Blob]';
	}
	
	
	function isBoolean(value) {
	  return typeof value === 'boolean';
	}
	
	
	function isPromiseLike(obj) {
	  return obj && isFunction(obj.then);
	}
	
	
	var TYPED_ARRAY_REGEXP = /^\[object (?:Uint8|Uint8Clamped|Uint16|Uint32|Int8|Int16|Int32|Float32|Float64)Array\]$/;
	function isTypedArray(value) {
	  return value && isNumber(value.length) && TYPED_ARRAY_REGEXP.test(toString.call(value));
	}
	
	function isArrayBuffer(obj) {
	  return toString.call(obj) === '[object ArrayBuffer]';
	}
	
	
	var trim = function(value) {
	  return isString(value) ? value.trim() : value;
	};
	
	// Copied from:
	// http://docs.closure-library.googlecode.com/git/local_closure_goog_string_string.js.source.html#line1021
	// Prereq: s is a string.
	var escapeForRegexp = function(s) {
	  return s.replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g, '\\$1').
	           replace(/\x08/g, '\\x08');
	};
	
	
	/**
	 * @ngdoc function
	 * @name angular.isElement
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Determines if a reference is a DOM element (or wrapped jQuery element).
	 *
	 * @param {*} value Reference to check.
	 * @returns {boolean} True if `value` is a DOM element (or wrapped jQuery element).
	 */
	function isElement(node) {
	  return !!(node &&
	    (node.nodeName  // we are a direct element
	    || (node.prop && node.attr && node.find)));  // we have an on and find method part of jQuery API
	}
	
	/**
	 * @param str 'key1,key2,...'
	 * @returns {object} in the form of {key1:true, key2:true, ...}
	 */
	function makeMap(str) {
	  var obj = {}, items = str.split(','), i;
	  for (i = 0; i < items.length; i++) {
	    obj[items[i]] = true;
	  }
	  return obj;
	}
	
	
	function nodeName_(element) {
	  return lowercase(element.nodeName || (element[0] && element[0].nodeName));
	}
	
	function includes(array, obj) {
	  return Array.prototype.indexOf.call(array, obj) != -1;
	}
	
	function arrayRemove(array, value) {
	  var index = array.indexOf(value);
	  if (index >= 0) {
	    array.splice(index, 1);
	  }
	  return index;
	}
	
	/**
	 * @ngdoc function
	 * @name angular.copy
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Creates a deep copy of `source`, which should be an object or an array.
	 *
	 * * If no destination is supplied, a copy of the object or array is created.
	 * * If a destination is provided, all of its elements (for arrays) or properties (for objects)
	 *   are deleted and then all elements/properties from the source are copied to it.
	 * * If `source` is not an object or array (inc. `null` and `undefined`), `source` is returned.
	 * * If `source` is identical to 'destination' an exception will be thrown.
	 *
	 * @param {*} source The source that will be used to make a copy.
	 *                   Can be any type, including primitives, `null`, and `undefined`.
	 * @param {(Object|Array)=} destination Destination into which the source is copied. If
	 *     provided, must be of the same type as `source`.
	 * @returns {*} The copy or updated `destination`, if `destination` was specified.
	 *
	 * @example
	 <example module="copyExample">
	 <file name="index.html">
	 <div ng-controller="ExampleController">
	 <form novalidate class="simple-form">
	 Name: <input type="text" ng-model="user.name" /><br />
	 E-mail: <input type="email" ng-model="user.email" /><br />
	 Gender: <input type="radio" ng-model="user.gender" value="male" />male
	 <input type="radio" ng-model="user.gender" value="female" />female<br />
	 <button ng-click="reset()">RESET</button>
	 <button ng-click="update(user)">SAVE</button>
	 </form>
	 <pre>form = {{user | json}}</pre>
	 <pre>master = {{master | json}}</pre>
	 </div>
	
	 <script>
	  angular.module('copyExample', [])
	    .controller('ExampleController', ['$scope', function($scope) {
	      $scope.master= {};
	
	      $scope.update = function(user) {
	        // Example with 1 argument
	        $scope.master= angular.copy(user);
	      };
	
	      $scope.reset = function() {
	        // Example with 2 arguments
	        angular.copy($scope.master, $scope.user);
	      };
	
	      $scope.reset();
	    }]);
	 </script>
	 </file>
	 </example>
	 */
	function copy(source, destination) {
	  var stackSource = [];
	  var stackDest = [];
	
	  if (destination) {
	    if (isTypedArray(destination) || isArrayBuffer(destination)) {
	      throw ngMinErr('cpta', "Can't copy! TypedArray destination cannot be mutated.");
	    }
	    if (source === destination) {
	      throw ngMinErr('cpi', "Can't copy! Source and destination are identical.");
	    }
	
	    // Empty the destination object
	    if (isArray(destination)) {
	      destination.length = 0;
	    } else {
	      forEach(destination, function(value, key) {
	        if (key !== '$$hashKey') {
	          delete destination[key];
	        }
	      });
	    }
	
	    stackSource.push(source);
	    stackDest.push(destination);
	    return copyRecurse(source, destination);
	  }
	
	  return copyElement(source);
	
	  function copyRecurse(source, destination) {
	    var h = destination.$$hashKey;
	    var key;
	    if (isArray(source)) {
	      for (var i = 0, ii = source.length; i < ii; i++) {
	        destination.push(copyElement(source[i]));
	      }
	    } else if (isBlankObject(source)) {
	      // createMap() fast path --- Safe to avoid hasOwnProperty check because prototype chain is empty
	      for (key in source) {
	        destination[key] = copyElement(source[key]);
	      }
	    } else if (source && typeof source.hasOwnProperty === 'function') {
	      // Slow path, which must rely on hasOwnProperty
	      for (key in source) {
	        if (source.hasOwnProperty(key)) {
	          destination[key] = copyElement(source[key]);
	        }
	      }
	    } else {
	      // Slowest path --- hasOwnProperty can't be called as a method
	      for (key in source) {
	        if (hasOwnProperty.call(source, key)) {
	          destination[key] = copyElement(source[key]);
	        }
	      }
	    }
	    setHashKey(destination, h);
	    return destination;
	  }
	
	  function copyElement(source) {
	    // Simple values
	    if (!isObject(source)) {
	      return source;
	    }
	
	    // Already copied values
	    var index = stackSource.indexOf(source);
	    if (index !== -1) {
	      return stackDest[index];
	    }
	
	    if (isWindow(source) || isScope(source)) {
	      throw ngMinErr('cpws',
	        "Can't copy! Making copies of Window or Scope instances is not supported.");
	    }
	
	    var needsRecurse = false;
	    var destination = copyType(source);
	
	    if (destination === undefined) {
	      destination = isArray(source) ? [] : Object.create(getPrototypeOf(source));
	      needsRecurse = true;
	    }
	
	    stackSource.push(source);
	    stackDest.push(destination);
	
	    return needsRecurse
	      ? copyRecurse(source, destination)
	      : destination;
	  }
	
	  function copyType(source) {
	    switch (toString.call(source)) {
	      case '[object Int8Array]':
	      case '[object Int16Array]':
	      case '[object Int32Array]':
	      case '[object Float32Array]':
	      case '[object Float64Array]':
	      case '[object Uint8Array]':
	      case '[object Uint8ClampedArray]':
	      case '[object Uint16Array]':
	      case '[object Uint32Array]':
	        return new source.constructor(copyElement(source.buffer));
	
	      case '[object ArrayBuffer]':
	        //Support: IE10
	        if (!source.slice) {
	          var copied = new ArrayBuffer(source.byteLength);
	          new Uint8Array(copied).set(new Uint8Array(source));
	          return copied;
	        }
	        return source.slice(0);
	
	      case '[object Boolean]':
	      case '[object Number]':
	      case '[object String]':
	      case '[object Date]':
	        return new source.constructor(source.valueOf());
	
	      case '[object RegExp]':
	        var re = new RegExp(source.source, source.toString().match(/[^\/]*$/)[0]);
	        re.lastIndex = source.lastIndex;
	        return re;
	
	      case '[object Blob]':
	        return new source.constructor([source], {type: source.type});
	    }
	
	    if (isFunction(source.cloneNode)) {
	      return source.cloneNode(true);
	    }
	  }
	}
	
	/**
	 * Creates a shallow copy of an object, an array or a primitive.
	 *
	 * Assumes that there are no proto properties for objects.
	 */
	function shallowCopy(src, dst) {
	  if (isArray(src)) {
	    dst = dst || [];
	
	    for (var i = 0, ii = src.length; i < ii; i++) {
	      dst[i] = src[i];
	    }
	  } else if (isObject(src)) {
	    dst = dst || {};
	
	    for (var key in src) {
	      if (!(key.charAt(0) === '$' && key.charAt(1) === '$')) {
	        dst[key] = src[key];
	      }
	    }
	  }
	
	  return dst || src;
	}
	
	
	/**
	 * @ngdoc function
	 * @name angular.equals
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Determines if two objects or two values are equivalent. Supports value types, regular
	 * expressions, arrays and objects.
	 *
	 * Two objects or values are considered equivalent if at least one of the following is true:
	 *
	 * * Both objects or values pass `===` comparison.
	 * * Both objects or values are of the same type and all of their properties are equal by
	 *   comparing them with `angular.equals`.
	 * * Both values are NaN. (In JavaScript, NaN == NaN => false. But we consider two NaN as equal)
	 * * Both values represent the same regular expression (In JavaScript,
	 *   /abc/ == /abc/ => false. But we consider two regular expressions as equal when their textual
	 *   representation matches).
	 *
	 * During a property comparison, properties of `function` type and properties with names
	 * that begin with `$` are ignored.
	 *
	 * Scope and DOMWindow objects are being compared only by identify (`===`).
	 *
	 * @param {*} o1 Object or value to compare.
	 * @param {*} o2 Object or value to compare.
	 * @returns {boolean} True if arguments are equal.
	 *
	 * @example
	   <example module="equalsExample" name="equalsExample">
	     <file name="index.html">
	      <div ng-controller="ExampleController">
	        <form novalidate>
	          <h3>User 1</h3>
	          Name: <input type="text" ng-model="user1.name">
	          Age: <input type="number" ng-model="user1.age">
	
	          <h3>User 2</h3>
	          Name: <input type="text" ng-model="user2.name">
	          Age: <input type="number" ng-model="user2.age">
	
	          <div>
	            <br/>
	            <input type="button" value="Compare" ng-click="compare()">
	          </div>
	          User 1: <pre>{{user1 | json}}</pre>
	          User 2: <pre>{{user2 | json}}</pre>
	          Equal: <pre>{{result}}</pre>
	        </form>
	      </div>
	    </file>
	    <file name="script.js">
	        angular.module('equalsExample', []).controller('ExampleController', ['$scope', function($scope) {
	          $scope.user1 = {};
	          $scope.user2 = {};
	          $scope.result;
	          $scope.compare = function() {
	            $scope.result = angular.equals($scope.user1, $scope.user2);
	          };
	        }]);
	    </file>
	  </example>
	 */
	function equals(o1, o2) {
	  if (o1 === o2) return true;
	  if (o1 === null || o2 === null) return false;
	  if (o1 !== o1 && o2 !== o2) return true; // NaN === NaN
	  var t1 = typeof o1, t2 = typeof o2, length, key, keySet;
	  if (t1 == t2 && t1 == 'object') {
	    if (isArray(o1)) {
	      if (!isArray(o2)) return false;
	      if ((length = o1.length) == o2.length) {
	        for (key = 0; key < length; key++) {
	          if (!equals(o1[key], o2[key])) return false;
	        }
	        return true;
	      }
	    } else if (isDate(o1)) {
	      if (!isDate(o2)) return false;
	      return equals(o1.getTime(), o2.getTime());
	    } else if (isRegExp(o1)) {
	      if (!isRegExp(o2)) return false;
	      return o1.toString() == o2.toString();
	    } else {
	      if (isScope(o1) || isScope(o2) || isWindow(o1) || isWindow(o2) ||
	        isArray(o2) || isDate(o2) || isRegExp(o2)) return false;
	      keySet = createMap();
	      for (key in o1) {
	        if (key.charAt(0) === '$' || isFunction(o1[key])) continue;
	        if (!equals(o1[key], o2[key])) return false;
	        keySet[key] = true;
	      }
	      for (key in o2) {
	        if (!(key in keySet) &&
	            key.charAt(0) !== '$' &&
	            isDefined(o2[key]) &&
	            !isFunction(o2[key])) return false;
	      }
	      return true;
	    }
	  }
	  return false;
	}
	
	var csp = function() {
	  if (!isDefined(csp.rules)) {
	
	
	    var ngCspElement = (window.document.querySelector('[ng-csp]') ||
	                    window.document.querySelector('[data-ng-csp]'));
	
	    if (ngCspElement) {
	      var ngCspAttribute = ngCspElement.getAttribute('ng-csp') ||
	                    ngCspElement.getAttribute('data-ng-csp');
	      csp.rules = {
	        noUnsafeEval: !ngCspAttribute || (ngCspAttribute.indexOf('no-unsafe-eval') !== -1),
	        noInlineStyle: !ngCspAttribute || (ngCspAttribute.indexOf('no-inline-style') !== -1)
	      };
	    } else {
	      csp.rules = {
	        noUnsafeEval: noUnsafeEval(),
	        noInlineStyle: false
	      };
	    }
	  }
	
	  return csp.rules;
	
	  function noUnsafeEval() {
	    try {
	      /* jshint -W031, -W054 */
	      new Function('');
	      /* jshint +W031, +W054 */
	      return false;
	    } catch (e) {
	      return true;
	    }
	  }
	};
	
	/**
	 * @ngdoc directive
	 * @module ng
	 * @name ngJq
	 *
	 * @element ANY
	 * @param {string=} ngJq the name of the library available under `window`
	 * to be used for angular.element
	 * @description
	 * Use this directive to force the angular.element library.  This should be
	 * used to force either jqLite by leaving ng-jq blank or setting the name of
	 * the jquery variable under window (eg. jQuery).
	 *
	 * Since angular looks for this directive when it is loaded (doesn't wait for the
	 * DOMContentLoaded event), it must be placed on an element that comes before the script
	 * which loads angular. Also, only the first instance of `ng-jq` will be used and all
	 * others ignored.
	 *
	 * @example
	 * This example shows how to force jqLite using the `ngJq` directive to the `html` tag.
	 ```html
	 <!doctype html>
	 <html ng-app ng-jq>
	 ...
	 ...
	 </html>
	 ```
	 * @example
	 * This example shows how to use a jQuery based library of a different name.
	 * The library name must be available at the top most 'window'.
	 ```html
	 <!doctype html>
	 <html ng-app ng-jq="jQueryLib">
	 ...
	 ...
	 </html>
	 ```
	 */
	var jq = function() {
	  if (isDefined(jq.name_)) return jq.name_;
	  var el;
	  var i, ii = ngAttrPrefixes.length, prefix, name;
	  for (i = 0; i < ii; ++i) {
	    prefix = ngAttrPrefixes[i];
	    if (el = window.document.querySelector('[' + prefix.replace(':', '\\:') + 'jq]')) {
	      name = el.getAttribute(prefix + 'jq');
	      break;
	    }
	  }
	
	  return (jq.name_ = name);
	};
	
	function concat(array1, array2, index) {
	  return array1.concat(slice.call(array2, index));
	}
	
	function sliceArgs(args, startIndex) {
	  return slice.call(args, startIndex || 0);
	}
	
	
	/* jshint -W101 */
	/**
	 * @ngdoc function
	 * @name angular.bind
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Returns a function which calls function `fn` bound to `self` (`self` becomes the `this` for
	 * `fn`). You can supply optional `args` that are prebound to the function. This feature is also
	 * known as [partial application](http://en.wikipedia.org/wiki/Partial_application), as
	 * distinguished from [function currying](http://en.wikipedia.org/wiki/Currying#Contrast_with_partial_function_application).
	 *
	 * @param {Object} self Context which `fn` should be evaluated in.
	 * @param {function()} fn Function to be bound.
	 * @param {...*} args Optional arguments to be prebound to the `fn` function call.
	 * @returns {function()} Function that wraps the `fn` with all the specified bindings.
	 */
	/* jshint +W101 */
	function bind(self, fn) {
	  var curryArgs = arguments.length > 2 ? sliceArgs(arguments, 2) : [];
	  if (isFunction(fn) && !(fn instanceof RegExp)) {
	    return curryArgs.length
	      ? function() {
	          return arguments.length
	            ? fn.apply(self, concat(curryArgs, arguments, 0))
	            : fn.apply(self, curryArgs);
	        }
	      : function() {
	          return arguments.length
	            ? fn.apply(self, arguments)
	            : fn.call(self);
	        };
	  } else {
	    // in IE, native methods are not functions so they cannot be bound (note: they don't need to be)
	    return fn;
	  }
	}
	
	
	function toJsonReplacer(key, value) {
	  var val = value;
	
	  if (typeof key === 'string' && key.charAt(0) === '$' && key.charAt(1) === '$') {
	    val = undefined;
	  } else if (isWindow(value)) {
	    val = '$WINDOW';
	  } else if (value &&  window.document === value) {
	    val = '$DOCUMENT';
	  } else if (isScope(value)) {
	    val = '$SCOPE';
	  }
	
	  return val;
	}
	
	
	/**
	 * @ngdoc function
	 * @name angular.toJson
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Serializes input into a JSON-formatted string. Properties with leading $$ characters will be
	 * stripped since angular uses this notation internally.
	 *
	 * @param {Object|Array|Date|string|number} obj Input to be serialized into JSON.
	 * @param {boolean|number} [pretty=2] If set to true, the JSON output will contain newlines and whitespace.
	 *    If set to an integer, the JSON output will contain that many spaces per indentation.
	 * @returns {string|undefined} JSON-ified string representing `obj`.
	 */
	function toJson(obj, pretty) {
	  if (isUndefined(obj)) return undefined;
	  if (!isNumber(pretty)) {
	    pretty = pretty ? 2 : null;
	  }
	  return JSON.stringify(obj, toJsonReplacer, pretty);
	}
	
	
	/**
	 * @ngdoc function
	 * @name angular.fromJson
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Deserializes a JSON string.
	 *
	 * @param {string} json JSON string to deserialize.
	 * @returns {Object|Array|string|number} Deserialized JSON string.
	 */
	function fromJson(json) {
	  return isString(json)
	      ? JSON.parse(json)
	      : json;
	}
	
	
	var ALL_COLONS = /:/g;
	function timezoneToOffset(timezone, fallback) {
	  // IE/Edge do not "understand" colon (`:`) in timezone
	  timezone = timezone.replace(ALL_COLONS, '');
	  var requestedTimezoneOffset = Date.parse('Jan 01, 1970 00:00:00 ' + timezone) / 60000;
	  return isNaN(requestedTimezoneOffset) ? fallback : requestedTimezoneOffset;
	}
	
	
	function addDateMinutes(date, minutes) {
	  date = new Date(date.getTime());
	  date.setMinutes(date.getMinutes() + minutes);
	  return date;
	}
	
	
	function convertTimezoneToLocal(date, timezone, reverse) {
	  reverse = reverse ? -1 : 1;
	  var dateTimezoneOffset = date.getTimezoneOffset();
	  var timezoneOffset = timezoneToOffset(timezone, dateTimezoneOffset);
	  return addDateMinutes(date, reverse * (timezoneOffset - dateTimezoneOffset));
	}
	
	
	/**
	 * @returns {string} Returns the string representation of the element.
	 */
	function startingTag(element) {
	  element = jqLite(element).clone();
	  try {
	    // turns out IE does not let you set .html() on elements which
	    // are not allowed to have children. So we just ignore it.
	    element.empty();
	  } catch (e) {}
	  var elemHtml = jqLite('<div>').append(element).html();
	  try {
	    return element[0].nodeType === NODE_TYPE_TEXT ? lowercase(elemHtml) :
	        elemHtml.
	          match(/^(<[^>]+>)/)[1].
	          replace(/^<([\w\-]+)/, function(match, nodeName) {return '<' + lowercase(nodeName);});
	  } catch (e) {
	    return lowercase(elemHtml);
	  }
	
	}
	
	
	/////////////////////////////////////////////////
	
	/**
	 * Tries to decode the URI component without throwing an exception.
	 *
	 * @private
	 * @param str value potential URI component to check.
	 * @returns {boolean} True if `value` can be decoded
	 * with the decodeURIComponent function.
	 */
	function tryDecodeURIComponent(value) {
	  try {
	    return decodeURIComponent(value);
	  } catch (e) {
	    // Ignore any invalid uri component
	  }
	}
	
	
	/**
	 * Parses an escaped url query string into key-value pairs.
	 * @returns {Object.<string,boolean|Array>}
	 */
	function parseKeyValue(/**string*/keyValue) {
	  var obj = {};
	  forEach((keyValue || "").split('&'), function(keyValue) {
	    var splitPoint, key, val;
	    if (keyValue) {
	      key = keyValue = keyValue.replace(/\+/g,'%20');
	      splitPoint = keyValue.indexOf('=');
	      if (splitPoint !== -1) {
	        key = keyValue.substring(0, splitPoint);
	        val = keyValue.substring(splitPoint + 1);
	      }
	      key = tryDecodeURIComponent(key);
	      if (isDefined(key)) {
	        val = isDefined(val) ? tryDecodeURIComponent(val) : true;
	        if (!hasOwnProperty.call(obj, key)) {
	          obj[key] = val;
	        } else if (isArray(obj[key])) {
	          obj[key].push(val);
	        } else {
	          obj[key] = [obj[key],val];
	        }
	      }
	    }
	  });
	  return obj;
	}
	
	function toKeyValue(obj) {
	  var parts = [];
	  forEach(obj, function(value, key) {
	    if (isArray(value)) {
	      forEach(value, function(arrayValue) {
	        parts.push(encodeUriQuery(key, true) +
	                   (arrayValue === true ? '' : '=' + encodeUriQuery(arrayValue, true)));
	      });
	    } else {
	    parts.push(encodeUriQuery(key, true) +
	               (value === true ? '' : '=' + encodeUriQuery(value, true)));
	    }
	  });
	  return parts.length ? parts.join('&') : '';
	}
	
	
	/**
	 * We need our custom method because encodeURIComponent is too aggressive and doesn't follow
	 * http://www.ietf.org/rfc/rfc3986.txt with regards to the character set (pchar) allowed in path
	 * segments:
	 *    segment       = *pchar
	 *    pchar         = unreserved / pct-encoded / sub-delims / ":" / "@"
	 *    pct-encoded   = "%" HEXDIG HEXDIG
	 *    unreserved    = ALPHA / DIGIT / "-" / "." / "_" / "~"
	 *    sub-delims    = "!" / "$" / "&" / "'" / "(" / ")"
	 *                     / "*" / "+" / "," / ";" / "="
	 */
	function encodeUriSegment(val) {
	  return encodeUriQuery(val, true).
	             replace(/%26/gi, '&').
	             replace(/%3D/gi, '=').
	             replace(/%2B/gi, '+');
	}
	
	
	/**
	 * This method is intended for encoding *key* or *value* parts of query component. We need a custom
	 * method because encodeURIComponent is too aggressive and encodes stuff that doesn't have to be
	 * encoded per http://tools.ietf.org/html/rfc3986:
	 *    query       = *( pchar / "/" / "?" )
	 *    pchar         = unreserved / pct-encoded / sub-delims / ":" / "@"
	 *    unreserved    = ALPHA / DIGIT / "-" / "." / "_" / "~"
	 *    pct-encoded   = "%" HEXDIG HEXDIG
	 *    sub-delims    = "!" / "$" / "&" / "'" / "(" / ")"
	 *                     / "*" / "+" / "," / ";" / "="
	 */
	function encodeUriQuery(val, pctEncodeSpaces) {
	  return encodeURIComponent(val).
	             replace(/%40/gi, '@').
	             replace(/%3A/gi, ':').
	             replace(/%24/g, '$').
	             replace(/%2C/gi, ',').
	             replace(/%3B/gi, ';').
	             replace(/%20/g, (pctEncodeSpaces ? '%20' : '+'));
	}
	
	var ngAttrPrefixes = ['ng-', 'data-ng-', 'ng:', 'x-ng-'];
	
	function getNgAttribute(element, ngAttr) {
	  var attr, i, ii = ngAttrPrefixes.length;
	  for (i = 0; i < ii; ++i) {
	    attr = ngAttrPrefixes[i] + ngAttr;
	    if (isString(attr = element.getAttribute(attr))) {
	      return attr;
	    }
	  }
	  return null;
	}
	
	/**
	 * @ngdoc directive
	 * @name ngApp
	 * @module ng
	 *
	 * @element ANY
	 * @param {angular.Module} ngApp an optional application
	 *   {@link angular.module module} name to load.
	 * @param {boolean=} ngStrictDi if this attribute is present on the app element, the injector will be
	 *   created in "strict-di" mode. This means that the application will fail to invoke functions which
	 *   do not use explicit function annotation (and are thus unsuitable for minification), as described
	 *   in {@link guide/di the Dependency Injection guide}, and useful debugging info will assist in
	 *   tracking down the root of these bugs.
	 *
	 * @description
	 *
	 * Use this directive to **auto-bootstrap** an AngularJS application. The `ngApp` directive
	 * designates the **root element** of the application and is typically placed near the root element
	 * of the page - e.g. on the `<body>` or `<html>` tags.
	 *
	 * There are a few things to keep in mind when using `ngApp`:
	 * - only one AngularJS application can be auto-bootstrapped per HTML document. The first `ngApp`
	 *   found in the document will be used to define the root element to auto-bootstrap as an
	 *   application. To run multiple applications in an HTML document you must manually bootstrap them using
	 *   {@link angular.bootstrap} instead.
	 * - AngularJS applications cannot be nested within each other.
	 * - Do not use a directive that uses {@link ng.$compile#transclusion transclusion} on the same element as `ngApp`.
	 *   This includes directives such as {@link ng.ngIf `ngIf`}, {@link ng.ngInclude `ngInclude`} and
	 *   {@link ngRoute.ngView `ngView`}.
	 *   Doing this misplaces the app {@link ng.$rootElement `$rootElement`} and the app's {@link auto.$injector injector},
	 *   causing animations to stop working and making the injector inaccessible from outside the app.
	 *
	 * You can specify an **AngularJS module** to be used as the root module for the application.  This
	 * module will be loaded into the {@link auto.$injector} when the application is bootstrapped. It
	 * should contain the application code needed or have dependencies on other modules that will
	 * contain the code. See {@link angular.module} for more information.
	 *
	 * In the example below if the `ngApp` directive were not placed on the `html` element then the
	 * document would not be compiled, the `AppController` would not be instantiated and the `{{ a+b }}`
	 * would not be resolved to `3`.
	 *
	 * `ngApp` is the easiest, and most common way to bootstrap an application.
	 *
	 <example module="ngAppDemo">
	   <file name="index.html">
	   <div ng-controller="ngAppDemoController">
	     I can add: {{a}} + {{b}} =  {{ a+b }}
	   </div>
	   </file>
	   <file name="script.js">
	   angular.module('ngAppDemo', []).controller('ngAppDemoController', function($scope) {
	     $scope.a = 1;
	     $scope.b = 2;
	   });
	   </file>
	 </example>
	 *
	 * Using `ngStrictDi`, you would see something like this:
	 *
	 <example ng-app-included="true">
	   <file name="index.html">
	   <div ng-app="ngAppStrictDemo" ng-strict-di>
	       <div ng-controller="GoodController1">
	           I can add: {{a}} + {{b}} =  {{ a+b }}
	
	           <p>This renders because the controller does not fail to
	              instantiate, by using explicit annotation style (see
	              script.js for details)
	           </p>
	       </div>
	
	       <div ng-controller="GoodController2">
	           Name: <input ng-model="name"><br />
	           Hello, {{name}}!
	
	           <p>This renders because the controller does not fail to
	              instantiate, by using explicit annotation style
	              (see script.js for details)
	           </p>
	       </div>
	
	       <div ng-controller="BadController">
	           I can add: {{a}} + {{b}} =  {{ a+b }}
	
	           <p>The controller could not be instantiated, due to relying
	              on automatic function annotations (which are disabled in
	              strict mode). As such, the content of this section is not
	              interpolated, and there should be an error in your web console.
	           </p>
	       </div>
	   </div>
	   </file>
	   <file name="script.js">
	   angular.module('ngAppStrictDemo', [])
	     // BadController will fail to instantiate, due to relying on automatic function annotation,
	     // rather than an explicit annotation
	     .controller('BadController', function($scope) {
	       $scope.a = 1;
	       $scope.b = 2;
	     })
	     // Unlike BadController, GoodController1 and GoodController2 will not fail to be instantiated,
	     // due to using explicit annotations using the array style and $inject property, respectively.
	     .controller('GoodController1', ['$scope', function($scope) {
	       $scope.a = 1;
	       $scope.b = 2;
	     }])
	     .controller('GoodController2', GoodController2);
	     function GoodController2($scope) {
	       $scope.name = "World";
	     }
	     GoodController2.$inject = ['$scope'];
	   </file>
	   <file name="style.css">
	   div[ng-controller] {
	       margin-bottom: 1em;
	       -webkit-border-radius: 4px;
	       border-radius: 4px;
	       border: 1px solid;
	       padding: .5em;
	   }
	   div[ng-controller^=Good] {
	       border-color: #d6e9c6;
	       background-color: #dff0d8;
	       color: #3c763d;
	   }
	   div[ng-controller^=Bad] {
	       border-color: #ebccd1;
	       background-color: #f2dede;
	       color: #a94442;
	       margin-bottom: 0;
	   }
	   </file>
	 </example>
	 */
	function angularInit(element, bootstrap) {
	  var appElement,
	      module,
	      config = {};
	
	  // The element `element` has priority over any other element
	  forEach(ngAttrPrefixes, function(prefix) {
	    var name = prefix + 'app';
	
	    if (!appElement && element.hasAttribute && element.hasAttribute(name)) {
	      appElement = element;
	      module = element.getAttribute(name);
	    }
	  });
	  forEach(ngAttrPrefixes, function(prefix) {
	    var name = prefix + 'app';
	    var candidate;
	
	    if (!appElement && (candidate = element.querySelector('[' + name.replace(':', '\\:') + ']'))) {
	      appElement = candidate;
	      module = candidate.getAttribute(name);
	    }
	  });
	  if (appElement) {
	    config.strictDi = getNgAttribute(appElement, "strict-di") !== null;
	    bootstrap(appElement, module ? [module] : [], config);
	  }
	}
	
	/**
	 * @ngdoc function
	 * @name angular.bootstrap
	 * @module ng
	 * @description
	 * Use this function to manually start up angular application.
	 *
	 * For more information, see the {@link guide/bootstrap Bootstrap guide}.
	 *
	 * Angular will detect if it has been loaded into the browser more than once and only allow the
	 * first loaded script to be bootstrapped and will report a warning to the browser console for
	 * each of the subsequent scripts. This prevents strange results in applications, where otherwise
	 * multiple instances of Angular try to work on the DOM.
	 *
	 * <div class="alert alert-warning">
	 * **Note:** Protractor based end-to-end tests cannot use this function to bootstrap manually.
	 * They must use {@link ng.directive:ngApp ngApp}.
	 * </div>
	 *
	 * <div class="alert alert-warning">
	 * **Note:** Do not bootstrap the app on an element with a directive that uses {@link ng.$compile#transclusion transclusion},
	 * such as {@link ng.ngIf `ngIf`}, {@link ng.ngInclude `ngInclude`} and {@link ngRoute.ngView `ngView`}.
	 * Doing this misplaces the app {@link ng.$rootElement `$rootElement`} and the app's {@link auto.$injector injector},
	 * causing animations to stop working and making the injector inaccessible from outside the app.
	 * </div>
	 *
	 * ```html
	 * <!doctype html>
	 * <html>
	 * <body>
	 * <div ng-controller="WelcomeController">
	 *   {{greeting}}
	 * </div>
	 *
	 * <script src="angular.js"></script>
	 * <script>
	 *   var app = angular.module('demo', [])
	 *   .controller('WelcomeController', function($scope) {
	 *       $scope.greeting = 'Welcome!';
	 *   });
	 *   angular.bootstrap(document, ['demo']);
	 * </script>
	 * </body>
	 * </html>
	 * ```
	 *
	 * @param {DOMElement} element DOM element which is the root of angular application.
	 * @param {Array<String|Function|Array>=} modules an array of modules to load into the application.
	 *     Each item in the array should be the name of a predefined module or a (DI annotated)
	 *     function that will be invoked by the injector as a `config` block.
	 *     See: {@link angular.module modules}
	 * @param {Object=} config an object for defining configuration options for the application. The
	 *     following keys are supported:
	 *
	 * * `strictDi` - disable automatic function annotation for the application. This is meant to
	 *   assist in finding bugs which break minified code. Defaults to `false`.
	 *
	 * @returns {auto.$injector} Returns the newly created injector for this app.
	 */
	function bootstrap(element, modules, config) {
	  if (!isObject(config)) config = {};
	  var defaultConfig = {
	    strictDi: false
	  };
	  config = extend(defaultConfig, config);
	  var doBootstrap = function() {
	    element = jqLite(element);
	
	    if (element.injector()) {
	      var tag = (element[0] === window.document) ? 'document' : startingTag(element);
	      //Encode angle brackets to prevent input from being sanitized to empty string #8683
	      throw ngMinErr(
	          'btstrpd',
	          "App already bootstrapped with this element '{0}'",
	          tag.replace(/</,'&lt;').replace(/>/,'&gt;'));
	    }
	
	    modules = modules || [];
	    modules.unshift(['$provide', function($provide) {
	      $provide.value('$rootElement', element);
	    }]);
	
	    if (config.debugInfoEnabled) {
	      // Pushing so that this overrides `debugInfoEnabled` setting defined in user's `modules`.
	      modules.push(['$compileProvider', function($compileProvider) {
	        $compileProvider.debugInfoEnabled(true);
	      }]);
	    }
	
	    modules.unshift('ng');
	    var injector = createInjector(modules, config.strictDi);
	    injector.invoke(['$rootScope', '$rootElement', '$compile', '$injector',
	       function bootstrapApply(scope, element, compile, injector) {
	        scope.$apply(function() {
	          element.data('$injector', injector);
	          compile(element)(scope);
	        });
	      }]
	    );
	    return injector;
	  };
	
	  var NG_ENABLE_DEBUG_INFO = /^NG_ENABLE_DEBUG_INFO!/;
	  var NG_DEFER_BOOTSTRAP = /^NG_DEFER_BOOTSTRAP!/;
	
	  if (window && NG_ENABLE_DEBUG_INFO.test(window.name)) {
	    config.debugInfoEnabled = true;
	    window.name = window.name.replace(NG_ENABLE_DEBUG_INFO, '');
	  }
	
	  if (window && !NG_DEFER_BOOTSTRAP.test(window.name)) {
	    return doBootstrap();
	  }
	
	  window.name = window.name.replace(NG_DEFER_BOOTSTRAP, '');
	  angular.resumeBootstrap = function(extraModules) {
	    forEach(extraModules, function(module) {
	      modules.push(module);
	    });
	    return doBootstrap();
	  };
	
	  if (isFunction(angular.resumeDeferredBootstrap)) {
	    angular.resumeDeferredBootstrap();
	  }
	}
	
	/**
	 * @ngdoc function
	 * @name angular.reloadWithDebugInfo
	 * @module ng
	 * @description
	 * Use this function to reload the current application with debug information turned on.
	 * This takes precedence over a call to `$compileProvider.debugInfoEnabled(false)`.
	 *
	 * See {@link ng.$compileProvider#debugInfoEnabled} for more.
	 */
	function reloadWithDebugInfo() {
	  window.name = 'NG_ENABLE_DEBUG_INFO!' + window.name;
	  window.location.reload();
	}
	
	/**
	 * @name angular.getTestability
	 * @module ng
	 * @description
	 * Get the testability service for the instance of Angular on the given
	 * element.
	 * @param {DOMElement} element DOM element which is the root of angular application.
	 */
	function getTestability(rootElement) {
	  var injector = angular.element(rootElement).injector();
	  if (!injector) {
	    throw ngMinErr('test',
	      'no injector found for element argument to getTestability');
	  }
	  return injector.get('$$testability');
	}
	
	var SNAKE_CASE_REGEXP = /[A-Z]/g;
	function snake_case(name, separator) {
	  separator = separator || '_';
	  return name.replace(SNAKE_CASE_REGEXP, function(letter, pos) {
	    return (pos ? separator : '') + letter.toLowerCase();
	  });
	}
	
	var bindJQueryFired = false;
	function bindJQuery() {
	  var originalCleanData;
	
	  if (bindJQueryFired) {
	    return;
	  }
	
	  // bind to jQuery if present;
	  var jqName = jq();
	  jQuery = isUndefined(jqName) ? __webpack_provided_window_dot_jQuery :   // use jQuery (if present)
	           !jqName             ? undefined     :   // use jqLite
	                                 window[jqName];   // use jQuery specified by `ngJq`
	
	  // Use jQuery if it exists with proper functionality, otherwise default to us.
	  // Angular 1.2+ requires jQuery 1.7+ for on()/off() support.
	  // Angular 1.3+ technically requires at least jQuery 2.1+ but it may work with older
	  // versions. It will not work for sure with jQuery <1.7, though.
	  if (jQuery && jQuery.fn.on) {
	    jqLite = jQuery;
	    extend(jQuery.fn, {
	      scope: JQLitePrototype.scope,
	      isolateScope: JQLitePrototype.isolateScope,
	      controller: JQLitePrototype.controller,
	      injector: JQLitePrototype.injector,
	      inheritedData: JQLitePrototype.inheritedData
	    });
	
	    // All nodes removed from the DOM via various jQuery APIs like .remove()
	    // are passed through jQuery.cleanData. Monkey-patch this method to fire
	    // the $destroy event on all removed nodes.
	    originalCleanData = jQuery.cleanData;
	    jQuery.cleanData = function(elems) {
	      var events;
	      for (var i = 0, elem; (elem = elems[i]) != null; i++) {
	        events = jQuery._data(elem, "events");
	        if (events && events.$destroy) {
	          jQuery(elem).triggerHandler('$destroy');
	        }
	      }
	      originalCleanData(elems);
	    };
	  } else {
	    jqLite = JQLite;
	  }
	
	  angular.element = jqLite;
	
	  // Prevent double-proxying.
	  bindJQueryFired = true;
	}
	
	/**
	 * throw error if the argument is falsy.
	 */
	function assertArg(arg, name, reason) {
	  if (!arg) {
	    throw ngMinErr('areq', "Argument '{0}' is {1}", (name || '?'), (reason || "required"));
	  }
	  return arg;
	}
	
	function assertArgFn(arg, name, acceptArrayAnnotation) {
	  if (acceptArrayAnnotation && isArray(arg)) {
	      arg = arg[arg.length - 1];
	  }
	
	  assertArg(isFunction(arg), name, 'not a function, got ' +
	      (arg && typeof arg === 'object' ? arg.constructor.name || 'Object' : typeof arg));
	  return arg;
	}
	
	/**
	 * throw error if the name given is hasOwnProperty
	 * @param  {String} name    the name to test
	 * @param  {String} context the context in which the name is used, such as module or directive
	 */
	function assertNotHasOwnProperty(name, context) {
	  if (name === 'hasOwnProperty') {
	    throw ngMinErr('badname', "hasOwnProperty is not a valid {0} name", context);
	  }
	}
	
	/**
	 * Return the value accessible from the object by path. Any undefined traversals are ignored
	 * @param {Object} obj starting object
	 * @param {String} path path to traverse
	 * @param {boolean} [bindFnToScope=true]
	 * @returns {Object} value as accessible by path
	 */
	//TODO(misko): this function needs to be removed
	function getter(obj, path, bindFnToScope) {
	  if (!path) return obj;
	  var keys = path.split('.');
	  var key;
	  var lastInstance = obj;
	  var len = keys.length;
	
	  for (var i = 0; i < len; i++) {
	    key = keys[i];
	    if (obj) {
	      obj = (lastInstance = obj)[key];
	    }
	  }
	  if (!bindFnToScope && isFunction(obj)) {
	    return bind(lastInstance, obj);
	  }
	  return obj;
	}
	
	/**
	 * Return the DOM siblings between the first and last node in the given array.
	 * @param {Array} array like object
	 * @returns {Array} the inputted object or a jqLite collection containing the nodes
	 */
	function getBlockNodes(nodes) {
	  // TODO(perf): update `nodes` instead of creating a new object?
	  var node = nodes[0];
	  var endNode = nodes[nodes.length - 1];
	  var blockNodes;
	
	  for (var i = 1; node !== endNode && (node = node.nextSibling); i++) {
	    if (blockNodes || nodes[i] !== node) {
	      if (!blockNodes) {
	        blockNodes = jqLite(slice.call(nodes, 0, i));
	      }
	      blockNodes.push(node);
	    }
	  }
	
	  return blockNodes || nodes;
	}
	
	
	/**
	 * Creates a new object without a prototype. This object is useful for lookup without having to
	 * guard against prototypically inherited properties via hasOwnProperty.
	 *
	 * Related micro-benchmarks:
	 * - http://jsperf.com/object-create2
	 * - http://jsperf.com/proto-map-lookup/2
	 * - http://jsperf.com/for-in-vs-object-keys2
	 *
	 * @returns {Object}
	 */
	function createMap() {
	  return Object.create(null);
	}
	
	var NODE_TYPE_ELEMENT = 1;
	var NODE_TYPE_ATTRIBUTE = 2;
	var NODE_TYPE_TEXT = 3;
	var NODE_TYPE_COMMENT = 8;
	var NODE_TYPE_DOCUMENT = 9;
	var NODE_TYPE_DOCUMENT_FRAGMENT = 11;
	
	/**
	 * @ngdoc type
	 * @name angular.Module
	 * @module ng
	 * @description
	 *
	 * Interface for configuring angular {@link angular.module modules}.
	 */
	
	function setupModuleLoader(window) {
	
	  var $injectorMinErr = minErr('$injector');
	  var ngMinErr = minErr('ng');
	
	  function ensure(obj, name, factory) {
	    return obj[name] || (obj[name] = factory());
	  }
	
	  var angular = ensure(window, 'angular', Object);
	
	  // We need to expose `angular.$$minErr` to modules such as `ngResource` that reference it during bootstrap
	  angular.$$minErr = angular.$$minErr || minErr;
	
	  return ensure(angular, 'module', function() {
	    /** @type {Object.<string, angular.Module>} */
	    var modules = {};
	
	    /**
	     * @ngdoc function
	     * @name angular.module
	     * @module ng
	     * @description
	     *
	     * The `angular.module` is a global place for creating, registering and retrieving Angular
	     * modules.
	     * All modules (angular core or 3rd party) that should be available to an application must be
	     * registered using this mechanism.
	     *
	     * Passing one argument retrieves an existing {@link angular.Module},
	     * whereas passing more than one argument creates a new {@link angular.Module}
	     *
	     *
	     * # Module
	     *
	     * A module is a collection of services, directives, controllers, filters, and configuration information.
	     * `angular.module` is used to configure the {@link auto.$injector $injector}.
	     *
	     * ```js
	     * // Create a new module
	     * var myModule = angular.module('myModule', []);
	     *
	     * // register a new service
	     * myModule.value('appName', 'MyCoolApp');
	     *
	     * // configure existing services inside initialization blocks.
	     * myModule.config(['$locationProvider', function($locationProvider) {
	     *   // Configure existing providers
	     *   $locationProvider.hashPrefix('!');
	     * }]);
	     * ```
	     *
	     * Then you can create an injector and load your modules like this:
	     *
	     * ```js
	     * var injector = angular.injector(['ng', 'myModule'])
	     * ```
	     *
	     * However it's more likely that you'll just use
	     * {@link ng.directive:ngApp ngApp} or
	     * {@link angular.bootstrap} to simplify this process for you.
	     *
	     * @param {!string} name The name of the module to create or retrieve.
	     * @param {!Array.<string>=} requires If specified then new module is being created. If
	     *        unspecified then the module is being retrieved for further configuration.
	     * @param {Function=} configFn Optional configuration function for the module. Same as
	     *        {@link angular.Module#config Module#config()}.
	     * @returns {angular.Module} new module with the {@link angular.Module} api.
	     */
	    return function module(name, requires, configFn) {
	      var assertNotHasOwnProperty = function(name, context) {
	        if (name === 'hasOwnProperty') {
	          throw ngMinErr('badname', 'hasOwnProperty is not a valid {0} name', context);
	        }
	      };
	
	      assertNotHasOwnProperty(name, 'module');
	      if (requires && modules.hasOwnProperty(name)) {
	        modules[name] = null;
	      }
	      return ensure(modules, name, function() {
	        if (!requires) {
	          throw $injectorMinErr('nomod', "Module '{0}' is not available! You either misspelled " +
	             "the module name or forgot to load it. If registering a module ensure that you " +
	             "specify the dependencies as the second argument.", name);
	        }
	
	        /** @type {!Array.<Array.<*>>} */
	        var invokeQueue = [];
	
	        /** @type {!Array.<Function>} */
	        var configBlocks = [];
	
	        /** @type {!Array.<Function>} */
	        var runBlocks = [];
	
	        var config = invokeLater('$injector', 'invoke', 'push', configBlocks);
	
	        /** @type {angular.Module} */
	        var moduleInstance = {
	          // Private state
	          _invokeQueue: invokeQueue,
	          _configBlocks: configBlocks,
	          _runBlocks: runBlocks,
	
	          /**
	           * @ngdoc property
	           * @name angular.Module#requires
	           * @module ng
	           *
	           * @description
	           * Holds the list of modules which the injector will load before the current module is
	           * loaded.
	           */
	          requires: requires,
	
	          /**
	           * @ngdoc property
	           * @name angular.Module#name
	           * @module ng
	           *
	           * @description
	           * Name of the module.
	           */
	          name: name,
	
	
	          /**
	           * @ngdoc method
	           * @name angular.Module#provider
	           * @module ng
	           * @param {string} name service name
	           * @param {Function} providerType Construction function for creating new instance of the
	           *                                service.
	           * @description
	           * See {@link auto.$provide#provider $provide.provider()}.
	           */
	          provider: invokeLaterAndSetModuleName('$provide', 'provider'),
	
	          /**
	           * @ngdoc method
	           * @name angular.Module#factory
	           * @module ng
	           * @param {string} name service name
	           * @param {Function} providerFunction Function for creating new instance of the service.
	           * @description
	           * See {@link auto.$provide#factory $provide.factory()}.
	           */
	          factory: invokeLaterAndSetModuleName('$provide', 'factory'),
	
	          /**
	           * @ngdoc method
	           * @name angular.Module#service
	           * @module ng
	           * @param {string} name service name
	           * @param {Function} constructor A constructor function that will be instantiated.
	           * @description
	           * See {@link auto.$provide#service $provide.service()}.
	           */
	          service: invokeLaterAndSetModuleName('$provide', 'service'),
	
	          /**
	           * @ngdoc method
	           * @name angular.Module#value
	           * @module ng
	           * @param {string} name service name
	           * @param {*} object Service instance object.
	           * @description
	           * See {@link auto.$provide#value $provide.value()}.
	           */
	          value: invokeLater('$provide', 'value'),
	
	          /**
	           * @ngdoc method
	           * @name angular.Module#constant
	           * @module ng
	           * @param {string} name constant name
	           * @param {*} object Constant value.
	           * @description
	           * Because the constants are fixed, they get applied before other provide methods.
	           * See {@link auto.$provide#constant $provide.constant()}.
	           */
	          constant: invokeLater('$provide', 'constant', 'unshift'),
	
	           /**
	           * @ngdoc method
	           * @name angular.Module#decorator
	           * @module ng
	           * @param {string} name The name of the service to decorate.
	           * @param {Function} decorFn This function will be invoked when the service needs to be
	           *                           instantiated and should return the decorated service instance.
	           * @description
	           * See {@link auto.$provide#decorator $provide.decorator()}.
	           */
	          decorator: invokeLaterAndSetModuleName('$provide', 'decorator'),
	
	          /**
	           * @ngdoc method
	           * @name angular.Module#animation
	           * @module ng
	           * @param {string} name animation name
	           * @param {Function} animationFactory Factory function for creating new instance of an
	           *                                    animation.
	           * @description
	           *
	           * **NOTE**: animations take effect only if the **ngAnimate** module is loaded.
	           *
	           *
	           * Defines an animation hook that can be later used with
	           * {@link $animate $animate} service and directives that use this service.
	           *
	           * ```js
	           * module.animation('.animation-name', function($inject1, $inject2) {
	           *   return {
	           *     eventName : function(element, done) {
	           *       //code to run the animation
	           *       //once complete, then run done()
	           *       return function cancellationFunction(element) {
	           *         //code to cancel the animation
	           *       }
	           *     }
	           *   }
	           * })
	           * ```
	           *
	           * See {@link ng.$animateProvider#register $animateProvider.register()} and
	           * {@link ngAnimate ngAnimate module} for more information.
	           */
	          animation: invokeLaterAndSetModuleName('$animateProvider', 'register'),
	
	          /**
	           * @ngdoc method
	           * @name angular.Module#filter
	           * @module ng
	           * @param {string} name Filter name - this must be a valid angular expression identifier
	           * @param {Function} filterFactory Factory function for creating new instance of filter.
	           * @description
	           * See {@link ng.$filterProvider#register $filterProvider.register()}.
	           *
	           * <div class="alert alert-warning">
	           * **Note:** Filter names must be valid angular {@link expression} identifiers, such as `uppercase` or `orderBy`.
	           * Names with special characters, such as hyphens and dots, are not allowed. If you wish to namespace
	           * your filters, then you can use capitalization (`myappSubsectionFilterx`) or underscores
	           * (`myapp_subsection_filterx`).
	           * </div>
	           */
	          filter: invokeLaterAndSetModuleName('$filterProvider', 'register'),
	
	          /**
	           * @ngdoc method
	           * @name angular.Module#controller
	           * @module ng
	           * @param {string|Object} name Controller name, or an object map of controllers where the
	           *    keys are the names and the values are the constructors.
	           * @param {Function} constructor Controller constructor function.
	           * @description
	           * See {@link ng.$controllerProvider#register $controllerProvider.register()}.
	           */
	          controller: invokeLaterAndSetModuleName('$controllerProvider', 'register'),
	
	          /**
	           * @ngdoc method
	           * @name angular.Module#directive
	           * @module ng
	           * @param {string|Object} name Directive name, or an object map of directives where the
	           *    keys are the names and the values are the factories.
	           * @param {Function} directiveFactory Factory function for creating new instance of
	           * directives.
	           * @description
	           * See {@link ng.$compileProvider#directive $compileProvider.directive()}.
	           */
	          directive: invokeLaterAndSetModuleName('$compileProvider', 'directive'),
	
	          /**
	           * @ngdoc method
	           * @name angular.Module#component
	           * @module ng
	           * @param {string} name Name of the component in camel-case (i.e. myComp which will match as my-comp)
	           * @param {Object} options Component definition object (a simplified
	           *    {@link ng.$compile#directive-definition-object directive definition object})
	           *
	           * @description
	           * See {@link ng.$compileProvider#component $compileProvider.component()}.
	           */
	          component: invokeLaterAndSetModuleName('$compileProvider', 'component'),
	
	          /**
	           * @ngdoc method
	           * @name angular.Module#config
	           * @module ng
	           * @param {Function} configFn Execute this function on module load. Useful for service
	           *    configuration.
	           * @description
	           * Use this method to register work which needs to be performed on module loading.
	           * For more about how to configure services, see
	           * {@link providers#provider-recipe Provider Recipe}.
	           */
	          config: config,
	
	          /**
	           * @ngdoc method
	           * @name angular.Module#run
	           * @module ng
	           * @param {Function} initializationFn Execute this function after injector creation.
	           *    Useful for application initialization.
	           * @description
	           * Use this method to register work which should be performed when the injector is done
	           * loading all modules.
	           */
	          run: function(block) {
	            runBlocks.push(block);
	            return this;
	          }
	        };
	
	        if (configFn) {
	          config(configFn);
	        }
	
	        return moduleInstance;
	
	        /**
	         * @param {string} provider
	         * @param {string} method
	         * @param {String=} insertMethod
	         * @returns {angular.Module}
	         */
	        function invokeLater(provider, method, insertMethod, queue) {
	          if (!queue) queue = invokeQueue;
	          return function() {
	            queue[insertMethod || 'push']([provider, method, arguments]);
	            return moduleInstance;
	          };
	        }
	
	        /**
	         * @param {string} provider
	         * @param {string} method
	         * @returns {angular.Module}
	         */
	        function invokeLaterAndSetModuleName(provider, method) {
	          return function(recipeName, factoryFunction) {
	            if (factoryFunction && isFunction(factoryFunction)) factoryFunction.$$moduleName = name;
	            invokeQueue.push([provider, method, arguments]);
	            return moduleInstance;
	          };
	        }
	      });
	    };
	  });
	
	}
	
	/* global: toDebugString: true */
	
	function serializeObject(obj) {
	  var seen = [];
	
	  return JSON.stringify(obj, function(key, val) {
	    val = toJsonReplacer(key, val);
	    if (isObject(val)) {
	
	      if (seen.indexOf(val) >= 0) return '...';
	
	      seen.push(val);
	    }
	    return val;
	  });
	}
	
	function toDebugString(obj) {
	  if (typeof obj === 'function') {
	    return obj.toString().replace(/ \{[\s\S]*$/, '');
	  } else if (isUndefined(obj)) {
	    return 'undefined';
	  } else if (typeof obj !== 'string') {
	    return serializeObject(obj);
	  }
	  return obj;
	}
	
	/* global angularModule: true,
	  version: true,
	
	  $CompileProvider,
	
	  htmlAnchorDirective,
	  inputDirective,
	  inputDirective,
	  formDirective,
	  scriptDirective,
	  selectDirective,
	  styleDirective,
	  optionDirective,
	  ngBindDirective,
	  ngBindHtmlDirective,
	  ngBindTemplateDirective,
	  ngClassDirective,
	  ngClassEvenDirective,
	  ngClassOddDirective,
	  ngCloakDirective,
	  ngControllerDirective,
	  ngFormDirective,
	  ngHideDirective,
	  ngIfDirective,
	  ngIncludeDirective,
	  ngIncludeFillContentDirective,
	  ngInitDirective,
	  ngNonBindableDirective,
	  ngPluralizeDirective,
	  ngRepeatDirective,
	  ngShowDirective,
	  ngStyleDirective,
	  ngSwitchDirective,
	  ngSwitchWhenDirective,
	  ngSwitchDefaultDirective,
	  ngOptionsDirective,
	  ngTranscludeDirective,
	  ngModelDirective,
	  ngListDirective,
	  ngChangeDirective,
	  patternDirective,
	  patternDirective,
	  requiredDirective,
	  requiredDirective,
	  minlengthDirective,
	  minlengthDirective,
	  maxlengthDirective,
	  maxlengthDirective,
	  ngValueDirective,
	  ngModelOptionsDirective,
	  ngAttributeAliasDirectives,
	  ngEventDirectives,
	
	  $AnchorScrollProvider,
	  $AnimateProvider,
	  $CoreAnimateCssProvider,
	  $$CoreAnimateJsProvider,
	  $$CoreAnimateQueueProvider,
	  $$AnimateRunnerFactoryProvider,
	  $$AnimateAsyncRunFactoryProvider,
	  $BrowserProvider,
	  $CacheFactoryProvider,
	  $ControllerProvider,
	  $DateProvider,
	  $DocumentProvider,
	  $ExceptionHandlerProvider,
	  $FilterProvider,
	  $$ForceReflowProvider,
	  $InterpolateProvider,
	  $IntervalProvider,
	  $$HashMapProvider,
	  $HttpProvider,
	  $HttpParamSerializerProvider,
	  $HttpParamSerializerJQLikeProvider,
	  $HttpBackendProvider,
	  $xhrFactoryProvider,
	  $LocationProvider,
	  $LogProvider,
	  $ParseProvider,
	  $RootScopeProvider,
	  $QProvider,
	  $$QProvider,
	  $$SanitizeUriProvider,
	  $SceProvider,
	  $SceDelegateProvider,
	  $SnifferProvider,
	  $TemplateCacheProvider,
	  $TemplateRequestProvider,
	  $$TestabilityProvider,
	  $TimeoutProvider,
	  $$RAFProvider,
	  $WindowProvider,
	  $$jqLiteProvider,
	  $$CookieReaderProvider
	*/
	
	
	/**
	 * @ngdoc object
	 * @name angular.version
	 * @module ng
	 * @description
	 * An object that contains information about the current AngularJS version.
	 *
	 * This object has the following properties:
	 *
	 * - `full` – `{string}` – Full version string, such as "0.9.18".
	 * - `major` – `{number}` – Major version number, such as "0".
	 * - `minor` – `{number}` – Minor version number, such as "9".
	 * - `dot` – `{number}` – Dot version number, such as "18".
	 * - `codeName` – `{string}` – Code name of the release, such as "jiggling-armfat".
	 */
	var version = {
	  full: '1.5.5',    // all of these placeholder strings will be replaced by grunt's
	  major: 1,    // package task
	  minor: 5,
	  dot: 5,
	  codeName: 'material-conspiration'
	};
	
	
	function publishExternalAPI(angular) {
	  extend(angular, {
	    'bootstrap': bootstrap,
	    'copy': copy,
	    'extend': extend,
	    'merge': merge,
	    'equals': equals,
	    'element': jqLite,
	    'forEach': forEach,
	    'injector': createInjector,
	    'noop': noop,
	    'bind': bind,
	    'toJson': toJson,
	    'fromJson': fromJson,
	    'identity': identity,
	    'isUndefined': isUndefined,
	    'isDefined': isDefined,
	    'isString': isString,
	    'isFunction': isFunction,
	    'isObject': isObject,
	    'isNumber': isNumber,
	    'isElement': isElement,
	    'isArray': isArray,
	    'version': version,
	    'isDate': isDate,
	    'lowercase': lowercase,
	    'uppercase': uppercase,
	    'callbacks': {counter: 0},
	    'getTestability': getTestability,
	    '$$minErr': minErr,
	    '$$csp': csp,
	    'reloadWithDebugInfo': reloadWithDebugInfo
	  });
	
	  angularModule = setupModuleLoader(window);
	
	  angularModule('ng', ['ngLocale'], ['$provide',
	    function ngModule($provide) {
	      // $$sanitizeUriProvider needs to be before $compileProvider as it is used by it.
	      $provide.provider({
	        $$sanitizeUri: $$SanitizeUriProvider
	      });
	      $provide.provider('$compile', $CompileProvider).
	        directive({
	            a: htmlAnchorDirective,
	            input: inputDirective,
	            textarea: inputDirective,
	            form: formDirective,
	            script: scriptDirective,
	            select: selectDirective,
	            style: styleDirective,
	            option: optionDirective,
	            ngBind: ngBindDirective,
	            ngBindHtml: ngBindHtmlDirective,
	            ngBindTemplate: ngBindTemplateDirective,
	            ngClass: ngClassDirective,
	            ngClassEven: ngClassEvenDirective,
	            ngClassOdd: ngClassOddDirective,
	            ngCloak: ngCloakDirective,
	            ngController: ngControllerDirective,
	            ngForm: ngFormDirective,
	            ngHide: ngHideDirective,
	            ngIf: ngIfDirective,
	            ngInclude: ngIncludeDirective,
	            ngInit: ngInitDirective,
	            ngNonBindable: ngNonBindableDirective,
	            ngPluralize: ngPluralizeDirective,
	            ngRepeat: ngRepeatDirective,
	            ngShow: ngShowDirective,
	            ngStyle: ngStyleDirective,
	            ngSwitch: ngSwitchDirective,
	            ngSwitchWhen: ngSwitchWhenDirective,
	            ngSwitchDefault: ngSwitchDefaultDirective,
	            ngOptions: ngOptionsDirective,
	            ngTransclude: ngTranscludeDirective,
	            ngModel: ngModelDirective,
	            ngList: ngListDirective,
	            ngChange: ngChangeDirective,
	            pattern: patternDirective,
	            ngPattern: patternDirective,
	            required: requiredDirective,
	            ngRequired: requiredDirective,
	            minlength: minlengthDirective,
	            ngMinlength: minlengthDirective,
	            maxlength: maxlengthDirective,
	            ngMaxlength: maxlengthDirective,
	            ngValue: ngValueDirective,
	            ngModelOptions: ngModelOptionsDirective
	        }).
	        directive({
	          ngInclude: ngIncludeFillContentDirective
	        }).
	        directive(ngAttributeAliasDirectives).
	        directive(ngEventDirectives);
	      $provide.provider({
	        $anchorScroll: $AnchorScrollProvider,
	        $animate: $AnimateProvider,
	        $animateCss: $CoreAnimateCssProvider,
	        $$animateJs: $$CoreAnimateJsProvider,
	        $$animateQueue: $$CoreAnimateQueueProvider,
	        $$AnimateRunner: $$AnimateRunnerFactoryProvider,
	        $$animateAsyncRun: $$AnimateAsyncRunFactoryProvider,
	        $browser: $BrowserProvider,
	        $cacheFactory: $CacheFactoryProvider,
	        $controller: $ControllerProvider,
	        $document: $DocumentProvider,
	        $exceptionHandler: $ExceptionHandlerProvider,
	        $filter: $FilterProvider,
	        $$forceReflow: $$ForceReflowProvider,
	        $interpolate: $InterpolateProvider,
	        $interval: $IntervalProvider,
	        $http: $HttpProvider,
	        $httpParamSerializer: $HttpParamSerializerProvider,
	        $httpParamSerializerJQLike: $HttpParamSerializerJQLikeProvider,
	        $httpBackend: $HttpBackendProvider,
	        $xhrFactory: $xhrFactoryProvider,
	        $location: $LocationProvider,
	        $log: $LogProvider,
	        $parse: $ParseProvider,
	        $rootScope: $RootScopeProvider,
	        $q: $QProvider,
	        $$q: $$QProvider,
	        $sce: $SceProvider,
	        $sceDelegate: $SceDelegateProvider,
	        $sniffer: $SnifferProvider,
	        $templateCache: $TemplateCacheProvider,
	        $templateRequest: $TemplateRequestProvider,
	        $$testability: $$TestabilityProvider,
	        $timeout: $TimeoutProvider,
	        $window: $WindowProvider,
	        $$rAF: $$RAFProvider,
	        $$jqLite: $$jqLiteProvider,
	        $$HashMap: $$HashMapProvider,
	        $$cookieReader: $$CookieReaderProvider
	      });
	    }
	  ]);
	}
	
	/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	 *     Any commits to this file should be reviewed with security in mind.  *
	 *   Changes to this file can potentially create security vulnerabilities. *
	 *          An approval from 2 Core members with history of modifying      *
	 *                         this file is required.                          *
	 *                                                                         *
	 *  Does the change somehow allow for arbitrary javascript to be executed? *
	 *    Or allows for someone to change the prototype of built-in objects?   *
	 *     Or gives undesired access to variables likes document or window?    *
	 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
	
	/* global JQLitePrototype: true,
	  addEventListenerFn: true,
	  removeEventListenerFn: true,
	  BOOLEAN_ATTR: true,
	  ALIASED_ATTR: true,
	*/
	
	//////////////////////////////////
	//JQLite
	//////////////////////////////////
	
	/**
	 * @ngdoc function
	 * @name angular.element
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Wraps a raw DOM element or HTML string as a [jQuery](http://jquery.com) element.
	 *
	 * If jQuery is available, `angular.element` is an alias for the
	 * [jQuery](http://api.jquery.com/jQuery/) function. If jQuery is not available, `angular.element`
	 * delegates to Angular's built-in subset of jQuery, called "jQuery lite" or **jqLite**.
	 *
	 * jqLite is a tiny, API-compatible subset of jQuery that allows
	 * Angular to manipulate the DOM in a cross-browser compatible way. jqLite implements only the most
	 * commonly needed functionality with the goal of having a very small footprint.
	 *
	 * To use `jQuery`, simply ensure it is loaded before the `angular.js` file. You can also use the
	 * {@link ngJq `ngJq`} directive to specify that jqlite should be used over jQuery, or to use a
	 * specific version of jQuery if multiple versions exist on the page.
	 *
	 * <div class="alert alert-info">**Note:** All element references in Angular are always wrapped with jQuery or
	 * jqLite (such as the element argument in a directive's compile / link function). They are never raw DOM references.</div>
	 *
	 * <div class="alert alert-warning">**Note:** Keep in mind that this function will not find elements
	 * by tag name / CSS selector. For lookups by tag name, try instead `angular.element(document).find(...)`
	 * or `$document.find()`, or use the standard DOM APIs, e.g. `document.querySelectorAll()`.</div>
	 *
	 * ## Angular's jqLite
	 * jqLite provides only the following jQuery methods:
	 *
	 * - [`addClass()`](http://api.jquery.com/addClass/)
	 * - [`after()`](http://api.jquery.com/after/)
	 * - [`append()`](http://api.jquery.com/append/)
	 * - [`attr()`](http://api.jquery.com/attr/) - Does not support functions as parameters
	 * - [`bind()`](http://api.jquery.com/bind/) - Does not support namespaces, selectors or eventData
	 * - [`children()`](http://api.jquery.com/children/) - Does not support selectors
	 * - [`clone()`](http://api.jquery.com/clone/)
	 * - [`contents()`](http://api.jquery.com/contents/)
	 * - [`css()`](http://api.jquery.com/css/) - Only retrieves inline-styles, does not call `getComputedStyle()`.
	 *   As a setter, does not convert numbers to strings or append 'px', and also does not have automatic property prefixing.
	 * - [`data()`](http://api.jquery.com/data/)
	 * - [`detach()`](http://api.jquery.com/detach/)
	 * - [`empty()`](http://api.jquery.com/empty/)
	 * - [`eq()`](http://api.jquery.com/eq/)
	 * - [`find()`](http://api.jquery.com/find/) - Limited to lookups by tag name
	 * - [`hasClass()`](http://api.jquery.com/hasClass/)
	 * - [`html()`](http://api.jquery.com/html/)
	 * - [`next()`](http://api.jquery.com/next/) - Does not support selectors
	 * - [`on()`](http://api.jquery.com/on/) - Does not support namespaces, selectors or eventData
	 * - [`off()`](http://api.jquery.com/off/) - Does not support namespaces, selectors or event object as parameter
	 * - [`one()`](http://api.jquery.com/one/) - Does not support namespaces or selectors
	 * - [`parent()`](http://api.jquery.com/parent/) - Does not support selectors
	 * - [`prepend()`](http://api.jquery.com/prepend/)
	 * - [`prop()`](http://api.jquery.com/prop/)
	 * - [`ready()`](http://api.jquery.com/ready/)
	 * - [`remove()`](http://api.jquery.com/remove/)
	 * - [`removeAttr()`](http://api.jquery.com/removeAttr/)
	 * - [`removeClass()`](http://api.jquery.com/removeClass/)
	 * - [`removeData()`](http://api.jquery.com/removeData/)
	 * - [`replaceWith()`](http://api.jquery.com/replaceWith/)
	 * - [`text()`](http://api.jquery.com/text/)
	 * - [`toggleClass()`](http://api.jquery.com/toggleClass/)
	 * - [`triggerHandler()`](http://api.jquery.com/triggerHandler/) - Passes a dummy event object to handlers.
	 * - [`unbind()`](http://api.jquery.com/unbind/) - Does not support namespaces or event object as parameter
	 * - [`val()`](http://api.jquery.com/val/)
	 * - [`wrap()`](http://api.jquery.com/wrap/)
	 *
	 * ## jQuery/jqLite Extras
	 * Angular also provides the following additional methods and events to both jQuery and jqLite:
	 *
	 * ### Events
	 * - `$destroy` - AngularJS intercepts all jqLite/jQuery's DOM destruction apis and fires this event
	 *    on all DOM nodes being removed.  This can be used to clean up any 3rd party bindings to the DOM
	 *    element before it is removed.
	 *
	 * ### Methods
	 * - `controller(name)` - retrieves the controller of the current element or its parent. By default
	 *   retrieves controller associated with the `ngController` directive. If `name` is provided as
	 *   camelCase directive name, then the controller for this directive will be retrieved (e.g.
	 *   `'ngModel'`).
	 * - `injector()` - retrieves the injector of the current element or its parent.
	 * - `scope()` - retrieves the {@link ng.$rootScope.Scope scope} of the current
	 *   element or its parent. Requires {@link guide/production#disabling-debug-data Debug Data} to
	 *   be enabled.
	 * - `isolateScope()` - retrieves an isolate {@link ng.$rootScope.Scope scope} if one is attached directly to the
	 *   current element. This getter should be used only on elements that contain a directive which starts a new isolate
	 *   scope. Calling `scope()` on this element always returns the original non-isolate scope.
	 *   Requires {@link guide/production#disabling-debug-data Debug Data} to be enabled.
	 * - `inheritedData()` - same as `data()`, but walks up the DOM until a value is found or the top
	 *   parent element is reached.
	 *
	 * @knownIssue You cannot spy on `angular.element` if you are using Jasmine version 1.x. See
	 * https://github.com/angular/angular.js/issues/14251 for more information.
	 *
	 * @param {string|DOMElement} element HTML string or DOMElement to be wrapped into jQuery.
	 * @returns {Object} jQuery object.
	 */
	
	JQLite.expando = 'ng339';
	
	var jqCache = JQLite.cache = {},
	    jqId = 1,
	    addEventListenerFn = function(element, type, fn) {
	      element.addEventListener(type, fn, false);
	    },
	    removeEventListenerFn = function(element, type, fn) {
	      element.removeEventListener(type, fn, false);
	    };
	
	/*
	 * !!! This is an undocumented "private" function !!!
	 */
	JQLite._data = function(node) {
	  //jQuery always returns an object on cache miss
	  return this.cache[node[this.expando]] || {};
	};
	
	function jqNextId() { return ++jqId; }
	
	
	var SPECIAL_CHARS_REGEXP = /([\:\-\_]+(.))/g;
	var MOZ_HACK_REGEXP = /^moz([A-Z])/;
	var MOUSE_EVENT_MAP= { mouseleave: "mouseout", mouseenter: "mouseover"};
	var jqLiteMinErr = minErr('jqLite');
	
	/**
	 * Converts snake_case to camelCase.
	 * Also there is special case for Moz prefix starting with upper case letter.
	 * @param name Name to normalize
	 */
	function camelCase(name) {
	  return name.
	    replace(SPECIAL_CHARS_REGEXP, function(_, separator, letter, offset) {
	      return offset ? letter.toUpperCase() : letter;
	    }).
	    replace(MOZ_HACK_REGEXP, 'Moz$1');
	}
	
	var SINGLE_TAG_REGEXP = /^<([\w-]+)\s*\/?>(?:<\/\1>|)$/;
	var HTML_REGEXP = /<|&#?\w+;/;
	var TAG_NAME_REGEXP = /<([\w:-]+)/;
	var XHTML_TAG_REGEXP = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi;
	
	var wrapMap = {
	  'option': [1, '<select multiple="multiple">', '</select>'],
	
	  'thead': [1, '<table>', '</table>'],
	  'col': [2, '<table><colgroup>', '</colgroup></table>'],
	  'tr': [2, '<table><tbody>', '</tbody></table>'],
	  'td': [3, '<table><tbody><tr>', '</tr></tbody></table>'],
	  '_default': [0, "", ""]
	};
	
	wrapMap.optgroup = wrapMap.option;
	wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
	wrapMap.th = wrapMap.td;
	
	
	function jqLiteIsTextNode(html) {
	  return !HTML_REGEXP.test(html);
	}
	
	function jqLiteAcceptsData(node) {
	  // The window object can accept data but has no nodeType
	  // Otherwise we are only interested in elements (1) and documents (9)
	  var nodeType = node.nodeType;
	  return nodeType === NODE_TYPE_ELEMENT || !nodeType || nodeType === NODE_TYPE_DOCUMENT;
	}
	
	function jqLiteHasData(node) {
	  for (var key in jqCache[node.ng339]) {
	    return true;
	  }
	  return false;
	}
	
	function jqLiteCleanData(nodes) {
	  for (var i = 0, ii = nodes.length; i < ii; i++) {
	    jqLiteRemoveData(nodes[i]);
	  }
	}
	
	function jqLiteBuildFragment(html, context) {
	  var tmp, tag, wrap,
	      fragment = context.createDocumentFragment(),
	      nodes = [], i;
	
	  if (jqLiteIsTextNode(html)) {
	    // Convert non-html into a text node
	    nodes.push(context.createTextNode(html));
	  } else {
	    // Convert html into DOM nodes
	    tmp = tmp || fragment.appendChild(context.createElement("div"));
	    tag = (TAG_NAME_REGEXP.exec(html) || ["", ""])[1].toLowerCase();
	    wrap = wrapMap[tag] || wrapMap._default;
	    tmp.innerHTML = wrap[1] + html.replace(XHTML_TAG_REGEXP, "<$1></$2>") + wrap[2];
	
	    // Descend through wrappers to the right content
	    i = wrap[0];
	    while (i--) {
	      tmp = tmp.lastChild;
	    }
	
	    nodes = concat(nodes, tmp.childNodes);
	
	    tmp = fragment.firstChild;
	    tmp.textContent = "";
	  }
	
	  // Remove wrapper from fragment
	  fragment.textContent = "";
	  fragment.innerHTML = ""; // Clear inner HTML
	  forEach(nodes, function(node) {
	    fragment.appendChild(node);
	  });
	
	  return fragment;
	}
	
	function jqLiteParseHTML(html, context) {
	  context = context || window.document;
	  var parsed;
	
	  if ((parsed = SINGLE_TAG_REGEXP.exec(html))) {
	    return [context.createElement(parsed[1])];
	  }
	
	  if ((parsed = jqLiteBuildFragment(html, context))) {
	    return parsed.childNodes;
	  }
	
	  return [];
	}
	
	function jqLiteWrapNode(node, wrapper) {
	  var parent = node.parentNode;
	
	  if (parent) {
	    parent.replaceChild(wrapper, node);
	  }
	
	  wrapper.appendChild(node);
	}
	
	
	// IE9-11 has no method "contains" in SVG element and in Node.prototype. Bug #10259.
	var jqLiteContains = window.Node.prototype.contains || function(arg) {
	  // jshint bitwise: false
	  return !!(this.compareDocumentPosition(arg) & 16);
	  // jshint bitwise: true
	};
	
	/////////////////////////////////////////////
	function JQLite(element) {
	  if (element instanceof JQLite) {
	    return element;
	  }
	
	  var argIsString;
	
	  if (isString(element)) {
	    element = trim(element);
	    argIsString = true;
	  }
	  if (!(this instanceof JQLite)) {
	    if (argIsString && element.charAt(0) != '<') {
	      throw jqLiteMinErr('nosel', 'Looking up elements via selectors is not supported by jqLite! See: http://docs.angularjs.org/api/angular.element');
	    }
	    return new JQLite(element);
	  }
	
	  if (argIsString) {
	    jqLiteAddNodes(this, jqLiteParseHTML(element));
	  } else {
	    jqLiteAddNodes(this, element);
	  }
	}
	
	function jqLiteClone(element) {
	  return element.cloneNode(true);
	}
	
	function jqLiteDealoc(element, onlyDescendants) {
	  if (!onlyDescendants) jqLiteRemoveData(element);
	
	  if (element.querySelectorAll) {
	    var descendants = element.querySelectorAll('*');
	    for (var i = 0, l = descendants.length; i < l; i++) {
	      jqLiteRemoveData(descendants[i]);
	    }
	  }
	}
	
	function jqLiteOff(element, type, fn, unsupported) {
	  if (isDefined(unsupported)) throw jqLiteMinErr('offargs', 'jqLite#off() does not support the `selector` argument');
	
	  var expandoStore = jqLiteExpandoStore(element);
	  var events = expandoStore && expandoStore.events;
	  var handle = expandoStore && expandoStore.handle;
	
	  if (!handle) return; //no listeners registered
	
	  if (!type) {
	    for (type in events) {
	      if (type !== '$destroy') {
	        removeEventListenerFn(element, type, handle);
	      }
	      delete events[type];
	    }
	  } else {
	
	    var removeHandler = function(type) {
	      var listenerFns = events[type];
	      if (isDefined(fn)) {
	        arrayRemove(listenerFns || [], fn);
	      }
	      if (!(isDefined(fn) && listenerFns && listenerFns.length > 0)) {
	        removeEventListenerFn(element, type, handle);
	        delete events[type];
	      }
	    };
	
	    forEach(type.split(' '), function(type) {
	      removeHandler(type);
	      if (MOUSE_EVENT_MAP[type]) {
	        removeHandler(MOUSE_EVENT_MAP[type]);
	      }
	    });
	  }
	}
	
	function jqLiteRemoveData(element, name) {
	  var expandoId = element.ng339;
	  var expandoStore = expandoId && jqCache[expandoId];
	
	  if (expandoStore) {
	    if (name) {
	      delete expandoStore.data[name];
	      return;
	    }
	
	    if (expandoStore.handle) {
	      if (expandoStore.events.$destroy) {
	        expandoStore.handle({}, '$destroy');
	      }
	      jqLiteOff(element);
	    }
	    delete jqCache[expandoId];
	    element.ng339 = undefined; // don't delete DOM expandos. IE and Chrome don't like it
	  }
	}
	
	
	function jqLiteExpandoStore(element, createIfNecessary) {
	  var expandoId = element.ng339,
	      expandoStore = expandoId && jqCache[expandoId];
	
	  if (createIfNecessary && !expandoStore) {
	    element.ng339 = expandoId = jqNextId();
	    expandoStore = jqCache[expandoId] = {events: {}, data: {}, handle: undefined};
	  }
	
	  return expandoStore;
	}
	
	
	function jqLiteData(element, key, value) {
	  if (jqLiteAcceptsData(element)) {
	
	    var isSimpleSetter = isDefined(value);
	    var isSimpleGetter = !isSimpleSetter && key && !isObject(key);
	    var massGetter = !key;
	    var expandoStore = jqLiteExpandoStore(element, !isSimpleGetter);
	    var data = expandoStore && expandoStore.data;
	
	    if (isSimpleSetter) { // data('key', value)
	      data[key] = value;
	    } else {
	      if (massGetter) {  // data()
	        return data;
	      } else {
	        if (isSimpleGetter) { // data('key')
	          // don't force creation of expandoStore if it doesn't exist yet
	          return data && data[key];
	        } else { // mass-setter: data({key1: val1, key2: val2})
	          extend(data, key);
	        }
	      }
	    }
	  }
	}
	
	function jqLiteHasClass(element, selector) {
	  if (!element.getAttribute) return false;
	  return ((" " + (element.getAttribute('class') || '') + " ").replace(/[\n\t]/g, " ").
	      indexOf(" " + selector + " ") > -1);
	}
	
	function jqLiteRemoveClass(element, cssClasses) {
	  if (cssClasses && element.setAttribute) {
	    forEach(cssClasses.split(' '), function(cssClass) {
	      element.setAttribute('class', trim(
	          (" " + (element.getAttribute('class') || '') + " ")
	          .replace(/[\n\t]/g, " ")
	          .replace(" " + trim(cssClass) + " ", " "))
	      );
	    });
	  }
	}
	
	function jqLiteAddClass(element, cssClasses) {
	  if (cssClasses && element.setAttribute) {
	    var existingClasses = (' ' + (element.getAttribute('class') || '') + ' ')
	                            .replace(/[\n\t]/g, " ");
	
	    forEach(cssClasses.split(' '), function(cssClass) {
	      cssClass = trim(cssClass);
	      if (existingClasses.indexOf(' ' + cssClass + ' ') === -1) {
	        existingClasses += cssClass + ' ';
	      }
	    });
	
	    element.setAttribute('class', trim(existingClasses));
	  }
	}
	
	
	function jqLiteAddNodes(root, elements) {
	  // THIS CODE IS VERY HOT. Don't make changes without benchmarking.
	
	  if (elements) {
	
	    // if a Node (the most common case)
	    if (elements.nodeType) {
	      root[root.length++] = elements;
	    } else {
	      var length = elements.length;
	
	      // if an Array or NodeList and not a Window
	      if (typeof length === 'number' && elements.window !== elements) {
	        if (length) {
	          for (var i = 0; i < length; i++) {
	            root[root.length++] = elements[i];
	          }
	        }
	      } else {
	        root[root.length++] = elements;
	      }
	    }
	  }
	}
	
	
	function jqLiteController(element, name) {
	  return jqLiteInheritedData(element, '$' + (name || 'ngController') + 'Controller');
	}
	
	function jqLiteInheritedData(element, name, value) {
	  // if element is the document object work with the html element instead
	  // this makes $(document).scope() possible
	  if (element.nodeType == NODE_TYPE_DOCUMENT) {
	    element = element.documentElement;
	  }
	  var names = isArray(name) ? name : [name];
	
	  while (element) {
	    for (var i = 0, ii = names.length; i < ii; i++) {
	      if (isDefined(value = jqLite.data(element, names[i]))) return value;
	    }
	
	    // If dealing with a document fragment node with a host element, and no parent, use the host
	    // element as the parent. This enables directives within a Shadow DOM or polyfilled Shadow DOM
	    // to lookup parent controllers.
	    element = element.parentNode || (element.nodeType === NODE_TYPE_DOCUMENT_FRAGMENT && element.host);
	  }
	}
	
	function jqLiteEmpty(element) {
	  jqLiteDealoc(element, true);
	  while (element.firstChild) {
	    element.removeChild(element.firstChild);
	  }
	}
	
	function jqLiteRemove(element, keepData) {
	  if (!keepData) jqLiteDealoc(element);
	  var parent = element.parentNode;
	  if (parent) parent.removeChild(element);
	}
	
	
	function jqLiteDocumentLoaded(action, win) {
	  win = win || window;
	  if (win.document.readyState === 'complete') {
	    // Force the action to be run async for consistent behavior
	    // from the action's point of view
	    // i.e. it will definitely not be in a $apply
	    win.setTimeout(action);
	  } else {
	    // No need to unbind this handler as load is only ever called once
	    jqLite(win).on('load', action);
	  }
	}
	
	//////////////////////////////////////////
	// Functions which are declared directly.
	//////////////////////////////////////////
	var JQLitePrototype = JQLite.prototype = {
	  ready: function(fn) {
	    var fired = false;
	
	    function trigger() {
	      if (fired) return;
	      fired = true;
	      fn();
	    }
	
	    // check if document is already loaded
	    if (window.document.readyState === 'complete') {
	      window.setTimeout(trigger);
	    } else {
	      this.on('DOMContentLoaded', trigger); // works for modern browsers and IE9
	      // we can not use jqLite since we are not done loading and jQuery could be loaded later.
	      // jshint -W064
	      JQLite(window).on('load', trigger); // fallback to window.onload for others
	      // jshint +W064
	    }
	  },
	  toString: function() {
	    var value = [];
	    forEach(this, function(e) { value.push('' + e);});
	    return '[' + value.join(', ') + ']';
	  },
	
	  eq: function(index) {
	      return (index >= 0) ? jqLite(this[index]) : jqLite(this[this.length + index]);
	  },
	
	  length: 0,
	  push: push,
	  sort: [].sort,
	  splice: [].splice
	};
	
	//////////////////////////////////////////
	// Functions iterating getter/setters.
	// these functions return self on setter and
	// value on get.
	//////////////////////////////////////////
	var BOOLEAN_ATTR = {};
	forEach('multiple,selected,checked,disabled,readOnly,required,open'.split(','), function(value) {
	  BOOLEAN_ATTR[lowercase(value)] = value;
	});
	var BOOLEAN_ELEMENTS = {};
	forEach('input,select,option,textarea,button,form,details'.split(','), function(value) {
	  BOOLEAN_ELEMENTS[value] = true;
	});
	var ALIASED_ATTR = {
	  'ngMinlength': 'minlength',
	  'ngMaxlength': 'maxlength',
	  'ngMin': 'min',
	  'ngMax': 'max',
	  'ngPattern': 'pattern'
	};
	
	function getBooleanAttrName(element, name) {
	  // check dom last since we will most likely fail on name
	  var booleanAttr = BOOLEAN_ATTR[name.toLowerCase()];
	
	  // booleanAttr is here twice to minimize DOM access
	  return booleanAttr && BOOLEAN_ELEMENTS[nodeName_(element)] && booleanAttr;
	}
	
	function getAliasedAttrName(name) {
	  return ALIASED_ATTR[name];
	}
	
	forEach({
	  data: jqLiteData,
	  removeData: jqLiteRemoveData,
	  hasData: jqLiteHasData,
	  cleanData: jqLiteCleanData
	}, function(fn, name) {
	  JQLite[name] = fn;
	});
	
	forEach({
	  data: jqLiteData,
	  inheritedData: jqLiteInheritedData,
	
	  scope: function(element) {
	    // Can't use jqLiteData here directly so we stay compatible with jQuery!
	    return jqLite.data(element, '$scope') || jqLiteInheritedData(element.parentNode || element, ['$isolateScope', '$scope']);
	  },
	
	  isolateScope: function(element) {
	    // Can't use jqLiteData here directly so we stay compatible with jQuery!
	    return jqLite.data(element, '$isolateScope') || jqLite.data(element, '$isolateScopeNoTemplate');
	  },
	
	  controller: jqLiteController,
	
	  injector: function(element) {
	    return jqLiteInheritedData(element, '$injector');
	  },
	
	  removeAttr: function(element, name) {
	    element.removeAttribute(name);
	  },
	
	  hasClass: jqLiteHasClass,
	
	  css: function(element, name, value) {
	    name = camelCase(name);
	
	    if (isDefined(value)) {
	      element.style[name] = value;
	    } else {
	      return element.style[name];
	    }
	  },
	
	  attr: function(element, name, value) {
	    var nodeType = element.nodeType;
	    if (nodeType === NODE_TYPE_TEXT || nodeType === NODE_TYPE_ATTRIBUTE || nodeType === NODE_TYPE_COMMENT) {
	      return;
	    }
	    var lowercasedName = lowercase(name);
	    if (BOOLEAN_ATTR[lowercasedName]) {
	      if (isDefined(value)) {
	        if (!!value) {
	          element[name] = true;
	          element.setAttribute(name, lowercasedName);
	        } else {
	          element[name] = false;
	          element.removeAttribute(lowercasedName);
	        }
	      } else {
	        return (element[name] ||
	                 (element.attributes.getNamedItem(name) || noop).specified)
	               ? lowercasedName
	               : undefined;
	      }
	    } else if (isDefined(value)) {
	      element.setAttribute(name, value);
	    } else if (element.getAttribute) {
	      // the extra argument "2" is to get the right thing for a.href in IE, see jQuery code
	      // some elements (e.g. Document) don't have get attribute, so return undefined
	      var ret = element.getAttribute(name, 2);
	      // normalize non-existing attributes to undefined (as jQuery)
	      return ret === null ? undefined : ret;
	    }
	  },
	
	  prop: function(element, name, value) {
	    if (isDefined(value)) {
	      element[name] = value;
	    } else {
	      return element[name];
	    }
	  },
	
	  text: (function() {
	    getText.$dv = '';
	    return getText;
	
	    function getText(element, value) {
	      if (isUndefined(value)) {
	        var nodeType = element.nodeType;
	        return (nodeType === NODE_TYPE_ELEMENT || nodeType === NODE_TYPE_TEXT) ? element.textContent : '';
	      }
	      element.textContent = value;
	    }
	  })(),
	
	  val: function(element, value) {
	    if (isUndefined(value)) {
	      if (element.multiple && nodeName_(element) === 'select') {
	        var result = [];
	        forEach(element.options, function(option) {
	          if (option.selected) {
	            result.push(option.value || option.text);
	          }
	        });
	        return result.length === 0 ? null : result;
	      }
	      return element.value;
	    }
	    element.value = value;
	  },
	
	  html: function(element, value) {
	    if (isUndefined(value)) {
	      return element.innerHTML;
	    }
	    jqLiteDealoc(element, true);
	    element.innerHTML = value;
	  },
	
	  empty: jqLiteEmpty
	}, function(fn, name) {
	  /**
	   * Properties: writes return selection, reads return first value
	   */
	  JQLite.prototype[name] = function(arg1, arg2) {
	    var i, key;
	    var nodeCount = this.length;
	
	    // jqLiteHasClass has only two arguments, but is a getter-only fn, so we need to special-case it
	    // in a way that survives minification.
	    // jqLiteEmpty takes no arguments but is a setter.
	    if (fn !== jqLiteEmpty &&
	        (isUndefined((fn.length == 2 && (fn !== jqLiteHasClass && fn !== jqLiteController)) ? arg1 : arg2))) {
	      if (isObject(arg1)) {
	
	        // we are a write, but the object properties are the key/values
	        for (i = 0; i < nodeCount; i++) {
	          if (fn === jqLiteData) {
	            // data() takes the whole object in jQuery
	            fn(this[i], arg1);
	          } else {
	            for (key in arg1) {
	              fn(this[i], key, arg1[key]);
	            }
	          }
	        }
	        // return self for chaining
	        return this;
	      } else {
	        // we are a read, so read the first child.
	        // TODO: do we still need this?
	        var value = fn.$dv;
	        // Only if we have $dv do we iterate over all, otherwise it is just the first element.
	        var jj = (isUndefined(value)) ? Math.min(nodeCount, 1) : nodeCount;
	        for (var j = 0; j < jj; j++) {
	          var nodeValue = fn(this[j], arg1, arg2);
	          value = value ? value + nodeValue : nodeValue;
	        }
	        return value;
	      }
	    } else {
	      // we are a write, so apply to all children
	      for (i = 0; i < nodeCount; i++) {
	        fn(this[i], arg1, arg2);
	      }
	      // return self for chaining
	      return this;
	    }
	  };
	});
	
	function createEventHandler(element, events) {
	  var eventHandler = function(event, type) {
	    // jQuery specific api
	    event.isDefaultPrevented = function() {
	      return event.defaultPrevented;
	    };
	
	    var eventFns = events[type || event.type];
	    var eventFnsLength = eventFns ? eventFns.length : 0;
	
	    if (!eventFnsLength) return;
	
	    if (isUndefined(event.immediatePropagationStopped)) {
	      var originalStopImmediatePropagation = event.stopImmediatePropagation;
	      event.stopImmediatePropagation = function() {
	        event.immediatePropagationStopped = true;
	
	        if (event.stopPropagation) {
	          event.stopPropagation();
	        }
	
	        if (originalStopImmediatePropagation) {
	          originalStopImmediatePropagation.call(event);
	        }
	      };
	    }
	
	    event.isImmediatePropagationStopped = function() {
	      return event.immediatePropagationStopped === true;
	    };
	
	    // Some events have special handlers that wrap the real handler
	    var handlerWrapper = eventFns.specialHandlerWrapper || defaultHandlerWrapper;
	
	    // Copy event handlers in case event handlers array is modified during execution.
	    if ((eventFnsLength > 1)) {
	      eventFns = shallowCopy(eventFns);
	    }
	
	    for (var i = 0; i < eventFnsLength; i++) {
	      if (!event.isImmediatePropagationStopped()) {
	        handlerWrapper(element, event, eventFns[i]);
	      }
	    }
	  };
	
	  // TODO: this is a hack for angularMocks/clearDataCache that makes it possible to deregister all
	  //       events on `element`
	  eventHandler.elem = element;
	  return eventHandler;
	}
	
	function defaultHandlerWrapper(element, event, handler) {
	  handler.call(element, event);
	}
	
	function specialMouseHandlerWrapper(target, event, handler) {
	  // Refer to jQuery's implementation of mouseenter & mouseleave
	  // Read about mouseenter and mouseleave:
	  // http://www.quirksmode.org/js/events_mouse.html#link8
	  var related = event.relatedTarget;
	  // For mousenter/leave call the handler if related is outside the target.
	  // NB: No relatedTarget if the mouse left/entered the browser window
	  if (!related || (related !== target && !jqLiteContains.call(target, related))) {
	    handler.call(target, event);
	  }
	}
	
	//////////////////////////////////////////
	// Functions iterating traversal.
	// These functions chain results into a single
	// selector.
	//////////////////////////////////////////
	forEach({
	  removeData: jqLiteRemoveData,
	
	  on: function jqLiteOn(element, type, fn, unsupported) {
	    if (isDefined(unsupported)) throw jqLiteMinErr('onargs', 'jqLite#on() does not support the `selector` or `eventData` parameters');
	
	    // Do not add event handlers to non-elements because they will not be cleaned up.
	    if (!jqLiteAcceptsData(element)) {
	      return;
	    }
	
	    var expandoStore = jqLiteExpandoStore(element, true);
	    var events = expandoStore.events;
	    var handle = expandoStore.handle;
	
	    if (!handle) {
	      handle = expandoStore.handle = createEventHandler(element, events);
	    }
	
	    // http://jsperf.com/string-indexof-vs-split
	    var types = type.indexOf(' ') >= 0 ? type.split(' ') : [type];
	    var i = types.length;
	
	    var addHandler = function(type, specialHandlerWrapper, noEventListener) {
	      var eventFns = events[type];
	
	      if (!eventFns) {
	        eventFns = events[type] = [];
	        eventFns.specialHandlerWrapper = specialHandlerWrapper;
	        if (type !== '$destroy' && !noEventListener) {
	          addEventListenerFn(element, type, handle);
	        }
	      }
	
	      eventFns.push(fn);
	    };
	
	    while (i--) {
	      type = types[i];
	      if (MOUSE_EVENT_MAP[type]) {
	        addHandler(MOUSE_EVENT_MAP[type], specialMouseHandlerWrapper);
	        addHandler(type, undefined, true);
	      } else {
	        addHandler(type);
	      }
	    }
	  },
	
	  off: jqLiteOff,
	
	  one: function(element, type, fn) {
	    element = jqLite(element);
	
	    //add the listener twice so that when it is called
	    //you can remove the original function and still be
	    //able to call element.off(ev, fn) normally
	    element.on(type, function onFn() {
	      element.off(type, fn);
	      element.off(type, onFn);
	    });
	    element.on(type, fn);
	  },
	
	  replaceWith: function(element, replaceNode) {
	    var index, parent = element.parentNode;
	    jqLiteDealoc(element);
	    forEach(new JQLite(replaceNode), function(node) {
	      if (index) {
	        parent.insertBefore(node, index.nextSibling);
	      } else {
	        parent.replaceChild(node, element);
	      }
	      index = node;
	    });
	  },
	
	  children: function(element) {
	    var children = [];
	    forEach(element.childNodes, function(element) {
	      if (element.nodeType === NODE_TYPE_ELEMENT) {
	        children.push(element);
	      }
	    });
	    return children;
	  },
	
	  contents: function(element) {
	    return element.contentDocument || element.childNodes || [];
	  },
	
	  append: function(element, node) {
	    var nodeType = element.nodeType;
	    if (nodeType !== NODE_TYPE_ELEMENT && nodeType !== NODE_TYPE_DOCUMENT_FRAGMENT) return;
	
	    node = new JQLite(node);
	
	    for (var i = 0, ii = node.length; i < ii; i++) {
	      var child = node[i];
	      element.appendChild(child);
	    }
	  },
	
	  prepend: function(element, node) {
	    if (element.nodeType === NODE_TYPE_ELEMENT) {
	      var index = element.firstChild;
	      forEach(new JQLite(node), function(child) {
	        element.insertBefore(child, index);
	      });
	    }
	  },
	
	  wrap: function(element, wrapNode) {
	    jqLiteWrapNode(element, jqLite(wrapNode).eq(0).clone()[0]);
	  },
	
	  remove: jqLiteRemove,
	
	  detach: function(element) {
	    jqLiteRemove(element, true);
	  },
	
	  after: function(element, newElement) {
	    var index = element, parent = element.parentNode;
	    newElement = new JQLite(newElement);
	
	    for (var i = 0, ii = newElement.length; i < ii; i++) {
	      var node = newElement[i];
	      parent.insertBefore(node, index.nextSibling);
	      index = node;
	    }
	  },
	
	  addClass: jqLiteAddClass,
	  removeClass: jqLiteRemoveClass,
	
	  toggleClass: function(element, selector, condition) {
	    if (selector) {
	      forEach(selector.split(' '), function(className) {
	        var classCondition = condition;
	        if (isUndefined(classCondition)) {
	          classCondition = !jqLiteHasClass(element, className);
	        }
	        (classCondition ? jqLiteAddClass : jqLiteRemoveClass)(element, className);
	      });
	    }
	  },
	
	  parent: function(element) {
	    var parent = element.parentNode;
	    return parent && parent.nodeType !== NODE_TYPE_DOCUMENT_FRAGMENT ? parent : null;
	  },
	
	  next: function(element) {
	    return element.nextElementSibling;
	  },
	
	  find: function(element, selector) {
	    if (element.getElementsByTagName) {
	      return element.getElementsByTagName(selector);
	    } else {
	      return [];
	    }
	  },
	
	  clone: jqLiteClone,
	
	  triggerHandler: function(element, event, extraParameters) {
	
	    var dummyEvent, eventFnsCopy, handlerArgs;
	    var eventName = event.type || event;
	    var expandoStore = jqLiteExpandoStore(element);
	    var events = expandoStore && expandoStore.events;
	    var eventFns = events && events[eventName];
	
	    if (eventFns) {
	      // Create a dummy event to pass to the handlers
	      dummyEvent = {
	        preventDefault: function() { this.defaultPrevented = true; },
	        isDefaultPrevented: function() { return this.defaultPrevented === true; },
	        stopImmediatePropagation: function() { this.immediatePropagationStopped = true; },
	        isImmediatePropagationStopped: function() { return this.immediatePropagationStopped === true; },
	        stopPropagation: noop,
	        type: eventName,
	        target: element
	      };
	
	      // If a custom event was provided then extend our dummy event with it
	      if (event.type) {
	        dummyEvent = extend(dummyEvent, event);
	      }
	
	      // Copy event handlers in case event handlers array is modified during execution.
	      eventFnsCopy = shallowCopy(eventFns);
	      handlerArgs = extraParameters ? [dummyEvent].concat(extraParameters) : [dummyEvent];
	
	      forEach(eventFnsCopy, function(fn) {
	        if (!dummyEvent.isImmediatePropagationStopped()) {
	          fn.apply(element, handlerArgs);
	        }
	      });
	    }
	  }
	}, function(fn, name) {
	  /**
	   * chaining functions
	   */
	  JQLite.prototype[name] = function(arg1, arg2, arg3) {
	    var value;
	
	    for (var i = 0, ii = this.length; i < ii; i++) {
	      if (isUndefined(value)) {
	        value = fn(this[i], arg1, arg2, arg3);
	        if (isDefined(value)) {
	          // any function which returns a value needs to be wrapped
	          value = jqLite(value);
	        }
	      } else {
	        jqLiteAddNodes(value, fn(this[i], arg1, arg2, arg3));
	      }
	    }
	    return isDefined(value) ? value : this;
	  };
	
	  // bind legacy bind/unbind to on/off
	  JQLite.prototype.bind = JQLite.prototype.on;
	  JQLite.prototype.unbind = JQLite.prototype.off;
	});
	
	
	// Provider for private $$jqLite service
	function $$jqLiteProvider() {
	  this.$get = function $$jqLite() {
	    return extend(JQLite, {
	      hasClass: function(node, classes) {
	        if (node.attr) node = node[0];
	        return jqLiteHasClass(node, classes);
	      },
	      addClass: function(node, classes) {
	        if (node.attr) node = node[0];
	        return jqLiteAddClass(node, classes);
	      },
	      removeClass: function(node, classes) {
	        if (node.attr) node = node[0];
	        return jqLiteRemoveClass(node, classes);
	      }
	    });
	  };
	}
	
	/**
	 * Computes a hash of an 'obj'.
	 * Hash of a:
	 *  string is string
	 *  number is number as string
	 *  object is either result of calling $$hashKey function on the object or uniquely generated id,
	 *         that is also assigned to the $$hashKey property of the object.
	 *
	 * @param obj
	 * @returns {string} hash string such that the same input will have the same hash string.
	 *         The resulting string key is in 'type:hashKey' format.
	 */
	function hashKey(obj, nextUidFn) {
	  var key = obj && obj.$$hashKey;
	
	  if (key) {
	    if (typeof key === 'function') {
	      key = obj.$$hashKey();
	    }
	    return key;
	  }
	
	  var objType = typeof obj;
	  if (objType == 'function' || (objType == 'object' && obj !== null)) {
	    key = obj.$$hashKey = objType + ':' + (nextUidFn || nextUid)();
	  } else {
	    key = objType + ':' + obj;
	  }
	
	  return key;
	}
	
	/**
	 * HashMap which can use objects as keys
	 */
	function HashMap(array, isolatedUid) {
	  if (isolatedUid) {
	    var uid = 0;
	    this.nextUid = function() {
	      return ++uid;
	    };
	  }
	  forEach(array, this.put, this);
	}
	HashMap.prototype = {
	  /**
	   * Store key value pair
	   * @param key key to store can be any type
	   * @param value value to store can be any type
	   */
	  put: function(key, value) {
	    this[hashKey(key, this.nextUid)] = value;
	  },
	
	  /**
	   * @param key
	   * @returns {Object} the value for the key
	   */
	  get: function(key) {
	    return this[hashKey(key, this.nextUid)];
	  },
	
	  /**
	   * Remove the key/value pair
	   * @param key
	   */
	  remove: function(key) {
	    var value = this[key = hashKey(key, this.nextUid)];
	    delete this[key];
	    return value;
	  }
	};
	
	var $$HashMapProvider = [function() {
	  this.$get = [function() {
	    return HashMap;
	  }];
	}];
	
	/**
	 * @ngdoc function
	 * @module ng
	 * @name angular.injector
	 * @kind function
	 *
	 * @description
	 * Creates an injector object that can be used for retrieving services as well as for
	 * dependency injection (see {@link guide/di dependency injection}).
	 *
	 * @param {Array.<string|Function>} modules A list of module functions or their aliases. See
	 *     {@link angular.module}. The `ng` module must be explicitly added.
	 * @param {boolean=} [strictDi=false] Whether the injector should be in strict mode, which
	 *     disallows argument name annotation inference.
	 * @returns {injector} Injector object. See {@link auto.$injector $injector}.
	 *
	 * @example
	 * Typical usage
	 * ```js
	 *   // create an injector
	 *   var $injector = angular.injector(['ng']);
	 *
	 *   // use the injector to kick off your application
	 *   // use the type inference to auto inject arguments, or use implicit injection
	 *   $injector.invoke(function($rootScope, $compile, $document) {
	 *     $compile($document)($rootScope);
	 *     $rootScope.$digest();
	 *   });
	 * ```
	 *
	 * Sometimes you want to get access to the injector of a currently running Angular app
	 * from outside Angular. Perhaps, you want to inject and compile some markup after the
	 * application has been bootstrapped. You can do this using the extra `injector()` added
	 * to JQuery/jqLite elements. See {@link angular.element}.
	 *
	 * *This is fairly rare but could be the case if a third party library is injecting the
	 * markup.*
	 *
	 * In the following example a new block of HTML containing a `ng-controller`
	 * directive is added to the end of the document body by JQuery. We then compile and link
	 * it into the current AngularJS scope.
	 *
	 * ```js
	 * var $div = $('<div ng-controller="MyCtrl">{{content.label}}</div>');
	 * $(document.body).append($div);
	 *
	 * angular.element(document).injector().invoke(function($compile) {
	 *   var scope = angular.element($div).scope();
	 *   $compile($div)(scope);
	 * });
	 * ```
	 */
	
	
	/**
	 * @ngdoc module
	 * @name auto
	 * @installation
	 * @description
	 *
	 * Implicit module which gets automatically added to each {@link auto.$injector $injector}.
	 */
	
	var ARROW_ARG = /^([^\(]+?)=>/;
	var FN_ARGS = /^[^\(]*\(\s*([^\)]*)\)/m;
	var FN_ARG_SPLIT = /,/;
	var FN_ARG = /^\s*(_?)(\S+?)\1\s*$/;
	var STRIP_COMMENTS = /((\/\/.*$)|(\/\*[\s\S]*?\*\/))/mg;
	var $injectorMinErr = minErr('$injector');
	
	function extractArgs(fn) {
	  var fnText = Function.prototype.toString.call(fn).replace(STRIP_COMMENTS, ''),
	      args = fnText.match(ARROW_ARG) || fnText.match(FN_ARGS);
	  return args;
	}
	
	function anonFn(fn) {
	  // For anonymous functions, showing at the very least the function signature can help in
	  // debugging.
	  var args = extractArgs(fn);
	  if (args) {
	    return 'function(' + (args[1] || '').replace(/[\s\r\n]+/, ' ') + ')';
	  }
	  return 'fn';
	}
	
	function annotate(fn, strictDi, name) {
	  var $inject,
	      argDecl,
	      last;
	
	  if (typeof fn === 'function') {
	    if (!($inject = fn.$inject)) {
	      $inject = [];
	      if (fn.length) {
	        if (strictDi) {
	          if (!isString(name) || !name) {
	            name = fn.name || anonFn(fn);
	          }
	          throw $injectorMinErr('strictdi',
	            '{0} is not using explicit annotation and cannot be invoked in strict mode', name);
	        }
	        argDecl = extractArgs(fn);
	        forEach(argDecl[1].split(FN_ARG_SPLIT), function(arg) {
	          arg.replace(FN_ARG, function(all, underscore, name) {
	            $inject.push(name);
	          });
	        });
	      }
	      fn.$inject = $inject;
	    }
	  } else if (isArray(fn)) {
	    last = fn.length - 1;
	    assertArgFn(fn[last], 'fn');
	    $inject = fn.slice(0, last);
	  } else {
	    assertArgFn(fn, 'fn', true);
	  }
	  return $inject;
	}
	
	///////////////////////////////////////
	
	/**
	 * @ngdoc service
	 * @name $injector
	 *
	 * @description
	 *
	 * `$injector` is used to retrieve object instances as defined by
	 * {@link auto.$provide provider}, instantiate types, invoke methods,
	 * and load modules.
	 *
	 * The following always holds true:
	 *
	 * ```js
	 *   var $injector = angular.injector();
	 *   expect($injector.get('$injector')).toBe($injector);
	 *   expect($injector.invoke(function($injector) {
	 *     return $injector;
	 *   })).toBe($injector);
	 * ```
	 *
	 * # Injection Function Annotation
	 *
	 * JavaScript does not have annotations, and annotations are needed for dependency injection. The
	 * following are all valid ways of annotating function with injection arguments and are equivalent.
	 *
	 * ```js
	 *   // inferred (only works if code not minified/obfuscated)
	 *   $injector.invoke(function(serviceA){});
	 *
	 *   // annotated
	 *   function explicit(serviceA) {};
	 *   explicit.$inject = ['serviceA'];
	 *   $injector.invoke(explicit);
	 *
	 *   // inline
	 *   $injector.invoke(['serviceA', function(serviceA){}]);
	 * ```
	 *
	 * ## Inference
	 *
	 * In JavaScript calling `toString()` on a function returns the function definition. The definition
	 * can then be parsed and the function arguments can be extracted. This method of discovering
	 * annotations is disallowed when the injector is in strict mode.
	 * *NOTE:* This does not work with minification, and obfuscation tools since these tools change the
	 * argument names.
	 *
	 * ## `$inject` Annotation
	 * By adding an `$inject` property onto a function the injection parameters can be specified.
	 *
	 * ## Inline
	 * As an array of injection names, where the last item in the array is the function to call.
	 */
	
	/**
	 * @ngdoc method
	 * @name $injector#get
	 *
	 * @description
	 * Return an instance of the service.
	 *
	 * @param {string} name The name of the instance to retrieve.
	 * @param {string=} caller An optional string to provide the origin of the function call for error messages.
	 * @return {*} The instance.
	 */
	
	/**
	 * @ngdoc method
	 * @name $injector#invoke
	 *
	 * @description
	 * Invoke the method and supply the method arguments from the `$injector`.
	 *
	 * @param {Function|Array.<string|Function>} fn The injectable function to invoke. Function parameters are
	 *   injected according to the {@link guide/di $inject Annotation} rules.
	 * @param {Object=} self The `this` for the invoked method.
	 * @param {Object=} locals Optional object. If preset then any argument names are read from this
	 *                         object first, before the `$injector` is consulted.
	 * @returns {*} the value returned by the invoked `fn` function.
	 */
	
	/**
	 * @ngdoc method
	 * @name $injector#has
	 *
	 * @description
	 * Allows the user to query if the particular service exists.
	 *
	 * @param {string} name Name of the service to query.
	 * @returns {boolean} `true` if injector has given service.
	 */
	
	/**
	 * @ngdoc method
	 * @name $injector#instantiate
	 * @description
	 * Create a new instance of JS type. The method takes a constructor function, invokes the new
	 * operator, and supplies all of the arguments to the constructor function as specified by the
	 * constructor annotation.
	 *
	 * @param {Function} Type Annotated constructor function.
	 * @param {Object=} locals Optional object. If preset then any argument names are read from this
	 * object first, before the `$injector` is consulted.
	 * @returns {Object} new instance of `Type`.
	 */
	
	/**
	 * @ngdoc method
	 * @name $injector#annotate
	 *
	 * @description
	 * Returns an array of service names which the function is requesting for injection. This API is
	 * used by the injector to determine which services need to be injected into the function when the
	 * function is invoked. There are three ways in which the function can be annotated with the needed
	 * dependencies.
	 *
	 * # Argument names
	 *
	 * The simplest form is to extract the dependencies from the arguments of the function. This is done
	 * by converting the function into a string using `toString()` method and extracting the argument
	 * names.
	 * ```js
	 *   // Given
	 *   function MyController($scope, $route) {
	 *     // ...
	 *   }
	 *
	 *   // Then
	 *   expect(injector.annotate(MyController)).toEqual(['$scope', '$route']);
	 * ```
	 *
	 * You can disallow this method by using strict injection mode.
	 *
	 * This method does not work with code minification / obfuscation. For this reason the following
	 * annotation strategies are supported.
	 *
	 * # The `$inject` property
	 *
	 * If a function has an `$inject` property and its value is an array of strings, then the strings
	 * represent names of services to be injected into the function.
	 * ```js
	 *   // Given
	 *   var MyController = function(obfuscatedScope, obfuscatedRoute) {
	 *     // ...
	 *   }
	 *   // Define function dependencies
	 *   MyController['$inject'] = ['$scope', '$route'];
	 *
	 *   // Then
	 *   expect(injector.annotate(MyController)).toEqual(['$scope', '$route']);
	 * ```
	 *
	 * # The array notation
	 *
	 * It is often desirable to inline Injected functions and that's when setting the `$inject` property
	 * is very inconvenient. In these situations using the array notation to specify the dependencies in
	 * a way that survives minification is a better choice:
	 *
	 * ```js
	 *   // We wish to write this (not minification / obfuscation safe)
	 *   injector.invoke(function($compile, $rootScope) {
	 *     // ...
	 *   });
	 *
	 *   // We are forced to write break inlining
	 *   var tmpFn = function(obfuscatedCompile, obfuscatedRootScope) {
	 *     // ...
	 *   };
	 *   tmpFn.$inject = ['$compile', '$rootScope'];
	 *   injector.invoke(tmpFn);
	 *
	 *   // To better support inline function the inline annotation is supported
	 *   injector.invoke(['$compile', '$rootScope', function(obfCompile, obfRootScope) {
	 *     // ...
	 *   }]);
	 *
	 *   // Therefore
	 *   expect(injector.annotate(
	 *      ['$compile', '$rootScope', function(obfus_$compile, obfus_$rootScope) {}])
	 *    ).toEqual(['$compile', '$rootScope']);
	 * ```
	 *
	 * @param {Function|Array.<string|Function>} fn Function for which dependent service names need to
	 * be retrieved as described above.
	 *
	 * @param {boolean=} [strictDi=false] Disallow argument name annotation inference.
	 *
	 * @returns {Array.<string>} The names of the services which the function requires.
	 */
	
	
	
	
	/**
	 * @ngdoc service
	 * @name $provide
	 *
	 * @description
	 *
	 * The {@link auto.$provide $provide} service has a number of methods for registering components
	 * with the {@link auto.$injector $injector}. Many of these functions are also exposed on
	 * {@link angular.Module}.
	 *
	 * An Angular **service** is a singleton object created by a **service factory**.  These **service
	 * factories** are functions which, in turn, are created by a **service provider**.
	 * The **service providers** are constructor functions. When instantiated they must contain a
	 * property called `$get`, which holds the **service factory** function.
	 *
	 * When you request a service, the {@link auto.$injector $injector} is responsible for finding the
	 * correct **service provider**, instantiating it and then calling its `$get` **service factory**
	 * function to get the instance of the **service**.
	 *
	 * Often services have no configuration options and there is no need to add methods to the service
	 * provider.  The provider will be no more than a constructor function with a `$get` property. For
	 * these cases the {@link auto.$provide $provide} service has additional helper methods to register
	 * services without specifying a provider.
	 *
	 * * {@link auto.$provide#provider provider(provider)} - registers a **service provider** with the
	 *     {@link auto.$injector $injector}
	 * * {@link auto.$provide#constant constant(obj)} - registers a value/object that can be accessed by
	 *     providers and services.
	 * * {@link auto.$provide#value value(obj)} - registers a value/object that can only be accessed by
	 *     services, not providers.
	 * * {@link auto.$provide#factory factory(fn)} - registers a service **factory function**, `fn`,
	 *     that will be wrapped in a **service provider** object, whose `$get` property will contain the
	 *     given factory function.
	 * * {@link auto.$provide#service service(class)} - registers a **constructor function**, `class`
	 *     that will be wrapped in a **service provider** object, whose `$get` property will instantiate
	 *      a new object using the given constructor function.
	 *
	 * See the individual methods for more information and examples.
	 */
	
	/**
	 * @ngdoc method
	 * @name $provide#provider
	 * @description
	 *
	 * Register a **provider function** with the {@link auto.$injector $injector}. Provider functions
	 * are constructor functions, whose instances are responsible for "providing" a factory for a
	 * service.
	 *
	 * Service provider names start with the name of the service they provide followed by `Provider`.
	 * For example, the {@link ng.$log $log} service has a provider called
	 * {@link ng.$logProvider $logProvider}.
	 *
	 * Service provider objects can have additional methods which allow configuration of the provider
	 * and its service. Importantly, you can configure what kind of service is created by the `$get`
	 * method, or how that service will act. For example, the {@link ng.$logProvider $logProvider} has a
	 * method {@link ng.$logProvider#debugEnabled debugEnabled}
	 * which lets you specify whether the {@link ng.$log $log} service will log debug messages to the
	 * console or not.
	 *
	 * @param {string} name The name of the instance. NOTE: the provider will be available under `name +
	                        'Provider'` key.
	 * @param {(Object|function())} provider If the provider is:
	 *
	 *   - `Object`: then it should have a `$get` method. The `$get` method will be invoked using
	 *     {@link auto.$injector#invoke $injector.invoke()} when an instance needs to be created.
	 *   - `Constructor`: a new instance of the provider will be created using
	 *     {@link auto.$injector#instantiate $injector.instantiate()}, then treated as `object`.
	 *
	 * @returns {Object} registered provider instance
	
	 * @example
	 *
	 * The following example shows how to create a simple event tracking service and register it using
	 * {@link auto.$provide#provider $provide.provider()}.
	 *
	 * ```js
	 *  // Define the eventTracker provider
	 *  function EventTrackerProvider() {
	 *    var trackingUrl = '/track';
	 *
	 *    // A provider method for configuring where the tracked events should been saved
	 *    this.setTrackingUrl = function(url) {
	 *      trackingUrl = url;
	 *    };
	 *
	 *    // The service factory function
	 *    this.$get = ['$http', function($http) {
	 *      var trackedEvents = {};
	 *      return {
	 *        // Call this to track an event
	 *        event: function(event) {
	 *          var count = trackedEvents[event] || 0;
	 *          count += 1;
	 *          trackedEvents[event] = count;
	 *          return count;
	 *        },
	 *        // Call this to save the tracked events to the trackingUrl
	 *        save: function() {
	 *          $http.post(trackingUrl, trackedEvents);
	 *        }
	 *      };
	 *    }];
	 *  }
	 *
	 *  describe('eventTracker', function() {
	 *    var postSpy;
	 *
	 *    beforeEach(module(function($provide) {
	 *      // Register the eventTracker provider
	 *      $provide.provider('eventTracker', EventTrackerProvider);
	 *    }));
	 *
	 *    beforeEach(module(function(eventTrackerProvider) {
	 *      // Configure eventTracker provider
	 *      eventTrackerProvider.setTrackingUrl('/custom-track');
	 *    }));
	 *
	 *    it('tracks events', inject(function(eventTracker) {
	 *      expect(eventTracker.event('login')).toEqual(1);
	 *      expect(eventTracker.event('login')).toEqual(2);
	 *    }));
	 *
	 *    it('saves to the tracking url', inject(function(eventTracker, $http) {
	 *      postSpy = spyOn($http, 'post');
	 *      eventTracker.event('login');
	 *      eventTracker.save();
	 *      expect(postSpy).toHaveBeenCalled();
	 *      expect(postSpy.mostRecentCall.args[0]).not.toEqual('/track');
	 *      expect(postSpy.mostRecentCall.args[0]).toEqual('/custom-track');
	 *      expect(postSpy.mostRecentCall.args[1]).toEqual({ 'login': 1 });
	 *    }));
	 *  });
	 * ```
	 */
	
	/**
	 * @ngdoc method
	 * @name $provide#factory
	 * @description
	 *
	 * Register a **service factory**, which will be called to return the service instance.
	 * This is short for registering a service where its provider consists of only a `$get` property,
	 * which is the given service factory function.
	 * You should use {@link auto.$provide#factory $provide.factory(getFn)} if you do not need to
	 * configure your service in a provider.
	 *
	 * @param {string} name The name of the instance.
	 * @param {Function|Array.<string|Function>} $getFn The injectable $getFn for the instance creation.
	 *                      Internally this is a short hand for `$provide.provider(name, {$get: $getFn})`.
	 * @returns {Object} registered provider instance
	 *
	 * @example
	 * Here is an example of registering a service
	 * ```js
	 *   $provide.factory('ping', ['$http', function($http) {
	 *     return function ping() {
	 *       return $http.send('/ping');
	 *     };
	 *   }]);
	 * ```
	 * You would then inject and use this service like this:
	 * ```js
	 *   someModule.controller('Ctrl', ['ping', function(ping) {
	 *     ping();
	 *   }]);
	 * ```
	 */
	
	
	/**
	 * @ngdoc method
	 * @name $provide#service
	 * @description
	 *
	 * Register a **service constructor**, which will be invoked with `new` to create the service
	 * instance.
	 * This is short for registering a service where its provider's `$get` property is a factory
	 * function that returns an instance instantiated by the injector from the service constructor
	 * function.
	 *
	 * Internally it looks a bit like this:
	 *
	 * ```
	 * {
	 *   $get: function() {
	 *     return $injector.instantiate(constructor);
	 *   }
	 * }
	 * ```
	 *
	 *
	 * You should use {@link auto.$provide#service $provide.service(class)} if you define your service
	 * as a type/class.
	 *
	 * @param {string} name The name of the instance.
	 * @param {Function|Array.<string|Function>} constructor An injectable class (constructor function)
	 *     that will be instantiated.
	 * @returns {Object} registered provider instance
	 *
	 * @example
	 * Here is an example of registering a service using
	 * {@link auto.$provide#service $provide.service(class)}.
	 * ```js
	 *   var Ping = function($http) {
	 *     this.$http = $http;
	 *   };
	 *
	 *   Ping.$inject = ['$http'];
	 *
	 *   Ping.prototype.send = function() {
	 *     return this.$http.get('/ping');
	 *   };
	 *   $provide.service('ping', Ping);
	 * ```
	 * You would then inject and use this service like this:
	 * ```js
	 *   someModule.controller('Ctrl', ['ping', function(ping) {
	 *     ping.send();
	 *   }]);
	 * ```
	 */
	
	
	/**
	 * @ngdoc method
	 * @name $provide#value
	 * @description
	 *
	 * Register a **value service** with the {@link auto.$injector $injector}, such as a string, a
	 * number, an array, an object or a function. This is short for registering a service where its
	 * provider's `$get` property is a factory function that takes no arguments and returns the **value
	 * service**. That also means it is not possible to inject other services into a value service.
	 *
	 * Value services are similar to constant services, except that they cannot be injected into a
	 * module configuration function (see {@link angular.Module#config}) but they can be overridden by
	 * an Angular {@link auto.$provide#decorator decorator}.
	 *
	 * @param {string} name The name of the instance.
	 * @param {*} value The value.
	 * @returns {Object} registered provider instance
	 *
	 * @example
	 * Here are some examples of creating value services.
	 * ```js
	 *   $provide.value('ADMIN_USER', 'admin');
	 *
	 *   $provide.value('RoleLookup', { admin: 0, writer: 1, reader: 2 });
	 *
	 *   $provide.value('halfOf', function(value) {
	 *     return value / 2;
	 *   });
	 * ```
	 */
	
	
	/**
	 * @ngdoc method
	 * @name $provide#constant
	 * @description
	 *
	 * Register a **constant service** with the {@link auto.$injector $injector}, such as a string,
	 * a number, an array, an object or a function. Like the {@link auto.$provide#value value}, it is not
	 * possible to inject other services into a constant.
	 *
	 * But unlike {@link auto.$provide#value value}, a constant can be
	 * injected into a module configuration function (see {@link angular.Module#config}) and it cannot
	 * be overridden by an Angular {@link auto.$provide#decorator decorator}.
	 *
	 * @param {string} name The name of the constant.
	 * @param {*} value The constant value.
	 * @returns {Object} registered instance
	 *
	 * @example
	 * Here a some examples of creating constants:
	 * ```js
	 *   $provide.constant('SHARD_HEIGHT', 306);
	 *
	 *   $provide.constant('MY_COLOURS', ['red', 'blue', 'grey']);
	 *
	 *   $provide.constant('double', function(value) {
	 *     return value * 2;
	 *   });
	 * ```
	 */
	
	
	/**
	 * @ngdoc method
	 * @name $provide#decorator
	 * @description
	 *
	 * Register a **service decorator** with the {@link auto.$injector $injector}. A service decorator
	 * intercepts the creation of a service, allowing it to override or modify the behavior of the
	 * service. The object returned by the decorator may be the original service, or a new service
	 * object which replaces or wraps and delegates to the original service.
	 *
	 * @param {string} name The name of the service to decorate.
	 * @param {Function|Array.<string|Function>} decorator This function will be invoked when the service needs to be
	 *    instantiated and should return the decorated service instance. The function is called using
	 *    the {@link auto.$injector#invoke injector.invoke} method and is therefore fully injectable.
	 *    Local injection arguments:
	 *
	 *    * `$delegate` - The original service instance, which can be monkey patched, configured,
	 *      decorated or delegated to.
	 *
	 * @example
	 * Here we decorate the {@link ng.$log $log} service to convert warnings to errors by intercepting
	 * calls to {@link ng.$log#error $log.warn()}.
	 * ```js
	 *   $provide.decorator('$log', ['$delegate', function($delegate) {
	 *     $delegate.warn = $delegate.error;
	 *     return $delegate;
	 *   }]);
	 * ```
	 */
	
	
	function createInjector(modulesToLoad, strictDi) {
	  strictDi = (strictDi === true);
	  var INSTANTIATING = {},
	      providerSuffix = 'Provider',
	      path = [],
	      loadedModules = new HashMap([], true),
	      providerCache = {
	        $provide: {
	            provider: supportObject(provider),
	            factory: supportObject(factory),
	            service: supportObject(service),
	            value: supportObject(value),
	            constant: supportObject(constant),
	            decorator: decorator
	          }
	      },
	      providerInjector = (providerCache.$injector =
	          createInternalInjector(providerCache, function(serviceName, caller) {
	            if (angular.isString(caller)) {
	              path.push(caller);
	            }
	            throw $injectorMinErr('unpr', "Unknown provider: {0}", path.join(' <- '));
	          })),
	      instanceCache = {},
	      protoInstanceInjector =
	          createInternalInjector(instanceCache, function(serviceName, caller) {
	            var provider = providerInjector.get(serviceName + providerSuffix, caller);
	            return instanceInjector.invoke(
	                provider.$get, provider, undefined, serviceName);
	          }),
	      instanceInjector = protoInstanceInjector;
	
	  providerCache['$injector' + providerSuffix] = { $get: valueFn(protoInstanceInjector) };
	  var runBlocks = loadModules(modulesToLoad);
	  instanceInjector = protoInstanceInjector.get('$injector');
	  instanceInjector.strictDi = strictDi;
	  forEach(runBlocks, function(fn) { if (fn) instanceInjector.invoke(fn); });
	
	  return instanceInjector;
	
	  ////////////////////////////////////
	  // $provider
	  ////////////////////////////////////
	
	  function supportObject(delegate) {
	    return function(key, value) {
	      if (isObject(key)) {
	        forEach(key, reverseParams(delegate));
	      } else {
	        return delegate(key, value);
	      }
	    };
	  }
	
	  function provider(name, provider_) {
	    assertNotHasOwnProperty(name, 'service');
	    if (isFunction(provider_) || isArray(provider_)) {
	      provider_ = providerInjector.instantiate(provider_);
	    }
	    if (!provider_.$get) {
	      throw $injectorMinErr('pget', "Provider '{0}' must define $get factory method.", name);
	    }
	    return providerCache[name + providerSuffix] = provider_;
	  }
	
	  function enforceReturnValue(name, factory) {
	    return function enforcedReturnValue() {
	      var result = instanceInjector.invoke(factory, this);
	      if (isUndefined(result)) {
	        throw $injectorMinErr('undef', "Provider '{0}' must return a value from $get factory method.", name);
	      }
	      return result;
	    };
	  }
	
	  function factory(name, factoryFn, enforce) {
	    return provider(name, {
	      $get: enforce !== false ? enforceReturnValue(name, factoryFn) : factoryFn
	    });
	  }
	
	  function service(name, constructor) {
	    return factory(name, ['$injector', function($injector) {
	      return $injector.instantiate(constructor);
	    }]);
	  }
	
	  function value(name, val) { return factory(name, valueFn(val), false); }
	
	  function constant(name, value) {
	    assertNotHasOwnProperty(name, 'constant');
	    providerCache[name] = value;
	    instanceCache[name] = value;
	  }
	
	  function decorator(serviceName, decorFn) {
	    var origProvider = providerInjector.get(serviceName + providerSuffix),
	        orig$get = origProvider.$get;
	
	    origProvider.$get = function() {
	      var origInstance = instanceInjector.invoke(orig$get, origProvider);
	      return instanceInjector.invoke(decorFn, null, {$delegate: origInstance});
	    };
	  }
	
	  ////////////////////////////////////
	  // Module Loading
	  ////////////////////////////////////
	  function loadModules(modulesToLoad) {
	    assertArg(isUndefined(modulesToLoad) || isArray(modulesToLoad), 'modulesToLoad', 'not an array');
	    var runBlocks = [], moduleFn;
	    forEach(modulesToLoad, function(module) {
	      if (loadedModules.get(module)) return;
	      loadedModules.put(module, true);
	
	      function runInvokeQueue(queue) {
	        var i, ii;
	        for (i = 0, ii = queue.length; i < ii; i++) {
	          var invokeArgs = queue[i],
	              provider = providerInjector.get(invokeArgs[0]);
	
	          provider[invokeArgs[1]].apply(provider, invokeArgs[2]);
	        }
	      }
	
	      try {
	        if (isString(module)) {
	          moduleFn = angularModule(module);
	          runBlocks = runBlocks.concat(loadModules(moduleFn.requires)).concat(moduleFn._runBlocks);
	          runInvokeQueue(moduleFn._invokeQueue);
	          runInvokeQueue(moduleFn._configBlocks);
	        } else if (isFunction(module)) {
	            runBlocks.push(providerInjector.invoke(module));
	        } else if (isArray(module)) {
	            runBlocks.push(providerInjector.invoke(module));
	        } else {
	          assertArgFn(module, 'module');
	        }
	      } catch (e) {
	        if (isArray(module)) {
	          module = module[module.length - 1];
	        }
	        if (e.message && e.stack && e.stack.indexOf(e.message) == -1) {
	          // Safari & FF's stack traces don't contain error.message content
	          // unlike those of Chrome and IE
	          // So if stack doesn't contain message, we create a new string that contains both.
	          // Since error.stack is read-only in Safari, I'm overriding e and not e.stack here.
	          /* jshint -W022 */
	          e = e.message + '\n' + e.stack;
	        }
	        throw $injectorMinErr('modulerr', "Failed to instantiate module {0} due to:\n{1}",
	                  module, e.stack || e.message || e);
	      }
	    });
	    return runBlocks;
	  }
	
	  ////////////////////////////////////
	  // internal Injector
	  ////////////////////////////////////
	
	  function createInternalInjector(cache, factory) {
	
	    function getService(serviceName, caller) {
	      if (cache.hasOwnProperty(serviceName)) {
	        if (cache[serviceName] === INSTANTIATING) {
	          throw $injectorMinErr('cdep', 'Circular dependency found: {0}',
	                    serviceName + ' <- ' + path.join(' <- '));
	        }
	        return cache[serviceName];
	      } else {
	        try {
	          path.unshift(serviceName);
	          cache[serviceName] = INSTANTIATING;
	          return cache[serviceName] = factory(serviceName, caller);
	        } catch (err) {
	          if (cache[serviceName] === INSTANTIATING) {
	            delete cache[serviceName];
	          }
	          throw err;
	        } finally {
	          path.shift();
	        }
	      }
	    }
	
	
	    function injectionArgs(fn, locals, serviceName) {
	      var args = [],
	          $inject = createInjector.$$annotate(fn, strictDi, serviceName);
	
	      for (var i = 0, length = $inject.length; i < length; i++) {
	        var key = $inject[i];
	        if (typeof key !== 'string') {
	          throw $injectorMinErr('itkn',
	                  'Incorrect injection token! Expected service name as string, got {0}', key);
	        }
	        args.push(locals && locals.hasOwnProperty(key) ? locals[key] :
	                                                         getService(key, serviceName));
	      }
	      return args;
	    }
	
	    function isClass(func) {
	      // IE 9-11 do not support classes and IE9 leaks with the code below.
	      if (msie <= 11) {
	        return false;
	      }
	      // Workaround for MS Edge.
	      // Check https://connect.microsoft.com/IE/Feedback/Details/2211653
	      return typeof func === 'function'
	        && /^(?:class\s|constructor\()/.test(Function.prototype.toString.call(func));
	    }
	
	    function invoke(fn, self, locals, serviceName) {
	      if (typeof locals === 'string') {
	        serviceName = locals;
	        locals = null;
	      }
	
	      var args = injectionArgs(fn, locals, serviceName);
	      if (isArray(fn)) {
	        fn = fn[fn.length - 1];
	      }
	
	      if (!isClass(fn)) {
	        // http://jsperf.com/angularjs-invoke-apply-vs-switch
	        // #5388
	        return fn.apply(self, args);
	      } else {
	        args.unshift(null);
	        return new (Function.prototype.bind.apply(fn, args))();
	      }
	    }
	
	
	    function instantiate(Type, locals, serviceName) {
	      // Check if Type is annotated and use just the given function at n-1 as parameter
	      // e.g. someModule.factory('greeter', ['$window', function(renamed$window) {}]);
	      var ctor = (isArray(Type) ? Type[Type.length - 1] : Type);
	      var args = injectionArgs(Type, locals, serviceName);
	      // Empty object at position 0 is ignored for invocation with `new`, but required.
	      args.unshift(null);
	      return new (Function.prototype.bind.apply(ctor, args))();
	    }
	
	
	    return {
	      invoke: invoke,
	      instantiate: instantiate,
	      get: getService,
	      annotate: createInjector.$$annotate,
	      has: function(name) {
	        return providerCache.hasOwnProperty(name + providerSuffix) || cache.hasOwnProperty(name);
	      }
	    };
	  }
	}
	
	createInjector.$$annotate = annotate;
	
	/**
	 * @ngdoc provider
	 * @name $anchorScrollProvider
	 *
	 * @description
	 * Use `$anchorScrollProvider` to disable automatic scrolling whenever
	 * {@link ng.$location#hash $location.hash()} changes.
	 */
	function $AnchorScrollProvider() {
	
	  var autoScrollingEnabled = true;
	
	  /**
	   * @ngdoc method
	   * @name $anchorScrollProvider#disableAutoScrolling
	   *
	   * @description
	   * By default, {@link ng.$anchorScroll $anchorScroll()} will automatically detect changes to
	   * {@link ng.$location#hash $location.hash()} and scroll to the element matching the new hash.<br />
	   * Use this method to disable automatic scrolling.
	   *
	   * If automatic scrolling is disabled, one must explicitly call
	   * {@link ng.$anchorScroll $anchorScroll()} in order to scroll to the element related to the
	   * current hash.
	   */
	  this.disableAutoScrolling = function() {
	    autoScrollingEnabled = false;
	  };
	
	  /**
	   * @ngdoc service
	   * @name $anchorScroll
	   * @kind function
	   * @requires $window
	   * @requires $location
	   * @requires $rootScope
	   *
	   * @description
	   * When called, it scrolls to the element related to the specified `hash` or (if omitted) to the
	   * current value of {@link ng.$location#hash $location.hash()}, according to the rules specified
	   * in the
	   * [HTML5 spec](http://www.w3.org/html/wg/drafts/html/master/browsers.html#the-indicated-part-of-the-document).
	   *
	   * It also watches the {@link ng.$location#hash $location.hash()} and automatically scrolls to
	   * match any anchor whenever it changes. This can be disabled by calling
	   * {@link ng.$anchorScrollProvider#disableAutoScrolling $anchorScrollProvider.disableAutoScrolling()}.
	   *
	   * Additionally, you can use its {@link ng.$anchorScroll#yOffset yOffset} property to specify a
	   * vertical scroll-offset (either fixed or dynamic).
	   *
	   * @param {string=} hash The hash specifying the element to scroll to. If omitted, the value of
	   *                       {@link ng.$location#hash $location.hash()} will be used.
	   *
	   * @property {(number|function|jqLite)} yOffset
	   * If set, specifies a vertical scroll-offset. This is often useful when there are fixed
	   * positioned elements at the top of the page, such as navbars, headers etc.
	   *
	   * `yOffset` can be specified in various ways:
	   * - **number**: A fixed number of pixels to be used as offset.<br /><br />
	   * - **function**: A getter function called everytime `$anchorScroll()` is executed. Must return
	   *   a number representing the offset (in pixels).<br /><br />
	   * - **jqLite**: A jqLite/jQuery element to be used for specifying the offset. The distance from
	   *   the top of the page to the element's bottom will be used as offset.<br />
	   *   **Note**: The element will be taken into account only as long as its `position` is set to
	   *   `fixed`. This option is useful, when dealing with responsive navbars/headers that adjust
	   *   their height and/or positioning according to the viewport's size.
	   *
	   * <br />
	   * <div class="alert alert-warning">
	   * In order for `yOffset` to work properly, scrolling should take place on the document's root and
	   * not some child element.
	   * </div>
	   *
	   * @example
	     <example module="anchorScrollExample">
	       <file name="index.html">
	         <div id="scrollArea" ng-controller="ScrollController">
	           <a ng-click="gotoBottom()">Go to bottom</a>
	           <a id="bottom"></a> You're at the bottom!
	         </div>
	       </file>
	       <file name="script.js">
	         angular.module('anchorScrollExample', [])
	           .controller('ScrollController', ['$scope', '$location', '$anchorScroll',
	             function ($scope, $location, $anchorScroll) {
	               $scope.gotoBottom = function() {
	                 // set the location.hash to the id of
	                 // the element you wish to scroll to.
	                 $location.hash('bottom');
	
	                 // call $anchorScroll()
	                 $anchorScroll();
	               };
	             }]);
	       </file>
	       <file name="style.css">
	         #scrollArea {
	           height: 280px;
	           overflow: auto;
	         }
	
	         #bottom {
	           display: block;
	           margin-top: 2000px;
	         }
	       </file>
	     </example>
	   *
	   * <hr />
	   * The example below illustrates the use of a vertical scroll-offset (specified as a fixed value).
	   * See {@link ng.$anchorScroll#yOffset $anchorScroll.yOffset} for more details.
	   *
	   * @example
	     <example module="anchorScrollOffsetExample">
	       <file name="index.html">
	         <div class="fixed-header" ng-controller="headerCtrl">
	           <a href="" ng-click="gotoAnchor(x)" ng-repeat="x in [1,2,3,4,5]">
	             Go to anchor {{x}}
	           </a>
	         </div>
	         <div id="anchor{{x}}" class="anchor" ng-repeat="x in [1,2,3,4,5]">
	           Anchor {{x}} of 5
	         </div>
	       </file>
	       <file name="script.js">
	         angular.module('anchorScrollOffsetExample', [])
	           .run(['$anchorScroll', function($anchorScroll) {
	             $anchorScroll.yOffset = 50;   // always scroll by 50 extra pixels
	           }])
	           .controller('headerCtrl', ['$anchorScroll', '$location', '$scope',
	             function ($anchorScroll, $location, $scope) {
	               $scope.gotoAnchor = function(x) {
	                 var newHash = 'anchor' + x;
	                 if ($location.hash() !== newHash) {
	                   // set the $location.hash to `newHash` and
	                   // $anchorScroll will automatically scroll to it
	                   $location.hash('anchor' + x);
	                 } else {
	                   // call $anchorScroll() explicitly,
	                   // since $location.hash hasn't changed
	                   $anchorScroll();
	                 }
	               };
	             }
	           ]);
	       </file>
	       <file name="style.css">
	         body {
	           padding-top: 50px;
	         }
	
	         .anchor {
	           border: 2px dashed DarkOrchid;
	           padding: 10px 10px 200px 10px;
	         }
	
	         .fixed-header {
	           background-color: rgba(0, 0, 0, 0.2);
	           height: 50px;
	           position: fixed;
	           top: 0; left: 0; right: 0;
	         }
	
	         .fixed-header > a {
	           display: inline-block;
	           margin: 5px 15px;
	         }
	       </file>
	     </example>
	   */
	  this.$get = ['$window', '$location', '$rootScope', function($window, $location, $rootScope) {
	    var document = $window.document;
	
	    // Helper function to get first anchor from a NodeList
	    // (using `Array#some()` instead of `angular#forEach()` since it's more performant
	    //  and working in all supported browsers.)
	    function getFirstAnchor(list) {
	      var result = null;
	      Array.prototype.some.call(list, function(element) {
	        if (nodeName_(element) === 'a') {
	          result = element;
	          return true;
	        }
	      });
	      return result;
	    }
	
	    function getYOffset() {
	
	      var offset = scroll.yOffset;
	
	      if (isFunction(offset)) {
	        offset = offset();
	      } else if (isElement(offset)) {
	        var elem = offset[0];
	        var style = $window.getComputedStyle(elem);
	        if (style.position !== 'fixed') {
	          offset = 0;
	        } else {
	          offset = elem.getBoundingClientRect().bottom;
	        }
	      } else if (!isNumber(offset)) {
	        offset = 0;
	      }
	
	      return offset;
	    }
	
	    function scrollTo(elem) {
	      if (elem) {
	        elem.scrollIntoView();
	
	        var offset = getYOffset();
	
	        if (offset) {
	          // `offset` is the number of pixels we should scroll UP in order to align `elem` properly.
	          // This is true ONLY if the call to `elem.scrollIntoView()` initially aligns `elem` at the
	          // top of the viewport.
	          //
	          // IF the number of pixels from the top of `elem` to the end of the page's content is less
	          // than the height of the viewport, then `elem.scrollIntoView()` will align the `elem` some
	          // way down the page.
	          //
	          // This is often the case for elements near the bottom of the page.
	          //
	          // In such cases we do not need to scroll the whole `offset` up, just the difference between
	          // the top of the element and the offset, which is enough to align the top of `elem` at the
	          // desired position.
	          var elemTop = elem.getBoundingClientRect().top;
	          $window.scrollBy(0, elemTop - offset);
	        }
	      } else {
	        $window.scrollTo(0, 0);
	      }
	    }
	
	    function scroll(hash) {
	      hash = isString(hash) ? hash : $location.hash();
	      var elm;
	
	      // empty hash, scroll to the top of the page
	      if (!hash) scrollTo(null);
	
	      // element with given id
	      else if ((elm = document.getElementById(hash))) scrollTo(elm);
	
	      // first anchor with given name :-D
	      else if ((elm = getFirstAnchor(document.getElementsByName(hash)))) scrollTo(elm);
	
	      // no element and hash == 'top', scroll to the top of the page
	      else if (hash === 'top') scrollTo(null);
	    }
	
	    // does not scroll when user clicks on anchor link that is currently on
	    // (no url change, no $location.hash() change), browser native does scroll
	    if (autoScrollingEnabled) {
	      $rootScope.$watch(function autoScrollWatch() {return $location.hash();},
	        function autoScrollWatchAction(newVal, oldVal) {
	          // skip the initial scroll if $location.hash is empty
	          if (newVal === oldVal && newVal === '') return;
	
	          jqLiteDocumentLoaded(function() {
	            $rootScope.$evalAsync(scroll);
	          });
	        });
	    }
	
	    return scroll;
	  }];
	}
	
	var $animateMinErr = minErr('$animate');
	var ELEMENT_NODE = 1;
	var NG_ANIMATE_CLASSNAME = 'ng-animate';
	
	function mergeClasses(a,b) {
	  if (!a && !b) return '';
	  if (!a) return b;
	  if (!b) return a;
	  if (isArray(a)) a = a.join(' ');
	  if (isArray(b)) b = b.join(' ');
	  return a + ' ' + b;
	}
	
	function extractElementNode(element) {
	  for (var i = 0; i < element.length; i++) {
	    var elm = element[i];
	    if (elm.nodeType === ELEMENT_NODE) {
	      return elm;
	    }
	  }
	}
	
	function splitClasses(classes) {
	  if (isString(classes)) {
	    classes = classes.split(' ');
	  }
	
	  // Use createMap() to prevent class assumptions involving property names in
	  // Object.prototype
	  var obj = createMap();
	  forEach(classes, function(klass) {
	    // sometimes the split leaves empty string values
	    // incase extra spaces were applied to the options
	    if (klass.length) {
	      obj[klass] = true;
	    }
	  });
	  return obj;
	}
	
	// if any other type of options value besides an Object value is
	// passed into the $animate.method() animation then this helper code
	// will be run which will ignore it. While this patch is not the
	// greatest solution to this, a lot of existing plugins depend on
	// $animate to either call the callback (< 1.2) or return a promise
	// that can be changed. This helper function ensures that the options
	// are wiped clean incase a callback function is provided.
	function prepareAnimateOptions(options) {
	  return isObject(options)
	      ? options
	      : {};
	}
	
	var $$CoreAnimateJsProvider = function() {
	  this.$get = noop;
	};
	
	// this is prefixed with Core since it conflicts with
	// the animateQueueProvider defined in ngAnimate/animateQueue.js
	var $$CoreAnimateQueueProvider = function() {
	  var postDigestQueue = new HashMap();
	  var postDigestElements = [];
	
	  this.$get = ['$$AnimateRunner', '$rootScope',
	       function($$AnimateRunner,   $rootScope) {
	    return {
	      enabled: noop,
	      on: noop,
	      off: noop,
	      pin: noop,
	
	      push: function(element, event, options, domOperation) {
	        domOperation        && domOperation();
	
	        options = options || {};
	        options.from        && element.css(options.from);
	        options.to          && element.css(options.to);
	
	        if (options.addClass || options.removeClass) {
	          addRemoveClassesPostDigest(element, options.addClass, options.removeClass);
	        }
	
	        var runner = new $$AnimateRunner(); // jshint ignore:line
	
	        // since there are no animations to run the runner needs to be
	        // notified that the animation call is complete.
	        runner.complete();
	        return runner;
	      }
	    };
	
	
	    function updateData(data, classes, value) {
	      var changed = false;
	      if (classes) {
	        classes = isString(classes) ? classes.split(' ') :
	                  isArray(classes) ? classes : [];
	        forEach(classes, function(className) {
	          if (className) {
	            changed = true;
	            data[className] = value;
	          }
	        });
	      }
	      return changed;
	    }
	
	    function handleCSSClassChanges() {
	      forEach(postDigestElements, function(element) {
	        var data = postDigestQueue.get(element);
	        if (data) {
	          var existing = splitClasses(element.attr('class'));
	          var toAdd = '';
	          var toRemove = '';
	          forEach(data, function(status, className) {
	            var hasClass = !!existing[className];
	            if (status !== hasClass) {
	              if (status) {
	                toAdd += (toAdd.length ? ' ' : '') + className;
	              } else {
	                toRemove += (toRemove.length ? ' ' : '') + className;
	              }
	            }
	          });
	
	          forEach(element, function(elm) {
	            toAdd    && jqLiteAddClass(elm, toAdd);
	            toRemove && jqLiteRemoveClass(elm, toRemove);
	          });
	          postDigestQueue.remove(element);
	        }
	      });
	      postDigestElements.length = 0;
	    }
	
	
	    function addRemoveClassesPostDigest(element, add, remove) {
	      var data = postDigestQueue.get(element) || {};
	
	      var classesAdded = updateData(data, add, true);
	      var classesRemoved = updateData(data, remove, false);
	
	      if (classesAdded || classesRemoved) {
	
	        postDigestQueue.put(element, data);
	        postDigestElements.push(element);
	
	        if (postDigestElements.length === 1) {
	          $rootScope.$$postDigest(handleCSSClassChanges);
	        }
	      }
	    }
	  }];
	};
	
	/**
	 * @ngdoc provider
	 * @name $animateProvider
	 *
	 * @description
	 * Default implementation of $animate that doesn't perform any animations, instead just
	 * synchronously performs DOM updates and resolves the returned runner promise.
	 *
	 * In order to enable animations the `ngAnimate` module has to be loaded.
	 *
	 * To see the functional implementation check out `src/ngAnimate/animate.js`.
	 */
	var $AnimateProvider = ['$provide', function($provide) {
	  var provider = this;
	
	  this.$$registeredAnimations = Object.create(null);
	
	   /**
	   * @ngdoc method
	   * @name $animateProvider#register
	   *
	   * @description
	   * Registers a new injectable animation factory function. The factory function produces the
	   * animation object which contains callback functions for each event that is expected to be
	   * animated.
	   *
	   *   * `eventFn`: `function(element, ... , doneFunction, options)`
	   *   The element to animate, the `doneFunction` and the options fed into the animation. Depending
	   *   on the type of animation additional arguments will be injected into the animation function. The
	   *   list below explains the function signatures for the different animation methods:
	   *
	   *   - setClass: function(element, addedClasses, removedClasses, doneFunction, options)
	   *   - addClass: function(element, addedClasses, doneFunction, options)
	   *   - removeClass: function(element, removedClasses, doneFunction, options)
	   *   - enter, leave, move: function(element, doneFunction, options)
	   *   - animate: function(element, fromStyles, toStyles, doneFunction, options)
	   *
	   *   Make sure to trigger the `doneFunction` once the animation is fully complete.
	   *
	   * ```js
	   *   return {
	   *     //enter, leave, move signature
	   *     eventFn : function(element, done, options) {
	   *       //code to run the animation
	   *       //once complete, then run done()
	   *       return function endFunction(wasCancelled) {
	   *         //code to cancel the animation
	   *       }
	   *     }
	   *   }
	   * ```
	   *
	   * @param {string} name The name of the animation (this is what the class-based CSS value will be compared to).
	   * @param {Function} factory The factory function that will be executed to return the animation
	   *                           object.
	   */
	  this.register = function(name, factory) {
	    if (name && name.charAt(0) !== '.') {
	      throw $animateMinErr('notcsel', "Expecting class selector starting with '.' got '{0}'.", name);
	    }
	
	    var key = name + '-animation';
	    provider.$$registeredAnimations[name.substr(1)] = key;
	    $provide.factory(key, factory);
	  };
	
	  /**
	   * @ngdoc method
	   * @name $animateProvider#classNameFilter
	   *
	   * @description
	   * Sets and/or returns the CSS class regular expression that is checked when performing
	   * an animation. Upon bootstrap the classNameFilter value is not set at all and will
	   * therefore enable $animate to attempt to perform an animation on any element that is triggered.
	   * When setting the `classNameFilter` value, animations will only be performed on elements
	   * that successfully match the filter expression. This in turn can boost performance
	   * for low-powered devices as well as applications containing a lot of structural operations.
	   * @param {RegExp=} expression The className expression which will be checked against all animations
	   * @return {RegExp} The current CSS className expression value. If null then there is no expression value
	   */
	  this.classNameFilter = function(expression) {
	    if (arguments.length === 1) {
	      this.$$classNameFilter = (expression instanceof RegExp) ? expression : null;
	      if (this.$$classNameFilter) {
	        var reservedRegex = new RegExp("(\\s+|\\/)" + NG_ANIMATE_CLASSNAME + "(\\s+|\\/)");
	        if (reservedRegex.test(this.$$classNameFilter.toString())) {
	          throw $animateMinErr('nongcls','$animateProvider.classNameFilter(regex) prohibits accepting a regex value which matches/contains the "{0}" CSS class.', NG_ANIMATE_CLASSNAME);
	
	        }
	      }
	    }
	    return this.$$classNameFilter;
	  };
	
	  this.$get = ['$$animateQueue', function($$animateQueue) {
	    function domInsert(element, parentElement, afterElement) {
	      // if for some reason the previous element was removed
	      // from the dom sometime before this code runs then let's
	      // just stick to using the parent element as the anchor
	      if (afterElement) {
	        var afterNode = extractElementNode(afterElement);
	        if (afterNode && !afterNode.parentNode && !afterNode.previousElementSibling) {
	          afterElement = null;
	        }
	      }
	      afterElement ? afterElement.after(element) : parentElement.prepend(element);
	    }
	
	    /**
	     * @ngdoc service
	     * @name $animate
	     * @description The $animate service exposes a series of DOM utility methods that provide support
	     * for animation hooks. The default behavior is the application of DOM operations, however,
	     * when an animation is detected (and animations are enabled), $animate will do the heavy lifting
	     * to ensure that animation runs with the triggered DOM operation.
	     *
	     * By default $animate doesn't trigger any animations. This is because the `ngAnimate` module isn't
	     * included and only when it is active then the animation hooks that `$animate` triggers will be
	     * functional. Once active then all structural `ng-` directives will trigger animations as they perform
	     * their DOM-related operations (enter, leave and move). Other directives such as `ngClass`,
	     * `ngShow`, `ngHide` and `ngMessages` also provide support for animations.
	     *
	     * It is recommended that the`$animate` service is always used when executing DOM-related procedures within directives.
	     *
	     * To learn more about enabling animation support, click here to visit the
	     * {@link ngAnimate ngAnimate module page}.
	     */
	    return {
	      // we don't call it directly since non-existant arguments may
	      // be interpreted as null within the sub enabled function
	
	      /**
	       *
	       * @ngdoc method
	       * @name $animate#on
	       * @kind function
	       * @description Sets up an event listener to fire whenever the animation event (enter, leave, move, etc...)
	       *    has fired on the given element or among any of its children. Once the listener is fired, the provided callback
	       *    is fired with the following params:
	       *
	       * ```js
	       * $animate.on('enter', container,
	       *    function callback(element, phase) {
	       *      // cool we detected an enter animation within the container
	       *    }
	       * );
	       * ```
	       *
	       * @param {string} event the animation event that will be captured (e.g. enter, leave, move, addClass, removeClass, etc...)
	       * @param {DOMElement} container the container element that will capture each of the animation events that are fired on itself
	       *     as well as among its children
	       * @param {Function} callback the callback function that will be fired when the listener is triggered
	       *
	       * The arguments present in the callback function are:
	       * * `element` - The captured DOM element that the animation was fired on.
	       * * `phase` - The phase of the animation. The two possible phases are **start** (when the animation starts) and **close** (when it ends).
	       */
	      on: $$animateQueue.on,
	
	      /**
	       *
	       * @ngdoc method
	       * @name $animate#off
	       * @kind function
	       * @description Deregisters an event listener based on the event which has been associated with the provided element. This method
	       * can be used in three different ways depending on the arguments:
	       *
	       * ```js
	       * // remove all the animation event listeners listening for `enter`
	       * $animate.off('enter');
	       *
	       * // remove listeners for all animation events from the container element
	       * $animate.off(container);
	       *
	       * // remove all the animation event listeners listening for `enter` on the given element and its children
	       * $animate.off('enter', container);
	       *
	       * // remove the event listener function provided by `callback` that is set
	       * // to listen for `enter` on the given `container` as well as its children
	       * $animate.off('enter', container, callback);
	       * ```
	       *
	       * @param {string|DOMElement} event|container the animation event (e.g. enter, leave, move,
	       * addClass, removeClass, etc...), or the container element. If it is the element, all other
	       * arguments are ignored.
	       * @param {DOMElement=} container the container element the event listener was placed on
	       * @param {Function=} callback the callback function that was registered as the listener
	       */
	      off: $$animateQueue.off,
	
	      /**
	       * @ngdoc method
	       * @name $animate#pin
	       * @kind function
	       * @description Associates the provided element with a host parent element to allow the element to be animated even if it exists
	       *    outside of the DOM structure of the Angular application. By doing so, any animation triggered via `$animate` can be issued on the
	       *    element despite being outside the realm of the application or within another application. Say for example if the application
	       *    was bootstrapped on an element that is somewhere inside of the `<body>` tag, but we wanted to allow for an element to be situated
	       *    as a direct child of `document.body`, then this can be achieved by pinning the element via `$animate.pin(element)`. Keep in mind
	       *    that calling `$animate.pin(element, parentElement)` will not actually insert into the DOM anywhere; it will just create the association.
	       *
	       *    Note that this feature is only active when the `ngAnimate` module is used.
	       *
	       * @param {DOMElement} element the external element that will be pinned
	       * @param {DOMElement} parentElement the host parent element that will be associated with the external element
	       */
	      pin: $$animateQueue.pin,
	
	      /**
	       *
	       * @ngdoc method
	       * @name $animate#enabled
	       * @kind function
	       * @description Used to get and set whether animations are enabled or not on the entire application or on an element and its children. This
	       * function can be called in four ways:
	       *
	       * ```js
	       * // returns true or false
	       * $animate.enabled();
	       *
	       * // changes the enabled state for all animations
	       * $animate.enabled(false);
	       * $animate.enabled(true);
	       *
	       * // returns true or false if animations are enabled for an element
	       * $animate.enabled(element);
	       *
	       * // changes the enabled state for an element and its children
	       * $animate.enabled(element, true);
	       * $animate.enabled(element, false);
	       * ```
	       *
	       * @param {DOMElement=} element the element that will be considered for checking/setting the enabled state
	       * @param {boolean=} enabled whether or not the animations will be enabled for the element
	       *
	       * @return {boolean} whether or not animations are enabled
	       */
	      enabled: $$animateQueue.enabled,
	
	      /**
	       * @ngdoc method
	       * @name $animate#cancel
	       * @kind function
	       * @description Cancels the provided animation.
	       *
	       * @param {Promise} animationPromise The animation promise that is returned when an animation is started.
	       */
	      cancel: function(runner) {
	        runner.end && runner.end();
	      },
	
	      /**
	       *
	       * @ngdoc method
	       * @name $animate#enter
	       * @kind function
	       * @description Inserts the element into the DOM either after the `after` element (if provided) or
	       *   as the first child within the `parent` element and then triggers an animation.
	       *   A promise is returned that will be resolved during the next digest once the animation
	       *   has completed.
	       *
	       * @param {DOMElement} element the element which will be inserted into the DOM
	       * @param {DOMElement} parent the parent element which will append the element as
	       *   a child (so long as the after element is not present)
	       * @param {DOMElement=} after the sibling element after which the element will be appended
	       * @param {object=} options an optional collection of options/styles that will be applied to the element
	       *
	       * @return {Promise} the animation callback promise
	       */
	      enter: function(element, parent, after, options) {
	        parent = parent && jqLite(parent);
	        after = after && jqLite(after);
	        parent = parent || after.parent();
	        domInsert(element, parent, after);
	        return $$animateQueue.push(element, 'enter', prepareAnimateOptions(options));
	      },
	
	      /**
	       *
	       * @ngdoc method
	       * @name $animate#move
	       * @kind function
	       * @description Inserts (moves) the element into its new position in the DOM either after
	       *   the `after` element (if provided) or as the first child within the `parent` element
	       *   and then triggers an animation. A promise is returned that will be resolved
	       *   during the next digest once the animation has completed.
	       *
	       * @param {DOMElement} element the element which will be moved into the new DOM position
	       * @param {DOMElement} parent the parent element which will append the element as
	       *   a child (so long as the after element is not present)
	       * @param {DOMElement=} after the sibling element after which the element will be appended
	       * @param {object=} options an optional collection of options/styles that will be applied to the element
	       *
	       * @return {Promise} the animation callback promise
	       */
	      move: function(element, parent, after, options) {
	        parent = parent && jqLite(parent);
	        after = after && jqLite(after);
	        parent = parent || after.parent();
	        domInsert(element, parent, after);
	        return $$animateQueue.push(element, 'move', prepareAnimateOptions(options));
	      },
	
	      /**
	       * @ngdoc method
	       * @name $animate#leave
	       * @kind function
	       * @description Triggers an animation and then removes the element from the DOM.
	       * When the function is called a promise is returned that will be resolved during the next
	       * digest once the animation has completed.
	       *
	       * @param {DOMElement} element the element which will be removed from the DOM
	       * @param {object=} options an optional collection of options/styles that will be applied to the element
	       *
	       * @return {Promise} the animation callback promise
	       */
	      leave: function(element, options) {
	        return $$animateQueue.push(element, 'leave', prepareAnimateOptions(options), function() {
	          element.remove();
	        });
	      },
	
	      /**
	       * @ngdoc method
	       * @name $animate#addClass
	       * @kind function
	       *
	       * @description Triggers an addClass animation surrounding the addition of the provided CSS class(es). Upon
	       *   execution, the addClass operation will only be handled after the next digest and it will not trigger an
	       *   animation if element already contains the CSS class or if the class is removed at a later step.
	       *   Note that class-based animations are treated differently compared to structural animations
	       *   (like enter, move and leave) since the CSS classes may be added/removed at different points
	       *   depending if CSS or JavaScript animations are used.
	       *
	       * @param {DOMElement} element the element which the CSS classes will be applied to
	       * @param {string} className the CSS class(es) that will be added (multiple classes are separated via spaces)
	       * @param {object=} options an optional collection of options/styles that will be applied to the element
	       *
	       * @return {Promise} the animation callback promise
	       */
	      addClass: function(element, className, options) {
	        options = prepareAnimateOptions(options);
	        options.addClass = mergeClasses(options.addclass, className);
	        return $$animateQueue.push(element, 'addClass', options);
	      },
	
	      /**
	       * @ngdoc method
	       * @name $animate#removeClass
	       * @kind function
	       *
	       * @description Triggers a removeClass animation surrounding the removal of the provided CSS class(es). Upon
	       *   execution, the removeClass operation will only be handled after the next digest and it will not trigger an
	       *   animation if element does not contain the CSS class or if the class is added at a later step.
	       *   Note that class-based animations are treated differently compared to structural animations
	       *   (like enter, move and leave) since the CSS classes may be added/removed at different points
	       *   depending if CSS or JavaScript animations are used.
	       *
	       * @param {DOMElement} element the element which the CSS classes will be applied to
	       * @param {string} className the CSS class(es) that will be removed (multiple classes are separated via spaces)
	       * @param {object=} options an optional collection of options/styles that will be applied to the element
	       *
	       * @return {Promise} the animation callback promise
	       */
	      removeClass: function(element, className, options) {
	        options = prepareAnimateOptions(options);
	        options.removeClass = mergeClasses(options.removeClass, className);
	        return $$animateQueue.push(element, 'removeClass', options);
	      },
	
	      /**
	       * @ngdoc method
	       * @name $animate#setClass
	       * @kind function
	       *
	       * @description Performs both the addition and removal of a CSS classes on an element and (during the process)
	       *    triggers an animation surrounding the class addition/removal. Much like `$animate.addClass` and
	       *    `$animate.removeClass`, `setClass` will only evaluate the classes being added/removed once a digest has
	       *    passed. Note that class-based animations are treated differently compared to structural animations
	       *    (like enter, move and leave) since the CSS classes may be added/removed at different points
	       *    depending if CSS or JavaScript animations are used.
	       *
	       * @param {DOMElement} element the element which the CSS classes will be applied to
	       * @param {string} add the CSS class(es) that will be added (multiple classes are separated via spaces)
	       * @param {string} remove the CSS class(es) that will be removed (multiple classes are separated via spaces)
	       * @param {object=} options an optional collection of options/styles that will be applied to the element
	       *
	       * @return {Promise} the animation callback promise
	       */
	      setClass: function(element, add, remove, options) {
	        options = prepareAnimateOptions(options);
	        options.addClass = mergeClasses(options.addClass, add);
	        options.removeClass = mergeClasses(options.removeClass, remove);
	        return $$animateQueue.push(element, 'setClass', options);
	      },
	
	      /**
	       * @ngdoc method
	       * @name $animate#animate
	       * @kind function
	       *
	       * @description Performs an inline animation on the element which applies the provided to and from CSS styles to the element.
	       * If any detected CSS transition, keyframe or JavaScript matches the provided className value, then the animation will take
	       * on the provided styles. For example, if a transition animation is set for the given classNamem, then the provided `from` and
	       * `to` styles will be applied alongside the given transition. If the CSS style provided in `from` does not have a corresponding
	       * style in `to`, the style in `from` is applied immediately, and no animation is run.
	       * If a JavaScript animation is detected then the provided styles will be given in as function parameters into the `animate`
	       * method (or as part of the `options` parameter):
	       *
	       * ```js
	       * ngModule.animation('.my-inline-animation', function() {
	       *   return {
	       *     animate : function(element, from, to, done, options) {
	       *       //animation
	       *       done();
	       *     }
	       *   }
	       * });
	       * ```
	       *
	       * @param {DOMElement} element the element which the CSS styles will be applied to
	       * @param {object} from the from (starting) CSS styles that will be applied to the element and across the animation.
	       * @param {object} to the to (destination) CSS styles that will be applied to the element and across the animation.
	       * @param {string=} className an optional CSS class that will be applied to the element for the duration of the animation. If
	       *    this value is left as empty then a CSS class of `ng-inline-animate` will be applied to the element.
	       *    (Note that if no animation is detected then this value will not be applied to the element.)
	       * @param {object=} options an optional collection of options/styles that will be applied to the element
	       *
	       * @return {Promise} the animation callback promise
	       */
	      animate: function(element, from, to, className, options) {
	        options = prepareAnimateOptions(options);
	        options.from = options.from ? extend(options.from, from) : from;
	        options.to   = options.to   ? extend(options.to, to)     : to;
	
	        className = className || 'ng-inline-animate';
	        options.tempClasses = mergeClasses(options.tempClasses, className);
	        return $$animateQueue.push(element, 'animate', options);
	      }
	    };
	  }];
	}];
	
	var $$AnimateAsyncRunFactoryProvider = function() {
	  this.$get = ['$$rAF', function($$rAF) {
	    var waitQueue = [];
	
	    function waitForTick(fn) {
	      waitQueue.push(fn);
	      if (waitQueue.length > 1) return;
	      $$rAF(function() {
	        for (var i = 0; i < waitQueue.length; i++) {
	          waitQueue[i]();
	        }
	        waitQueue = [];
	      });
	    }
	
	    return function() {
	      var passed = false;
	      waitForTick(function() {
	        passed = true;
	      });
	      return function(callback) {
	        passed ? callback() : waitForTick(callback);
	      };
	    };
	  }];
	};
	
	var $$AnimateRunnerFactoryProvider = function() {
	  this.$get = ['$q', '$sniffer', '$$animateAsyncRun', '$document', '$timeout',
	       function($q,   $sniffer,   $$animateAsyncRun,   $document,   $timeout) {
	
	    var INITIAL_STATE = 0;
	    var DONE_PENDING_STATE = 1;
	    var DONE_COMPLETE_STATE = 2;
	
	    AnimateRunner.chain = function(chain, callback) {
	      var index = 0;
	
	      next();
	      function next() {
	        if (index === chain.length) {
	          callback(true);
	          return;
	        }
	
	        chain[index](function(response) {
	          if (response === false) {
	            callback(false);
	            return;
	          }
	          index++;
	          next();
	        });
	      }
	    };
	
	    AnimateRunner.all = function(runners, callback) {
	      var count = 0;
	      var status = true;
	      forEach(runners, function(runner) {
	        runner.done(onProgress);
	      });
	
	      function onProgress(response) {
	        status = status && response;
	        if (++count === runners.length) {
	          callback(status);
	        }
	      }
	    };
	
	    function AnimateRunner(host) {
	      this.setHost(host);
	
	      var rafTick = $$animateAsyncRun();
	      var timeoutTick = function(fn) {
	        $timeout(fn, 0, false);
	      };
	
	      this._doneCallbacks = [];
	      this._tick = function(fn) {
	        var doc = $document[0];
	
	        // the document may not be ready or attached
	        // to the module for some internal tests
	        if (doc && doc.hidden) {
	          timeoutTick(fn);
	        } else {
	          rafTick(fn);
	        }
	      };
	      this._state = 0;
	    }
	
	    AnimateRunner.prototype = {
	      setHost: function(host) {
	        this.host = host || {};
	      },
	
	      done: function(fn) {
	        if (this._state === DONE_COMPLETE_STATE) {
	          fn();
	        } else {
	          this._doneCallbacks.push(fn);
	        }
	      },
	
	      progress: noop,
	
	      getPromise: function() {
	        if (!this.promise) {
	          var self = this;
	          this.promise = $q(function(resolve, reject) {
	            self.done(function(status) {
	              status === false ? reject() : resolve();
	            });
	          });
	        }
	        return this.promise;
	      },
	
	      then: function(resolveHandler, rejectHandler) {
	        return this.getPromise().then(resolveHandler, rejectHandler);
	      },
	
	      'catch': function(handler) {
	        return this.getPromise()['catch'](handler);
	      },
	
	      'finally': function(handler) {
	        return this.getPromise()['finally'](handler);
	      },
	
	      pause: function() {
	        if (this.host.pause) {
	          this.host.pause();
	        }
	      },
	
	      resume: function() {
	        if (this.host.resume) {
	          this.host.resume();
	        }
	      },
	
	      end: function() {
	        if (this.host.end) {
	          this.host.end();
	        }
	        this._resolve(true);
	      },
	
	      cancel: function() {
	        if (this.host.cancel) {
	          this.host.cancel();
	        }
	        this._resolve(false);
	      },
	
	      complete: function(response) {
	        var self = this;
	        if (self._state === INITIAL_STATE) {
	          self._state = DONE_PENDING_STATE;
	          self._tick(function() {
	            self._resolve(response);
	          });
	        }
	      },
	
	      _resolve: function(response) {
	        if (this._state !== DONE_COMPLETE_STATE) {
	          forEach(this._doneCallbacks, function(fn) {
	            fn(response);
	          });
	          this._doneCallbacks.length = 0;
	          this._state = DONE_COMPLETE_STATE;
	        }
	      }
	    };
	
	    return AnimateRunner;
	  }];
	};
	
	/**
	 * @ngdoc service
	 * @name $animateCss
	 * @kind object
	 *
	 * @description
	 * This is the core version of `$animateCss`. By default, only when the `ngAnimate` is included,
	 * then the `$animateCss` service will actually perform animations.
	 *
	 * Click here {@link ngAnimate.$animateCss to read the documentation for $animateCss}.
	 */
	var $CoreAnimateCssProvider = function() {
	  this.$get = ['$$rAF', '$q', '$$AnimateRunner', function($$rAF, $q, $$AnimateRunner) {
	
	    return function(element, initialOptions) {
	      // all of the animation functions should create
	      // a copy of the options data, however, if a
	      // parent service has already created a copy then
	      // we should stick to using that
	      var options = initialOptions || {};
	      if (!options.$$prepared) {
	        options = copy(options);
	      }
	
	      // there is no point in applying the styles since
	      // there is no animation that goes on at all in
	      // this version of $animateCss.
	      if (options.cleanupStyles) {
	        options.from = options.to = null;
	      }
	
	      if (options.from) {
	        element.css(options.from);
	        options.from = null;
	      }
	
	      /* jshint newcap: false */
	      var closed, runner = new $$AnimateRunner();
	      return {
	        start: run,
	        end: run
	      };
	
	      function run() {
	        $$rAF(function() {
	          applyAnimationContents();
	          if (!closed) {
	            runner.complete();
	          }
	          closed = true;
	        });
	        return runner;
	      }
	
	      function applyAnimationContents() {
	        if (options.addClass) {
	          element.addClass(options.addClass);
	          options.addClass = null;
	        }
	        if (options.removeClass) {
	          element.removeClass(options.removeClass);
	          options.removeClass = null;
	        }
	        if (options.to) {
	          element.css(options.to);
	          options.to = null;
	        }
	      }
	    };
	  }];
	};
	
	/* global stripHash: true */
	
	/**
	 * ! This is a private undocumented service !
	 *
	 * @name $browser
	 * @requires $log
	 * @description
	 * This object has two goals:
	 *
	 * - hide all the global state in the browser caused by the window object
	 * - abstract away all the browser specific features and inconsistencies
	 *
	 * For tests we provide {@link ngMock.$browser mock implementation} of the `$browser`
	 * service, which can be used for convenient testing of the application without the interaction with
	 * the real browser apis.
	 */
	/**
	 * @param {object} window The global window object.
	 * @param {object} document jQuery wrapped document.
	 * @param {object} $log window.console or an object with the same interface.
	 * @param {object} $sniffer $sniffer service
	 */
	function Browser(window, document, $log, $sniffer) {
	  var self = this,
	      location = window.location,
	      history = window.history,
	      setTimeout = window.setTimeout,
	      clearTimeout = window.clearTimeout,
	      pendingDeferIds = {};
	
	  self.isMock = false;
	
	  var outstandingRequestCount = 0;
	  var outstandingRequestCallbacks = [];
	
	  // TODO(vojta): remove this temporary api
	  self.$$completeOutstandingRequest = completeOutstandingRequest;
	  self.$$incOutstandingRequestCount = function() { outstandingRequestCount++; };
	
	  /**
	   * Executes the `fn` function(supports currying) and decrements the `outstandingRequestCallbacks`
	   * counter. If the counter reaches 0, all the `outstandingRequestCallbacks` are executed.
	   */
	  function completeOutstandingRequest(fn) {
	    try {
	      fn.apply(null, sliceArgs(arguments, 1));
	    } finally {
	      outstandingRequestCount--;
	      if (outstandingRequestCount === 0) {
	        while (outstandingRequestCallbacks.length) {
	          try {
	            outstandingRequestCallbacks.pop()();
	          } catch (e) {
	            $log.error(e);
	          }
	        }
	      }
	    }
	  }
	
	  function getHash(url) {
	    var index = url.indexOf('#');
	    return index === -1 ? '' : url.substr(index);
	  }
	
	  /**
	   * @private
	   * Note: this method is used only by scenario runner
	   * TODO(vojta): prefix this method with $$ ?
	   * @param {function()} callback Function that will be called when no outstanding request
	   */
	  self.notifyWhenNoOutstandingRequests = function(callback) {
	    if (outstandingRequestCount === 0) {
	      callback();
	    } else {
	      outstandingRequestCallbacks.push(callback);
	    }
	  };
	
	  //////////////////////////////////////////////////////////////
	  // URL API
	  //////////////////////////////////////////////////////////////
	
	  var cachedState, lastHistoryState,
	      lastBrowserUrl = location.href,
	      baseElement = document.find('base'),
	      pendingLocation = null,
	      getCurrentState = !$sniffer.history ? noop : function getCurrentState() {
	        try {
	          return history.state;
	        } catch (e) {
	          // MSIE can reportedly throw when there is no state (UNCONFIRMED).
	        }
	      };
	
	  cacheState();
	  lastHistoryState = cachedState;
	
	  /**
	   * @name $browser#url
	   *
	   * @description
	   * GETTER:
	   * Without any argument, this method just returns current value of location.href.
	   *
	   * SETTER:
	   * With at least one argument, this method sets url to new value.
	   * If html5 history api supported, pushState/replaceState is used, otherwise
	   * location.href/location.replace is used.
	   * Returns its own instance to allow chaining
	   *
	   * NOTE: this api is intended for use only by the $location service. Please use the
	   * {@link ng.$location $location service} to change url.
	   *
	   * @param {string} url New url (when used as setter)
	   * @param {boolean=} replace Should new url replace current history record?
	   * @param {object=} state object to use with pushState/replaceState
	   */
	  self.url = function(url, replace, state) {
	    // In modern browsers `history.state` is `null` by default; treating it separately
	    // from `undefined` would cause `$browser.url('/foo')` to change `history.state`
	    // to undefined via `pushState`. Instead, let's change `undefined` to `null` here.
	    if (isUndefined(state)) {
	      state = null;
	    }
	
	    // Android Browser BFCache causes location, history reference to become stale.
	    if (location !== window.location) location = window.location;
	    if (history !== window.history) history = window.history;
	
	    // setter
	    if (url) {
	      var sameState = lastHistoryState === state;
	
	      // Don't change anything if previous and current URLs and states match. This also prevents
	      // IE<10 from getting into redirect loop when in LocationHashbangInHtml5Url mode.
	      // See https://github.com/angular/angular.js/commit/ffb2701
	      if (lastBrowserUrl === url && (!$sniffer.history || sameState)) {
	        return self;
	      }
	      var sameBase = lastBrowserUrl && stripHash(lastBrowserUrl) === stripHash(url);
	      lastBrowserUrl = url;
	      lastHistoryState = state;
	      // Don't use history API if only the hash changed
	      // due to a bug in IE10/IE11 which leads
	      // to not firing a `hashchange` nor `popstate` event
	      // in some cases (see #9143).
	      if ($sniffer.history && (!sameBase || !sameState)) {
	        history[replace ? 'replaceState' : 'pushState'](state, '', url);
	        cacheState();
	        // Do the assignment again so that those two variables are referentially identical.
	        lastHistoryState = cachedState;
	      } else {
	        if (!sameBase || pendingLocation) {
	          pendingLocation = url;
	        }
	        if (replace) {
	          location.replace(url);
	        } else if (!sameBase) {
	          location.href = url;
	        } else {
	          location.hash = getHash(url);
	        }
	        if (location.href !== url) {
	          pendingLocation = url;
	        }
	      }
	      return self;
	    // getter
	    } else {
	      // - pendingLocation is needed as browsers don't allow to read out
	      //   the new location.href if a reload happened or if there is a bug like in iOS 9 (see
	      //   https://openradar.appspot.com/22186109).
	      // - the replacement is a workaround for https://bugzilla.mozilla.org/show_bug.cgi?id=407172
	      return pendingLocation || location.href.replace(/%27/g,"'");
	    }
	  };
	
	  /**
	   * @name $browser#state
	   *
	   * @description
	   * This method is a getter.
	   *
	   * Return history.state or null if history.state is undefined.
	   *
	   * @returns {object} state
	   */
	  self.state = function() {
	    return cachedState;
	  };
	
	  var urlChangeListeners = [],
	      urlChangeInit = false;
	
	  function cacheStateAndFireUrlChange() {
	    pendingLocation = null;
	    cacheState();
	    fireUrlChange();
	  }
	
	  // This variable should be used *only* inside the cacheState function.
	  var lastCachedState = null;
	  function cacheState() {
	    // This should be the only place in $browser where `history.state` is read.
	    cachedState = getCurrentState();
	    cachedState = isUndefined(cachedState) ? null : cachedState;
	
	    // Prevent callbacks fo fire twice if both hashchange & popstate were fired.
	    if (equals(cachedState, lastCachedState)) {
	      cachedState = lastCachedState;
	    }
	    lastCachedState = cachedState;
	  }
	
	  function fireUrlChange() {
	    if (lastBrowserUrl === self.url() && lastHistoryState === cachedState) {
	      return;
	    }
	
	    lastBrowserUrl = self.url();
	    lastHistoryState = cachedState;
	    forEach(urlChangeListeners, function(listener) {
	      listener(self.url(), cachedState);
	    });
	  }
	
	  /**
	   * @name $browser#onUrlChange
	   *
	   * @description
	   * Register callback function that will be called, when url changes.
	   *
	   * It's only called when the url is changed from outside of angular:
	   * - user types different url into address bar
	   * - user clicks on history (forward/back) button
	   * - user clicks on a link
	   *
	   * It's not called when url is changed by $browser.url() method
	   *
	   * The listener gets called with new url as parameter.
	   *
	   * NOTE: this api is intended for use only by the $location service. Please use the
	   * {@link ng.$location $location service} to monitor url changes in angular apps.
	   *
	   * @param {function(string)} listener Listener function to be called when url changes.
	   * @return {function(string)} Returns the registered listener fn - handy if the fn is anonymous.
	   */
	  self.onUrlChange = function(callback) {
	    // TODO(vojta): refactor to use node's syntax for events
	    if (!urlChangeInit) {
	      // We listen on both (hashchange/popstate) when available, as some browsers (e.g. Opera)
	      // don't fire popstate when user change the address bar and don't fire hashchange when url
	      // changed by push/replaceState
	
	      // html5 history api - popstate event
	      if ($sniffer.history) jqLite(window).on('popstate', cacheStateAndFireUrlChange);
	      // hashchange event
	      jqLite(window).on('hashchange', cacheStateAndFireUrlChange);
	
	      urlChangeInit = true;
	    }
	
	    urlChangeListeners.push(callback);
	    return callback;
	  };
	
	  /**
	   * @private
	   * Remove popstate and hashchange handler from window.
	   *
	   * NOTE: this api is intended for use only by $rootScope.
	   */
	  self.$$applicationDestroyed = function() {
	    jqLite(window).off('hashchange popstate', cacheStateAndFireUrlChange);
	  };
	
	  /**
	   * Checks whether the url has changed outside of Angular.
	   * Needs to be exported to be able to check for changes that have been done in sync,
	   * as hashchange/popstate events fire in async.
	   */
	  self.$$checkUrlChange = fireUrlChange;
	
	  //////////////////////////////////////////////////////////////
	  // Misc API
	  //////////////////////////////////////////////////////////////
	
	  /**
	   * @name $browser#baseHref
	   *
	   * @description
	   * Returns current <base href>
	   * (always relative - without domain)
	   *
	   * @returns {string} The current base href
	   */
	  self.baseHref = function() {
	    var href = baseElement.attr('href');
	    return href ? href.replace(/^(https?\:)?\/\/[^\/]*/, '') : '';
	  };
	
	  /**
	   * @name $browser#defer
	   * @param {function()} fn A function, who's execution should be deferred.
	   * @param {number=} [delay=0] of milliseconds to defer the function execution.
	   * @returns {*} DeferId that can be used to cancel the task via `$browser.defer.cancel()`.
	   *
	   * @description
	   * Executes a fn asynchronously via `setTimeout(fn, delay)`.
	   *
	   * Unlike when calling `setTimeout` directly, in test this function is mocked and instead of using
	   * `setTimeout` in tests, the fns are queued in an array, which can be programmatically flushed
	   * via `$browser.defer.flush()`.
	   *
	   */
	  self.defer = function(fn, delay) {
	    var timeoutId;
	    outstandingRequestCount++;
	    timeoutId = setTimeout(function() {
	      delete pendingDeferIds[timeoutId];
	      completeOutstandingRequest(fn);
	    }, delay || 0);
	    pendingDeferIds[timeoutId] = true;
	    return timeoutId;
	  };
	
	
	  /**
	   * @name $browser#defer.cancel
	   *
	   * @description
	   * Cancels a deferred task identified with `deferId`.
	   *
	   * @param {*} deferId Token returned by the `$browser.defer` function.
	   * @returns {boolean} Returns `true` if the task hasn't executed yet and was successfully
	   *                    canceled.
	   */
	  self.defer.cancel = function(deferId) {
	    if (pendingDeferIds[deferId]) {
	      delete pendingDeferIds[deferId];
	      clearTimeout(deferId);
	      completeOutstandingRequest(noop);
	      return true;
	    }
	    return false;
	  };
	
	}
	
	function $BrowserProvider() {
	  this.$get = ['$window', '$log', '$sniffer', '$document',
	      function($window, $log, $sniffer, $document) {
	        return new Browser($window, $document, $log, $sniffer);
	      }];
	}
	
	/**
	 * @ngdoc service
	 * @name $cacheFactory
	 *
	 * @description
	 * Factory that constructs {@link $cacheFactory.Cache Cache} objects and gives access to
	 * them.
	 *
	 * ```js
	 *
	 *  var cache = $cacheFactory('cacheId');
	 *  expect($cacheFactory.get('cacheId')).toBe(cache);
	 *  expect($cacheFactory.get('noSuchCacheId')).not.toBeDefined();
	 *
	 *  cache.put("key", "value");
	 *  cache.put("another key", "another value");
	 *
	 *  // We've specified no options on creation
	 *  expect(cache.info()).toEqual({id: 'cacheId', size: 2});
	 *
	 * ```
	 *
	 *
	 * @param {string} cacheId Name or id of the newly created cache.
	 * @param {object=} options Options object that specifies the cache behavior. Properties:
	 *
	 *   - `{number=}` `capacity` — turns the cache into LRU cache.
	 *
	 * @returns {object} Newly created cache object with the following set of methods:
	 *
	 * - `{object}` `info()` — Returns id, size, and options of cache.
	 * - `{{*}}` `put({string} key, {*} value)` — Puts a new key-value pair into the cache and returns
	 *   it.
	 * - `{{*}}` `get({string} key)` — Returns cached value for `key` or undefined for cache miss.
	 * - `{void}` `remove({string} key)` — Removes a key-value pair from the cache.
	 * - `{void}` `removeAll()` — Removes all cached values.
	 * - `{void}` `destroy()` — Removes references to this cache from $cacheFactory.
	 *
	 * @example
	   <example module="cacheExampleApp">
	     <file name="index.html">
	       <div ng-controller="CacheController">
	         <input ng-model="newCacheKey" placeholder="Key">
	         <input ng-model="newCacheValue" placeholder="Value">
	         <button ng-click="put(newCacheKey, newCacheValue)">Cache</button>
	
	         <p ng-if="keys.length">Cached Values</p>
	         <div ng-repeat="key in keys">
	           <span ng-bind="key"></span>
	           <span>: </span>
	           <b ng-bind="cache.get(key)"></b>
	         </div>
	
	         <p>Cache Info</p>
	         <div ng-repeat="(key, value) in cache.info()">
	           <span ng-bind="key"></span>
	           <span>: </span>
	           <b ng-bind="value"></b>
	         </div>
	       </div>
	     </file>
	     <file name="script.js">
	       angular.module('cacheExampleApp', []).
	         controller('CacheController', ['$scope', '$cacheFactory', function($scope, $cacheFactory) {
	           $scope.keys = [];
	           $scope.cache = $cacheFactory('cacheId');
	           $scope.put = function(key, value) {
	             if (angular.isUndefined($scope.cache.get(key))) {
	               $scope.keys.push(key);
	             }
	             $scope.cache.put(key, angular.isUndefined(value) ? null : value);
	           };
	         }]);
	     </file>
	     <file name="style.css">
	       p {
	         margin: 10px 0 3px;
	       }
	     </file>
	   </example>
	 */
	function $CacheFactoryProvider() {
	
	  this.$get = function() {
	    var caches = {};
	
	    function cacheFactory(cacheId, options) {
	      if (cacheId in caches) {
	        throw minErr('$cacheFactory')('iid', "CacheId '{0}' is already taken!", cacheId);
	      }
	
	      var size = 0,
	          stats = extend({}, options, {id: cacheId}),
	          data = createMap(),
	          capacity = (options && options.capacity) || Number.MAX_VALUE,
	          lruHash = createMap(),
	          freshEnd = null,
	          staleEnd = null;
	
	      /**
	       * @ngdoc type
	       * @name $cacheFactory.Cache
	       *
	       * @description
	       * A cache object used to store and retrieve data, primarily used by
	       * {@link $http $http} and the {@link ng.directive:script script} directive to cache
	       * templates and other data.
	       *
	       * ```js
	       *  angular.module('superCache')
	       *    .factory('superCache', ['$cacheFactory', function($cacheFactory) {
	       *      return $cacheFactory('super-cache');
	       *    }]);
	       * ```
	       *
	       * Example test:
	       *
	       * ```js
	       *  it('should behave like a cache', inject(function(superCache) {
	       *    superCache.put('key', 'value');
	       *    superCache.put('another key', 'another value');
	       *
	       *    expect(superCache.info()).toEqual({
	       *      id: 'super-cache',
	       *      size: 2
	       *    });
	       *
	       *    superCache.remove('another key');
	       *    expect(superCache.get('another key')).toBeUndefined();
	       *
	       *    superCache.removeAll();
	       *    expect(superCache.info()).toEqual({
	       *      id: 'super-cache',
	       *      size: 0
	       *    });
	       *  }));
	       * ```
	       */
	      return caches[cacheId] = {
	
	        /**
	         * @ngdoc method
	         * @name $cacheFactory.Cache#put
	         * @kind function
	         *
	         * @description
	         * Inserts a named entry into the {@link $cacheFactory.Cache Cache} object to be
	         * retrieved later, and incrementing the size of the cache if the key was not already
	         * present in the cache. If behaving like an LRU cache, it will also remove stale
	         * entries from the set.
	         *
	         * It will not insert undefined values into the cache.
	         *
	         * @param {string} key the key under which the cached data is stored.
	         * @param {*} value the value to store alongside the key. If it is undefined, the key
	         *    will not be stored.
	         * @returns {*} the value stored.
	         */
	        put: function(key, value) {
	          if (isUndefined(value)) return;
	          if (capacity < Number.MAX_VALUE) {
	            var lruEntry = lruHash[key] || (lruHash[key] = {key: key});
	
	            refresh(lruEntry);
	          }
	
	          if (!(key in data)) size++;
	          data[key] = value;
	
	          if (size > capacity) {
	            this.remove(staleEnd.key);
	          }
	
	          return value;
	        },
	
	        /**
	         * @ngdoc method
	         * @name $cacheFactory.Cache#get
	         * @kind function
	         *
	         * @description
	         * Retrieves named data stored in the {@link $cacheFactory.Cache Cache} object.
	         *
	         * @param {string} key the key of the data to be retrieved
	         * @returns {*} the value stored.
	         */
	        get: function(key) {
	          if (capacity < Number.MAX_VALUE) {
	            var lruEntry = lruHash[key];
	
	            if (!lruEntry) return;
	
	            refresh(lruEntry);
	          }
	
	          return data[key];
	        },
	
	
	        /**
	         * @ngdoc method
	         * @name $cacheFactory.Cache#remove
	         * @kind function
	         *
	         * @description
	         * Removes an entry from the {@link $cacheFactory.Cache Cache} object.
	         *
	         * @param {string} key the key of the entry to be removed
	         */
	        remove: function(key) {
	          if (capacity < Number.MAX_VALUE) {
	            var lruEntry = lruHash[key];
	
	            if (!lruEntry) return;
	
	            if (lruEntry == freshEnd) freshEnd = lruEntry.p;
	            if (lruEntry == staleEnd) staleEnd = lruEntry.n;
	            link(lruEntry.n,lruEntry.p);
	
	            delete lruHash[key];
	          }
	
	          if (!(key in data)) return;
	
	          delete data[key];
	          size--;
	        },
	
	
	        /**
	         * @ngdoc method
	         * @name $cacheFactory.Cache#removeAll
	         * @kind function
	         *
	         * @description
	         * Clears the cache object of any entries.
	         */
	        removeAll: function() {
	          data = createMap();
	          size = 0;
	          lruHash = createMap();
	          freshEnd = staleEnd = null;
	        },
	
	
	        /**
	         * @ngdoc method
	         * @name $cacheFactory.Cache#destroy
	         * @kind function
	         *
	         * @description
	         * Destroys the {@link $cacheFactory.Cache Cache} object entirely,
	         * removing it from the {@link $cacheFactory $cacheFactory} set.
	         */
	        destroy: function() {
	          data = null;
	          stats = null;
	          lruHash = null;
	          delete caches[cacheId];
	        },
	
	
	        /**
	         * @ngdoc method
	         * @name $cacheFactory.Cache#info
	         * @kind function
	         *
	         * @description
	         * Retrieve information regarding a particular {@link $cacheFactory.Cache Cache}.
	         *
	         * @returns {object} an object with the following properties:
	         *   <ul>
	         *     <li>**id**: the id of the cache instance</li>
	         *     <li>**size**: the number of entries kept in the cache instance</li>
	         *     <li>**...**: any additional properties from the options object when creating the
	         *       cache.</li>
	         *   </ul>
	         */
	        info: function() {
	          return extend({}, stats, {size: size});
	        }
	      };
	
	
	      /**
	       * makes the `entry` the freshEnd of the LRU linked list
	       */
	      function refresh(entry) {
	        if (entry != freshEnd) {
	          if (!staleEnd) {
	            staleEnd = entry;
	          } else if (staleEnd == entry) {
	            staleEnd = entry.n;
	          }
	
	          link(entry.n, entry.p);
	          link(entry, freshEnd);
	          freshEnd = entry;
	          freshEnd.n = null;
	        }
	      }
	
	
	      /**
	       * bidirectionally links two entries of the LRU linked list
	       */
	      function link(nextEntry, prevEntry) {
	        if (nextEntry != prevEntry) {
	          if (nextEntry) nextEntry.p = prevEntry; //p stands for previous, 'prev' didn't minify
	          if (prevEntry) prevEntry.n = nextEntry; //n stands for next, 'next' didn't minify
	        }
	      }
	    }
	
	
	  /**
	   * @ngdoc method
	   * @name $cacheFactory#info
	   *
	   * @description
	   * Get information about all the caches that have been created
	   *
	   * @returns {Object} - key-value map of `cacheId` to the result of calling `cache#info`
	   */
	    cacheFactory.info = function() {
	      var info = {};
	      forEach(caches, function(cache, cacheId) {
	        info[cacheId] = cache.info();
	      });
	      return info;
	    };
	
	
	  /**
	   * @ngdoc method
	   * @name $cacheFactory#get
	   *
	   * @description
	   * Get access to a cache object by the `cacheId` used when it was created.
	   *
	   * @param {string} cacheId Name or id of a cache to access.
	   * @returns {object} Cache object identified by the cacheId or undefined if no such cache.
	   */
	    cacheFactory.get = function(cacheId) {
	      return caches[cacheId];
	    };
	
	
	    return cacheFactory;
	  };
	}
	
	/**
	 * @ngdoc service
	 * @name $templateCache
	 *
	 * @description
	 * The first time a template is used, it is loaded in the template cache for quick retrieval. You
	 * can load templates directly into the cache in a `script` tag, or by consuming the
	 * `$templateCache` service directly.
	 *
	 * Adding via the `script` tag:
	 *
	 * ```html
	 *   <script type="text/ng-template" id="templateId.html">
	 *     <p>This is the content of the template</p>
	 *   </script>
	 * ```
	 *
	 * **Note:** the `script` tag containing the template does not need to be included in the `head` of
	 * the document, but it must be a descendent of the {@link ng.$rootElement $rootElement} (IE,
	 * element with ng-app attribute), otherwise the template will be ignored.
	 *
	 * Adding via the `$templateCache` service:
	 *
	 * ```js
	 * var myApp = angular.module('myApp', []);
	 * myApp.run(function($templateCache) {
	 *   $templateCache.put('templateId.html', 'This is the content of the template');
	 * });
	 * ```
	 *
	 * To retrieve the template later, simply use it in your HTML:
	 * ```html
	 * <div ng-include=" 'templateId.html' "></div>
	 * ```
	 *
	 * or get it via Javascript:
	 * ```js
	 * $templateCache.get('templateId.html')
	 * ```
	 *
	 * See {@link ng.$cacheFactory $cacheFactory}.
	 *
	 */
	function $TemplateCacheProvider() {
	  this.$get = ['$cacheFactory', function($cacheFactory) {
	    return $cacheFactory('templates');
	  }];
	}
	
	/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	 *     Any commits to this file should be reviewed with security in mind.  *
	 *   Changes to this file can potentially create security vulnerabilities. *
	 *          An approval from 2 Core members with history of modifying      *
	 *                         this file is required.                          *
	 *                                                                         *
	 *  Does the change somehow allow for arbitrary javascript to be executed? *
	 *    Or allows for someone to change the prototype of built-in objects?   *
	 *     Or gives undesired access to variables likes document or window?    *
	 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
	
	/* ! VARIABLE/FUNCTION NAMING CONVENTIONS THAT APPLY TO THIS FILE!
	 *
	 * DOM-related variables:
	 *
	 * - "node" - DOM Node
	 * - "element" - DOM Element or Node
	 * - "$node" or "$element" - jqLite-wrapped node or element
	 *
	 *
	 * Compiler related stuff:
	 *
	 * - "linkFn" - linking fn of a single directive
	 * - "nodeLinkFn" - function that aggregates all linking fns for a particular node
	 * - "childLinkFn" -  function that aggregates all linking fns for child nodes of a particular node
	 * - "compositeLinkFn" - function that aggregates all linking fns for a compilation root (nodeList)
	 */
	
	
	/**
	 * @ngdoc service
	 * @name $compile
	 * @kind function
	 *
	 * @description
	 * Compiles an HTML string or DOM into a template and produces a template function, which
	 * can then be used to link {@link ng.$rootScope.Scope `scope`} and the template together.
	 *
	 * The compilation is a process of walking the DOM tree and matching DOM elements to
	 * {@link ng.$compileProvider#directive directives}.
	 *
	 * <div class="alert alert-warning">
	 * **Note:** This document is an in-depth reference of all directive options.
	 * For a gentle introduction to directives with examples of common use cases,
	 * see the {@link guide/directive directive guide}.
	 * </div>
	 *
	 * ## Comprehensive Directive API
	 *
	 * There are many different options for a directive.
	 *
	 * The difference resides in the return value of the factory function.
	 * You can either return a "Directive Definition Object" (see below) that defines the directive properties,
	 * or just the `postLink` function (all other properties will have the default values).
	 *
	 * <div class="alert alert-success">
	 * **Best Practice:** It's recommended to use the "directive definition object" form.
	 * </div>
	 *
	 * Here's an example directive declared with a Directive Definition Object:
	 *
	 * ```js
	 *   var myModule = angular.module(...);
	 *
	 *   myModule.directive('directiveName', function factory(injectables) {
	 *     var directiveDefinitionObject = {
	 *       priority: 0,
	 *       template: '<div></div>', // or // function(tElement, tAttrs) { ... },
	 *       // or
	 *       // templateUrl: 'directive.html', // or // function(tElement, tAttrs) { ... },
	 *       transclude: false,
	 *       restrict: 'A',
	 *       templateNamespace: 'html',
	 *       scope: false,
	 *       controller: function($scope, $element, $attrs, $transclude, otherInjectables) { ... },
	 *       controllerAs: 'stringIdentifier',
	 *       bindToController: false,
	 *       require: 'siblingDirectiveName', // or // ['^parentDirectiveName', '?optionalDirectiveName', '?^optionalParent'],
	 *       compile: function compile(tElement, tAttrs, transclude) {
	 *         return {
	 *           pre: function preLink(scope, iElement, iAttrs, controller) { ... },
	 *           post: function postLink(scope, iElement, iAttrs, controller) { ... }
	 *         }
	 *         // or
	 *         // return function postLink( ... ) { ... }
	 *       },
	 *       // or
	 *       // link: {
	 *       //  pre: function preLink(scope, iElement, iAttrs, controller) { ... },
	 *       //  post: function postLink(scope, iElement, iAttrs, controller) { ... }
	 *       // }
	 *       // or
	 *       // link: function postLink( ... ) { ... }
	 *     };
	 *     return directiveDefinitionObject;
	 *   });
	 * ```
	 *
	 * <div class="alert alert-warning">
	 * **Note:** Any unspecified options will use the default value. You can see the default values below.
	 * </div>
	 *
	 * Therefore the above can be simplified as:
	 *
	 * ```js
	 *   var myModule = angular.module(...);
	 *
	 *   myModule.directive('directiveName', function factory(injectables) {
	 *     var directiveDefinitionObject = {
	 *       link: function postLink(scope, iElement, iAttrs) { ... }
	 *     };
	 *     return directiveDefinitionObject;
	 *     // or
	 *     // return function postLink(scope, iElement, iAttrs) { ... }
	 *   });
	 * ```
	 *
	 *
	 *
	 * ### Directive Definition Object
	 *
	 * The directive definition object provides instructions to the {@link ng.$compile
	 * compiler}. The attributes are:
	 *
	 * #### `multiElement`
	 * When this property is set to true, the HTML compiler will collect DOM nodes between
	 * nodes with the attributes `directive-name-start` and `directive-name-end`, and group them
	 * together as the directive elements. It is recommended that this feature be used on directives
	 * which are not strictly behavioral (such as {@link ngClick}), and which
	 * do not manipulate or replace child nodes (such as {@link ngInclude}).
	 *
	 * #### `priority`
	 * When there are multiple directives defined on a single DOM element, sometimes it
	 * is necessary to specify the order in which the directives are applied. The `priority` is used
	 * to sort the directives before their `compile` functions get called. Priority is defined as a
	 * number. Directives with greater numerical `priority` are compiled first. Pre-link functions
	 * are also run in priority order, but post-link functions are run in reverse order. The order
	 * of directives with the same priority is undefined. The default priority is `0`.
	 *
	 * #### `terminal`
	 * If set to true then the current `priority` will be the last set of directives
	 * which will execute (any directives at the current priority will still execute
	 * as the order of execution on same `priority` is undefined). Note that expressions
	 * and other directives used in the directive's template will also be excluded from execution.
	 *
	 * #### `scope`
	 * The scope property can be `true`, an object or a falsy value:
	 *
	 * * **falsy:** No scope will be created for the directive. The directive will use its parent's scope.
	 *
	 * * **`true`:** A new child scope that prototypically inherits from its parent will be created for
	 * the directive's element. If multiple directives on the same element request a new scope,
	 * only one new scope is created. The new scope rule does not apply for the root of the template
	 * since the root of the template always gets a new scope.
	 *
	 * * **`{...}` (an object hash):** A new "isolate" scope is created for the directive's element. The
	 * 'isolate' scope differs from normal scope in that it does not prototypically inherit from its parent
	 * scope. This is useful when creating reusable components, which should not accidentally read or modify
	 * data in the parent scope.
	 *
	 * The 'isolate' scope object hash defines a set of local scope properties derived from attributes on the
	 * directive's element. These local properties are useful for aliasing values for templates. The keys in
	 * the object hash map to the name of the property on the isolate scope; the values define how the property
	 * is bound to the parent scope, via matching attributes on the directive's element:
	 *
	 * * `@` or `@attr` - bind a local scope property to the value of DOM attribute. The result is
	 *   always a string since DOM attributes are strings. If no `attr` name is specified then the
	 *   attribute name is assumed to be the same as the local name. Given `<my-component
	 *   my-attr="hello {{name}}">` and the isolate scope definition `scope: { localName:'@myAttr' }`,
	 *   the directive's scope property `localName` will reflect the interpolated value of `hello
	 *   {{name}}`. As the `name` attribute changes so will the `localName` property on the directive's
	 *   scope. The `name` is read from the parent scope (not the directive's scope).
	 *
	 * * `=` or `=attr` - set up a bidirectional binding between a local scope property and an expression
	 *   passed via the attribute `attr`. The expression is evaluated in the context of the parent scope.
	 *   If no `attr` name is specified then the attribute name is assumed to be the same as the local
	 *   name. Given `<my-component my-attr="parentModel">` and the isolate scope definition `scope: {
	 *   localModel: '=myAttr' }`, the property `localModel` on the directive's scope will reflect the
	 *   value of `parentModel` on the parent scope. Changes to `parentModel` will be reflected in
	 *   `localModel` and vice versa. Optional attributes should be marked as such with a question mark:
	 *   `=?` or `=?attr`. If the binding expression is non-assignable, or if the attribute isn't
	 *   optional and doesn't exist, an exception ({@link error/$compile/nonassign `$compile:nonassign`})
	 *   will be thrown upon discovering changes to the local value, since it will be impossible to sync
	 *   them back to the parent scope. By default, the {@link ng.$rootScope.Scope#$watch `$watch`}
	 *   method is used for tracking changes, and the equality check is based on object identity.
	 *   However, if an object literal or an array literal is passed as the binding expression, the
	 *   equality check is done by value (using the {@link angular.equals} function). It's also possible
	 *   to watch the evaluated value shallowly with {@link ng.$rootScope.Scope#$watchCollection
	 *   `$watchCollection`}: use `=*` or `=*attr` (`=*?` or `=*?attr` if the attribute is optional).
	 *
	  * * `<` or `<attr` - set up a one-way (one-directional) binding between a local scope property and an
	 *   expression passed via the attribute `attr`. The expression is evaluated in the context of the
	 *   parent scope. If no `attr` name is specified then the attribute name is assumed to be the same as the
	 *   local name. You can also make the binding optional by adding `?`: `<?` or `<?attr`.
	 *
	 *   For example, given `<my-component my-attr="parentModel">` and directive definition of
	 *   `scope: { localModel:'<myAttr' }`, then the isolated scope property `localModel` will reflect the
	 *   value of `parentModel` on the parent scope. Any changes to `parentModel` will be reflected
	 *   in `localModel`, but changes in `localModel` will not reflect in `parentModel`. There are however
	 *   two caveats:
	 *     1. one-way binding does not copy the value from the parent to the isolate scope, it simply
	 *     sets the same value. That means if your bound value is an object, changes to its properties
	 *     in the isolated scope will be reflected in the parent scope (because both reference the same object).
	 *     2. one-way binding watches changes to the **identity** of the parent value. That means the
	 *     {@link ng.$rootScope.Scope#$watch `$watch`} on the parent value only fires if the reference
	 *     to the value has changed. In most cases, this should not be of concern, but can be important
	 *     to know if you one-way bind to an object, and then replace that object in the isolated scope.
	 *     If you now change a property of the object in your parent scope, the change will not be
	 *     propagated to the isolated scope, because the identity of the object on the parent scope
	 *     has not changed. Instead you must assign a new object.
	 *
	 *   One-way binding is useful if you do not plan to propagate changes to your isolated scope bindings
	 *   back to the parent. However, it does not make this completely impossible.
	 *
	 * * `&` or `&attr` - provides a way to execute an expression in the context of the parent scope. If
	 *   no `attr` name is specified then the attribute name is assumed to be the same as the local name.
	 *   Given `<my-component my-attr="count = count + value">` and the isolate scope definition `scope: {
	 *   localFn:'&myAttr' }`, the isolate scope property `localFn` will point to a function wrapper for
	 *   the `count = count + value` expression. Often it's desirable to pass data from the isolated scope
	 *   via an expression to the parent scope. This can be done by passing a map of local variable names
	 *   and values into the expression wrapper fn. For example, if the expression is `increment(amount)`
	 *   then we can specify the amount value by calling the `localFn` as `localFn({amount: 22})`.
	 *
	 * In general it's possible to apply more than one directive to one element, but there might be limitations
	 * depending on the type of scope required by the directives. The following points will help explain these limitations.
	 * For simplicity only two directives are taken into account, but it is also applicable for several directives:
	 *
	 * * **no scope** + **no scope** => Two directives which don't require their own scope will use their parent's scope
	 * * **child scope** + **no scope** =>  Both directives will share one single child scope
	 * * **child scope** + **child scope** =>  Both directives will share one single child scope
	 * * **isolated scope** + **no scope** =>  The isolated directive will use it's own created isolated scope. The other directive will use
	 * its parent's scope
	 * * **isolated scope** + **child scope** =>  **Won't work!** Only one scope can be related to one element. Therefore these directives cannot
	 * be applied to the same element.
	 * * **isolated scope** + **isolated scope**  =>  **Won't work!** Only one scope can be related to one element. Therefore these directives
	 * cannot be applied to the same element.
	 *
	 *
	 * #### `bindToController`
	 * This property is used to bind scope properties directly to the controller. It can be either
	 * `true` or an object hash with the same format as the `scope` property. Additionally, a controller
	 * alias must be set, either by using `controllerAs: 'myAlias'` or by specifying the alias in the controller
	 * definition: `controller: 'myCtrl as myAlias'`.
	 *
	 * When an isolate scope is used for a directive (see above), `bindToController: true` will
	 * allow a component to have its properties bound to the controller, rather than to scope.
	 *
	 * After the controller is instantiated, the initial values of the isolate scope bindings will be bound to the controller
	 * properties. You can access these bindings once they have been initialized by providing a controller method called
	 * `$onInit`, which is called after all the controllers on an element have been constructed and had their bindings
	 * initialized.
	 *
	 * <div class="alert alert-warning">
	 * **Deprecation warning:** although bindings for non-ES6 class controllers are currently
	 * bound to `this` before the controller constructor is called, this use is now deprecated. Please place initialization
	 * code that relies upon bindings inside a `$onInit` method on the controller, instead.
	 * </div>
	 *
	 * It is also possible to set `bindToController` to an object hash with the same format as the `scope` property.
	 * This will set up the scope bindings to the controller directly. Note that `scope` can still be used
	 * to define which kind of scope is created. By default, no scope is created. Use `scope: {}` to create an isolate
	 * scope (useful for component directives).
	 *
	 * If both `bindToController` and `scope` are defined and have object hashes, `bindToController` overrides `scope`.
	 *
	 *
	 * #### `controller`
	 * Controller constructor function. The controller is instantiated before the
	 * pre-linking phase and can be accessed by other directives (see
	 * `require` attribute). This allows the directives to communicate with each other and augment
	 * each other's behavior. The controller is injectable (and supports bracket notation) with the following locals:
	 *
	 * * `$scope` - Current scope associated with the element
	 * * `$element` - Current element
	 * * `$attrs` - Current attributes object for the element
	 * * `$transclude` - A transclude linking function pre-bound to the correct transclusion scope:
	 *   `function([scope], cloneLinkingFn, futureParentElement, slotName)`:
	 *    * `scope`: (optional) override the scope.
	 *    * `cloneLinkingFn`: (optional) argument to create clones of the original transcluded content.
	 *    * `futureParentElement` (optional):
	 *        * defines the parent to which the `cloneLinkingFn` will add the cloned elements.
	 *        * default: `$element.parent()` resp. `$element` for `transclude:'element'` resp. `transclude:true`.
	 *        * only needed for transcludes that are allowed to contain non html elements (e.g. SVG elements)
	 *          and when the `cloneLinkinFn` is passed,
	 *          as those elements need to created and cloned in a special way when they are defined outside their
	 *          usual containers (e.g. like `<svg>`).
	 *        * See also the `directive.templateNamespace` property.
	 *    * `slotName`: (optional) the name of the slot to transclude. If falsy (e.g. `null`, `undefined` or `''`)
	 *      then the default translusion is provided.
	 *    The `$transclude` function also has a method on it, `$transclude.isSlotFilled(slotName)`, which returns
	 *    `true` if the specified slot contains content (i.e. one or more DOM nodes).
	 *
	 * The controller can provide the following methods that act as life-cycle hooks:
	 * * `$onInit()` - Called on each controller after all the controllers on an element have been constructed and
	 *   had their bindings initialized (and before the pre &amp; post linking functions for the directives on
	 *   this element). This is a good place to put initialization code for your controller.
	 * * `$onChanges(changesObj)` - Called whenever one-way (`<`) or interpolation (`@`) bindings are updated. The
	 *   `changesObj` is a hash whose keys are the names of the bound properties that have changed, and the values are an
	 *   object of the form `{ currentValue, previousValue, isFirstChange() }`. Use this hook to trigger updates within a
	 *   component such as cloning the bound value to prevent accidental mutation of the outer value.
	 * * `$onDestroy()` - Called on a controller when its containing scope is destroyed. Use this hook for releasing
	 *   external resources, watches and event handlers. Note that components have their `$onDestroy()` hooks called in
	 *   the same order as the `$scope.$broadcast` events are triggered, which is top down. This means that parent
	 *   components will have their `$onDestroy()` hook called before child components.
	 * * `$postLink()` - Called after this controller's element and its children have been linked. Similar to the post-link
	 *   function this hook can be used to set up DOM event handlers and do direct DOM manipulation.
	 *   Note that child elements that contain `templateUrl` directives will not have been compiled and linked since
	 *   they are waiting for their template to load asynchronously and their own compilation and linking has been
	 *   suspended until that occurs.
	 *
	 *
	 * #### `require`
	 * Require another directive and inject its controller as the fourth argument to the linking function. The
	 * `require` property can be a string, an array or an object:
	 * * a **string** containing the name of the directive to pass to the linking function
	 * * an **array** containing the names of directives to pass to the linking function. The argument passed to the
	 * linking function will be an array of controllers in the same order as the names in the `require` property
	 * * an **object** whose property values are the names of the directives to pass to the linking function. The argument
	 * passed to the linking function will also be an object with matching keys, whose values will hold the corresponding
	 * controllers.
	 *
	 * If the `require` property is an object and `bindToController` is truthy, then the required controllers are
	 * bound to the controller using the keys of the `require` property. This binding occurs after all the controllers
	 * have been constructed but before `$onInit` is called.
	 * See the {@link $compileProvider#component} helper for an example of how this can be used.
	 *
	 * If no such required directive(s) can be found, or if the directive does not have a controller, then an error is
	 * raised (unless no link function is specified and the required controllers are not being bound to the directive
	 * controller, in which case error checking is skipped). The name can be prefixed with:
	 *
	 * * (no prefix) - Locate the required controller on the current element. Throw an error if not found.
	 * * `?` - Attempt to locate the required controller or pass `null` to the `link` fn if not found.
	 * * `^` - Locate the required controller by searching the element and its parents. Throw an error if not found.
	 * * `^^` - Locate the required controller by searching the element's parents. Throw an error if not found.
	 * * `?^` - Attempt to locate the required controller by searching the element and its parents or pass
	 *   `null` to the `link` fn if not found.
	 * * `?^^` - Attempt to locate the required controller by searching the element's parents, or pass
	 *   `null` to the `link` fn if not found.
	 *
	 *
	 * #### `controllerAs`
	 * Identifier name for a reference to the controller in the directive's scope.
	 * This allows the controller to be referenced from the directive template. This is especially
	 * useful when a directive is used as component, i.e. with an `isolate` scope. It's also possible
	 * to use it in a directive without an `isolate` / `new` scope, but you need to be aware that the
	 * `controllerAs` reference might overwrite a property that already exists on the parent scope.
	 *
	 *
	 * #### `restrict`
	 * String of subset of `EACM` which restricts the directive to a specific directive
	 * declaration style. If omitted, the defaults (elements and attributes) are used.
	 *
	 * * `E` - Element name (default): `<my-directive></my-directive>`
	 * * `A` - Attribute (default): `<div my-directive="exp"></div>`
	 * * `C` - Class: `<div class="my-directive: exp;"></div>`
	 * * `M` - Comment: `<!-- directive: my-directive exp -->`
	 *
	 *
	 * #### `templateNamespace`
	 * String representing the document type used by the markup in the template.
	 * AngularJS needs this information as those elements need to be created and cloned
	 * in a special way when they are defined outside their usual containers like `<svg>` and `<math>`.
	 *
	 * * `html` - All root nodes in the template are HTML. Root nodes may also be
	 *   top-level elements such as `<svg>` or `<math>`.
	 * * `svg` - The root nodes in the template are SVG elements (excluding `<math>`).
	 * * `math` - The root nodes in the template are MathML elements (excluding `<svg>`).
	 *
	 * If no `templateNamespace` is specified, then the namespace is considered to be `html`.
	 *
	 * #### `template`
	 * HTML markup that may:
	 * * Replace the contents of the directive's element (default).
	 * * Replace the directive's element itself (if `replace` is true - DEPRECATED).
	 * * Wrap the contents of the directive's element (if `transclude` is true).
	 *
	 * Value may be:
	 *
	 * * A string. For example `<div red-on-hover>{{delete_str}}</div>`.
	 * * A function which takes two arguments `tElement` and `tAttrs` (described in the `compile`
	 *   function api below) and returns a string value.
	 *
	 *
	 * #### `templateUrl`
	 * This is similar to `template` but the template is loaded from the specified URL, asynchronously.
	 *
	 * Because template loading is asynchronous the compiler will suspend compilation of directives on that element
	 * for later when the template has been resolved.  In the meantime it will continue to compile and link
	 * sibling and parent elements as though this element had not contained any directives.
	 *
	 * The compiler does not suspend the entire compilation to wait for templates to be loaded because this
	 * would result in the whole app "stalling" until all templates are loaded asynchronously - even in the
	 * case when only one deeply nested directive has `templateUrl`.
	 *
	 * Template loading is asynchronous even if the template has been preloaded into the {@link $templateCache}
	 *
	 * You can specify `templateUrl` as a string representing the URL or as a function which takes two
	 * arguments `tElement` and `tAttrs` (described in the `compile` function api below) and returns
	 * a string value representing the url.  In either case, the template URL is passed through {@link
	 * $sce#getTrustedResourceUrl $sce.getTrustedResourceUrl}.
	 *
	 *
	 * #### `replace` ([*DEPRECATED*!], will be removed in next major release - i.e. v2.0)
	 * specify what the template should replace. Defaults to `false`.
	 *
	 * * `true` - the template will replace the directive's element.
	 * * `false` - the template will replace the contents of the directive's element.
	 *
	 * The replacement process migrates all of the attributes / classes from the old element to the new
	 * one. See the {@link guide/directive#template-expanding-directive
	 * Directives Guide} for an example.
	 *
	 * There are very few scenarios where element replacement is required for the application function,
	 * the main one being reusable custom components that are used within SVG contexts
	 * (because SVG doesn't work with custom elements in the DOM tree).
	 *
	 * #### `transclude`
	 * Extract the contents of the element where the directive appears and make it available to the directive.
	 * The contents are compiled and provided to the directive as a **transclusion function**. See the
	 * {@link $compile#transclusion Transclusion} section below.
	 *
	 *
	 * #### `compile`
	 *
	 * ```js
	 *   function compile(tElement, tAttrs, transclude) { ... }
	 * ```
	 *
	 * The compile function deals with transforming the template DOM. Since most directives do not do
	 * template transformation, it is not used often. The compile function takes the following arguments:
	 *
	 *   * `tElement` - template element - The element where the directive has been declared. It is
	 *     safe to do template transformation on the element and child elements only.
	 *
	 *   * `tAttrs` - template attributes - Normalized list of attributes declared on this element shared
	 *     between all directive compile functions.
	 *
	 *   * `transclude` -  [*DEPRECATED*!] A transclude linking function: `function(scope, cloneLinkingFn)`
	 *
	 * <div class="alert alert-warning">
	 * **Note:** The template instance and the link instance may be different objects if the template has
	 * been cloned. For this reason it is **not** safe to do anything other than DOM transformations that
	 * apply to all cloned DOM nodes within the compile function. Specifically, DOM listener registration
	 * should be done in a linking function rather than in a compile function.
	 * </div>
	
	 * <div class="alert alert-warning">
	 * **Note:** The compile function cannot handle directives that recursively use themselves in their
	 * own templates or compile functions. Compiling these directives results in an infinite loop and
	 * stack overflow errors.
	 *
	 * This can be avoided by manually using $compile in the postLink function to imperatively compile
	 * a directive's template instead of relying on automatic template compilation via `template` or
	 * `templateUrl` declaration or manual compilation inside the compile function.
	 * </div>
	 *
	 * <div class="alert alert-danger">
	 * **Note:** The `transclude` function that is passed to the compile function is deprecated, as it
	 *   e.g. does not know about the right outer scope. Please use the transclude function that is passed
	 *   to the link function instead.
	 * </div>
	
	 * A compile function can have a return value which can be either a function or an object.
	 *
	 * * returning a (post-link) function - is equivalent to registering the linking function via the
	 *   `link` property of the config object when the compile function is empty.
	 *
	 * * returning an object with function(s) registered via `pre` and `post` properties - allows you to
	 *   control when a linking function should be called during the linking phase. See info about
	 *   pre-linking and post-linking functions below.
	 *
	 *
	 * #### `link`
	 * This property is used only if the `compile` property is not defined.
	 *
	 * ```js
	 *   function link(scope, iElement, iAttrs, controller, transcludeFn) { ... }
	 * ```
	 *
	 * The link function is responsible for registering DOM listeners as well as updating the DOM. It is
	 * executed after the template has been cloned. This is where most of the directive logic will be
	 * put.
	 *
	 *   * `scope` - {@link ng.$rootScope.Scope Scope} - The scope to be used by the
	 *     directive for registering {@link ng.$rootScope.Scope#$watch watches}.
	 *
	 *   * `iElement` - instance element - The element where the directive is to be used. It is safe to
	 *     manipulate the children of the element only in `postLink` function since the children have
	 *     already been linked.
	 *
	 *   * `iAttrs` - instance attributes - Normalized list of attributes declared on this element shared
	 *     between all directive linking functions.
	 *
	 *   * `controller` - the directive's required controller instance(s) - Instances are shared
	 *     among all directives, which allows the directives to use the controllers as a communication
	 *     channel. The exact value depends on the directive's `require` property:
	 *       * no controller(s) required: the directive's own controller, or `undefined` if it doesn't have one
	 *       * `string`: the controller instance
	 *       * `array`: array of controller instances
	 *
	 *     If a required controller cannot be found, and it is optional, the instance is `null`,
	 *     otherwise the {@link error:$compile:ctreq Missing Required Controller} error is thrown.
	 *
	 *     Note that you can also require the directive's own controller - it will be made available like
	 *     any other controller.
	 *
	 *   * `transcludeFn` - A transclude linking function pre-bound to the correct transclusion scope.
	 *     This is the same as the `$transclude`
	 *     parameter of directive controllers, see there for details.
	 *     `function([scope], cloneLinkingFn, futureParentElement)`.
	 *
	 * #### Pre-linking function
	 *
	 * Executed before the child elements are linked. Not safe to do DOM transformation since the
	 * compiler linking function will fail to locate the correct elements for linking.
	 *
	 * #### Post-linking function
	 *
	 * Executed after the child elements are linked.
	 *
	 * Note that child elements that contain `templateUrl` directives will not have been compiled
	 * and linked since they are waiting for their template to load asynchronously and their own
	 * compilation and linking has been suspended until that occurs.
	 *
	 * It is safe to do DOM transformation in the post-linking function on elements that are not waiting
	 * for their async templates to be resolved.
	 *
	 *
	 * ### Transclusion
	 *
	 * Transclusion is the process of extracting a collection of DOM elements from one part of the DOM and
	 * copying them to another part of the DOM, while maintaining their connection to the original AngularJS
	 * scope from where they were taken.
	 *
	 * Transclusion is used (often with {@link ngTransclude}) to insert the
	 * original contents of a directive's element into a specified place in the template of the directive.
	 * The benefit of transclusion, over simply moving the DOM elements manually, is that the transcluded
	 * content has access to the properties on the scope from which it was taken, even if the directive
	 * has isolated scope.
	 * See the {@link guide/directive#creating-a-directive-that-wraps-other-elements Directives Guide}.
	 *
	 * This makes it possible for the widget to have private state for its template, while the transcluded
	 * content has access to its originating scope.
	 *
	 * <div class="alert alert-warning">
	 * **Note:** When testing an element transclude directive you must not place the directive at the root of the
	 * DOM fragment that is being compiled. See {@link guide/unit-testing#testing-transclusion-directives
	 * Testing Transclusion Directives}.
	 * </div>
	 *
	 * There are three kinds of transclusion depending upon whether you want to transclude just the contents of the
	 * directive's element, the entire element or multiple parts of the element contents:
	 *
	 * * `true` - transclude the content (i.e. the child nodes) of the directive's element.
	 * * `'element'` - transclude the whole of the directive's element including any directives on this
	 *   element that defined at a lower priority than this directive. When used, the `template`
	 *   property is ignored.
	 * * **`{...}` (an object hash):** - map elements of the content onto transclusion "slots" in the template.
	 *
	 * **Mult-slot transclusion** is declared by providing an object for the `transclude` property.
	 *
	 * This object is a map where the keys are the name of the slot to fill and the value is an element selector
	 * used to match the HTML to the slot. The element selector should be in normalized form (e.g. `myElement`)
	 * and will match the standard element variants (e.g. `my-element`, `my:element`, `data-my-element`, etc).
	 *
	 * For further information check out the guide on {@link guide/directive#matching-directives Matching Directives}
	 *
	 * If the element selector is prefixed with a `?` then that slot is optional.
	 *
	 * For example, the transclude object `{ slotA: '?myCustomElement' }` maps `<my-custom-element>` elements to
	 * the `slotA` slot, which can be accessed via the `$transclude` function or via the {@link ngTransclude} directive.
	 *
	 * Slots that are not marked as optional (`?`) will trigger a compile time error if there are no matching elements
	 * in the transclude content. If you wish to know if an optional slot was filled with content, then you can call
	 * `$transclude.isSlotFilled(slotName)` on the transclude function passed to the directive's link function and
	 * injectable into the directive's controller.
	 *
	 *
	 * #### Transclusion Functions
	 *
	 * When a directive requests transclusion, the compiler extracts its contents and provides a **transclusion
	 * function** to the directive's `link` function and `controller`. This transclusion function is a special
	 * **linking function** that will return the compiled contents linked to a new transclusion scope.
	 *
	 * <div class="alert alert-info">
	 * If you are just using {@link ngTransclude} then you don't need to worry about this function, since
	 * ngTransclude will deal with it for us.
	 * </div>
	 *
	 * If you want to manually control the insertion and removal of the transcluded content in your directive
	 * then you must use this transclude function. When you call a transclude function it returns a a jqLite/JQuery
	 * object that contains the compiled DOM, which is linked to the correct transclusion scope.
	 *
	 * When you call a transclusion function you can pass in a **clone attach function**. This function accepts
	 * two parameters, `function(clone, scope) { ... }`, where the `clone` is a fresh compiled copy of your transcluded
	 * content and the `scope` is the newly created transclusion scope, to which the clone is bound.
	 *
	 * <div class="alert alert-info">
	 * **Best Practice**: Always provide a `cloneFn` (clone attach function) when you call a transclude function
	 * since you then get a fresh clone of the original DOM and also have access to the new transclusion scope.
	 * </div>
	 *
	 * It is normal practice to attach your transcluded content (`clone`) to the DOM inside your **clone
	 * attach function**:
	 *
	 * ```js
	 * var transcludedContent, transclusionScope;
	 *
	 * $transclude(function(clone, scope) {
	 *   element.append(clone);
	 *   transcludedContent = clone;
	 *   transclusionScope = scope;
	 * });
	 * ```
	 *
	 * Later, if you want to remove the transcluded content from your DOM then you should also destroy the
	 * associated transclusion scope:
	 *
	 * ```js
	 * transcludedContent.remove();
	 * transclusionScope.$destroy();
	 * ```
	 *
	 * <div class="alert alert-info">
	 * **Best Practice**: if you intend to add and remove transcluded content manually in your directive
	 * (by calling the transclude function to get the DOM and calling `element.remove()` to remove it),
	 * then you are also responsible for calling `$destroy` on the transclusion scope.
	 * </div>
	 *
	 * The built-in DOM manipulation directives, such as {@link ngIf}, {@link ngSwitch} and {@link ngRepeat}
	 * automatically destroy their transcluded clones as necessary so you do not need to worry about this if
	 * you are simply using {@link ngTransclude} to inject the transclusion into your directive.
	 *
	 *
	 * #### Transclusion Scopes
	 *
	 * When you call a transclude function it returns a DOM fragment that is pre-bound to a **transclusion
	 * scope**. This scope is special, in that it is a child of the directive's scope (and so gets destroyed
	 * when the directive's scope gets destroyed) but it inherits the properties of the scope from which it
	 * was taken.
	 *
	 * For example consider a directive that uses transclusion and isolated scope. The DOM hierarchy might look
	 * like this:
	 *
	 * ```html
	 * <div ng-app>
	 *   <div isolate>
	 *     <div transclusion>
	 *     </div>
	 *   </div>
	 * </div>
	 * ```
	 *
	 * The `$parent` scope hierarchy will look like this:
	 *
	   ```
	   - $rootScope
	     - isolate
	       - transclusion
	   ```
	 *
	 * but the scopes will inherit prototypically from different scopes to their `$parent`.
	 *
	   ```
	   - $rootScope
	     - transclusion
	   - isolate
	   ```
	 *
	 *
	 * ### Attributes
	 *
	 * The {@link ng.$compile.directive.Attributes Attributes} object - passed as a parameter in the
	 * `link()` or `compile()` functions. It has a variety of uses.
	 *
	 * * *Accessing normalized attribute names:* Directives like 'ngBind' can be expressed in many ways:
	 *   'ng:bind', `data-ng-bind`, or 'x-ng-bind'. The attributes object allows for normalized access
	 *   to the attributes.
	 *
	 * * *Directive inter-communication:* All directives share the same instance of the attributes
	 *   object which allows the directives to use the attributes object as inter directive
	 *   communication.
	 *
	 * * *Supports interpolation:* Interpolation attributes are assigned to the attribute object
	 *   allowing other directives to read the interpolated value.
	 *
	 * * *Observing interpolated attributes:* Use `$observe` to observe the value changes of attributes
	 *   that contain interpolation (e.g. `src="{{bar}}"`). Not only is this very efficient but it's also
	 *   the only way to easily get the actual value because during the linking phase the interpolation
	 *   hasn't been evaluated yet and so the value is at this time set to `undefined`.
	 *
	 * ```js
	 * function linkingFn(scope, elm, attrs, ctrl) {
	 *   // get the attribute value
	 *   console.log(attrs.ngModel);
	 *
	 *   // change the attribute
	 *   attrs.$set('ngModel', 'new value');
	 *
	 *   // observe changes to interpolated attribute
	 *   attrs.$observe('ngModel', function(value) {
	 *     console.log('ngModel has changed value to ' + value);
	 *   });
	 * }
	 * ```
	 *
	 * ## Example
	 *
	 * <div class="alert alert-warning">
	 * **Note**: Typically directives are registered with `module.directive`. The example below is
	 * to illustrate how `$compile` works.
	 * </div>
	 *
	 <example module="compileExample">
	   <file name="index.html">
	    <script>
	      angular.module('compileExample', [], function($compileProvider) {
	        // configure new 'compile' directive by passing a directive
	        // factory function. The factory function injects the '$compile'
	        $compileProvider.directive('compile', function($compile) {
	          // directive factory creates a link function
	          return function(scope, element, attrs) {
	            scope.$watch(
	              function(scope) {
	                 // watch the 'compile' expression for changes
	                return scope.$eval(attrs.compile);
	              },
	              function(value) {
	                // when the 'compile' expression changes
	                // assign it into the current DOM
	                element.html(value);
	
	                // compile the new DOM and link it to the current
	                // scope.
	                // NOTE: we only compile .childNodes so that
	                // we don't get into infinite loop compiling ourselves
	                $compile(element.contents())(scope);
	              }
	            );
	          };
	        });
	      })
	      .controller('GreeterController', ['$scope', function($scope) {
	        $scope.name = 'Angular';
	        $scope.html = 'Hello {{name}}';
	      }]);
	    </script>
	    <div ng-controller="GreeterController">
	      <input ng-model="name"> <br/>
	      <textarea ng-model="html"></textarea> <br/>
	      <div compile="html"></div>
	    </div>
	   </file>
	   <file name="protractor.js" type="protractor">
	     it('should auto compile', function() {
	       var textarea = $('textarea');
	       var output = $('div[compile]');
	       // The initial state reads 'Hello Angular'.
	       expect(output.getText()).toBe('Hello Angular');
	       textarea.clear();
	       textarea.sendKeys('{{name}}!');
	       expect(output.getText()).toBe('Angular!');
	     });
	   </file>
	 </example>
	
	 *
	 *
	 * @param {string|DOMElement} element Element or HTML string to compile into a template function.
	 * @param {function(angular.Scope, cloneAttachFn=)} transclude function available to directives - DEPRECATED.
	 *
	 * <div class="alert alert-danger">
	 * **Note:** Passing a `transclude` function to the $compile function is deprecated, as it
	 *   e.g. will not use the right outer scope. Please pass the transclude function as a
	 *   `parentBoundTranscludeFn` to the link function instead.
	 * </div>
	 *
	 * @param {number} maxPriority only apply directives lower than given priority (Only effects the
	 *                 root element(s), not their children)
	 * @returns {function(scope, cloneAttachFn=, options=)} a link function which is used to bind template
	 * (a DOM element/tree) to a scope. Where:
	 *
	 *  * `scope` - A {@link ng.$rootScope.Scope Scope} to bind to.
	 *  * `cloneAttachFn` - If `cloneAttachFn` is provided, then the link function will clone the
	 *  `template` and call the `cloneAttachFn` function allowing the caller to attach the
	 *  cloned elements to the DOM document at the appropriate place. The `cloneAttachFn` is
	 *  called as: <br/> `cloneAttachFn(clonedElement, scope)` where:
	 *
	 *      * `clonedElement` - is a clone of the original `element` passed into the compiler.
	 *      * `scope` - is the current scope with which the linking function is working with.
	 *
	 *  * `options` - An optional object hash with linking options. If `options` is provided, then the following
	 *  keys may be used to control linking behavior:
	 *
	 *      * `parentBoundTranscludeFn` - the transclude function made available to
	 *        directives; if given, it will be passed through to the link functions of
	 *        directives found in `element` during compilation.
	 *      * `transcludeControllers` - an object hash with keys that map controller names
	 *        to a hash with the key `instance`, which maps to the controller instance;
	 *        if given, it will make the controllers available to directives on the compileNode:
	 *        ```
	 *        {
	 *          parent: {
	 *            instance: parentControllerInstance
	 *          }
	 *        }
	 *        ```
	 *      * `futureParentElement` - defines the parent to which the `cloneAttachFn` will add
	 *        the cloned elements; only needed for transcludes that are allowed to contain non html
	 *        elements (e.g. SVG elements). See also the directive.controller property.
	 *
	 * Calling the linking function returns the element of the template. It is either the original
	 * element passed in, or the clone of the element if the `cloneAttachFn` is provided.
	 *
	 * After linking the view is not updated until after a call to $digest which typically is done by
	 * Angular automatically.
	 *
	 * If you need access to the bound view, there are two ways to do it:
	 *
	 * - If you are not asking the linking function to clone the template, create the DOM element(s)
	 *   before you send them to the compiler and keep this reference around.
	 *   ```js
	 *     var element = $compile('<p>{{total}}</p>')(scope);
	 *   ```
	 *
	 * - if on the other hand, you need the element to be cloned, the view reference from the original
	 *   example would not point to the clone, but rather to the original template that was cloned. In
	 *   this case, you can access the clone via the cloneAttachFn:
	 *   ```js
	 *     var templateElement = angular.element('<p>{{total}}</p>'),
	 *         scope = ....;
	 *
	 *     var clonedElement = $compile(templateElement)(scope, function(clonedElement, scope) {
	 *       //attach the clone to DOM document at the right place
	 *     });
	 *
	 *     //now we have reference to the cloned DOM via `clonedElement`
	 *   ```
	 *
	 *
	 * For information on how the compiler works, see the
	 * {@link guide/compiler Angular HTML Compiler} section of the Developer Guide.
	 */
	
	var $compileMinErr = minErr('$compile');
	
	function UNINITIALIZED_VALUE() {}
	var _UNINITIALIZED_VALUE = new UNINITIALIZED_VALUE();
	
	/**
	 * @ngdoc provider
	 * @name $compileProvider
	 *
	 * @description
	 */
	$CompileProvider.$inject = ['$provide', '$$sanitizeUriProvider'];
	function $CompileProvider($provide, $$sanitizeUriProvider) {
	  var hasDirectives = {},
	      Suffix = 'Directive',
	      COMMENT_DIRECTIVE_REGEXP = /^\s*directive\:\s*([\w\-]+)\s+(.*)$/,
	      CLASS_DIRECTIVE_REGEXP = /(([\w\-]+)(?:\:([^;]+))?;?)/,
	      ALL_OR_NOTHING_ATTRS = makeMap('ngSrc,ngSrcset,src,srcset'),
	      REQUIRE_PREFIX_REGEXP = /^(?:(\^\^?)?(\?)?(\^\^?)?)?/;
	
	  // Ref: http://developers.whatwg.org/webappapis.html#event-handler-idl-attributes
	  // The assumption is that future DOM event attribute names will begin with
	  // 'on' and be composed of only English letters.
	  var EVENT_HANDLER_ATTR_REGEXP = /^(on[a-z]+|formaction)$/;
	  var bindingCache = createMap();
	
	  function parseIsolateBindings(scope, directiveName, isController) {
	    var LOCAL_REGEXP = /^\s*([@&<]|=(\*?))(\??)\s*(\w*)\s*$/;
	
	    var bindings = createMap();
	
	    forEach(scope, function(definition, scopeName) {
	      if (definition in bindingCache) {
	        bindings[scopeName] = bindingCache[definition];
	        return;
	      }
	      var match = definition.match(LOCAL_REGEXP);
	
	      if (!match) {
	        throw $compileMinErr('iscp',
	            "Invalid {3} for directive '{0}'." +
	            " Definition: {... {1}: '{2}' ...}",
	            directiveName, scopeName, definition,
	            (isController ? "controller bindings definition" :
	            "isolate scope definition"));
	      }
	
	      bindings[scopeName] = {
	        mode: match[1][0],
	        collection: match[2] === '*',
	        optional: match[3] === '?',
	        attrName: match[4] || scopeName
	      };
	      if (match[4]) {
	        bindingCache[definition] = bindings[scopeName];
	      }
	    });
	
	    return bindings;
	  }
	
	  function parseDirectiveBindings(directive, directiveName) {
	    var bindings = {
	      isolateScope: null,
	      bindToController: null
	    };
	    if (isObject(directive.scope)) {
	      if (directive.bindToController === true) {
	        bindings.bindToController = parseIsolateBindings(directive.scope,
	                                                         directiveName, true);
	        bindings.isolateScope = {};
	      } else {
	        bindings.isolateScope = parseIsolateBindings(directive.scope,
	                                                     directiveName, false);
	      }
	    }
	    if (isObject(directive.bindToController)) {
	      bindings.bindToController =
	          parseIsolateBindings(directive.bindToController, directiveName, true);
	    }
	    if (isObject(bindings.bindToController)) {
	      var controller = directive.controller;
	      var controllerAs = directive.controllerAs;
	      if (!controller) {
	        // There is no controller, there may or may not be a controllerAs property
	        throw $compileMinErr('noctrl',
	              "Cannot bind to controller without directive '{0}'s controller.",
	              directiveName);
	      } else if (!identifierForController(controller, controllerAs)) {
	        // There is a controller, but no identifier or controllerAs property
	        throw $compileMinErr('noident',
	              "Cannot bind to controller without identifier for directive '{0}'.",
	              directiveName);
	      }
	    }
	    return bindings;
	  }
	
	  function assertValidDirectiveName(name) {
	    var letter = name.charAt(0);
	    if (!letter || letter !== lowercase(letter)) {
	      throw $compileMinErr('baddir', "Directive/Component name '{0}' is invalid. The first character must be a lowercase letter", name);
	    }
	    if (name !== name.trim()) {
	      throw $compileMinErr('baddir',
	            "Directive/Component name '{0}' is invalid. The name should not contain leading or trailing whitespaces",
	            name);
	    }
	  }
	
	  /**
	   * @ngdoc method
	   * @name $compileProvider#directive
	   * @kind function
	   *
	   * @description
	   * Register a new directive with the compiler.
	   *
	   * @param {string|Object} name Name of the directive in camel-case (i.e. <code>ngBind</code> which
	   *    will match as <code>ng-bind</code>), or an object map of directives where the keys are the
	   *    names and the values are the factories.
	   * @param {Function|Array} directiveFactory An injectable directive factory function. See the
	   *    {@link guide/directive directive guide} and the {@link $compile compile API} for more info.
	   * @returns {ng.$compileProvider} Self for chaining.
	   */
	  this.directive = function registerDirective(name, directiveFactory) {
	    assertNotHasOwnProperty(name, 'directive');
	    if (isString(name)) {
	      assertValidDirectiveName(name);
	      assertArg(directiveFactory, 'directiveFactory');
	      if (!hasDirectives.hasOwnProperty(name)) {
	        hasDirectives[name] = [];
	        $provide.factory(name + Suffix, ['$injector', '$exceptionHandler',
	          function($injector, $exceptionHandler) {
	            var directives = [];
	            forEach(hasDirectives[name], function(directiveFactory, index) {
	              try {
	                var directive = $injector.invoke(directiveFactory);
	                if (isFunction(directive)) {
	                  directive = { compile: valueFn(directive) };
	                } else if (!directive.compile && directive.link) {
	                  directive.compile = valueFn(directive.link);
	                }
	                directive.priority = directive.priority || 0;
	                directive.index = index;
	                directive.name = directive.name || name;
	                directive.require = directive.require || (directive.controller && directive.name);
	                directive.restrict = directive.restrict || 'EA';
	                directive.$$moduleName = directiveFactory.$$moduleName;
	                directives.push(directive);
	              } catch (e) {
	                $exceptionHandler(e);
	              }
	            });
	            return directives;
	          }]);
	      }
	      hasDirectives[name].push(directiveFactory);
	    } else {
	      forEach(name, reverseParams(registerDirective));
	    }
	    return this;
	  };
	
	  /**
	   * @ngdoc method
	   * @name $compileProvider#component
	   * @module ng
	   * @param {string} name Name of the component in camelCase (i.e. `myComp` which will match `<my-comp>`)
	   * @param {Object} options Component definition object (a simplified
	   *    {@link ng.$compile#directive-definition-object directive definition object}),
	   *    with the following properties (all optional):
	   *
	   *    - `controller` – `{(string|function()=}` – controller constructor function that should be
	   *      associated with newly created scope or the name of a {@link ng.$compile#-controller-
	   *      registered controller} if passed as a string. An empty `noop` function by default.
	   *    - `controllerAs` – `{string=}` – identifier name for to reference the controller in the component's scope.
	   *      If present, the controller will be published to scope under the `controllerAs` name.
	   *      If not present, this will default to be `$ctrl`.
	   *    - `template` – `{string=|function()=}` – html template as a string or a function that
	   *      returns an html template as a string which should be used as the contents of this component.
	   *      Empty string by default.
	   *
	   *      If `template` is a function, then it is {@link auto.$injector#invoke injected} with
	   *      the following locals:
	   *
	   *      - `$element` - Current element
	   *      - `$attrs` - Current attributes object for the element
	   *
	   *    - `templateUrl` – `{string=|function()=}` – path or function that returns a path to an html
	   *      template that should be used  as the contents of this component.
	   *
	   *      If `templateUrl` is a function, then it is {@link auto.$injector#invoke injected} with
	   *      the following locals:
	   *
	   *      - `$element` - Current element
	   *      - `$attrs` - Current attributes object for the element
	   *
	   *    - `bindings` – `{object=}` – defines bindings between DOM attributes and component properties.
	   *      Component properties are always bound to the component controller and not to the scope.
	   *      See {@link ng.$compile#-bindtocontroller- `bindToController`}.
	   *    - `transclude` – `{boolean=}` – whether {@link $compile#transclusion content transclusion} is enabled.
	   *      Disabled by default.
	   *    - `require` - `{Object<string, string>=}` - requires the controllers of other directives and binds them to
	   *      this component's controller. The object keys specify the property names under which the required
	   *      controllers (object values) will be bound. See {@link ng.$compile#-require- `require`}.
	   *    - `$...` – additional properties to attach to the directive factory function and the controller
	   *      constructor function. (This is used by the component router to annotate)
	   *
	   * @returns {ng.$compileProvider} the compile provider itself, for chaining of function calls.
	   * @description
	   * Register a **component definition** with the compiler. This is a shorthand for registering a special
	   * type of directive, which represents a self-contained UI component in your application. Such components
	   * are always isolated (i.e. `scope: {}`) and are always restricted to elements (i.e. `restrict: 'E'`).
	   *
	   * Component definitions are very simple and do not require as much configuration as defining general
	   * directives. Component definitions usually consist only of a template and a controller backing it.
	   *
	   * In order to make the definition easier, components enforce best practices like use of `controllerAs`,
	   * `bindToController`. They always have **isolate scope** and are restricted to elements.
	   *
	   * Here are a few examples of how you would usually define components:
	   *
	   * ```js
	   *   var myMod = angular.module(...);
	   *   myMod.component('myComp', {
	   *     template: '<div>My name is {{$ctrl.name}}</div>',
	   *     controller: function() {
	   *       this.name = 'shahar';
	   *     }
	   *   });
	   *
	   *   myMod.component('myComp', {
	   *     template: '<div>My name is {{$ctrl.name}}</div>',
	   *     bindings: {name: '@'}
	   *   });
	   *
	   *   myMod.component('myComp', {
	   *     templateUrl: 'views/my-comp.html',
	   *     controller: 'MyCtrl',
	   *     controllerAs: 'ctrl',
	   *     bindings: {name: '@'}
	   *   });
	   *
	   * ```
	   * For more examples, and an in-depth guide, see the {@link guide/component component guide}.
	   *
	   * <br />
	   * See also {@link ng.$compileProvider#directive $compileProvider.directive()}.
	   */
	  this.component = function registerComponent(name, options) {
	    var controller = options.controller || function() {};
	
	    function factory($injector) {
	      function makeInjectable(fn) {
	        if (isFunction(fn) || isArray(fn)) {
	          return function(tElement, tAttrs) {
	            return $injector.invoke(fn, this, {$element: tElement, $attrs: tAttrs});
	          };
	        } else {
	          return fn;
	        }
	      }
	
	      var template = (!options.template && !options.templateUrl ? '' : options.template);
	      var ddo = {
	        controller: controller,
	        controllerAs: identifierForController(options.controller) || options.controllerAs || '$ctrl',
	        template: makeInjectable(template),
	        templateUrl: makeInjectable(options.templateUrl),
	        transclude: options.transclude,
	        scope: {},
	        bindToController: options.bindings || {},
	        restrict: 'E',
	        require: options.require
	      };
	
	      // Copy annotations (starting with $) over to the DDO
	      forEach(options, function(val, key) {
	        if (key.charAt(0) === '$') ddo[key] = val;
	      });
	
	      return ddo;
	    }
	
	    // TODO(pete) remove the following `forEach` before we release 1.6.0
	    // The component-router@0.2.0 looks for the annotations on the controller constructor
	    // Nothing in Angular looks for annotations on the factory function but we can't remove
	    // it from 1.5.x yet.
	
	    // Copy any annotation properties (starting with $) over to the factory and controller constructor functions
	    // These could be used by libraries such as the new component router
	    forEach(options, function(val, key) {
	      if (key.charAt(0) === '$') {
	        factory[key] = val;
	        // Don't try to copy over annotations to named controller
	        if (isFunction(controller)) controller[key] = val;
	      }
	    });
	
	    factory.$inject = ['$injector'];
	
	    return this.directive(name, factory);
	  };
	
	
	  /**
	   * @ngdoc method
	   * @name $compileProvider#aHrefSanitizationWhitelist
	   * @kind function
	   *
	   * @description
	   * Retrieves or overrides the default regular expression that is used for whitelisting of safe
	   * urls during a[href] sanitization.
	   *
	   * The sanitization is a security measure aimed at preventing XSS attacks via html links.
	   *
	   * Any url about to be assigned to a[href] via data-binding is first normalized and turned into
	   * an absolute url. Afterwards, the url is matched against the `aHrefSanitizationWhitelist`
	   * regular expression. If a match is found, the original url is written into the dom. Otherwise,
	   * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.
	   *
	   * @param {RegExp=} regexp New regexp to whitelist urls with.
	   * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for
	   *    chaining otherwise.
	   */
	  this.aHrefSanitizationWhitelist = function(regexp) {
	    if (isDefined(regexp)) {
	      $$sanitizeUriProvider.aHrefSanitizationWhitelist(regexp);
	      return this;
	    } else {
	      return $$sanitizeUriProvider.aHrefSanitizationWhitelist();
	    }
	  };
	
	
	  /**
	   * @ngdoc method
	   * @name $compileProvider#imgSrcSanitizationWhitelist
	   * @kind function
	   *
	   * @description
	   * Retrieves or overrides the default regular expression that is used for whitelisting of safe
	   * urls during img[src] sanitization.
	   *
	   * The sanitization is a security measure aimed at prevent XSS attacks via html links.
	   *
	   * Any url about to be assigned to img[src] via data-binding is first normalized and turned into
	   * an absolute url. Afterwards, the url is matched against the `imgSrcSanitizationWhitelist`
	   * regular expression. If a match is found, the original url is written into the dom. Otherwise,
	   * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.
	   *
	   * @param {RegExp=} regexp New regexp to whitelist urls with.
	   * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for
	   *    chaining otherwise.
	   */
	  this.imgSrcSanitizationWhitelist = function(regexp) {
	    if (isDefined(regexp)) {
	      $$sanitizeUriProvider.imgSrcSanitizationWhitelist(regexp);
	      return this;
	    } else {
	      return $$sanitizeUriProvider.imgSrcSanitizationWhitelist();
	    }
	  };
	
	  /**
	   * @ngdoc method
	   * @name  $compileProvider#debugInfoEnabled
	   *
	   * @param {boolean=} enabled update the debugInfoEnabled state if provided, otherwise just return the
	   * current debugInfoEnabled state
	   * @returns {*} current value if used as getter or itself (chaining) if used as setter
	   *
	   * @kind function
	   *
	   * @description
	   * Call this method to enable/disable various debug runtime information in the compiler such as adding
	   * binding information and a reference to the current scope on to DOM elements.
	   * If enabled, the compiler will add the following to DOM elements that have been bound to the scope
	   * * `ng-binding` CSS class
	   * * `$binding` data property containing an array of the binding expressions
	   *
	   * You may want to disable this in production for a significant performance boost. See
	   * {@link guide/production#disabling-debug-data Disabling Debug Data} for more.
	   *
	   * The default value is true.
	   */
	  var debugInfoEnabled = true;
	  this.debugInfoEnabled = function(enabled) {
	    if (isDefined(enabled)) {
	      debugInfoEnabled = enabled;
	      return this;
	    }
	    return debugInfoEnabled;
	  };
	
	
	  var TTL = 10;
	  /**
	   * @ngdoc method
	   * @name $compileProvider#onChangesTtl
	   * @description
	   *
	   * Sets the number of times `$onChanges` hooks can trigger new changes before giving up and
	   * assuming that the model is unstable.
	   *
	   * The current default is 10 iterations.
	   *
	   * In complex applications it's possible that dependencies between `$onChanges` hooks and bindings will result
	   * in several iterations of calls to these hooks. However if an application needs more than the default 10
	   * iterations to stabilize then you should investigate what is causing the model to continuously change during
	   * the `$onChanges` hook execution.
	   *
	   * Increasing the TTL could have performance implications, so you should not change it without proper justification.
	   *
	   * @param {number} limit The number of `$onChanges` hook iterations.
	   * @returns {number|object} the current limit (or `this` if called as a setter for chaining)
	   */
	  this.onChangesTtl = function(value) {
	    if (arguments.length) {
	      TTL = value;
	      return this;
	    }
	    return TTL;
	  };
	
	  this.$get = [
	            '$injector', '$interpolate', '$exceptionHandler', '$templateRequest', '$parse',
	            '$controller', '$rootScope', '$sce', '$animate', '$$sanitizeUri',
	    function($injector,   $interpolate,   $exceptionHandler,   $templateRequest,   $parse,
	             $controller,   $rootScope,   $sce,   $animate,   $$sanitizeUri) {
	
	    var SIMPLE_ATTR_NAME = /^\w/;
	    var specialAttrHolder = window.document.createElement('div');
	
	
	
	    var onChangesTtl = TTL;
	    // The onChanges hooks should all be run together in a single digest
	    // When changes occur, the call to trigger their hooks will be added to this queue
	    var onChangesQueue;
	
	    // This function is called in a $$postDigest to trigger all the onChanges hooks in a single digest
	    function flushOnChangesQueue() {
	      try {
	        if (!(--onChangesTtl)) {
	          // We have hit the TTL limit so reset everything
	          onChangesQueue = undefined;
	          throw $compileMinErr('infchng', '{0} $onChanges() iterations reached. Aborting!\n', TTL);
	        }
	        // We must run this hook in an apply since the $$postDigest runs outside apply
	        $rootScope.$apply(function() {
	          for (var i = 0, ii = onChangesQueue.length; i < ii; ++i) {
	            onChangesQueue[i]();
	          }
	          // Reset the queue to trigger a new schedule next time there is a change
	          onChangesQueue = undefined;
	        });
	      } finally {
	        onChangesTtl++;
	      }
	    }
	
	
	    function Attributes(element, attributesToCopy) {
	      if (attributesToCopy) {
	        var keys = Object.keys(attributesToCopy);
	        var i, l, key;
	
	        for (i = 0, l = keys.length; i < l; i++) {
	          key = keys[i];
	          this[key] = attributesToCopy[key];
	        }
	      } else {
	        this.$attr = {};
	      }
	
	      this.$$element = element;
	    }
	
	    Attributes.prototype = {
	      /**
	       * @ngdoc method
	       * @name $compile.directive.Attributes#$normalize
	       * @kind function
	       *
	       * @description
	       * Converts an attribute name (e.g. dash/colon/underscore-delimited string, optionally prefixed with `x-` or
	       * `data-`) to its normalized, camelCase form.
	       *
	       * Also there is special case for Moz prefix starting with upper case letter.
	       *
	       * For further information check out the guide on {@link guide/directive#matching-directives Matching Directives}
	       *
	       * @param {string} name Name to normalize
	       */
	      $normalize: directiveNormalize,
	
	
	      /**
	       * @ngdoc method
	       * @name $compile.directive.Attributes#$addClass
	       * @kind function
	       *
	       * @description
	       * Adds the CSS class value specified by the classVal parameter to the element. If animations
	       * are enabled then an animation will be triggered for the class addition.
	       *
	       * @param {string} classVal The className value that will be added to the element
	       */
	      $addClass: function(classVal) {
	        if (classVal && classVal.length > 0) {
	          $animate.addClass(this.$$element, classVal);
	        }
	      },
	
	      /**
	       * @ngdoc method
	       * @name $compile.directive.Attributes#$removeClass
	       * @kind function
	       *
	       * @description
	       * Removes the CSS class value specified by the classVal parameter from the element. If
	       * animations are enabled then an animation will be triggered for the class removal.
	       *
	       * @param {string} classVal The className value that will be removed from the element
	       */
	      $removeClass: function(classVal) {
	        if (classVal && classVal.length > 0) {
	          $animate.removeClass(this.$$element, classVal);
	        }
	      },
	
	      /**
	       * @ngdoc method
	       * @name $compile.directive.Attributes#$updateClass
	       * @kind function
	       *
	       * @description
	       * Adds and removes the appropriate CSS class values to the element based on the difference
	       * between the new and old CSS class values (specified as newClasses and oldClasses).
	       *
	       * @param {string} newClasses The current CSS className value
	       * @param {string} oldClasses The former CSS className value
	       */
	      $updateClass: function(newClasses, oldClasses) {
	        var toAdd = tokenDifference(newClasses, oldClasses);
	        if (toAdd && toAdd.length) {
	          $animate.addClass(this.$$element, toAdd);
	        }
	
	        var toRemove = tokenDifference(oldClasses, newClasses);
	        if (toRemove && toRemove.length) {
	          $animate.removeClass(this.$$element, toRemove);
	        }
	      },
	
	      /**
	       * Set a normalized attribute on the element in a way such that all directives
	       * can share the attribute. This function properly handles boolean attributes.
	       * @param {string} key Normalized key. (ie ngAttribute)
	       * @param {string|boolean} value The value to set. If `null` attribute will be deleted.
	       * @param {boolean=} writeAttr If false, does not write the value to DOM element attribute.
	       *     Defaults to true.
	       * @param {string=} attrName Optional none normalized name. Defaults to key.
	       */
	      $set: function(key, value, writeAttr, attrName) {
	        // TODO: decide whether or not to throw an error if "class"
	        //is set through this function since it may cause $updateClass to
	        //become unstable.
	
	        var node = this.$$element[0],
	            booleanKey = getBooleanAttrName(node, key),
	            aliasedKey = getAliasedAttrName(key),
	            observer = key,
	            nodeName;
	
	        if (booleanKey) {
	          this.$$element.prop(key, value);
	          attrName = booleanKey;
	        } else if (aliasedKey) {
	          this[aliasedKey] = value;
	          observer = aliasedKey;
	        }
	
	        this[key] = value;
	
	        // translate normalized key to actual key
	        if (attrName) {
	          this.$attr[key] = attrName;
	        } else {
	          attrName = this.$attr[key];
	          if (!attrName) {
	            this.$attr[key] = attrName = snake_case(key, '-');
	          }
	        }
	
	        nodeName = nodeName_(this.$$element);
	
	        if ((nodeName === 'a' && (key === 'href' || key === 'xlinkHref')) ||
	            (nodeName === 'img' && key === 'src')) {
	          // sanitize a[href] and img[src] values
	          this[key] = value = $$sanitizeUri(value, key === 'src');
	        } else if (nodeName === 'img' && key === 'srcset') {
	          // sanitize img[srcset] values
	          var result = "";
	
	          // first check if there are spaces because it's not the same pattern
	          var trimmedSrcset = trim(value);
	          //                (   999x   ,|   999w   ,|   ,|,   )
	          var srcPattern = /(\s+\d+x\s*,|\s+\d+w\s*,|\s+,|,\s+)/;
	          var pattern = /\s/.test(trimmedSrcset) ? srcPattern : /(,)/;
	
	          // split srcset into tuple of uri and descriptor except for the last item
	          var rawUris = trimmedSrcset.split(pattern);
	
	          // for each tuples
	          var nbrUrisWith2parts = Math.floor(rawUris.length / 2);
	          for (var i = 0; i < nbrUrisWith2parts; i++) {
	            var innerIdx = i * 2;
	            // sanitize the uri
	            result += $$sanitizeUri(trim(rawUris[innerIdx]), true);
	            // add the descriptor
	            result += (" " + trim(rawUris[innerIdx + 1]));
	          }
	
	          // split the last item into uri and descriptor
	          var lastTuple = trim(rawUris[i * 2]).split(/\s/);
	
	          // sanitize the last uri
	          result += $$sanitizeUri(trim(lastTuple[0]), true);
	
	          // and add the last descriptor if any
	          if (lastTuple.length === 2) {
	            result += (" " + trim(lastTuple[1]));
	          }
	          this[key] = value = result;
	        }
	
	        if (writeAttr !== false) {
	          if (value === null || isUndefined(value)) {
	            this.$$element.removeAttr(attrName);
	          } else {
	            if (SIMPLE_ATTR_NAME.test(attrName)) {
	              this.$$element.attr(attrName, value);
	            } else {
	              setSpecialAttr(this.$$element[0], attrName, value);
	            }
	          }
	        }
	
	        // fire observers
	        var $$observers = this.$$observers;
	        $$observers && forEach($$observers[observer], function(fn) {
	          try {
	            fn(value);
	          } catch (e) {
	            $exceptionHandler(e);
	          }
	        });
	      },
	
	
	      /**
	       * @ngdoc method
	       * @name $compile.directive.Attributes#$observe
	       * @kind function
	       *
	       * @description
	       * Observes an interpolated attribute.
	       *
	       * The observer function will be invoked once during the next `$digest` following
	       * compilation. The observer is then invoked whenever the interpolated value
	       * changes.
	       *
	       * @param {string} key Normalized key. (ie ngAttribute) .
	       * @param {function(interpolatedValue)} fn Function that will be called whenever
	                the interpolated value of the attribute changes.
	       *        See the {@link guide/interpolation#how-text-and-attribute-bindings-work Interpolation
	       *        guide} for more info.
	       * @returns {function()} Returns a deregistration function for this observer.
	       */
	      $observe: function(key, fn) {
	        var attrs = this,
	            $$observers = (attrs.$$observers || (attrs.$$observers = createMap())),
	            listeners = ($$observers[key] || ($$observers[key] = []));
	
	        listeners.push(fn);
	        $rootScope.$evalAsync(function() {
	          if (!listeners.$$inter && attrs.hasOwnProperty(key) && !isUndefined(attrs[key])) {
	            // no one registered attribute interpolation function, so lets call it manually
	            fn(attrs[key]);
	          }
	        });
	
	        return function() {
	          arrayRemove(listeners, fn);
	        };
	      }
	    };
	
	    function setSpecialAttr(element, attrName, value) {
	      // Attributes names that do not start with letters (such as `(click)`) cannot be set using `setAttribute`
	      // so we have to jump through some hoops to get such an attribute
	      // https://github.com/angular/angular.js/pull/13318
	      specialAttrHolder.innerHTML = "<span " + attrName + ">";
	      var attributes = specialAttrHolder.firstChild.attributes;
	      var attribute = attributes[0];
	      // We have to remove the attribute from its container element before we can add it to the destination element
	      attributes.removeNamedItem(attribute.name);
	      attribute.value = value;
	      element.attributes.setNamedItem(attribute);
	    }
	
	    function safeAddClass($element, className) {
	      try {
	        $element.addClass(className);
	      } catch (e) {
	        // ignore, since it means that we are trying to set class on
	        // SVG element, where class name is read-only.
	      }
	    }
	
	
	    var startSymbol = $interpolate.startSymbol(),
	        endSymbol = $interpolate.endSymbol(),
	        denormalizeTemplate = (startSymbol == '{{' && endSymbol  == '}}')
	            ? identity
	            : function denormalizeTemplate(template) {
	              return template.replace(/\{\{/g, startSymbol).replace(/}}/g, endSymbol);
	        },
	        NG_ATTR_BINDING = /^ngAttr[A-Z]/;
	    var MULTI_ELEMENT_DIR_RE = /^(.+)Start$/;
	
	    compile.$$addBindingInfo = debugInfoEnabled ? function $$addBindingInfo($element, binding) {
	      var bindings = $element.data('$binding') || [];
	
	      if (isArray(binding)) {
	        bindings = bindings.concat(binding);
	      } else {
	        bindings.push(binding);
	      }
	
	      $element.data('$binding', bindings);
	    } : noop;
	
	    compile.$$addBindingClass = debugInfoEnabled ? function $$addBindingClass($element) {
	      safeAddClass($element, 'ng-binding');
	    } : noop;
	
	    compile.$$addScopeInfo = debugInfoEnabled ? function $$addScopeInfo($element, scope, isolated, noTemplate) {
	      var dataName = isolated ? (noTemplate ? '$isolateScopeNoTemplate' : '$isolateScope') : '$scope';
	      $element.data(dataName, scope);
	    } : noop;
	
	    compile.$$addScopeClass = debugInfoEnabled ? function $$addScopeClass($element, isolated) {
	      safeAddClass($element, isolated ? 'ng-isolate-scope' : 'ng-scope');
	    } : noop;
	
	    compile.$$createComment = function(directiveName, comment) {
	      var content = '';
	      if (debugInfoEnabled) {
	        content = ' ' + (directiveName || '') + ': ' + (comment || '') + ' ';
	      }
	      return window.document.createComment(content);
	    };
	
	    return compile;
	
	    //================================
	
	    function compile($compileNodes, transcludeFn, maxPriority, ignoreDirective,
	                        previousCompileContext) {
	      if (!($compileNodes instanceof jqLite)) {
	        // jquery always rewraps, whereas we need to preserve the original selector so that we can
	        // modify it.
	        $compileNodes = jqLite($compileNodes);
	      }
	
	      var NOT_EMPTY = /\S+/;
	
	      // We can not compile top level text elements since text nodes can be merged and we will
	      // not be able to attach scope data to them, so we will wrap them in <span>
	      for (var i = 0, len = $compileNodes.length; i < len; i++) {
	        var domNode = $compileNodes[i];
	
	        if (domNode.nodeType === NODE_TYPE_TEXT && domNode.nodeValue.match(NOT_EMPTY) /* non-empty */) {
	          jqLiteWrapNode(domNode, $compileNodes[i] = window.document.createElement('span'));
	        }
	      }
	
	      var compositeLinkFn =
	              compileNodes($compileNodes, transcludeFn, $compileNodes,
	                           maxPriority, ignoreDirective, previousCompileContext);
	      compile.$$addScopeClass($compileNodes);
	      var namespace = null;
	      return function publicLinkFn(scope, cloneConnectFn, options) {
	        assertArg(scope, 'scope');
	
	        if (previousCompileContext && previousCompileContext.needsNewScope) {
	          // A parent directive did a replace and a directive on this element asked
	          // for transclusion, which caused us to lose a layer of element on which
	          // we could hold the new transclusion scope, so we will create it manually
	          // here.
	          scope = scope.$parent.$new();
	        }
	
	        options = options || {};
	        var parentBoundTranscludeFn = options.parentBoundTranscludeFn,
	          transcludeControllers = options.transcludeControllers,
	          futureParentElement = options.futureParentElement;
	
	        // When `parentBoundTranscludeFn` is passed, it is a
	        // `controllersBoundTransclude` function (it was previously passed
	        // as `transclude` to directive.link) so we must unwrap it to get
	        // its `boundTranscludeFn`
	        if (parentBoundTranscludeFn && parentBoundTranscludeFn.$$boundTransclude) {
	          parentBoundTranscludeFn = parentBoundTranscludeFn.$$boundTransclude;
	        }
	
	        if (!namespace) {
	          namespace = detectNamespaceForChildElements(futureParentElement);
	        }
	        var $linkNode;
	        if (namespace !== 'html') {
	          // When using a directive with replace:true and templateUrl the $compileNodes
	          // (or a child element inside of them)
	          // might change, so we need to recreate the namespace adapted compileNodes
	          // for call to the link function.
	          // Note: This will already clone the nodes...
	          $linkNode = jqLite(
	            wrapTemplate(namespace, jqLite('<div>').append($compileNodes).html())
	          );
	        } else if (cloneConnectFn) {
	          // important!!: we must call our jqLite.clone() since the jQuery one is trying to be smart
	          // and sometimes changes the structure of the DOM.
	          $linkNode = JQLitePrototype.clone.call($compileNodes);
	        } else {
	          $linkNode = $compileNodes;
	        }
	
	        if (transcludeControllers) {
	          for (var controllerName in transcludeControllers) {
	            $linkNode.data('$' + controllerName + 'Controller', transcludeControllers[controllerName].instance);
	          }
	        }
	
	        compile.$$addScopeInfo($linkNode, scope);
	
	        if (cloneConnectFn) cloneConnectFn($linkNode, scope);
	        if (compositeLinkFn) compositeLinkFn(scope, $linkNode, $linkNode, parentBoundTranscludeFn);
	        return $linkNode;
	      };
	    }
	
	    function detectNamespaceForChildElements(parentElement) {
	      // TODO: Make this detect MathML as well...
	      var node = parentElement && parentElement[0];
	      if (!node) {
	        return 'html';
	      } else {
	        return nodeName_(node) !== 'foreignobject' && toString.call(node).match(/SVG/) ? 'svg' : 'html';
	      }
	    }
	
	    /**
	     * Compile function matches each node in nodeList against the directives. Once all directives
	     * for a particular node are collected their compile functions are executed. The compile
	     * functions return values - the linking functions - are combined into a composite linking
	     * function, which is the a linking function for the node.
	     *
	     * @param {NodeList} nodeList an array of nodes or NodeList to compile
	     * @param {function(angular.Scope, cloneAttachFn=)} transcludeFn A linking function, where the
	     *        scope argument is auto-generated to the new child of the transcluded parent scope.
	     * @param {DOMElement=} $rootElement If the nodeList is the root of the compilation tree then
	     *        the rootElement must be set the jqLite collection of the compile root. This is
	     *        needed so that the jqLite collection items can be replaced with widgets.
	     * @param {number=} maxPriority Max directive priority.
	     * @returns {Function} A composite linking function of all of the matched directives or null.
	     */
	    function compileNodes(nodeList, transcludeFn, $rootElement, maxPriority, ignoreDirective,
	                            previousCompileContext) {
	      var linkFns = [],
	          attrs, directives, nodeLinkFn, childNodes, childLinkFn, linkFnFound, nodeLinkFnFound;
	
	      for (var i = 0; i < nodeList.length; i++) {
	        attrs = new Attributes();
	
	        // we must always refer to nodeList[i] since the nodes can be replaced underneath us.
	        directives = collectDirectives(nodeList[i], [], attrs, i === 0 ? maxPriority : undefined,
	                                        ignoreDirective);
	
	        nodeLinkFn = (directives.length)
	            ? applyDirectivesToNode(directives, nodeList[i], attrs, transcludeFn, $rootElement,
	                                      null, [], [], previousCompileContext)
	            : null;
	
	        if (nodeLinkFn && nodeLinkFn.scope) {
	          compile.$$addScopeClass(attrs.$$element);
	        }
	
	        childLinkFn = (nodeLinkFn && nodeLinkFn.terminal ||
	                      !(childNodes = nodeList[i].childNodes) ||
	                      !childNodes.length)
	            ? null
	            : compileNodes(childNodes,
	                 nodeLinkFn ? (
	                  (nodeLinkFn.transcludeOnThisElement || !nodeLinkFn.templateOnThisElement)
	                     && nodeLinkFn.transclude) : transcludeFn);
	
	        if (nodeLinkFn || childLinkFn) {
	          linkFns.push(i, nodeLinkFn, childLinkFn);
	          linkFnFound = true;
	          nodeLinkFnFound = nodeLinkFnFound || nodeLinkFn;
	        }
	
	        //use the previous context only for the first element in the virtual group
	        previousCompileContext = null;
	      }
	
	      // return a linking function if we have found anything, null otherwise
	      return linkFnFound ? compositeLinkFn : null;
	
	      function compositeLinkFn(scope, nodeList, $rootElement, parentBoundTranscludeFn) {
	        var nodeLinkFn, childLinkFn, node, childScope, i, ii, idx, childBoundTranscludeFn;
	        var stableNodeList;
	
	
	        if (nodeLinkFnFound) {
	          // copy nodeList so that if a nodeLinkFn removes or adds an element at this DOM level our
	          // offsets don't get screwed up
	          var nodeListLength = nodeList.length;
	          stableNodeList = new Array(nodeListLength);
	
	          // create a sparse array by only copying the elements which have a linkFn
	          for (i = 0; i < linkFns.length; i+=3) {
	            idx = linkFns[i];
	            stableNodeList[idx] = nodeList[idx];
	          }
	        } else {
	          stableNodeList = nodeList;
	        }
	
	        for (i = 0, ii = linkFns.length; i < ii;) {
	          node = stableNodeList[linkFns[i++]];
	          nodeLinkFn = linkFns[i++];
	          childLinkFn = linkFns[i++];
	
	          if (nodeLinkFn) {
	            if (nodeLinkFn.scope) {
	              childScope = scope.$new();
	              compile.$$addScopeInfo(jqLite(node), childScope);
	            } else {
	              childScope = scope;
	            }
	
	            if (nodeLinkFn.transcludeOnThisElement) {
	              childBoundTranscludeFn = createBoundTranscludeFn(
	                  scope, nodeLinkFn.transclude, parentBoundTranscludeFn);
	
	            } else if (!nodeLinkFn.templateOnThisElement && parentBoundTranscludeFn) {
	              childBoundTranscludeFn = parentBoundTranscludeFn;
	
	            } else if (!parentBoundTranscludeFn && transcludeFn) {
	              childBoundTranscludeFn = createBoundTranscludeFn(scope, transcludeFn);
	
	            } else {
	              childBoundTranscludeFn = null;
	            }
	
	            nodeLinkFn(childLinkFn, childScope, node, $rootElement, childBoundTranscludeFn);
	
	          } else if (childLinkFn) {
	            childLinkFn(scope, node.childNodes, undefined, parentBoundTranscludeFn);
	          }
	        }
	      }
	    }
	
	    function createBoundTranscludeFn(scope, transcludeFn, previousBoundTranscludeFn) {
	      function boundTranscludeFn(transcludedScope, cloneFn, controllers, futureParentElement, containingScope) {
	
	        if (!transcludedScope) {
	          transcludedScope = scope.$new(false, containingScope);
	          transcludedScope.$$transcluded = true;
	        }
	
	        return transcludeFn(transcludedScope, cloneFn, {
	          parentBoundTranscludeFn: previousBoundTranscludeFn,
	          transcludeControllers: controllers,
	          futureParentElement: futureParentElement
	        });
	      }
	
	      // We need  to attach the transclusion slots onto the `boundTranscludeFn`
	      // so that they are available inside the `controllersBoundTransclude` function
	      var boundSlots = boundTranscludeFn.$$slots = createMap();
	      for (var slotName in transcludeFn.$$slots) {
	        if (transcludeFn.$$slots[slotName]) {
	          boundSlots[slotName] = createBoundTranscludeFn(scope, transcludeFn.$$slots[slotName], previousBoundTranscludeFn);
	        } else {
	          boundSlots[slotName] = null;
	        }
	      }
	
	      return boundTranscludeFn;
	    }
	
	    /**
	     * Looks for directives on the given node and adds them to the directive collection which is
	     * sorted.
	     *
	     * @param node Node to search.
	     * @param directives An array to which the directives are added to. This array is sorted before
	     *        the function returns.
	     * @param attrs The shared attrs object which is used to populate the normalized attributes.
	     * @param {number=} maxPriority Max directive priority.
	     */
	    function collectDirectives(node, directives, attrs, maxPriority, ignoreDirective) {
	      var nodeType = node.nodeType,
	          attrsMap = attrs.$attr,
	          match,
	          className;
	
	      switch (nodeType) {
	        case NODE_TYPE_ELEMENT: /* Element */
	          // use the node name: <directive>
	          addDirective(directives,
	              directiveNormalize(nodeName_(node)), 'E', maxPriority, ignoreDirective);
	
	          // iterate over the attributes
	          for (var attr, name, nName, ngAttrName, value, isNgAttr, nAttrs = node.attributes,
	                   j = 0, jj = nAttrs && nAttrs.length; j < jj; j++) {
	            var attrStartName = false;
	            var attrEndName = false;
	
	            attr = nAttrs[j];
	            name = attr.name;
	            value = trim(attr.value);
	
	            // support ngAttr attribute binding
	            ngAttrName = directiveNormalize(name);
	            if (isNgAttr = NG_ATTR_BINDING.test(ngAttrName)) {
	              name = name.replace(PREFIX_REGEXP, '')
	                .substr(8).replace(/_(.)/g, function(match, letter) {
	                  return letter.toUpperCase();
	                });
	            }
	
	            var multiElementMatch = ngAttrName.match(MULTI_ELEMENT_DIR_RE);
	            if (multiElementMatch && directiveIsMultiElement(multiElementMatch[1])) {
	              attrStartName = name;
	              attrEndName = name.substr(0, name.length - 5) + 'end';
	              name = name.substr(0, name.length - 6);
	            }
	
	            nName = directiveNormalize(name.toLowerCase());
	            attrsMap[nName] = name;
	            if (isNgAttr || !attrs.hasOwnProperty(nName)) {
	                attrs[nName] = value;
	                if (getBooleanAttrName(node, nName)) {
	                  attrs[nName] = true; // presence means true
	                }
	            }
	            addAttrInterpolateDirective(node, directives, value, nName, isNgAttr);
	            addDirective(directives, nName, 'A', maxPriority, ignoreDirective, attrStartName,
	                          attrEndName);
	          }
	
	          // use class as directive
	          className = node.className;
	          if (isObject(className)) {
	              // Maybe SVGAnimatedString
	              className = className.animVal;
	          }
	          if (isString(className) && className !== '') {
	            while (match = CLASS_DIRECTIVE_REGEXP.exec(className)) {
	              nName = directiveNormalize(match[2]);
	              if (addDirective(directives, nName, 'C', maxPriority, ignoreDirective)) {
	                attrs[nName] = trim(match[3]);
	              }
	              className = className.substr(match.index + match[0].length);
	            }
	          }
	          break;
	        case NODE_TYPE_TEXT: /* Text Node */
	          if (msie === 11) {
	            // Workaround for #11781
	            while (node.parentNode && node.nextSibling && node.nextSibling.nodeType === NODE_TYPE_TEXT) {
	              node.nodeValue = node.nodeValue + node.nextSibling.nodeValue;
	              node.parentNode.removeChild(node.nextSibling);
	            }
	          }
	          addTextInterpolateDirective(directives, node.nodeValue);
	          break;
	        case NODE_TYPE_COMMENT: /* Comment */
	          try {
	            match = COMMENT_DIRECTIVE_REGEXP.exec(node.nodeValue);
	            if (match) {
	              nName = directiveNormalize(match[1]);
	              if (addDirective(directives, nName, 'M', maxPriority, ignoreDirective)) {
	                attrs[nName] = trim(match[2]);
	              }
	            }
	          } catch (e) {
	            // turns out that under some circumstances IE9 throws errors when one attempts to read
	            // comment's node value.
	            // Just ignore it and continue. (Can't seem to reproduce in test case.)
	          }
	          break;
	      }
	
	      directives.sort(byPriority);
	      return directives;
	    }
	
	    /**
	     * Given a node with an directive-start it collects all of the siblings until it finds
	     * directive-end.
	     * @param node
	     * @param attrStart
	     * @param attrEnd
	     * @returns {*}
	     */
	    function groupScan(node, attrStart, attrEnd) {
	      var nodes = [];
	      var depth = 0;
	      if (attrStart && node.hasAttribute && node.hasAttribute(attrStart)) {
	        do {
	          if (!node) {
	            throw $compileMinErr('uterdir',
	                      "Unterminated attribute, found '{0}' but no matching '{1}' found.",
	                      attrStart, attrEnd);
	          }
	          if (node.nodeType == NODE_TYPE_ELEMENT) {
	            if (node.hasAttribute(attrStart)) depth++;
	            if (node.hasAttribute(attrEnd)) depth--;
	          }
	          nodes.push(node);
	          node = node.nextSibling;
	        } while (depth > 0);
	      } else {
	        nodes.push(node);
	      }
	
	      return jqLite(nodes);
	    }
	
	    /**
	     * Wrapper for linking function which converts normal linking function into a grouped
	     * linking function.
	     * @param linkFn
	     * @param attrStart
	     * @param attrEnd
	     * @returns {Function}
	     */
	    function groupElementsLinkFnWrapper(linkFn, attrStart, attrEnd) {
	      return function groupedElementsLink(scope, element, attrs, controllers, transcludeFn) {
	        element = groupScan(element[0], attrStart, attrEnd);
	        return linkFn(scope, element, attrs, controllers, transcludeFn);
	      };
	    }
	
	    /**
	     * A function generator that is used to support both eager and lazy compilation
	     * linking function.
	     * @param eager
	     * @param $compileNodes
	     * @param transcludeFn
	     * @param maxPriority
	     * @param ignoreDirective
	     * @param previousCompileContext
	     * @returns {Function}
	     */
	    function compilationGenerator(eager, $compileNodes, transcludeFn, maxPriority, ignoreDirective, previousCompileContext) {
	      var compiled;
	
	      if (eager) {
	        return compile($compileNodes, transcludeFn, maxPriority, ignoreDirective, previousCompileContext);
	      }
	      return function lazyCompilation() {
	        if (!compiled) {
	          compiled = compile($compileNodes, transcludeFn, maxPriority, ignoreDirective, previousCompileContext);
	
	          // Null out all of these references in order to make them eligible for garbage collection
	          // since this is a potentially long lived closure
	          $compileNodes = transcludeFn = previousCompileContext = null;
	        }
	        return compiled.apply(this, arguments);
	      };
	    }
	
	    /**
	     * Once the directives have been collected, their compile functions are executed. This method
	     * is responsible for inlining directive templates as well as terminating the application
	     * of the directives if the terminal directive has been reached.
	     *
	     * @param {Array} directives Array of collected directives to execute their compile function.
	     *        this needs to be pre-sorted by priority order.
	     * @param {Node} compileNode The raw DOM node to apply the compile functions to
	     * @param {Object} templateAttrs The shared attribute function
	     * @param {function(angular.Scope, cloneAttachFn=)} transcludeFn A linking function, where the
	     *                                                  scope argument is auto-generated to the new
	     *                                                  child of the transcluded parent scope.
	     * @param {JQLite} jqCollection If we are working on the root of the compile tree then this
	     *                              argument has the root jqLite array so that we can replace nodes
	     *                              on it.
	     * @param {Object=} originalReplaceDirective An optional directive that will be ignored when
	     *                                           compiling the transclusion.
	     * @param {Array.<Function>} preLinkFns
	     * @param {Array.<Function>} postLinkFns
	     * @param {Object} previousCompileContext Context used for previous compilation of the current
	     *                                        node
	     * @returns {Function} linkFn
	     */
	    function applyDirectivesToNode(directives, compileNode, templateAttrs, transcludeFn,
	                                   jqCollection, originalReplaceDirective, preLinkFns, postLinkFns,
	                                   previousCompileContext) {
	      previousCompileContext = previousCompileContext || {};
	
	      var terminalPriority = -Number.MAX_VALUE,
	          newScopeDirective = previousCompileContext.newScopeDirective,
	          controllerDirectives = previousCompileContext.controllerDirectives,
	          newIsolateScopeDirective = previousCompileContext.newIsolateScopeDirective,
	          templateDirective = previousCompileContext.templateDirective,
	          nonTlbTranscludeDirective = previousCompileContext.nonTlbTranscludeDirective,
	          hasTranscludeDirective = false,
	          hasTemplate = false,
	          hasElementTranscludeDirective = previousCompileContext.hasElementTranscludeDirective,
	          $compileNode = templateAttrs.$$element = jqLite(compileNode),
	          directive,
	          directiveName,
	          $template,
	          replaceDirective = originalReplaceDirective,
	          childTranscludeFn = transcludeFn,
	          linkFn,
	          didScanForMultipleTransclusion = false,
	          mightHaveMultipleTransclusionError = false,
	          directiveValue;
	
	      // executes all directives on the current element
	      for (var i = 0, ii = directives.length; i < ii; i++) {
	        directive = directives[i];
	        var attrStart = directive.$$start;
	        var attrEnd = directive.$$end;
	
	        // collect multiblock sections
	        if (attrStart) {
	          $compileNode = groupScan(compileNode, attrStart, attrEnd);
	        }
	        $template = undefined;
	
	        if (terminalPriority > directive.priority) {
	          break; // prevent further processing of directives
	        }
	
	        if (directiveValue = directive.scope) {
	
	          // skip the check for directives with async templates, we'll check the derived sync
	          // directive when the template arrives
	          if (!directive.templateUrl) {
	            if (isObject(directiveValue)) {
	              // This directive is trying to add an isolated scope.
	              // Check that there is no scope of any kind already
	              assertNoDuplicate('new/isolated scope', newIsolateScopeDirective || newScopeDirective,
	                                directive, $compileNode);
	              newIsolateScopeDirective = directive;
	            } else {
	              // This directive is trying to add a child scope.
	              // Check that there is no isolated scope already
	              assertNoDuplicate('new/isolated scope', newIsolateScopeDirective, directive,
	                                $compileNode);
	            }
	          }
	
	          newScopeDirective = newScopeDirective || directive;
	        }
	
	        directiveName = directive.name;
	
	        // If we encounter a condition that can result in transclusion on the directive,
	        // then scan ahead in the remaining directives for others that may cause a multiple
	        // transclusion error to be thrown during the compilation process.  If a matching directive
	        // is found, then we know that when we encounter a transcluded directive, we need to eagerly
	        // compile the `transclude` function rather than doing it lazily in order to throw
	        // exceptions at the correct time
	        if (!didScanForMultipleTransclusion && ((directive.replace && (directive.templateUrl || directive.template))
	            || (directive.transclude && !directive.$$tlb))) {
	                var candidateDirective;
	
	                for (var scanningIndex = i + 1; candidateDirective = directives[scanningIndex++];) {
	                    if ((candidateDirective.transclude && !candidateDirective.$$tlb)
	                        || (candidateDirective.replace && (candidateDirective.templateUrl || candidateDirective.template))) {
	                        mightHaveMultipleTransclusionError = true;
	                        break;
	                    }
	                }
	
	                didScanForMultipleTransclusion = true;
	        }
	
	        if (!directive.templateUrl && directive.controller) {
	          directiveValue = directive.controller;
	          controllerDirectives = controllerDirectives || createMap();
	          assertNoDuplicate("'" + directiveName + "' controller",
	              controllerDirectives[directiveName], directive, $compileNode);
	          controllerDirectives[directiveName] = directive;
	        }
	
	        if (directiveValue = directive.transclude) {
	          hasTranscludeDirective = true;
	
	          // Special case ngIf and ngRepeat so that we don't complain about duplicate transclusion.
	          // This option should only be used by directives that know how to safely handle element transclusion,
	          // where the transcluded nodes are added or replaced after linking.
	          if (!directive.$$tlb) {
	            assertNoDuplicate('transclusion', nonTlbTranscludeDirective, directive, $compileNode);
	            nonTlbTranscludeDirective = directive;
	          }
	
	          if (directiveValue == 'element') {
	            hasElementTranscludeDirective = true;
	            terminalPriority = directive.priority;
	            $template = $compileNode;
	            $compileNode = templateAttrs.$$element =
	                jqLite(compile.$$createComment(directiveName, templateAttrs[directiveName]));
	            compileNode = $compileNode[0];
	            replaceWith(jqCollection, sliceArgs($template), compileNode);
	
	            // Support: Chrome < 50
	            // https://github.com/angular/angular.js/issues/14041
	
	            // In the versions of V8 prior to Chrome 50, the document fragment that is created
	            // in the `replaceWith` function is improperly garbage collected despite still
	            // being referenced by the `parentNode` property of all of the child nodes.  By adding
	            // a reference to the fragment via a different property, we can avoid that incorrect
	            // behavior.
	            // TODO: remove this line after Chrome 50 has been released
	            $template[0].$$parentNode = $template[0].parentNode;
	
	            childTranscludeFn = compilationGenerator(mightHaveMultipleTransclusionError, $template, transcludeFn, terminalPriority,
	                                        replaceDirective && replaceDirective.name, {
	                                          // Don't pass in:
	                                          // - controllerDirectives - otherwise we'll create duplicates controllers
	                                          // - newIsolateScopeDirective or templateDirective - combining templates with
	                                          //   element transclusion doesn't make sense.
	                                          //
	                                          // We need only nonTlbTranscludeDirective so that we prevent putting transclusion
	                                          // on the same element more than once.
	                                          nonTlbTranscludeDirective: nonTlbTranscludeDirective
	                                        });
	          } else {
	
	            var slots = createMap();
	
	            $template = jqLite(jqLiteClone(compileNode)).contents();
	
	            if (isObject(directiveValue)) {
	
	              // We have transclusion slots,
	              // collect them up, compile them and store their transclusion functions
	              $template = [];
	
	              var slotMap = createMap();
	              var filledSlots = createMap();
	
	              // Parse the element selectors
	              forEach(directiveValue, function(elementSelector, slotName) {
	                // If an element selector starts with a ? then it is optional
	                var optional = (elementSelector.charAt(0) === '?');
	                elementSelector = optional ? elementSelector.substring(1) : elementSelector;
	
	                slotMap[elementSelector] = slotName;
	
	                // We explicitly assign `null` since this implies that a slot was defined but not filled.
	                // Later when calling boundTransclusion functions with a slot name we only error if the
	                // slot is `undefined`
	                slots[slotName] = null;
	
	                // filledSlots contains `true` for all slots that are either optional or have been
	                // filled. This is used to check that we have not missed any required slots
	                filledSlots[slotName] = optional;
	              });
	
	              // Add the matching elements into their slot
	              forEach($compileNode.contents(), function(node) {
	                var slotName = slotMap[directiveNormalize(nodeName_(node))];
	                if (slotName) {
	                  filledSlots[slotName] = true;
	                  slots[slotName] = slots[slotName] || [];
	                  slots[slotName].push(node);
	                } else {
	                  $template.push(node);
	                }
	              });
	
	              // Check for required slots that were not filled
	              forEach(filledSlots, function(filled, slotName) {
	                if (!filled) {
	                  throw $compileMinErr('reqslot', 'Required transclusion slot `{0}` was not filled.', slotName);
	                }
	              });
	
	              for (var slotName in slots) {
	                if (slots[slotName]) {
	                  // Only define a transclusion function if the slot was filled
	                  slots[slotName] = compilationGenerator(mightHaveMultipleTransclusionError, slots[slotName], transcludeFn);
	                }
	              }
	            }
	
	            $compileNode.empty(); // clear contents
	            childTranscludeFn = compilationGenerator(mightHaveMultipleTransclusionError, $template, transcludeFn, undefined,
	                undefined, { needsNewScope: directive.$$isolateScope || directive.$$newScope});
	            childTranscludeFn.$$slots = slots;
	          }
	        }
	
	        if (directive.template) {
	          hasTemplate = true;
	          assertNoDuplicate('template', templateDirective, directive, $compileNode);
	          templateDirective = directive;
	
	          directiveValue = (isFunction(directive.template))
	              ? directive.template($compileNode, templateAttrs)
	              : directive.template;
	
	          directiveValue = denormalizeTemplate(directiveValue);
	
	          if (directive.replace) {
	            replaceDirective = directive;
	            if (jqLiteIsTextNode(directiveValue)) {
	              $template = [];
	            } else {
	              $template = removeComments(wrapTemplate(directive.templateNamespace, trim(directiveValue)));
	            }
	            compileNode = $template[0];
	
	            if ($template.length != 1 || compileNode.nodeType !== NODE_TYPE_ELEMENT) {
	              throw $compileMinErr('tplrt',
	                  "Template for directive '{0}' must have exactly one root element. {1}",
	                  directiveName, '');
	            }
	
	            replaceWith(jqCollection, $compileNode, compileNode);
	
	            var newTemplateAttrs = {$attr: {}};
	
	            // combine directives from the original node and from the template:
	            // - take the array of directives for this element
	            // - split it into two parts, those that already applied (processed) and those that weren't (unprocessed)
	            // - collect directives from the template and sort them by priority
	            // - combine directives as: processed + template + unprocessed
	            var templateDirectives = collectDirectives(compileNode, [], newTemplateAttrs);
	            var unprocessedDirectives = directives.splice(i + 1, directives.length - (i + 1));
	
	            if (newIsolateScopeDirective || newScopeDirective) {
	              // The original directive caused the current element to be replaced but this element
	              // also needs to have a new scope, so we need to tell the template directives
	              // that they would need to get their scope from further up, if they require transclusion
	              markDirectiveScope(templateDirectives, newIsolateScopeDirective, newScopeDirective);
	            }
	            directives = directives.concat(templateDirectives).concat(unprocessedDirectives);
	            mergeTemplateAttributes(templateAttrs, newTemplateAttrs);
	
	            ii = directives.length;
	          } else {
	            $compileNode.html(directiveValue);
	          }
	        }
	
	        if (directive.templateUrl) {
	          hasTemplate = true;
	          assertNoDuplicate('template', templateDirective, directive, $compileNode);
	          templateDirective = directive;
	
	          if (directive.replace) {
	            replaceDirective = directive;
	          }
	
	          /* jshint -W021 */
	          nodeLinkFn = compileTemplateUrl(directives.splice(i, directives.length - i), $compileNode,
	          /* jshint +W021 */
	              templateAttrs, jqCollection, hasTranscludeDirective && childTranscludeFn, preLinkFns, postLinkFns, {
	                controllerDirectives: controllerDirectives,
	                newScopeDirective: (newScopeDirective !== directive) && newScopeDirective,
	                newIsolateScopeDirective: newIsolateScopeDirective,
	                templateDirective: templateDirective,
	                nonTlbTranscludeDirective: nonTlbTranscludeDirective
	              });
	          ii = directives.length;
	        } else if (directive.compile) {
	          try {
	            linkFn = directive.compile($compileNode, templateAttrs, childTranscludeFn);
	            if (isFunction(linkFn)) {
	              addLinkFns(null, linkFn, attrStart, attrEnd);
	            } else if (linkFn) {
	              addLinkFns(linkFn.pre, linkFn.post, attrStart, attrEnd);
	            }
	          } catch (e) {
	            $exceptionHandler(e, startingTag($compileNode));
	          }
	        }
	
	        if (directive.terminal) {
	          nodeLinkFn.terminal = true;
	          terminalPriority = Math.max(terminalPriority, directive.priority);
	        }
	
	      }
	
	      nodeLinkFn.scope = newScopeDirective && newScopeDirective.scope === true;
	      nodeLinkFn.transcludeOnThisElement = hasTranscludeDirective;
	      nodeLinkFn.templateOnThisElement = hasTemplate;
	      nodeLinkFn.transclude = childTranscludeFn;
	
	      previousCompileContext.hasElementTranscludeDirective = hasElementTranscludeDirective;
	
	      // might be normal or delayed nodeLinkFn depending on if templateUrl is present
	      return nodeLinkFn;
	
	      ////////////////////
	
	      function addLinkFns(pre, post, attrStart, attrEnd) {
	        if (pre) {
	          if (attrStart) pre = groupElementsLinkFnWrapper(pre, attrStart, attrEnd);
	          pre.require = directive.require;
	          pre.directiveName = directiveName;
	          if (newIsolateScopeDirective === directive || directive.$$isolateScope) {
	            pre = cloneAndAnnotateFn(pre, {isolateScope: true});
	          }
	          preLinkFns.push(pre);
	        }
	        if (post) {
	          if (attrStart) post = groupElementsLinkFnWrapper(post, attrStart, attrEnd);
	          post.require = directive.require;
	          post.directiveName = directiveName;
	          if (newIsolateScopeDirective === directive || directive.$$isolateScope) {
	            post = cloneAndAnnotateFn(post, {isolateScope: true});
	          }
	          postLinkFns.push(post);
	        }
	      }
	
	      function nodeLinkFn(childLinkFn, scope, linkNode, $rootElement, boundTranscludeFn) {
	        var i, ii, linkFn, isolateScope, controllerScope, elementControllers, transcludeFn, $element,
	            attrs, scopeBindingInfo;
	
	        if (compileNode === linkNode) {
	          attrs = templateAttrs;
	          $element = templateAttrs.$$element;
	        } else {
	          $element = jqLite(linkNode);
	          attrs = new Attributes($element, templateAttrs);
	        }
	
	        controllerScope = scope;
	        if (newIsolateScopeDirective) {
	          isolateScope = scope.$new(true);
	        } else if (newScopeDirective) {
	          controllerScope = scope.$parent;
	        }
	
	        if (boundTranscludeFn) {
	          // track `boundTranscludeFn` so it can be unwrapped if `transcludeFn`
	          // is later passed as `parentBoundTranscludeFn` to `publicLinkFn`
	          transcludeFn = controllersBoundTransclude;
	          transcludeFn.$$boundTransclude = boundTranscludeFn;
	          // expose the slots on the `$transclude` function
	          transcludeFn.isSlotFilled = function(slotName) {
	            return !!boundTranscludeFn.$$slots[slotName];
	          };
	        }
	
	        if (controllerDirectives) {
	          elementControllers = setupControllers($element, attrs, transcludeFn, controllerDirectives, isolateScope, scope, newIsolateScopeDirective);
	        }
	
	        if (newIsolateScopeDirective) {
	          // Initialize isolate scope bindings for new isolate scope directive.
	          compile.$$addScopeInfo($element, isolateScope, true, !(templateDirective && (templateDirective === newIsolateScopeDirective ||
	              templateDirective === newIsolateScopeDirective.$$originalDirective)));
	          compile.$$addScopeClass($element, true);
	          isolateScope.$$isolateBindings =
	              newIsolateScopeDirective.$$isolateBindings;
	          scopeBindingInfo = initializeDirectiveBindings(scope, attrs, isolateScope,
	                                        isolateScope.$$isolateBindings,
	                                        newIsolateScopeDirective);
	          if (scopeBindingInfo.removeWatches) {
	            isolateScope.$on('$destroy', scopeBindingInfo.removeWatches);
	          }
	        }
	
	        // Initialize bindToController bindings
	        for (var name in elementControllers) {
	          var controllerDirective = controllerDirectives[name];
	          var controller = elementControllers[name];
	          var bindings = controllerDirective.$$bindings.bindToController;
	
	          if (controller.identifier && bindings) {
	            controller.bindingInfo =
	              initializeDirectiveBindings(controllerScope, attrs, controller.instance, bindings, controllerDirective);
	          } else {
	            controller.bindingInfo = {};
	          }
	
	          var controllerResult = controller();
	          if (controllerResult !== controller.instance) {
	            // If the controller constructor has a return value, overwrite the instance
	            // from setupControllers
	            controller.instance = controllerResult;
	            $element.data('$' + controllerDirective.name + 'Controller', controllerResult);
	            controller.bindingInfo.removeWatches && controller.bindingInfo.removeWatches();
	            controller.bindingInfo =
	              initializeDirectiveBindings(controllerScope, attrs, controller.instance, bindings, controllerDirective);
	          }
	        }
	
	        // Bind the required controllers to the controller, if `require` is an object and `bindToController` is truthy
	        forEach(controllerDirectives, function(controllerDirective, name) {
	          var require = controllerDirective.require;
	          if (controllerDirective.bindToController && !isArray(require) && isObject(require)) {
	            extend(elementControllers[name].instance, getControllers(name, require, $element, elementControllers));
	          }
	        });
	
	        // Handle the init and destroy lifecycle hooks on all controllers that have them
	        forEach(elementControllers, function(controller) {
	          var controllerInstance = controller.instance;
	          if (isFunction(controllerInstance.$onChanges)) {
	            controllerInstance.$onChanges(controller.bindingInfo.initialChanges);
	          }
	          if (isFunction(controllerInstance.$onInit)) {
	            controllerInstance.$onInit();
	          }
	          if (isFunction(controllerInstance.$onDestroy)) {
	            controllerScope.$on('$destroy', function callOnDestroyHook() {
	              controllerInstance.$onDestroy();
	            });
	          }
	        });
	
	        // PRELINKING
	        for (i = 0, ii = preLinkFns.length; i < ii; i++) {
	          linkFn = preLinkFns[i];
	          invokeLinkFn(linkFn,
	              linkFn.isolateScope ? isolateScope : scope,
	              $element,
	              attrs,
	              linkFn.require && getControllers(linkFn.directiveName, linkFn.require, $element, elementControllers),
	              transcludeFn
	          );
	        }
	
	        // RECURSION
	        // We only pass the isolate scope, if the isolate directive has a template,
	        // otherwise the child elements do not belong to the isolate directive.
	        var scopeToChild = scope;
	        if (newIsolateScopeDirective && (newIsolateScopeDirective.template || newIsolateScopeDirective.templateUrl === null)) {
	          scopeToChild = isolateScope;
	        }
	        childLinkFn && childLinkFn(scopeToChild, linkNode.childNodes, undefined, boundTranscludeFn);
	
	        // POSTLINKING
	        for (i = postLinkFns.length - 1; i >= 0; i--) {
	          linkFn = postLinkFns[i];
	          invokeLinkFn(linkFn,
	              linkFn.isolateScope ? isolateScope : scope,
	              $element,
	              attrs,
	              linkFn.require && getControllers(linkFn.directiveName, linkFn.require, $element, elementControllers),
	              transcludeFn
	          );
	        }
	
	        // Trigger $postLink lifecycle hooks
	        forEach(elementControllers, function(controller) {
	          var controllerInstance = controller.instance;
	          if (isFunction(controllerInstance.$postLink)) {
	            controllerInstance.$postLink();
	          }
	        });
	
	        // This is the function that is injected as `$transclude`.
	        // Note: all arguments are optional!
	        function controllersBoundTransclude(scope, cloneAttachFn, futureParentElement, slotName) {
	          var transcludeControllers;
	          // No scope passed in:
	          if (!isScope(scope)) {
	            slotName = futureParentElement;
	            futureParentElement = cloneAttachFn;
	            cloneAttachFn = scope;
	            scope = undefined;
	          }
	
	          if (hasElementTranscludeDirective) {
	            transcludeControllers = elementControllers;
	          }
	          if (!futureParentElement) {
	            futureParentElement = hasElementTranscludeDirective ? $element.parent() : $element;
	          }
	          if (slotName) {
	            // slotTranscludeFn can be one of three things:
	            //  * a transclude function - a filled slot
	            //  * `null` - an optional slot that was not filled
	            //  * `undefined` - a slot that was not declared (i.e. invalid)
	            var slotTranscludeFn = boundTranscludeFn.$$slots[slotName];
	            if (slotTranscludeFn) {
	              return slotTranscludeFn(scope, cloneAttachFn, transcludeControllers, futureParentElement, scopeToChild);
	            } else if (isUndefined(slotTranscludeFn)) {
	              throw $compileMinErr('noslot',
	               'No parent directive that requires a transclusion with slot name "{0}". ' +
	               'Element: {1}',
	               slotName, startingTag($element));
	            }
	          } else {
	            return boundTranscludeFn(scope, cloneAttachFn, transcludeControllers, futureParentElement, scopeToChild);
	          }
	        }
	      }
	    }
	
	    function getControllers(directiveName, require, $element, elementControllers) {
	      var value;
	
	      if (isString(require)) {
	        var match = require.match(REQUIRE_PREFIX_REGEXP);
	        var name = require.substring(match[0].length);
	        var inheritType = match[1] || match[3];
	        var optional = match[2] === '?';
	
	        //If only parents then start at the parent element
	        if (inheritType === '^^') {
	          $element = $element.parent();
	        //Otherwise attempt getting the controller from elementControllers in case
	        //the element is transcluded (and has no data) and to avoid .data if possible
	        } else {
	          value = elementControllers && elementControllers[name];
	          value = value && value.instance;
	        }
	
	        if (!value) {
	          var dataName = '$' + name + 'Controller';
	          value = inheritType ? $element.inheritedData(dataName) : $element.data(dataName);
	        }
	
	        if (!value && !optional) {
	          throw $compileMinErr('ctreq',
	              "Controller '{0}', required by directive '{1}', can't be found!",
	              name, directiveName);
	        }
	      } else if (isArray(require)) {
	        value = [];
	        for (var i = 0, ii = require.length; i < ii; i++) {
	          value[i] = getControllers(directiveName, require[i], $element, elementControllers);
	        }
	      } else if (isObject(require)) {
	        value = {};
	        forEach(require, function(controller, property) {
	          value[property] = getControllers(directiveName, controller, $element, elementControllers);
	        });
	      }
	
	      return value || null;
	    }
	
	    function setupControllers($element, attrs, transcludeFn, controllerDirectives, isolateScope, scope, newIsolateScopeDirective) {
	      var elementControllers = createMap();
	      for (var controllerKey in controllerDirectives) {
	        var directive = controllerDirectives[controllerKey];
	        var locals = {
	          $scope: directive === newIsolateScopeDirective || directive.$$isolateScope ? isolateScope : scope,
	          $element: $element,
	          $attrs: attrs,
	          $transclude: transcludeFn
	        };
	
	        var controller = directive.controller;
	        if (controller == '@') {
	          controller = attrs[directive.name];
	        }
	
	        var controllerInstance = $controller(controller, locals, true, directive.controllerAs);
	
	        // For directives with element transclusion the element is a comment.
	        // In this case .data will not attach any data.
	        // Instead, we save the controllers for the element in a local hash and attach to .data
	        // later, once we have the actual element.
	        elementControllers[directive.name] = controllerInstance;
	        $element.data('$' + directive.name + 'Controller', controllerInstance.instance);
	      }
	      return elementControllers;
	    }
	
	    // Depending upon the context in which a directive finds itself it might need to have a new isolated
	    // or child scope created. For instance:
	    // * if the directive has been pulled into a template because another directive with a higher priority
	    // asked for element transclusion
	    // * if the directive itself asks for transclusion but it is at the root of a template and the original
	    // element was replaced. See https://github.com/angular/angular.js/issues/12936
	    function markDirectiveScope(directives, isolateScope, newScope) {
	      for (var j = 0, jj = directives.length; j < jj; j++) {
	        directives[j] = inherit(directives[j], {$$isolateScope: isolateScope, $$newScope: newScope});
	      }
	    }
	
	    /**
	     * looks up the directive and decorates it with exception handling and proper parameters. We
	     * call this the boundDirective.
	     *
	     * @param {string} name name of the directive to look up.
	     * @param {string} location The directive must be found in specific format.
	     *   String containing any of theses characters:
	     *
	     *   * `E`: element name
	     *   * `A': attribute
	     *   * `C`: class
	     *   * `M`: comment
	     * @returns {boolean} true if directive was added.
	     */
	    function addDirective(tDirectives, name, location, maxPriority, ignoreDirective, startAttrName,
	                          endAttrName) {
	      if (name === ignoreDirective) return null;
	      var match = null;
	      if (hasDirectives.hasOwnProperty(name)) {
	        for (var directive, directives = $injector.get(name + Suffix),
	            i = 0, ii = directives.length; i < ii; i++) {
	          try {
	            directive = directives[i];
	            if ((isUndefined(maxPriority) || maxPriority > directive.priority) &&
	                 directive.restrict.indexOf(location) != -1) {
	              if (startAttrName) {
	                directive = inherit(directive, {$$start: startAttrName, $$end: endAttrName});
	              }
	              if (!directive.$$bindings) {
	                var bindings = directive.$$bindings =
	                    parseDirectiveBindings(directive, directive.name);
	                if (isObject(bindings.isolateScope)) {
	                  directive.$$isolateBindings = bindings.isolateScope;
	                }
	              }
	              tDirectives.push(directive);
	              match = directive;
	            }
	          } catch (e) { $exceptionHandler(e); }
	        }
	      }
	      return match;
	    }
	
	
	    /**
	     * looks up the directive and returns true if it is a multi-element directive,
	     * and therefore requires DOM nodes between -start and -end markers to be grouped
	     * together.
	     *
	     * @param {string} name name of the directive to look up.
	     * @returns true if directive was registered as multi-element.
	     */
	    function directiveIsMultiElement(name) {
	      if (hasDirectives.hasOwnProperty(name)) {
	        for (var directive, directives = $injector.get(name + Suffix),
	            i = 0, ii = directives.length; i < ii; i++) {
	          directive = directives[i];
	          if (directive.multiElement) {
	            return true;
	          }
	        }
	      }
	      return false;
	    }
	
	    /**
	     * When the element is replaced with HTML template then the new attributes
	     * on the template need to be merged with the existing attributes in the DOM.
	     * The desired effect is to have both of the attributes present.
	     *
	     * @param {object} dst destination attributes (original DOM)
	     * @param {object} src source attributes (from the directive template)
	     */
	    function mergeTemplateAttributes(dst, src) {
	      var srcAttr = src.$attr,
	          dstAttr = dst.$attr,
	          $element = dst.$$element;
	
	      // reapply the old attributes to the new element
	      forEach(dst, function(value, key) {
	        if (key.charAt(0) != '$') {
	          if (src[key] && src[key] !== value) {
	            value += (key === 'style' ? ';' : ' ') + src[key];
	          }
	          dst.$set(key, value, true, srcAttr[key]);
	        }
	      });
	
	      // copy the new attributes on the old attrs object
	      forEach(src, function(value, key) {
	        if (key == 'class') {
	          safeAddClass($element, value);
	          dst['class'] = (dst['class'] ? dst['class'] + ' ' : '') + value;
	        } else if (key == 'style') {
	          $element.attr('style', $element.attr('style') + ';' + value);
	          dst['style'] = (dst['style'] ? dst['style'] + ';' : '') + value;
	          // `dst` will never contain hasOwnProperty as DOM parser won't let it.
	          // You will get an "InvalidCharacterError: DOM Exception 5" error if you
	          // have an attribute like "has-own-property" or "data-has-own-property", etc.
	        } else if (key.charAt(0) != '$' && !dst.hasOwnProperty(key)) {
	          dst[key] = value;
	          dstAttr[key] = srcAttr[key];
	        }
	      });
	    }
	
	
	    function compileTemplateUrl(directives, $compileNode, tAttrs,
	        $rootElement, childTranscludeFn, preLinkFns, postLinkFns, previousCompileContext) {
	      var linkQueue = [],
	          afterTemplateNodeLinkFn,
	          afterTemplateChildLinkFn,
	          beforeTemplateCompileNode = $compileNode[0],
	          origAsyncDirective = directives.shift(),
	          derivedSyncDirective = inherit(origAsyncDirective, {
	            templateUrl: null, transclude: null, replace: null, $$originalDirective: origAsyncDirective
	          }),
	          templateUrl = (isFunction(origAsyncDirective.templateUrl))
	              ? origAsyncDirective.templateUrl($compileNode, tAttrs)
	              : origAsyncDirective.templateUrl,
	          templateNamespace = origAsyncDirective.templateNamespace;
	
	      $compileNode.empty();
	
	      $templateRequest(templateUrl)
	        .then(function(content) {
	          var compileNode, tempTemplateAttrs, $template, childBoundTranscludeFn;
	
	          content = denormalizeTemplate(content);
	
	          if (origAsyncDirective.replace) {
	            if (jqLiteIsTextNode(content)) {
	              $template = [];
	            } else {
	              $template = removeComments(wrapTemplate(templateNamespace, trim(content)));
	            }
	            compileNode = $template[0];
	
	            if ($template.length != 1 || compileNode.nodeType !== NODE_TYPE_ELEMENT) {
	              throw $compileMinErr('tplrt',
	                  "Template for directive '{0}' must have exactly one root element. {1}",
	                  origAsyncDirective.name, templateUrl);
	            }
	
	            tempTemplateAttrs = {$attr: {}};
	            replaceWith($rootElement, $compileNode, compileNode);
	            var templateDirectives = collectDirectives(compileNode, [], tempTemplateAttrs);
	
	            if (isObject(origAsyncDirective.scope)) {
	              // the original directive that caused the template to be loaded async required
	              // an isolate scope
	              markDirectiveScope(templateDirectives, true);
	            }
	            directives = templateDirectives.concat(directives);
	            mergeTemplateAttributes(tAttrs, tempTemplateAttrs);
	          } else {
	            compileNode = beforeTemplateCompileNode;
	            $compileNode.html(content);
	          }
	
	          directives.unshift(derivedSyncDirective);
	
	          afterTemplateNodeLinkFn = applyDirectivesToNode(directives, compileNode, tAttrs,
	              childTranscludeFn, $compileNode, origAsyncDirective, preLinkFns, postLinkFns,
	              previousCompileContext);
	          forEach($rootElement, function(node, i) {
	            if (node == compileNode) {
	              $rootElement[i] = $compileNode[0];
	            }
	          });
	          afterTemplateChildLinkFn = compileNodes($compileNode[0].childNodes, childTranscludeFn);
	
	          while (linkQueue.length) {
	            var scope = linkQueue.shift(),
	                beforeTemplateLinkNode = linkQueue.shift(),
	                linkRootElement = linkQueue.shift(),
	                boundTranscludeFn = linkQueue.shift(),
	                linkNode = $compileNode[0];
	
	            if (scope.$$destroyed) continue;
	
	            if (beforeTemplateLinkNode !== beforeTemplateCompileNode) {
	              var oldClasses = beforeTemplateLinkNode.className;
	
	              if (!(previousCompileContext.hasElementTranscludeDirective &&
	                  origAsyncDirective.replace)) {
	                // it was cloned therefore we have to clone as well.
	                linkNode = jqLiteClone(compileNode);
	              }
	              replaceWith(linkRootElement, jqLite(beforeTemplateLinkNode), linkNode);
	
	              // Copy in CSS classes from original node
	              safeAddClass(jqLite(linkNode), oldClasses);
	            }
	            if (afterTemplateNodeLinkFn.transcludeOnThisElement) {
	              childBoundTranscludeFn = createBoundTranscludeFn(scope, afterTemplateNodeLinkFn.transclude, boundTranscludeFn);
	            } else {
	              childBoundTranscludeFn = boundTranscludeFn;
	            }
	            afterTemplateNodeLinkFn(afterTemplateChildLinkFn, scope, linkNode, $rootElement,
	              childBoundTranscludeFn);
	          }
	          linkQueue = null;
	        });
	
	      return function delayedNodeLinkFn(ignoreChildLinkFn, scope, node, rootElement, boundTranscludeFn) {
	        var childBoundTranscludeFn = boundTranscludeFn;
	        if (scope.$$destroyed) return;
	        if (linkQueue) {
	          linkQueue.push(scope,
	                         node,
	                         rootElement,
	                         childBoundTranscludeFn);
	        } else {
	          if (afterTemplateNodeLinkFn.transcludeOnThisElement) {
	            childBoundTranscludeFn = createBoundTranscludeFn(scope, afterTemplateNodeLinkFn.transclude, boundTranscludeFn);
	          }
	          afterTemplateNodeLinkFn(afterTemplateChildLinkFn, scope, node, rootElement, childBoundTranscludeFn);
	        }
	      };
	    }
	
	
	    /**
	     * Sorting function for bound directives.
	     */
	    function byPriority(a, b) {
	      var diff = b.priority - a.priority;
	      if (diff !== 0) return diff;
	      if (a.name !== b.name) return (a.name < b.name) ? -1 : 1;
	      return a.index - b.index;
	    }
	
	    function assertNoDuplicate(what, previousDirective, directive, element) {
	
	      function wrapModuleNameIfDefined(moduleName) {
	        return moduleName ?
	          (' (module: ' + moduleName + ')') :
	          '';
	      }
	
	      if (previousDirective) {
	        throw $compileMinErr('multidir', 'Multiple directives [{0}{1}, {2}{3}] asking for {4} on: {5}',
	            previousDirective.name, wrapModuleNameIfDefined(previousDirective.$$moduleName),
	            directive.name, wrapModuleNameIfDefined(directive.$$moduleName), what, startingTag(element));
	      }
	    }
	
	
	    function addTextInterpolateDirective(directives, text) {
	      var interpolateFn = $interpolate(text, true);
	      if (interpolateFn) {
	        directives.push({
	          priority: 0,
	          compile: function textInterpolateCompileFn(templateNode) {
	            var templateNodeParent = templateNode.parent(),
	                hasCompileParent = !!templateNodeParent.length;
	
	            // When transcluding a template that has bindings in the root
	            // we don't have a parent and thus need to add the class during linking fn.
	            if (hasCompileParent) compile.$$addBindingClass(templateNodeParent);
	
	            return function textInterpolateLinkFn(scope, node) {
	              var parent = node.parent();
	              if (!hasCompileParent) compile.$$addBindingClass(parent);
	              compile.$$addBindingInfo(parent, interpolateFn.expressions);
	              scope.$watch(interpolateFn, function interpolateFnWatchAction(value) {
	                node[0].nodeValue = value;
	              });
	            };
	          }
	        });
	      }
	    }
	
	
	    function wrapTemplate(type, template) {
	      type = lowercase(type || 'html');
	      switch (type) {
	      case 'svg':
	      case 'math':
	        var wrapper = window.document.createElement('div');
	        wrapper.innerHTML = '<' + type + '>' + template + '</' + type + '>';
	        return wrapper.childNodes[0].childNodes;
	      default:
	        return template;
	      }
	    }
	
	
	    function getTrustedContext(node, attrNormalizedName) {
	      if (attrNormalizedName == "srcdoc") {
	        return $sce.HTML;
	      }
	      var tag = nodeName_(node);
	      // maction[xlink:href] can source SVG.  It's not limited to <maction>.
	      if (attrNormalizedName == "xlinkHref" ||
	          (tag == "form" && attrNormalizedName == "action") ||
	          (tag != "img" && (attrNormalizedName == "src" ||
	                            attrNormalizedName == "ngSrc"))) {
	        return $sce.RESOURCE_URL;
	      }
	    }
	
	
	    function addAttrInterpolateDirective(node, directives, value, name, allOrNothing) {
	      var trustedContext = getTrustedContext(node, name);
	      allOrNothing = ALL_OR_NOTHING_ATTRS[name] || allOrNothing;
	
	      var interpolateFn = $interpolate(value, true, trustedContext, allOrNothing);
	
	      // no interpolation found -> ignore
	      if (!interpolateFn) return;
	
	
	      if (name === "multiple" && nodeName_(node) === "select") {
	        throw $compileMinErr("selmulti",
	            "Binding to the 'multiple' attribute is not supported. Element: {0}",
	            startingTag(node));
	      }
	
	      directives.push({
	        priority: 100,
	        compile: function() {
	            return {
	              pre: function attrInterpolatePreLinkFn(scope, element, attr) {
	                var $$observers = (attr.$$observers || (attr.$$observers = createMap()));
	
	                if (EVENT_HANDLER_ATTR_REGEXP.test(name)) {
	                  throw $compileMinErr('nodomevents',
	                      "Interpolations for HTML DOM event attributes are disallowed.  Please use the " +
	                          "ng- versions (such as ng-click instead of onclick) instead.");
	                }
	
	                // If the attribute has changed since last $interpolate()ed
	                var newValue = attr[name];
	                if (newValue !== value) {
	                  // we need to interpolate again since the attribute value has been updated
	                  // (e.g. by another directive's compile function)
	                  // ensure unset/empty values make interpolateFn falsy
	                  interpolateFn = newValue && $interpolate(newValue, true, trustedContext, allOrNothing);
	                  value = newValue;
	                }
	
	                // if attribute was updated so that there is no interpolation going on we don't want to
	                // register any observers
	                if (!interpolateFn) return;
	
	                // initialize attr object so that it's ready in case we need the value for isolate
	                // scope initialization, otherwise the value would not be available from isolate
	                // directive's linking fn during linking phase
	                attr[name] = interpolateFn(scope);
	
	                ($$observers[name] || ($$observers[name] = [])).$$inter = true;
	                (attr.$$observers && attr.$$observers[name].$$scope || scope).
	                  $watch(interpolateFn, function interpolateFnWatchAction(newValue, oldValue) {
	                    //special case for class attribute addition + removal
	                    //so that class changes can tap into the animation
	                    //hooks provided by the $animate service. Be sure to
	                    //skip animations when the first digest occurs (when
	                    //both the new and the old values are the same) since
	                    //the CSS classes are the non-interpolated values
	                    if (name === 'class' && newValue != oldValue) {
	                      attr.$updateClass(newValue, oldValue);
	                    } else {
	                      attr.$set(name, newValue);
	                    }
	                  });
	              }
	            };
	          }
	      });
	    }
	
	
	    /**
	     * This is a special jqLite.replaceWith, which can replace items which
	     * have no parents, provided that the containing jqLite collection is provided.
	     *
	     * @param {JqLite=} $rootElement The root of the compile tree. Used so that we can replace nodes
	     *                               in the root of the tree.
	     * @param {JqLite} elementsToRemove The jqLite element which we are going to replace. We keep
	     *                                  the shell, but replace its DOM node reference.
	     * @param {Node} newNode The new DOM node.
	     */
	    function replaceWith($rootElement, elementsToRemove, newNode) {
	      var firstElementToRemove = elementsToRemove[0],
	          removeCount = elementsToRemove.length,
	          parent = firstElementToRemove.parentNode,
	          i, ii;
	
	      if ($rootElement) {
	        for (i = 0, ii = $rootElement.length; i < ii; i++) {
	          if ($rootElement[i] == firstElementToRemove) {
	            $rootElement[i++] = newNode;
	            for (var j = i, j2 = j + removeCount - 1,
	                     jj = $rootElement.length;
	                 j < jj; j++, j2++) {
	              if (j2 < jj) {
	                $rootElement[j] = $rootElement[j2];
	              } else {
	                delete $rootElement[j];
	              }
	            }
	            $rootElement.length -= removeCount - 1;
	
	            // If the replaced element is also the jQuery .context then replace it
	            // .context is a deprecated jQuery api, so we should set it only when jQuery set it
	            // http://api.jquery.com/context/
	            if ($rootElement.context === firstElementToRemove) {
	              $rootElement.context = newNode;
	            }
	            break;
	          }
	        }
	      }
	
	      if (parent) {
	        parent.replaceChild(newNode, firstElementToRemove);
	      }
	
	      // Append all the `elementsToRemove` to a fragment. This will...
	      // - remove them from the DOM
	      // - allow them to still be traversed with .nextSibling
	      // - allow a single fragment.qSA to fetch all elements being removed
	      var fragment = window.document.createDocumentFragment();
	      for (i = 0; i < removeCount; i++) {
	        fragment.appendChild(elementsToRemove[i]);
	      }
	
	      if (jqLite.hasData(firstElementToRemove)) {
	        // Copy over user data (that includes Angular's $scope etc.). Don't copy private
	        // data here because there's no public interface in jQuery to do that and copying over
	        // event listeners (which is the main use of private data) wouldn't work anyway.
	        jqLite.data(newNode, jqLite.data(firstElementToRemove));
	
	        // Remove $destroy event listeners from `firstElementToRemove`
	        jqLite(firstElementToRemove).off('$destroy');
	      }
	
	      // Cleanup any data/listeners on the elements and children.
	      // This includes invoking the $destroy event on any elements with listeners.
	      jqLite.cleanData(fragment.querySelectorAll('*'));
	
	      // Update the jqLite collection to only contain the `newNode`
	      for (i = 1; i < removeCount; i++) {
	        delete elementsToRemove[i];
	      }
	      elementsToRemove[0] = newNode;
	      elementsToRemove.length = 1;
	    }
	
	
	    function cloneAndAnnotateFn(fn, annotation) {
	      return extend(function() { return fn.apply(null, arguments); }, fn, annotation);
	    }
	
	
	    function invokeLinkFn(linkFn, scope, $element, attrs, controllers, transcludeFn) {
	      try {
	        linkFn(scope, $element, attrs, controllers, transcludeFn);
	      } catch (e) {
	        $exceptionHandler(e, startingTag($element));
	      }
	    }
	
	
	    // Set up $watches for isolate scope and controller bindings. This process
	    // only occurs for isolate scopes and new scopes with controllerAs.
	    function initializeDirectiveBindings(scope, attrs, destination, bindings, directive) {
	      var removeWatchCollection = [];
	      var initialChanges = {};
	      var changes;
	      forEach(bindings, function initializeBinding(definition, scopeName) {
	        var attrName = definition.attrName,
	        optional = definition.optional,
	        mode = definition.mode, // @, =, or &
	        lastValue,
	        parentGet, parentSet, compare, removeWatch;
	
	        switch (mode) {
	
	          case '@':
	            if (!optional && !hasOwnProperty.call(attrs, attrName)) {
	              destination[scopeName] = attrs[attrName] = void 0;
	            }
	            attrs.$observe(attrName, function(value) {
	              if (isString(value) || isBoolean(value)) {
	                var oldValue = destination[scopeName];
	                recordChanges(scopeName, value, oldValue);
	                destination[scopeName] = value;
	              }
	            });
	            attrs.$$observers[attrName].$$scope = scope;
	            lastValue = attrs[attrName];
	            if (isString(lastValue)) {
	              // If the attribute has been provided then we trigger an interpolation to ensure
	              // the value is there for use in the link fn
	              destination[scopeName] = $interpolate(lastValue)(scope);
	            } else if (isBoolean(lastValue)) {
	              // If the attributes is one of the BOOLEAN_ATTR then Angular will have converted
	              // the value to boolean rather than a string, so we special case this situation
	              destination[scopeName] = lastValue;
	            }
	            initialChanges[scopeName] = new SimpleChange(_UNINITIALIZED_VALUE, destination[scopeName]);
	            break;
	
	          case '=':
	            if (!hasOwnProperty.call(attrs, attrName)) {
	              if (optional) break;
	              attrs[attrName] = void 0;
	            }
	            if (optional && !attrs[attrName]) break;
	
	            parentGet = $parse(attrs[attrName]);
	            if (parentGet.literal) {
	              compare = equals;
	            } else {
	              compare = function simpleCompare(a, b) { return a === b || (a !== a && b !== b); };
	            }
	            parentSet = parentGet.assign || function() {
	              // reset the change, or we will throw this exception on every $digest
	              lastValue = destination[scopeName] = parentGet(scope);
	              throw $compileMinErr('nonassign',
	                  "Expression '{0}' in attribute '{1}' used with directive '{2}' is non-assignable!",
	                  attrs[attrName], attrName, directive.name);
	            };
	            lastValue = destination[scopeName] = parentGet(scope);
	            var parentValueWatch = function parentValueWatch(parentValue) {
	              if (!compare(parentValue, destination[scopeName])) {
	                // we are out of sync and need to copy
	                if (!compare(parentValue, lastValue)) {
	                  // parent changed and it has precedence
	                  destination[scopeName] = parentValue;
	                } else {
	                  // if the parent can be assigned then do so
	                  parentSet(scope, parentValue = destination[scopeName]);
	                }
	              }
	              return lastValue = parentValue;
	            };
	            parentValueWatch.$stateful = true;
	            if (definition.collection) {
	              removeWatch = scope.$watchCollection(attrs[attrName], parentValueWatch);
	            } else {
	              removeWatch = scope.$watch($parse(attrs[attrName], parentValueWatch), null, parentGet.literal);
	            }
	            removeWatchCollection.push(removeWatch);
	            break;
	
	          case '<':
	            if (!hasOwnProperty.call(attrs, attrName)) {
	              if (optional) break;
	              attrs[attrName] = void 0;
	            }
	            if (optional && !attrs[attrName]) break;
	
	            parentGet = $parse(attrs[attrName]);
	
	            destination[scopeName] = parentGet(scope);
	            initialChanges[scopeName] = new SimpleChange(_UNINITIALIZED_VALUE, destination[scopeName]);
	
	            removeWatch = scope.$watch(parentGet, function parentValueWatchAction(newValue, oldValue) {
	              if (newValue === oldValue) {
	                // If the new and old values are identical then this is the first time the watch has been triggered
	                // So instead we use the current value on the destination as the old value
	                oldValue = destination[scopeName];
	              }
	              recordChanges(scopeName, newValue, oldValue);
	              destination[scopeName] = newValue;
	            }, parentGet.literal);
	
	            removeWatchCollection.push(removeWatch);
	            break;
	
	          case '&':
	            // Don't assign Object.prototype method to scope
	            parentGet = attrs.hasOwnProperty(attrName) ? $parse(attrs[attrName]) : noop;
	
	            // Don't assign noop to destination if expression is not valid
	            if (parentGet === noop && optional) break;
	
	            destination[scopeName] = function(locals) {
	              return parentGet(scope, locals);
	            };
	            break;
	        }
	      });
	
	      function recordChanges(key, currentValue, previousValue) {
	        if (isFunction(destination.$onChanges) && currentValue !== previousValue) {
	          // If we have not already scheduled the top level onChangesQueue handler then do so now
	          if (!onChangesQueue) {
	            scope.$$postDigest(flushOnChangesQueue);
	            onChangesQueue = [];
	          }
	          // If we have not already queued a trigger of onChanges for this controller then do so now
	          if (!changes) {
	            changes = {};
	            onChangesQueue.push(triggerOnChangesHook);
	          }
	          // If the has been a change on this property already then we need to reuse the previous value
	          if (changes[key]) {
	            previousValue = changes[key].previousValue;
	          }
	          // Store this change
	          changes[key] = new SimpleChange(previousValue, currentValue);
	        }
	      }
	
	      function triggerOnChangesHook() {
	        destination.$onChanges(changes);
	        // Now clear the changes so that we schedule onChanges when more changes arrive
	        changes = undefined;
	      }
	
	      return {
	        initialChanges: initialChanges,
	        removeWatches: removeWatchCollection.length && function removeWatches() {
	          for (var i = 0, ii = removeWatchCollection.length; i < ii; ++i) {
	            removeWatchCollection[i]();
	          }
	        }
	      };
	    }
	  }];
	}
	
	function SimpleChange(previous, current) {
	  this.previousValue = previous;
	  this.currentValue = current;
	}
	SimpleChange.prototype.isFirstChange = function() { return this.previousValue === _UNINITIALIZED_VALUE; };
	
	
	var PREFIX_REGEXP = /^((?:x|data)[\:\-_])/i;
	/**
	 * Converts all accepted directives format into proper directive name.
	 * @param name Name to normalize
	 */
	function directiveNormalize(name) {
	  return camelCase(name.replace(PREFIX_REGEXP, ''));
	}
	
	/**
	 * @ngdoc type
	 * @name $compile.directive.Attributes
	 *
	 * @description
	 * A shared object between directive compile / linking functions which contains normalized DOM
	 * element attributes. The values reflect current binding state `{{ }}`. The normalization is
	 * needed since all of these are treated as equivalent in Angular:
	 *
	 * ```
	 *    <span ng:bind="a" ng-bind="a" data-ng-bind="a" x-ng-bind="a">
	 * ```
	 */
	
	/**
	 * @ngdoc property
	 * @name $compile.directive.Attributes#$attr
	 *
	 * @description
	 * A map of DOM element attribute names to the normalized name. This is
	 * needed to do reverse lookup from normalized name back to actual name.
	 */
	
	
	/**
	 * @ngdoc method
	 * @name $compile.directive.Attributes#$set
	 * @kind function
	 *
	 * @description
	 * Set DOM element attribute value.
	 *
	 *
	 * @param {string} name Normalized element attribute name of the property to modify. The name is
	 *          reverse-translated using the {@link ng.$compile.directive.Attributes#$attr $attr}
	 *          property to the original name.
	 * @param {string} value Value to set the attribute to. The value can be an interpolated string.
	 */
	
	
	
	/**
	 * Closure compiler type information
	 */
	
	function nodesetLinkingFn(
	  /* angular.Scope */ scope,
	  /* NodeList */ nodeList,
	  /* Element */ rootElement,
	  /* function(Function) */ boundTranscludeFn
	) {}
	
	function directiveLinkingFn(
	  /* nodesetLinkingFn */ nodesetLinkingFn,
	  /* angular.Scope */ scope,
	  /* Node */ node,
	  /* Element */ rootElement,
	  /* function(Function) */ boundTranscludeFn
	) {}
	
	function tokenDifference(str1, str2) {
	  var values = '',
	      tokens1 = str1.split(/\s+/),
	      tokens2 = str2.split(/\s+/);
	
	  outer:
	  for (var i = 0; i < tokens1.length; i++) {
	    var token = tokens1[i];
	    for (var j = 0; j < tokens2.length; j++) {
	      if (token == tokens2[j]) continue outer;
	    }
	    values += (values.length > 0 ? ' ' : '') + token;
	  }
	  return values;
	}
	
	function removeComments(jqNodes) {
	  jqNodes = jqLite(jqNodes);
	  var i = jqNodes.length;
	
	  if (i <= 1) {
	    return jqNodes;
	  }
	
	  while (i--) {
	    var node = jqNodes[i];
	    if (node.nodeType === NODE_TYPE_COMMENT) {
	      splice.call(jqNodes, i, 1);
	    }
	  }
	  return jqNodes;
	}
	
	var $controllerMinErr = minErr('$controller');
	
	
	var CNTRL_REG = /^(\S+)(\s+as\s+([\w$]+))?$/;
	function identifierForController(controller, ident) {
	  if (ident && isString(ident)) return ident;
	  if (isString(controller)) {
	    var match = CNTRL_REG.exec(controller);
	    if (match) return match[3];
	  }
	}
	
	
	/**
	 * @ngdoc provider
	 * @name $controllerProvider
	 * @description
	 * The {@link ng.$controller $controller service} is used by Angular to create new
	 * controllers.
	 *
	 * This provider allows controller registration via the
	 * {@link ng.$controllerProvider#register register} method.
	 */
	function $ControllerProvider() {
	  var controllers = {},
	      globals = false;
	
	  /**
	   * @ngdoc method
	   * @name $controllerProvider#has
	   * @param {string} name Controller name to check.
	   */
	  this.has = function(name) {
	    return controllers.hasOwnProperty(name);
	  };
	
	  /**
	   * @ngdoc method
	   * @name $controllerProvider#register
	   * @param {string|Object} name Controller name, or an object map of controllers where the keys are
	   *    the names and the values are the constructors.
	   * @param {Function|Array} constructor Controller constructor fn (optionally decorated with DI
	   *    annotations in the array notation).
	   */
	  this.register = function(name, constructor) {
	    assertNotHasOwnProperty(name, 'controller');
	    if (isObject(name)) {
	      extend(controllers, name);
	    } else {
	      controllers[name] = constructor;
	    }
	  };
	
	  /**
	   * @ngdoc method
	   * @name $controllerProvider#allowGlobals
	   * @description If called, allows `$controller` to find controller constructors on `window`
	   */
	  this.allowGlobals = function() {
	    globals = true;
	  };
	
	
	  this.$get = ['$injector', '$window', function($injector, $window) {
	
	    /**
	     * @ngdoc service
	     * @name $controller
	     * @requires $injector
	     *
	     * @param {Function|string} constructor If called with a function then it's considered to be the
	     *    controller constructor function. Otherwise it's considered to be a string which is used
	     *    to retrieve the controller constructor using the following steps:
	     *
	     *    * check if a controller with given name is registered via `$controllerProvider`
	     *    * check if evaluating the string on the current scope returns a constructor
	     *    * if $controllerProvider#allowGlobals, check `window[constructor]` on the global
	     *      `window` object (not recommended)
	     *
	     *    The string can use the `controller as property` syntax, where the controller instance is published
	     *    as the specified property on the `scope`; the `scope` must be injected into `locals` param for this
	     *    to work correctly.
	     *
	     * @param {Object} locals Injection locals for Controller.
	     * @return {Object} Instance of given controller.
	     *
	     * @description
	     * `$controller` service is responsible for instantiating controllers.
	     *
	     * It's just a simple call to {@link auto.$injector $injector}, but extracted into
	     * a service, so that one can override this service with [BC version](https://gist.github.com/1649788).
	     */
	    return function $controller(expression, locals, later, ident) {
	      // PRIVATE API:
	      //   param `later` --- indicates that the controller's constructor is invoked at a later time.
	      //                     If true, $controller will allocate the object with the correct
	      //                     prototype chain, but will not invoke the controller until a returned
	      //                     callback is invoked.
	      //   param `ident` --- An optional label which overrides the label parsed from the controller
	      //                     expression, if any.
	      var instance, match, constructor, identifier;
	      later = later === true;
	      if (ident && isString(ident)) {
	        identifier = ident;
	      }
	
	      if (isString(expression)) {
	        match = expression.match(CNTRL_REG);
	        if (!match) {
	          throw $controllerMinErr('ctrlfmt',
	            "Badly formed controller string '{0}'. " +
	            "Must match `__name__ as __id__` or `__name__`.", expression);
	        }
	        constructor = match[1],
	        identifier = identifier || match[3];
	        expression = controllers.hasOwnProperty(constructor)
	            ? controllers[constructor]
	            : getter(locals.$scope, constructor, true) ||
	                (globals ? getter($window, constructor, true) : undefined);
	
	        assertArgFn(expression, constructor, true);
	      }
	
	      if (later) {
	        // Instantiate controller later:
	        // This machinery is used to create an instance of the object before calling the
	        // controller's constructor itself.
	        //
	        // This allows properties to be added to the controller before the constructor is
	        // invoked. Primarily, this is used for isolate scope bindings in $compile.
	        //
	        // This feature is not intended for use by applications, and is thus not documented
	        // publicly.
	        // Object creation: http://jsperf.com/create-constructor/2
	        var controllerPrototype = (isArray(expression) ?
	          expression[expression.length - 1] : expression).prototype;
	        instance = Object.create(controllerPrototype || null);
	
	        if (identifier) {
	          addIdentifier(locals, identifier, instance, constructor || expression.name);
	        }
	
	        var instantiate;
	        return instantiate = extend(function $controllerInit() {
	          var result = $injector.invoke(expression, instance, locals, constructor);
	          if (result !== instance && (isObject(result) || isFunction(result))) {
	            instance = result;
	            if (identifier) {
	              // If result changed, re-assign controllerAs value to scope.
	              addIdentifier(locals, identifier, instance, constructor || expression.name);
	            }
	          }
	          return instance;
	        }, {
	          instance: instance,
	          identifier: identifier
	        });
	      }
	
	      instance = $injector.instantiate(expression, locals, constructor);
	
	      if (identifier) {
	        addIdentifier(locals, identifier, instance, constructor || expression.name);
	      }
	
	      return instance;
	    };
	
	    function addIdentifier(locals, identifier, instance, name) {
	      if (!(locals && isObject(locals.$scope))) {
	        throw minErr('$controller')('noscp',
	          "Cannot export controller '{0}' as '{1}'! No $scope object provided via `locals`.",
	          name, identifier);
	      }
	
	      locals.$scope[identifier] = instance;
	    }
	  }];
	}
	
	/**
	 * @ngdoc service
	 * @name $document
	 * @requires $window
	 *
	 * @description
	 * A {@link angular.element jQuery or jqLite} wrapper for the browser's `window.document` object.
	 *
	 * @example
	   <example module="documentExample">
	     <file name="index.html">
	       <div ng-controller="ExampleController">
	         <p>$document title: <b ng-bind="title"></b></p>
	         <p>window.document title: <b ng-bind="windowTitle"></b></p>
	       </div>
	     </file>
	     <file name="script.js">
	       angular.module('documentExample', [])
	         .controller('ExampleController', ['$scope', '$document', function($scope, $document) {
	           $scope.title = $document[0].title;
	           $scope.windowTitle = angular.element(window.document)[0].title;
	         }]);
	     </file>
	   </example>
	 */
	function $DocumentProvider() {
	  this.$get = ['$window', function(window) {
	    return jqLite(window.document);
	  }];
	}
	
	/**
	 * @ngdoc service
	 * @name $exceptionHandler
	 * @requires ng.$log
	 *
	 * @description
	 * Any uncaught exception in angular expressions is delegated to this service.
	 * The default implementation simply delegates to `$log.error` which logs it into
	 * the browser console.
	 *
	 * In unit tests, if `angular-mocks.js` is loaded, this service is overridden by
	 * {@link ngMock.$exceptionHandler mock $exceptionHandler} which aids in testing.
	 *
	 * ## Example:
	 *
	 * ```js
	 *   angular.module('exceptionOverride', []).factory('$exceptionHandler', function() {
	 *     return function(exception, cause) {
	 *       exception.message += ' (caused by "' + cause + '")';
	 *       throw exception;
	 *     };
	 *   });
	 * ```
	 *
	 * This example will override the normal action of `$exceptionHandler`, to make angular
	 * exceptions fail hard when they happen, instead of just logging to the console.
	 *
	 * <hr />
	 * Note, that code executed in event-listeners (even those registered using jqLite's `on`/`bind`
	 * methods) does not delegate exceptions to the {@link ng.$exceptionHandler $exceptionHandler}
	 * (unless executed during a digest).
	 *
	 * If you wish, you can manually delegate exceptions, e.g.
	 * `try { ... } catch(e) { $exceptionHandler(e); }`
	 *
	 * @param {Error} exception Exception associated with the error.
	 * @param {string=} cause optional information about the context in which
	 *       the error was thrown.
	 *
	 */
	function $ExceptionHandlerProvider() {
	  this.$get = ['$log', function($log) {
	    return function(exception, cause) {
	      $log.error.apply($log, arguments);
	    };
	  }];
	}
	
	var $$ForceReflowProvider = function() {
	  this.$get = ['$document', function($document) {
	    return function(domNode) {
	      //the line below will force the browser to perform a repaint so
	      //that all the animated elements within the animation frame will
	      //be properly updated and drawn on screen. This is required to
	      //ensure that the preparation animation is properly flushed so that
	      //the active state picks up from there. DO NOT REMOVE THIS LINE.
	      //DO NOT OPTIMIZE THIS LINE. THE MINIFIER WILL REMOVE IT OTHERWISE WHICH
	      //WILL RESULT IN AN UNPREDICTABLE BUG THAT IS VERY HARD TO TRACK DOWN AND
	      //WILL TAKE YEARS AWAY FROM YOUR LIFE.
	      if (domNode) {
	        if (!domNode.nodeType && domNode instanceof jqLite) {
	          domNode = domNode[0];
	        }
	      } else {
	        domNode = $document[0].body;
	      }
	      return domNode.offsetWidth + 1;
	    };
	  }];
	};
	
	var APPLICATION_JSON = 'application/json';
	var CONTENT_TYPE_APPLICATION_JSON = {'Content-Type': APPLICATION_JSON + ';charset=utf-8'};
	var JSON_START = /^\[|^\{(?!\{)/;
	var JSON_ENDS = {
	  '[': /]$/,
	  '{': /}$/
	};
	var JSON_PROTECTION_PREFIX = /^\)\]\}',?\n/;
	var $httpMinErr = minErr('$http');
	var $httpMinErrLegacyFn = function(method) {
	  return function() {
	    throw $httpMinErr('legacy', 'The method `{0}` on the promise returned from `$http` has been disabled.', method);
	  };
	};
	
	function serializeValue(v) {
	  if (isObject(v)) {
	    return isDate(v) ? v.toISOString() : toJson(v);
	  }
	  return v;
	}
	
	
	function $HttpParamSerializerProvider() {
	  /**
	   * @ngdoc service
	   * @name $httpParamSerializer
	   * @description
	   *
	   * Default {@link $http `$http`} params serializer that converts objects to strings
	   * according to the following rules:
	   *
	   * * `{'foo': 'bar'}` results in `foo=bar`
	   * * `{'foo': Date.now()}` results in `foo=2015-04-01T09%3A50%3A49.262Z` (`toISOString()` and encoded representation of a Date object)
	   * * `{'foo': ['bar', 'baz']}` results in `foo=bar&foo=baz` (repeated key for each array element)
	   * * `{'foo': {'bar':'baz'}}` results in `foo=%7B%22bar%22%3A%22baz%22%7D"` (stringified and encoded representation of an object)
	   *
	   * Note that serializer will sort the request parameters alphabetically.
	   * */
	
	  this.$get = function() {
	    return function ngParamSerializer(params) {
	      if (!params) return '';
	      var parts = [];
	      forEachSorted(params, function(value, key) {
	        if (value === null || isUndefined(value)) return;
	        if (isArray(value)) {
	          forEach(value, function(v) {
	            parts.push(encodeUriQuery(key)  + '=' + encodeUriQuery(serializeValue(v)));
	          });
	        } else {
	          parts.push(encodeUriQuery(key) + '=' + encodeUriQuery(serializeValue(value)));
	        }
	      });
	
	      return parts.join('&');
	    };
	  };
	}
	
	function $HttpParamSerializerJQLikeProvider() {
	  /**
	   * @ngdoc service
	   * @name $httpParamSerializerJQLike
	   * @description
	   *
	   * Alternative {@link $http `$http`} params serializer that follows
	   * jQuery's [`param()`](http://api.jquery.com/jquery.param/) method logic.
	   * The serializer will also sort the params alphabetically.
	   *
	   * To use it for serializing `$http` request parameters, set it as the `paramSerializer` property:
	   *
	   * ```js
	   * $http({
	   *   url: myUrl,
	   *   method: 'GET',
	   *   params: myParams,
	   *   paramSerializer: '$httpParamSerializerJQLike'
	   * });
	   * ```
	   *
	   * It is also possible to set it as the default `paramSerializer` in the
	   * {@link $httpProvider#defaults `$httpProvider`}.
	   *
	   * Additionally, you can inject the serializer and use it explicitly, for example to serialize
	   * form data for submission:
	   *
	   * ```js
	   * .controller(function($http, $httpParamSerializerJQLike) {
	   *   //...
	   *
	   *   $http({
	   *     url: myUrl,
	   *     method: 'POST',
	   *     data: $httpParamSerializerJQLike(myData),
	   *     headers: {
	   *       'Content-Type': 'application/x-www-form-urlencoded'
	   *     }
	   *   });
	   *
	   * });
	   * ```
	   *
	   * */
	  this.$get = function() {
	    return function jQueryLikeParamSerializer(params) {
	      if (!params) return '';
	      var parts = [];
	      serialize(params, '', true);
	      return parts.join('&');
	
	      function serialize(toSerialize, prefix, topLevel) {
	        if (toSerialize === null || isUndefined(toSerialize)) return;
	        if (isArray(toSerialize)) {
	          forEach(toSerialize, function(value, index) {
	            serialize(value, prefix + '[' + (isObject(value) ? index : '') + ']');
	          });
	        } else if (isObject(toSerialize) && !isDate(toSerialize)) {
	          forEachSorted(toSerialize, function(value, key) {
	            serialize(value, prefix +
	                (topLevel ? '' : '[') +
	                key +
	                (topLevel ? '' : ']'));
	          });
	        } else {
	          parts.push(encodeUriQuery(prefix) + '=' + encodeUriQuery(serializeValue(toSerialize)));
	        }
	      }
	    };
	  };
	}
	
	function defaultHttpResponseTransform(data, headers) {
	  if (isString(data)) {
	    // Strip json vulnerability protection prefix and trim whitespace
	    var tempData = data.replace(JSON_PROTECTION_PREFIX, '').trim();
	
	    if (tempData) {
	      var contentType = headers('Content-Type');
	      if ((contentType && (contentType.indexOf(APPLICATION_JSON) === 0)) || isJsonLike(tempData)) {
	        data = fromJson(tempData);
	      }
	    }
	  }
	
	  return data;
	}
	
	function isJsonLike(str) {
	    var jsonStart = str.match(JSON_START);
	    return jsonStart && JSON_ENDS[jsonStart[0]].test(str);
	}
	
	/**
	 * Parse headers into key value object
	 *
	 * @param {string} headers Raw headers as a string
	 * @returns {Object} Parsed headers as key value object
	 */
	function parseHeaders(headers) {
	  var parsed = createMap(), i;
	
	  function fillInParsed(key, val) {
	    if (key) {
	      parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
	    }
	  }
	
	  if (isString(headers)) {
	    forEach(headers.split('\n'), function(line) {
	      i = line.indexOf(':');
	      fillInParsed(lowercase(trim(line.substr(0, i))), trim(line.substr(i + 1)));
	    });
	  } else if (isObject(headers)) {
	    forEach(headers, function(headerVal, headerKey) {
	      fillInParsed(lowercase(headerKey), trim(headerVal));
	    });
	  }
	
	  return parsed;
	}
	
	
	/**
	 * Returns a function that provides access to parsed headers.
	 *
	 * Headers are lazy parsed when first requested.
	 * @see parseHeaders
	 *
	 * @param {(string|Object)} headers Headers to provide access to.
	 * @returns {function(string=)} Returns a getter function which if called with:
	 *
	 *   - if called with single an argument returns a single header value or null
	 *   - if called with no arguments returns an object containing all headers.
	 */
	function headersGetter(headers) {
	  var headersObj;
	
	  return function(name) {
	    if (!headersObj) headersObj =  parseHeaders(headers);
	
	    if (name) {
	      var value = headersObj[lowercase(name)];
	      if (value === void 0) {
	        value = null;
	      }
	      return value;
	    }
	
	    return headersObj;
	  };
	}
	
	
	/**
	 * Chain all given functions
	 *
	 * This function is used for both request and response transforming
	 *
	 * @param {*} data Data to transform.
	 * @param {function(string=)} headers HTTP headers getter fn.
	 * @param {number} status HTTP status code of the response.
	 * @param {(Function|Array.<Function>)} fns Function or an array of functions.
	 * @returns {*} Transformed data.
	 */
	function transformData(data, headers, status, fns) {
	  if (isFunction(fns)) {
	    return fns(data, headers, status);
	  }
	
	  forEach(fns, function(fn) {
	    data = fn(data, headers, status);
	  });
	
	  return data;
	}
	
	
	function isSuccess(status) {
	  return 200 <= status && status < 300;
	}
	
	
	/**
	 * @ngdoc provider
	 * @name $httpProvider
	 * @description
	 * Use `$httpProvider` to change the default behavior of the {@link ng.$http $http} service.
	 * */
	function $HttpProvider() {
	  /**
	   * @ngdoc property
	   * @name $httpProvider#defaults
	   * @description
	   *
	   * Object containing default values for all {@link ng.$http $http} requests.
	   *
	   * - **`defaults.cache`** - {boolean|Object} - A boolean value or object created with
	   * {@link ng.$cacheFactory `$cacheFactory`} to enable or disable caching of HTTP responses
	   * by default. See {@link $http#caching $http Caching} for more information.
	   *
	   * - **`defaults.xsrfCookieName`** - {string} - Name of cookie containing the XSRF token.
	   * Defaults value is `'XSRF-TOKEN'`.
	   *
	   * - **`defaults.xsrfHeaderName`** - {string} - Name of HTTP header to populate with the
	   * XSRF token. Defaults value is `'X-XSRF-TOKEN'`.
	   *
	   * - **`defaults.headers`** - {Object} - Default headers for all $http requests.
	   * Refer to {@link ng.$http#setting-http-headers $http} for documentation on
	   * setting default headers.
	   *     - **`defaults.headers.common`**
	   *     - **`defaults.headers.post`**
	   *     - **`defaults.headers.put`**
	   *     - **`defaults.headers.patch`**
	   *
	   *
	   * - **`defaults.paramSerializer`** - `{string|function(Object<string,string>):string}` - A function
	   *  used to the prepare string representation of request parameters (specified as an object).
	   *  If specified as string, it is interpreted as a function registered with the {@link auto.$injector $injector}.
	   *  Defaults to {@link ng.$httpParamSerializer $httpParamSerializer}.
	   *
	   **/
	  var defaults = this.defaults = {
	    // transform incoming response data
	    transformResponse: [defaultHttpResponseTransform],
	
	    // transform outgoing request data
	    transformRequest: [function(d) {
	      return isObject(d) && !isFile(d) && !isBlob(d) && !isFormData(d) ? toJson(d) : d;
	    }],
	
	    // default headers
	    headers: {
	      common: {
	        'Accept': 'application/json, text/plain, */*'
	      },
	      post:   shallowCopy(CONTENT_TYPE_APPLICATION_JSON),
	      put:    shallowCopy(CONTENT_TYPE_APPLICATION_JSON),
	      patch:  shallowCopy(CONTENT_TYPE_APPLICATION_JSON)
	    },
	
	    xsrfCookieName: 'XSRF-TOKEN',
	    xsrfHeaderName: 'X-XSRF-TOKEN',
	
	    paramSerializer: '$httpParamSerializer'
	  };
	
	  var useApplyAsync = false;
	  /**
	   * @ngdoc method
	   * @name $httpProvider#useApplyAsync
	   * @description
	   *
	   * Configure $http service to combine processing of multiple http responses received at around
	   * the same time via {@link ng.$rootScope.Scope#$applyAsync $rootScope.$applyAsync}. This can result in
	   * significant performance improvement for bigger applications that make many HTTP requests
	   * concurrently (common during application bootstrap).
	   *
	   * Defaults to false. If no value is specified, returns the current configured value.
	   *
	   * @param {boolean=} value If true, when requests are loaded, they will schedule a deferred
	   *    "apply" on the next tick, giving time for subsequent requests in a roughly ~10ms window
	   *    to load and share the same digest cycle.
	   *
	   * @returns {boolean|Object} If a value is specified, returns the $httpProvider for chaining.
	   *    otherwise, returns the current configured value.
	   **/
	  this.useApplyAsync = function(value) {
	    if (isDefined(value)) {
	      useApplyAsync = !!value;
	      return this;
	    }
	    return useApplyAsync;
	  };
	
	  var useLegacyPromise = true;
	  /**
	   * @ngdoc method
	   * @name $httpProvider#useLegacyPromiseExtensions
	   * @description
	   *
	   * Configure `$http` service to return promises without the shorthand methods `success` and `error`.
	   * This should be used to make sure that applications work without these methods.
	   *
	   * Defaults to true. If no value is specified, returns the current configured value.
	   *
	   * @param {boolean=} value If true, `$http` will return a promise with the deprecated legacy `success` and `error` methods.
	   *
	   * @returns {boolean|Object} If a value is specified, returns the $httpProvider for chaining.
	   *    otherwise, returns the current configured value.
	   **/
	  this.useLegacyPromiseExtensions = function(value) {
	    if (isDefined(value)) {
	      useLegacyPromise = !!value;
	      return this;
	    }
	    return useLegacyPromise;
	  };
	
	  /**
	   * @ngdoc property
	   * @name $httpProvider#interceptors
	   * @description
	   *
	   * Array containing service factories for all synchronous or asynchronous {@link ng.$http $http}
	   * pre-processing of request or postprocessing of responses.
	   *
	   * These service factories are ordered by request, i.e. they are applied in the same order as the
	   * array, on request, but reverse order, on response.
	   *
	   * {@link ng.$http#interceptors Interceptors detailed info}
	   **/
	  var interceptorFactories = this.interceptors = [];
	
	  this.$get = ['$httpBackend', '$$cookieReader', '$cacheFactory', '$rootScope', '$q', '$injector',
	      function($httpBackend, $$cookieReader, $cacheFactory, $rootScope, $q, $injector) {
	
	    var defaultCache = $cacheFactory('$http');
	
	    /**
	     * Make sure that default param serializer is exposed as a function
	     */
	    defaults.paramSerializer = isString(defaults.paramSerializer) ?
	      $injector.get(defaults.paramSerializer) : defaults.paramSerializer;
	
	    /**
	     * Interceptors stored in reverse order. Inner interceptors before outer interceptors.
	     * The reversal is needed so that we can build up the interception chain around the
	     * server request.
	     */
	    var reversedInterceptors = [];
	
	    forEach(interceptorFactories, function(interceptorFactory) {
	      reversedInterceptors.unshift(isString(interceptorFactory)
	          ? $injector.get(interceptorFactory) : $injector.invoke(interceptorFactory));
	    });
	
	    /**
	     * @ngdoc service
	     * @kind function
	     * @name $http
	     * @requires ng.$httpBackend
	     * @requires $cacheFactory
	     * @requires $rootScope
	     * @requires $q
	     * @requires $injector
	     *
	     * @description
	     * The `$http` service is a core Angular service that facilitates communication with the remote
	     * HTTP servers via the browser's [XMLHttpRequest](https://developer.mozilla.org/en/xmlhttprequest)
	     * object or via [JSONP](http://en.wikipedia.org/wiki/JSONP).
	     *
	     * For unit testing applications that use `$http` service, see
	     * {@link ngMock.$httpBackend $httpBackend mock}.
	     *
	     * For a higher level of abstraction, please check out the {@link ngResource.$resource
	     * $resource} service.
	     *
	     * The $http API is based on the {@link ng.$q deferred/promise APIs} exposed by
	     * the $q service. While for simple usage patterns this doesn't matter much, for advanced usage
	     * it is important to familiarize yourself with these APIs and the guarantees they provide.
	     *
	     *
	     * ## General usage
	     * The `$http` service is a function which takes a single argument — a {@link $http#usage configuration object} —
	     * that is used to generate an HTTP request and returns  a {@link ng.$q promise}.
	     *
	     * ```js
	     *   // Simple GET request example:
	     *   $http({
	     *     method: 'GET',
	     *     url: '/someUrl'
	     *   }).then(function successCallback(response) {
	     *       // this callback will be called asynchronously
	     *       // when the response is available
	     *     }, function errorCallback(response) {
	     *       // called asynchronously if an error occurs
	     *       // or server returns response with an error status.
	     *     });
	     * ```
	     *
	     * The response object has these properties:
	     *
	     *   - **data** – `{string|Object}` – The response body transformed with the transform
	     *     functions.
	     *   - **status** – `{number}` – HTTP status code of the response.
	     *   - **headers** – `{function([headerName])}` – Header getter function.
	     *   - **config** – `{Object}` – The configuration object that was used to generate the request.
	     *   - **statusText** – `{string}` – HTTP status text of the response.
	     *
	     * A response status code between 200 and 299 is considered a success status and
	     * will result in the success callback being called. Note that if the response is a redirect,
	     * XMLHttpRequest will transparently follow it, meaning that the error callback will not be
	     * called for such responses.
	     *
	     *
	     * ## Shortcut methods
	     *
	     * Shortcut methods are also available. All shortcut methods require passing in the URL, and
	     * request data must be passed in for POST/PUT requests. An optional config can be passed as the
	     * last argument.
	     *
	     * ```js
	     *   $http.get('/someUrl', config).then(successCallback, errorCallback);
	     *   $http.post('/someUrl', data, config).then(successCallback, errorCallback);
	     * ```
	     *
	     * Complete list of shortcut methods:
	     *
	     * - {@link ng.$http#get $http.get}
	     * - {@link ng.$http#head $http.head}
	     * - {@link ng.$http#post $http.post}
	     * - {@link ng.$http#put $http.put}
	     * - {@link ng.$http#delete $http.delete}
	     * - {@link ng.$http#jsonp $http.jsonp}
	     * - {@link ng.$http#patch $http.patch}
	     *
	     *
	     * ## Writing Unit Tests that use $http
	     * When unit testing (using {@link ngMock ngMock}), it is necessary to call
	     * {@link ngMock.$httpBackend#flush $httpBackend.flush()} to flush each pending
	     * request using trained responses.
	     *
	     * ```
	     * $httpBackend.expectGET(...);
	     * $http.get(...);
	     * $httpBackend.flush();
	     * ```
	     *
	     * ## Deprecation Notice
	     * <div class="alert alert-danger">
	     *   The `$http` legacy promise methods `success` and `error` have been deprecated.
	     *   Use the standard `then` method instead.
	     *   If {@link $httpProvider#useLegacyPromiseExtensions `$httpProvider.useLegacyPromiseExtensions`} is set to
	     *   `false` then these methods will throw {@link $http:legacy `$http/legacy`} error.
	     * </div>
	     *
	     * ## Setting HTTP Headers
	     *
	     * The $http service will automatically add certain HTTP headers to all requests. These defaults
	     * can be fully configured by accessing the `$httpProvider.defaults.headers` configuration
	     * object, which currently contains this default configuration:
	     *
	     * - `$httpProvider.defaults.headers.common` (headers that are common for all requests):
	     *   - `Accept: application/json, text/plain, * / *`
	     * - `$httpProvider.defaults.headers.post`: (header defaults for POST requests)
	     *   - `Content-Type: application/json`
	     * - `$httpProvider.defaults.headers.put` (header defaults for PUT requests)
	     *   - `Content-Type: application/json`
	     *
	     * To add or overwrite these defaults, simply add or remove a property from these configuration
	     * objects. To add headers for an HTTP method other than POST or PUT, simply add a new object
	     * with the lowercased HTTP method name as the key, e.g.
	     * `$httpProvider.defaults.headers.get = { 'My-Header' : 'value' }`.
	     *
	     * The defaults can also be set at runtime via the `$http.defaults` object in the same
	     * fashion. For example:
	     *
	     * ```
	     * module.run(function($http) {
	     *   $http.defaults.headers.common.Authorization = 'Basic YmVlcDpib29w';
	     * });
	     * ```
	     *
	     * In addition, you can supply a `headers` property in the config object passed when
	     * calling `$http(config)`, which overrides the defaults without changing them globally.
	     *
	     * To explicitly remove a header automatically added via $httpProvider.defaults.headers on a per request basis,
	     * Use the `headers` property, setting the desired header to `undefined`. For example:
	     *
	     * ```js
	     * var req = {
	     *  method: 'POST',
	     *  url: 'http://example.com',
	     *  headers: {
	     *    'Content-Type': undefined
	     *  },
	     *  data: { test: 'test' }
	     * }
	     *
	     * $http(req).then(function(){...}, function(){...});
	     * ```
	     *
	     * ## Transforming Requests and Responses
	     *
	     * Both requests and responses can be transformed using transformation functions: `transformRequest`
	     * and `transformResponse`. These properties can be a single function that returns
	     * the transformed value (`function(data, headersGetter, status)`) or an array of such transformation functions,
	     * which allows you to `push` or `unshift` a new transformation function into the transformation chain.
	     *
	     * <div class="alert alert-warning">
	     * **Note:** Angular does not make a copy of the `data` parameter before it is passed into the `transformRequest` pipeline.
	     * That means changes to the properties of `data` are not local to the transform function (since Javascript passes objects by reference).
	     * For example, when calling `$http.get(url, $scope.myObject)`, modifications to the object's properties in a transformRequest
	     * function will be reflected on the scope and in any templates where the object is data-bound.
	     * To prevent this, transform functions should have no side-effects.
	     * If you need to modify properties, it is recommended to make a copy of the data, or create new object to return.
	     * </div>
	     *
	     * ### Default Transformations
	     *
	     * The `$httpProvider` provider and `$http` service expose `defaults.transformRequest` and
	     * `defaults.transformResponse` properties. If a request does not provide its own transformations
	     * then these will be applied.
	     *
	     * You can augment or replace the default transformations by modifying these properties by adding to or
	     * replacing the array.
	     *
	     * Angular provides the following default transformations:
	     *
	     * Request transformations (`$httpProvider.defaults.transformRequest` and `$http.defaults.transformRequest`):
	     *
	     * - If the `data` property of the request configuration object contains an object, serialize it
	     *   into JSON format.
	     *
	     * Response transformations (`$httpProvider.defaults.transformResponse` and `$http.defaults.transformResponse`):
	     *
	     *  - If XSRF prefix is detected, strip it (see Security Considerations section below).
	     *  - If JSON response is detected, deserialize it using a JSON parser.
	     *
	     *
	     * ### Overriding the Default Transformations Per Request
	     *
	     * If you wish override the request/response transformations only for a single request then provide
	     * `transformRequest` and/or `transformResponse` properties on the configuration object passed
	     * into `$http`.
	     *
	     * Note that if you provide these properties on the config object the default transformations will be
	     * overwritten. If you wish to augment the default transformations then you must include them in your
	     * local transformation array.
	     *
	     * The following code demonstrates adding a new response transformation to be run after the default response
	     * transformations have been run.
	     *
	     * ```js
	     * function appendTransform(defaults, transform) {
	     *
	     *   // We can't guarantee that the default transformation is an array
	     *   defaults = angular.isArray(defaults) ? defaults : [defaults];
	     *
	     *   // Append the new transformation to the defaults
	     *   return defaults.concat(transform);
	     * }
	     *
	     * $http({
	     *   url: '...',
	     *   method: 'GET',
	     *   transformResponse: appendTransform($http.defaults.transformResponse, function(value) {
	     *     return doTransform(value);
	     *   })
	     * });
	     * ```
	     *
	     *
	     * ## Caching
	     *
	     * {@link ng.$http `$http`} responses are not cached by default. To enable caching, you must
	     * set the config.cache value or the default cache value to TRUE or to a cache object (created
	     * with {@link ng.$cacheFactory `$cacheFactory`}). If defined, the value of config.cache takes
	     * precedence over the default cache value.
	     *
	     * In order to:
	     *   * cache all responses - set the default cache value to TRUE or to a cache object
	     *   * cache a specific response - set config.cache value to TRUE or to a cache object
	     *
	     * If caching is enabled, but neither the default cache nor config.cache are set to a cache object,
	     * then the default `$cacheFactory($http)` object is used.
	     *
	     * The default cache value can be set by updating the
	     * {@link ng.$http#defaults `$http.defaults.cache`} property or the
	     * {@link $httpProvider#defaults `$httpProvider.defaults.cache`} property.
	     *
	     * When caching is enabled, {@link ng.$http `$http`} stores the response from the server using
	     * the relevant cache object. The next time the same request is made, the response is returned
	     * from the cache without sending a request to the server.
	     *
	     * Take note that:
	     *
	     *   * Only GET and JSONP requests are cached.
	     *   * The cache key is the request URL including search parameters; headers are not considered.
	     *   * Cached responses are returned asynchronously, in the same way as responses from the server.
	     *   * If multiple identical requests are made using the same cache, which is not yet populated,
	     *     one request will be made to the server and remaining requests will return the same response.
	     *   * A cache-control header on the response does not affect if or how responses are cached.
	     *
	     *
	     * ## Interceptors
	     *
	     * Before you start creating interceptors, be sure to understand the
	     * {@link ng.$q $q and deferred/promise APIs}.
	     *
	     * For purposes of global error handling, authentication, or any kind of synchronous or
	     * asynchronous pre-processing of request or postprocessing of responses, it is desirable to be
	     * able to intercept requests before they are handed to the server and
	     * responses before they are handed over to the application code that
	     * initiated these requests. The interceptors leverage the {@link ng.$q
	     * promise APIs} to fulfill this need for both synchronous and asynchronous pre-processing.
	     *
	     * The interceptors are service factories that are registered with the `$httpProvider` by
	     * adding them to the `$httpProvider.interceptors` array. The factory is called and
	     * injected with dependencies (if specified) and returns the interceptor.
	     *
	     * There are two kinds of interceptors (and two kinds of rejection interceptors):
	     *
	     *   * `request`: interceptors get called with a http {@link $http#usage config} object. The function is free to
	     *     modify the `config` object or create a new one. The function needs to return the `config`
	     *     object directly, or a promise containing the `config` or a new `config` object.
	     *   * `requestError`: interceptor gets called when a previous interceptor threw an error or
	     *     resolved with a rejection.
	     *   * `response`: interceptors get called with http `response` object. The function is free to
	     *     modify the `response` object or create a new one. The function needs to return the `response`
	     *     object directly, or as a promise containing the `response` or a new `response` object.
	     *   * `responseError`: interceptor gets called when a previous interceptor threw an error or
	     *     resolved with a rejection.
	     *
	     *
	     * ```js
	     *   // register the interceptor as a service
	     *   $provide.factory('myHttpInterceptor', function($q, dependency1, dependency2) {
	     *     return {
	     *       // optional method
	     *       'request': function(config) {
	     *         // do something on success
	     *         return config;
	     *       },
	     *
	     *       // optional method
	     *      'requestError': function(rejection) {
	     *         // do something on error
	     *         if (canRecover(rejection)) {
	     *           return responseOrNewPromise
	     *         }
	     *         return $q.reject(rejection);
	     *       },
	     *
	     *
	     *
	     *       // optional method
	     *       'response': function(response) {
	     *         // do something on success
	     *         return response;
	     *       },
	     *
	     *       // optional method
	     *      'responseError': function(rejection) {
	     *         // do something on error
	     *         if (canRecover(rejection)) {
	     *           return responseOrNewPromise
	     *         }
	     *         return $q.reject(rejection);
	     *       }
	     *     };
	     *   });
	     *
	     *   $httpProvider.interceptors.push('myHttpInterceptor');
	     *
	     *
	     *   // alternatively, register the interceptor via an anonymous factory
	     *   $httpProvider.interceptors.push(function($q, dependency1, dependency2) {
	     *     return {
	     *      'request': function(config) {
	     *          // same as above
	     *       },
	     *
	     *       'response': function(response) {
	     *          // same as above
	     *       }
	     *     };
	     *   });
	     * ```
	     *
	     * ## Security Considerations
	     *
	     * When designing web applications, consider security threats from:
	     *
	     * - [JSON vulnerability](http://haacked.com/archive/2008/11/20/anatomy-of-a-subtle-json-vulnerability.aspx)
	     * - [XSRF](http://en.wikipedia.org/wiki/Cross-site_request_forgery)
	     *
	     * Both server and the client must cooperate in order to eliminate these threats. Angular comes
	     * pre-configured with strategies that address these issues, but for this to work backend server
	     * cooperation is required.
	     *
	     * ### JSON Vulnerability Protection
	     *
	     * A [JSON vulnerability](http://haacked.com/archive/2008/11/20/anatomy-of-a-subtle-json-vulnerability.aspx)
	     * allows third party website to turn your JSON resource URL into
	     * [JSONP](http://en.wikipedia.org/wiki/JSONP) request under some conditions. To
	     * counter this your server can prefix all JSON requests with following string `")]}',\n"`.
	     * Angular will automatically strip the prefix before processing it as JSON.
	     *
	     * For example if your server needs to return:
	     * ```js
	     * ['one','two']
	     * ```
	     *
	     * which is vulnerable to attack, your server can return:
	     * ```js
	     * )]}',
	     * ['one','two']
	     * ```
	     *
	     * Angular will strip the prefix, before processing the JSON.
	     *
	     *
	     * ### Cross Site Request Forgery (XSRF) Protection
	     *
	     * [XSRF](http://en.wikipedia.org/wiki/Cross-site_request_forgery) is an attack technique by
	     * which the attacker can trick an authenticated user into unknowingly executing actions on your
	     * website. Angular provides a mechanism to counter XSRF. When performing XHR requests, the
	     * $http service reads a token from a cookie (by default, `XSRF-TOKEN`) and sets it as an HTTP
	     * header (`X-XSRF-TOKEN`). Since only JavaScript that runs on your domain could read the
	     * cookie, your server can be assured that the XHR came from JavaScript running on your domain.
	     * The header will not be set for cross-domain requests.
	     *
	     * To take advantage of this, your server needs to set a token in a JavaScript readable session
	     * cookie called `XSRF-TOKEN` on the first HTTP GET request. On subsequent XHR requests the
	     * server can verify that the cookie matches `X-XSRF-TOKEN` HTTP header, and therefore be sure
	     * that only JavaScript running on your domain could have sent the request. The token must be
	     * unique for each user and must be verifiable by the server (to prevent the JavaScript from
	     * making up its own tokens). We recommend that the token is a digest of your site's
	     * authentication cookie with a [salt](https://en.wikipedia.org/wiki/Salt_(cryptography&#41;)
	     * for added security.
	     *
	     * The name of the headers can be specified using the xsrfHeaderName and xsrfCookieName
	     * properties of either $httpProvider.defaults at config-time, $http.defaults at run-time,
	     * or the per-request config object.
	     *
	     * In order to prevent collisions in environments where multiple Angular apps share the
	     * same domain or subdomain, we recommend that each application uses unique cookie name.
	     *
	     * @param {object} config Object describing the request to be made and how it should be
	     *    processed. The object has following properties:
	     *
	     *    - **method** – `{string}` – HTTP method (e.g. 'GET', 'POST', etc)
	     *    - **url** – `{string}` – Absolute or relative URL of the resource that is being requested.
	     *    - **params** – `{Object.<string|Object>}` – Map of strings or objects which will be serialized
	     *      with the `paramSerializer` and appended as GET parameters.
	     *    - **data** – `{string|Object}` – Data to be sent as the request message data.
	     *    - **headers** – `{Object}` – Map of strings or functions which return strings representing
	     *      HTTP headers to send to the server. If the return value of a function is null, the
	     *      header will not be sent. Functions accept a config object as an argument.
	     *    - **eventHandlers** - `{Object}` - Event listeners to be bound to the XMLHttpRequest object.
	     *      To bind events to the XMLHttpRequest upload object, use `uploadEventHandlers`.
	     *      The handler will be called in the context of a `$apply` block.
	     *    - **uploadEventHandlers** - `{Object}` - Event listeners to be bound to the XMLHttpRequest upload
	     *      object. To bind events to the XMLHttpRequest object, use `eventHandlers`.
	     *      The handler will be called in the context of a `$apply` block.
	     *    - **xsrfHeaderName** – `{string}` – Name of HTTP header to populate with the XSRF token.
	     *    - **xsrfCookieName** – `{string}` – Name of cookie containing the XSRF token.
	     *    - **transformRequest** –
	     *      `{function(data, headersGetter)|Array.<function(data, headersGetter)>}` –
	     *      transform function or an array of such functions. The transform function takes the http
	     *      request body and headers and returns its transformed (typically serialized) version.
	     *      See {@link ng.$http#overriding-the-default-transformations-per-request
	     *      Overriding the Default Transformations}
	     *    - **transformResponse** –
	     *      `{function(data, headersGetter, status)|Array.<function(data, headersGetter, status)>}` –
	     *      transform function or an array of such functions. The transform function takes the http
	     *      response body, headers and status and returns its transformed (typically deserialized) version.
	     *      See {@link ng.$http#overriding-the-default-transformations-per-request
	     *      Overriding the Default Transformations}
	     *    - **paramSerializer** - `{string|function(Object<string,string>):string}` - A function used to
	     *      prepare the string representation of request parameters (specified as an object).
	     *      If specified as string, it is interpreted as function registered with the
	     *      {@link $injector $injector}, which means you can create your own serializer
	     *      by registering it as a {@link auto.$provide#service service}.
	     *      The default serializer is the {@link $httpParamSerializer $httpParamSerializer};
	     *      alternatively, you can use the {@link $httpParamSerializerJQLike $httpParamSerializerJQLike}
	     *    - **cache** – `{boolean|Object}` – A boolean value or object created with
	     *      {@link ng.$cacheFactory `$cacheFactory`} to enable or disable caching of the HTTP response.
	     *      See {@link $http#caching $http Caching} for more information.
	     *    - **timeout** – `{number|Promise}` – timeout in milliseconds, or {@link ng.$q promise}
	     *      that should abort the request when resolved.
	     *    - **withCredentials** - `{boolean}` - whether to set the `withCredentials` flag on the
	     *      XHR object. See [requests with credentials](https://developer.mozilla.org/docs/Web/HTTP/Access_control_CORS#Requests_with_credentials)
	     *      for more information.
	     *    - **responseType** - `{string}` - see
	     *      [XMLHttpRequest.responseType](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest#xmlhttprequest-responsetype).
	     *
	     * @returns {HttpPromise} Returns a {@link ng.$q `Promise}` that will be resolved to a response object
	     *                        when the request succeeds or fails.
	     *
	     *
	     * @property {Array.<Object>} pendingRequests Array of config objects for currently pending
	     *   requests. This is primarily meant to be used for debugging purposes.
	     *
	     *
	     * @example
	<example module="httpExample">
	<file name="index.html">
	  <div ng-controller="FetchController">
	    <select ng-model="method" aria-label="Request method">
	      <option>GET</option>
	      <option>JSONP</option>
	    </select>
	    <input type="text" ng-model="url" size="80" aria-label="URL" />
	    <button id="fetchbtn" ng-click="fetch()">fetch</button><br>
	    <button id="samplegetbtn" ng-click="updateModel('GET', 'http-hello.html')">Sample GET</button>
	    <button id="samplejsonpbtn"
	      ng-click="updateModel('JSONP',
	                    'https://angularjs.org/greet.php?callback=JSON_CALLBACK&name=Super%20Hero')">
	      Sample JSONP
	    </button>
	    <button id="invalidjsonpbtn"
	      ng-click="updateModel('JSONP', 'https://angularjs.org/doesntexist&callback=JSON_CALLBACK')">
	        Invalid JSONP
	      </button>
	    <pre>http status code: {{status}}</pre>
	    <pre>http response data: {{data}}</pre>
	  </div>
	</file>
	<file name="script.js">
	  angular.module('httpExample', [])
	    .controller('FetchController', ['$scope', '$http', '$templateCache',
	      function($scope, $http, $templateCache) {
	        $scope.method = 'GET';
	        $scope.url = 'http-hello.html';
	
	        $scope.fetch = function() {
	          $scope.code = null;
	          $scope.response = null;
	
	          $http({method: $scope.method, url: $scope.url, cache: $templateCache}).
	            then(function(response) {
	              $scope.status = response.status;
	              $scope.data = response.data;
	            }, function(response) {
	              $scope.data = response.data || "Request failed";
	              $scope.status = response.status;
	          });
	        };
	
	        $scope.updateModel = function(method, url) {
	          $scope.method = method;
	          $scope.url = url;
	        };
	      }]);
	</file>
	<file name="http-hello.html">
	  Hello, $http!
	</file>
	<file name="protractor.js" type="protractor">
	  var status = element(by.binding('status'));
	  var data = element(by.binding('data'));
	  var fetchBtn = element(by.id('fetchbtn'));
	  var sampleGetBtn = element(by.id('samplegetbtn'));
	  var sampleJsonpBtn = element(by.id('samplejsonpbtn'));
	  var invalidJsonpBtn = element(by.id('invalidjsonpbtn'));
	
	  it('should make an xhr GET request', function() {
	    sampleGetBtn.click();
	    fetchBtn.click();
	    expect(status.getText()).toMatch('200');
	    expect(data.getText()).toMatch(/Hello, \$http!/);
	  });
	
	// Commented out due to flakes. See https://github.com/angular/angular.js/issues/9185
	// it('should make a JSONP request to angularjs.org', function() {
	//   sampleJsonpBtn.click();
	//   fetchBtn.click();
	//   expect(status.getText()).toMatch('200');
	//   expect(data.getText()).toMatch(/Super Hero!/);
	// });
	
	  it('should make JSONP request to invalid URL and invoke the error handler',
	      function() {
	    invalidJsonpBtn.click();
	    fetchBtn.click();
	    expect(status.getText()).toMatch('0');
	    expect(data.getText()).toMatch('Request failed');
	  });
	</file>
	</example>
	     */
	    function $http(requestConfig) {
	
	      if (!isObject(requestConfig)) {
	        throw minErr('$http')('badreq', 'Http request configuration must be an object.  Received: {0}', requestConfig);
	      }
	
	      if (!isString(requestConfig.url)) {
	        throw minErr('$http')('badreq', 'Http request configuration url must be a string.  Received: {0}', requestConfig.url);
	      }
	
	      var config = extend({
	        method: 'get',
	        transformRequest: defaults.transformRequest,
	        transformResponse: defaults.transformResponse,
	        paramSerializer: defaults.paramSerializer
	      }, requestConfig);
	
	      config.headers = mergeHeaders(requestConfig);
	      config.method = uppercase(config.method);
	      config.paramSerializer = isString(config.paramSerializer) ?
	        $injector.get(config.paramSerializer) : config.paramSerializer;
	
	      var serverRequest = function(config) {
	        var headers = config.headers;
	        var reqData = transformData(config.data, headersGetter(headers), undefined, config.transformRequest);
	
	        // strip content-type if data is undefined
	        if (isUndefined(reqData)) {
	          forEach(headers, function(value, header) {
	            if (lowercase(header) === 'content-type') {
	                delete headers[header];
	            }
	          });
	        }
	
	        if (isUndefined(config.withCredentials) && !isUndefined(defaults.withCredentials)) {
	          config.withCredentials = defaults.withCredentials;
	        }
	
	        // send request
	        return sendReq(config, reqData).then(transformResponse, transformResponse);
	      };
	
	      var chain = [serverRequest, undefined];
	      var promise = $q.when(config);
	
	      // apply interceptors
	      forEach(reversedInterceptors, function(interceptor) {
	        if (interceptor.request || interceptor.requestError) {
	          chain.unshift(interceptor.request, interceptor.requestError);
	        }
	        if (interceptor.response || interceptor.responseError) {
	          chain.push(interceptor.response, interceptor.responseError);
	        }
	      });
	
	      while (chain.length) {
	        var thenFn = chain.shift();
	        var rejectFn = chain.shift();
	
	        promise = promise.then(thenFn, rejectFn);
	      }
	
	      if (useLegacyPromise) {
	        promise.success = function(fn) {
	          assertArgFn(fn, 'fn');
	
	          promise.then(function(response) {
	            fn(response.data, response.status, response.headers, config);
	          });
	          return promise;
	        };
	
	        promise.error = function(fn) {
	          assertArgFn(fn, 'fn');
	
	          promise.then(null, function(response) {
	            fn(response.data, response.status, response.headers, config);
	          });
	          return promise;
	        };
	      } else {
	        promise.success = $httpMinErrLegacyFn('success');
	        promise.error = $httpMinErrLegacyFn('error');
	      }
	
	      return promise;
	
	      function transformResponse(response) {
	        // make a copy since the response must be cacheable
	        var resp = extend({}, response);
	        resp.data = transformData(response.data, response.headers, response.status,
	                                  config.transformResponse);
	        return (isSuccess(response.status))
	          ? resp
	          : $q.reject(resp);
	      }
	
	      function executeHeaderFns(headers, config) {
	        var headerContent, processedHeaders = {};
	
	        forEach(headers, function(headerFn, header) {
	          if (isFunction(headerFn)) {
	            headerContent = headerFn(config);
	            if (headerContent != null) {
	              processedHeaders[header] = headerContent;
	            }
	          } else {
	            processedHeaders[header] = headerFn;
	          }
	        });
	
	        return processedHeaders;
	      }
	
	      function mergeHeaders(config) {
	        var defHeaders = defaults.headers,
	            reqHeaders = extend({}, config.headers),
	            defHeaderName, lowercaseDefHeaderName, reqHeaderName;
	
	        defHeaders = extend({}, defHeaders.common, defHeaders[lowercase(config.method)]);
	
	        // using for-in instead of forEach to avoid unnecessary iteration after header has been found
	        defaultHeadersIteration:
	        for (defHeaderName in defHeaders) {
	          lowercaseDefHeaderName = lowercase(defHeaderName);
	
	          for (reqHeaderName in reqHeaders) {
	            if (lowercase(reqHeaderName) === lowercaseDefHeaderName) {
	              continue defaultHeadersIteration;
	            }
	          }
	
	          reqHeaders[defHeaderName] = defHeaders[defHeaderName];
	        }
	
	        // execute if header value is a function for merged headers
	        return executeHeaderFns(reqHeaders, shallowCopy(config));
	      }
	    }
	
	    $http.pendingRequests = [];
	
	    /**
	     * @ngdoc method
	     * @name $http#get
	     *
	     * @description
	     * Shortcut method to perform `GET` request.
	     *
	     * @param {string} url Relative or absolute URL specifying the destination of the request
	     * @param {Object=} config Optional configuration object
	     * @returns {HttpPromise} Future object
	     */
	
	    /**
	     * @ngdoc method
	     * @name $http#delete
	     *
	     * @description
	     * Shortcut method to perform `DELETE` request.
	     *
	     * @param {string} url Relative or absolute URL specifying the destination of the request
	     * @param {Object=} config Optional configuration object
	     * @returns {HttpPromise} Future object
	     */
	
	    /**
	     * @ngdoc method
	     * @name $http#head
	     *
	     * @description
	     * Shortcut method to perform `HEAD` request.
	     *
	     * @param {string} url Relative or absolute URL specifying the destination of the request
	     * @param {Object=} config Optional configuration object
	     * @returns {HttpPromise} Future object
	     */
	
	    /**
	     * @ngdoc method
	     * @name $http#jsonp
	     *
	     * @description
	     * Shortcut method to perform `JSONP` request.
	     *
	     * @param {string} url Relative or absolute URL specifying the destination of the request.
	     *                     The name of the callback should be the string `JSON_CALLBACK`.
	     * @param {Object=} config Optional configuration object
	     * @returns {HttpPromise} Future object
	     */
	    createShortMethods('get', 'delete', 'head', 'jsonp');
	
	    /**
	     * @ngdoc method
	     * @name $http#post
	     *
	     * @description
	     * Shortcut method to perform `POST` request.
	     *
	     * @param {string} url Relative or absolute URL specifying the destination of the request
	     * @param {*} data Request content
	     * @param {Object=} config Optional configuration object
	     * @returns {HttpPromise} Future object
	     */
	
	    /**
	     * @ngdoc method
	     * @name $http#put
	     *
	     * @description
	     * Shortcut method to perform `PUT` request.
	     *
	     * @param {string} url Relative or absolute URL specifying the destination of the request
	     * @param {*} data Request content
	     * @param {Object=} config Optional configuration object
	     * @returns {HttpPromise} Future object
	     */
	
	     /**
	      * @ngdoc method
	      * @name $http#patch
	      *
	      * @description
	      * Shortcut method to perform `PATCH` request.
	      *
	      * @param {string} url Relative or absolute URL specifying the destination of the request
	      * @param {*} data Request content
	      * @param {Object=} config Optional configuration object
	      * @returns {HttpPromise} Future object
	      */
	    createShortMethodsWithData('post', 'put', 'patch');
	
	        /**
	         * @ngdoc property
	         * @name $http#defaults
	         *
	         * @description
	         * Runtime equivalent of the `$httpProvider.defaults` property. Allows configuration of
	         * default headers, withCredentials as well as request and response transformations.
	         *
	         * See "Setting HTTP Headers" and "Transforming Requests and Responses" sections above.
	         */
	    $http.defaults = defaults;
	
	
	    return $http;
	
	
	    function createShortMethods(names) {
	      forEach(arguments, function(name) {
	        $http[name] = function(url, config) {
	          return $http(extend({}, config || {}, {
	            method: name,
	            url: url
	          }));
	        };
	      });
	    }
	
	
	    function createShortMethodsWithData(name) {
	      forEach(arguments, function(name) {
	        $http[name] = function(url, data, config) {
	          return $http(extend({}, config || {}, {
	            method: name,
	            url: url,
	            data: data
	          }));
	        };
	      });
	    }
	
	
	    /**
	     * Makes the request.
	     *
	     * !!! ACCESSES CLOSURE VARS:
	     * $httpBackend, defaults, $log, $rootScope, defaultCache, $http.pendingRequests
	     */
	    function sendReq(config, reqData) {
	      var deferred = $q.defer(),
	          promise = deferred.promise,
	          cache,
	          cachedResp,
	          reqHeaders = config.headers,
	          url = buildUrl(config.url, config.paramSerializer(config.params));
	
	      $http.pendingRequests.push(config);
	      promise.then(removePendingReq, removePendingReq);
	
	
	      if ((config.cache || defaults.cache) && config.cache !== false &&
	          (config.method === 'GET' || config.method === 'JSONP')) {
	        cache = isObject(config.cache) ? config.cache
	              : isObject(defaults.cache) ? defaults.cache
	              : defaultCache;
	      }
	
	      if (cache) {
	        cachedResp = cache.get(url);
	        if (isDefined(cachedResp)) {
	          if (isPromiseLike(cachedResp)) {
	            // cached request has already been sent, but there is no response yet
	            cachedResp.then(resolvePromiseWithResult, resolvePromiseWithResult);
	          } else {
	            // serving from cache
	            if (isArray(cachedResp)) {
	              resolvePromise(cachedResp[1], cachedResp[0], shallowCopy(cachedResp[2]), cachedResp[3]);
	            } else {
	              resolvePromise(cachedResp, 200, {}, 'OK');
	            }
	          }
	        } else {
	          // put the promise for the non-transformed response into cache as a placeholder
	          cache.put(url, promise);
	        }
	      }
	
	
	      // if we won't have the response in cache, set the xsrf headers and
	      // send the request to the backend
	      if (isUndefined(cachedResp)) {
	        var xsrfValue = urlIsSameOrigin(config.url)
	            ? $$cookieReader()[config.xsrfCookieName || defaults.xsrfCookieName]
	            : undefined;
	        if (xsrfValue) {
	          reqHeaders[(config.xsrfHeaderName || defaults.xsrfHeaderName)] = xsrfValue;
	        }
	
	        $httpBackend(config.method, url, reqData, done, reqHeaders, config.timeout,
	            config.withCredentials, config.responseType,
	            createApplyHandlers(config.eventHandlers),
	            createApplyHandlers(config.uploadEventHandlers));
	      }
	
	      return promise;
	
	      function createApplyHandlers(eventHandlers) {
	        if (eventHandlers) {
	          var applyHandlers = {};
	          forEach(eventHandlers, function(eventHandler, key) {
	            applyHandlers[key] = function(event) {
	              if (useApplyAsync) {
	                $rootScope.$applyAsync(callEventHandler);
	              } else if ($rootScope.$$phase) {
	                callEventHandler();
	              } else {
	                $rootScope.$apply(callEventHandler);
	              }
	
	              function callEventHandler() {
	                eventHandler(event);
	              }
	            };
	          });
	          return applyHandlers;
	        }
	      }
	
	
	      /**
	       * Callback registered to $httpBackend():
	       *  - caches the response if desired
	       *  - resolves the raw $http promise
	       *  - calls $apply
	       */
	      function done(status, response, headersString, statusText) {
	        if (cache) {
	          if (isSuccess(status)) {
	            cache.put(url, [status, response, parseHeaders(headersString), statusText]);
	          } else {
	            // remove promise from the cache
	            cache.remove(url);
	          }
	        }
	
	        function resolveHttpPromise() {
	          resolvePromise(response, status, headersString, statusText);
	        }
	
	        if (useApplyAsync) {
	          $rootScope.$applyAsync(resolveHttpPromise);
	        } else {
	          resolveHttpPromise();
	          if (!$rootScope.$$phase) $rootScope.$apply();
	        }
	      }
	
	
	      /**
	       * Resolves the raw $http promise.
	       */
	      function resolvePromise(response, status, headers, statusText) {
	        //status: HTTP response status code, 0, -1 (aborted by timeout / promise)
	        status = status >= -1 ? status : 0;
	
	        (isSuccess(status) ? deferred.resolve : deferred.reject)({
	          data: response,
	          status: status,
	          headers: headersGetter(headers),
	          config: config,
	          statusText: statusText
	        });
	      }
	
	      function resolvePromiseWithResult(result) {
	        resolvePromise(result.data, result.status, shallowCopy(result.headers()), result.statusText);
	      }
	
	      function removePendingReq() {
	        var idx = $http.pendingRequests.indexOf(config);
	        if (idx !== -1) $http.pendingRequests.splice(idx, 1);
	      }
	    }
	
	
	    function buildUrl(url, serializedParams) {
	      if (serializedParams.length > 0) {
	        url += ((url.indexOf('?') == -1) ? '?' : '&') + serializedParams;
	      }
	      return url;
	    }
	  }];
	}
	
	/**
	 * @ngdoc service
	 * @name $xhrFactory
	 *
	 * @description
	 * Factory function used to create XMLHttpRequest objects.
	 *
	 * Replace or decorate this service to create your own custom XMLHttpRequest objects.
	 *
	 * ```
	 * angular.module('myApp', [])
	 * .factory('$xhrFactory', function() {
	 *   return function createXhr(method, url) {
	 *     return new window.XMLHttpRequest({mozSystem: true});
	 *   };
	 * });
	 * ```
	 *
	 * @param {string} method HTTP method of the request (GET, POST, PUT, ..)
	 * @param {string} url URL of the request.
	 */
	function $xhrFactoryProvider() {
	  this.$get = function() {
	    return function createXhr() {
	      return new window.XMLHttpRequest();
	    };
	  };
	}
	
	/**
	 * @ngdoc service
	 * @name $httpBackend
	 * @requires $window
	 * @requires $document
	 * @requires $xhrFactory
	 *
	 * @description
	 * HTTP backend used by the {@link ng.$http service} that delegates to
	 * XMLHttpRequest object or JSONP and deals with browser incompatibilities.
	 *
	 * You should never need to use this service directly, instead use the higher-level abstractions:
	 * {@link ng.$http $http} or {@link ngResource.$resource $resource}.
	 *
	 * During testing this implementation is swapped with {@link ngMock.$httpBackend mock
	 * $httpBackend} which can be trained with responses.
	 */
	function $HttpBackendProvider() {
	  this.$get = ['$browser', '$window', '$document', '$xhrFactory', function($browser, $window, $document, $xhrFactory) {
	    return createHttpBackend($browser, $xhrFactory, $browser.defer, $window.angular.callbacks, $document[0]);
	  }];
	}
	
	function createHttpBackend($browser, createXhr, $browserDefer, callbacks, rawDocument) {
	  // TODO(vojta): fix the signature
	  return function(method, url, post, callback, headers, timeout, withCredentials, responseType, eventHandlers, uploadEventHandlers) {
	    $browser.$$incOutstandingRequestCount();
	    url = url || $browser.url();
	
	    if (lowercase(method) == 'jsonp') {
	      var callbackId = '_' + (callbacks.counter++).toString(36);
	      callbacks[callbackId] = function(data) {
	        callbacks[callbackId].data = data;
	        callbacks[callbackId].called = true;
	      };
	
	      var jsonpDone = jsonpReq(url.replace('JSON_CALLBACK', 'angular.callbacks.' + callbackId),
	          callbackId, function(status, text) {
	        completeRequest(callback, status, callbacks[callbackId].data, "", text);
	        callbacks[callbackId] = noop;
	      });
	    } else {
	
	      var xhr = createXhr(method, url);
	
	      xhr.open(method, url, true);
	      forEach(headers, function(value, key) {
	        if (isDefined(value)) {
	            xhr.setRequestHeader(key, value);
	        }
	      });
	
	      xhr.onload = function requestLoaded() {
	        var statusText = xhr.statusText || '';
	
	        // responseText is the old-school way of retrieving response (supported by IE9)
	        // response/responseType properties were introduced in XHR Level2 spec (supported by IE10)
	        var response = ('response' in xhr) ? xhr.response : xhr.responseText;
	
	        // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)
	        var status = xhr.status === 1223 ? 204 : xhr.status;
	
	        // fix status code when it is 0 (0 status is undocumented).
	        // Occurs when accessing file resources or on Android 4.1 stock browser
	        // while retrieving files from application cache.
	        if (status === 0) {
	          status = response ? 200 : urlResolve(url).protocol == 'file' ? 404 : 0;
	        }
	
	        completeRequest(callback,
	            status,
	            response,
	            xhr.getAllResponseHeaders(),
	            statusText);
	      };
	
	      var requestError = function() {
	        // The response is always empty
	        // See https://xhr.spec.whatwg.org/#request-error-steps and https://fetch.spec.whatwg.org/#concept-network-error
	        completeRequest(callback, -1, null, null, '');
	      };
	
	      xhr.onerror = requestError;
	      xhr.onabort = requestError;
	
	      forEach(eventHandlers, function(value, key) {
	          xhr.addEventListener(key, value);
	      });
	
	      forEach(uploadEventHandlers, function(value, key) {
	        xhr.upload.addEventListener(key, value);
	      });
	
	      if (withCredentials) {
	        xhr.withCredentials = true;
	      }
	
	      if (responseType) {
	        try {
	          xhr.responseType = responseType;
	        } catch (e) {
	          // WebKit added support for the json responseType value on 09/03/2013
	          // https://bugs.webkit.org/show_bug.cgi?id=73648. Versions of Safari prior to 7 are
	          // known to throw when setting the value "json" as the response type. Other older
	          // browsers implementing the responseType
	          //
	          // The json response type can be ignored if not supported, because JSON payloads are
	          // parsed on the client-side regardless.
	          if (responseType !== 'json') {
	            throw e;
	          }
	        }
	      }
	
	      xhr.send(isUndefined(post) ? null : post);
	    }
	
	    if (timeout > 0) {
	      var timeoutId = $browserDefer(timeoutRequest, timeout);
	    } else if (isPromiseLike(timeout)) {
	      timeout.then(timeoutRequest);
	    }
	
	
	    function timeoutRequest() {
	      jsonpDone && jsonpDone();
	      xhr && xhr.abort();
	    }
	
	    function completeRequest(callback, status, response, headersString, statusText) {
	      // cancel timeout and subsequent timeout promise resolution
	      if (isDefined(timeoutId)) {
	        $browserDefer.cancel(timeoutId);
	      }
	      jsonpDone = xhr = null;
	
	      callback(status, response, headersString, statusText);
	      $browser.$$completeOutstandingRequest(noop);
	    }
	  };
	
	  function jsonpReq(url, callbackId, done) {
	    // we can't use jQuery/jqLite here because jQuery does crazy stuff with script elements, e.g.:
	    // - fetches local scripts via XHR and evals them
	    // - adds and immediately removes script elements from the document
	    var script = rawDocument.createElement('script'), callback = null;
	    script.type = "text/javascript";
	    script.src = url;
	    script.async = true;
	
	    callback = function(event) {
	      removeEventListenerFn(script, "load", callback);
	      removeEventListenerFn(script, "error", callback);
	      rawDocument.body.removeChild(script);
	      script = null;
	      var status = -1;
	      var text = "unknown";
	
	      if (event) {
	        if (event.type === "load" && !callbacks[callbackId].called) {
	          event = { type: "error" };
	        }
	        text = event.type;
	        status = event.type === "error" ? 404 : 200;
	      }
	
	      if (done) {
	        done(status, text);
	      }
	    };
	
	    addEventListenerFn(script, "load", callback);
	    addEventListenerFn(script, "error", callback);
	    rawDocument.body.appendChild(script);
	    return callback;
	  }
	}
	
	var $interpolateMinErr = angular.$interpolateMinErr = minErr('$interpolate');
	$interpolateMinErr.throwNoconcat = function(text) {
	  throw $interpolateMinErr('noconcat',
	      "Error while interpolating: {0}\nStrict Contextual Escaping disallows " +
	      "interpolations that concatenate multiple expressions when a trusted value is " +
	      "required.  See http://docs.angularjs.org/api/ng.$sce", text);
	};
	
	$interpolateMinErr.interr = function(text, err) {
	  return $interpolateMinErr('interr', "Can't interpolate: {0}\n{1}", text, err.toString());
	};
	
	/**
	 * @ngdoc provider
	 * @name $interpolateProvider
	 *
	 * @description
	 *
	 * Used for configuring the interpolation markup. Defaults to `{{` and `}}`.
	 *
	 * <div class="alert alert-danger">
	 * This feature is sometimes used to mix different markup languages, e.g. to wrap an Angular
	 * template within a Python Jinja template (or any other template language). Mixing templating
	 * languages is **very dangerous**. The embedding template language will not safely escape Angular
	 * expressions, so any user-controlled values in the template will cause Cross Site Scripting (XSS)
	 * security bugs!
	 * </div>
	 *
	 * @example
	<example name="custom-interpolation-markup" module="customInterpolationApp">
	<file name="index.html">
	<script>
	  var customInterpolationApp = angular.module('customInterpolationApp', []);
	
	  customInterpolationApp.config(function($interpolateProvider) {
	    $interpolateProvider.startSymbol('//');
	    $interpolateProvider.endSymbol('//');
	  });
	
	
	  customInterpolationApp.controller('DemoController', function() {
	      this.label = "This binding is brought you by // interpolation symbols.";
	  });
	</script>
	<div ng-controller="DemoController as demo">
	    //demo.label//
	</div>
	</file>
	<file name="protractor.js" type="protractor">
	  it('should interpolate binding with custom symbols', function() {
	    expect(element(by.binding('demo.label')).getText()).toBe('This binding is brought you by // interpolation symbols.');
	  });
	</file>
	</example>
	 */
	function $InterpolateProvider() {
	  var startSymbol = '{{';
	  var endSymbol = '}}';
	
	  /**
	   * @ngdoc method
	   * @name $interpolateProvider#startSymbol
	   * @description
	   * Symbol to denote start of expression in the interpolated string. Defaults to `{{`.
	   *
	   * @param {string=} value new value to set the starting symbol to.
	   * @returns {string|self} Returns the symbol when used as getter and self if used as setter.
	   */
	  this.startSymbol = function(value) {
	    if (value) {
	      startSymbol = value;
	      return this;
	    } else {
	      return startSymbol;
	    }
	  };
	
	  /**
	   * @ngdoc method
	   * @name $interpolateProvider#endSymbol
	   * @description
	   * Symbol to denote the end of expression in the interpolated string. Defaults to `}}`.
	   *
	   * @param {string=} value new value to set the ending symbol to.
	   * @returns {string|self} Returns the symbol when used as getter and self if used as setter.
	   */
	  this.endSymbol = function(value) {
	    if (value) {
	      endSymbol = value;
	      return this;
	    } else {
	      return endSymbol;
	    }
	  };
	
	
	  this.$get = ['$parse', '$exceptionHandler', '$sce', function($parse, $exceptionHandler, $sce) {
	    var startSymbolLength = startSymbol.length,
	        endSymbolLength = endSymbol.length,
	        escapedStartRegexp = new RegExp(startSymbol.replace(/./g, escape), 'g'),
	        escapedEndRegexp = new RegExp(endSymbol.replace(/./g, escape), 'g');
	
	    function escape(ch) {
	      return '\\\\\\' + ch;
	    }
	
	    function unescapeText(text) {
	      return text.replace(escapedStartRegexp, startSymbol).
	        replace(escapedEndRegexp, endSymbol);
	    }
	
	    function stringify(value) {
	      if (value == null) { // null || undefined
	        return '';
	      }
	      switch (typeof value) {
	        case 'string':
	          break;
	        case 'number':
	          value = '' + value;
	          break;
	        default:
	          value = toJson(value);
	      }
	
	      return value;
	    }
	
	    //TODO: this is the same as the constantWatchDelegate in parse.js
	    function constantWatchDelegate(scope, listener, objectEquality, constantInterp) {
	      var unwatch;
	      return unwatch = scope.$watch(function constantInterpolateWatch(scope) {
	        unwatch();
	        return constantInterp(scope);
	      }, listener, objectEquality);
	    }
	
	    /**
	     * @ngdoc service
	     * @name $interpolate
	     * @kind function
	     *
	     * @requires $parse
	     * @requires $sce
	     *
	     * @description
	     *
	     * Compiles a string with markup into an interpolation function. This service is used by the
	     * HTML {@link ng.$compile $compile} service for data binding. See
	     * {@link ng.$interpolateProvider $interpolateProvider} for configuring the
	     * interpolation markup.
	     *
	     *
	     * ```js
	     *   var $interpolate = ...; // injected
	     *   var exp = $interpolate('Hello {{name | uppercase}}!');
	     *   expect(exp({name:'Angular'})).toEqual('Hello ANGULAR!');
	     * ```
	     *
	     * `$interpolate` takes an optional fourth argument, `allOrNothing`. If `allOrNothing` is
	     * `true`, the interpolation function will return `undefined` unless all embedded expressions
	     * evaluate to a value other than `undefined`.
	     *
	     * ```js
	     *   var $interpolate = ...; // injected
	     *   var context = {greeting: 'Hello', name: undefined };
	     *
	     *   // default "forgiving" mode
	     *   var exp = $interpolate('{{greeting}} {{name}}!');
	     *   expect(exp(context)).toEqual('Hello !');
	     *
	     *   // "allOrNothing" mode
	     *   exp = $interpolate('{{greeting}} {{name}}!', false, null, true);
	     *   expect(exp(context)).toBeUndefined();
	     *   context.name = 'Angular';
	     *   expect(exp(context)).toEqual('Hello Angular!');
	     * ```
	     *
	     * `allOrNothing` is useful for interpolating URLs. `ngSrc` and `ngSrcset` use this behavior.
	     *
	     * ####Escaped Interpolation
	     * $interpolate provides a mechanism for escaping interpolation markers. Start and end markers
	     * can be escaped by preceding each of their characters with a REVERSE SOLIDUS U+005C (backslash).
	     * It will be rendered as a regular start/end marker, and will not be interpreted as an expression
	     * or binding.
	     *
	     * This enables web-servers to prevent script injection attacks and defacing attacks, to some
	     * degree, while also enabling code examples to work without relying on the
	     * {@link ng.directive:ngNonBindable ngNonBindable} directive.
	     *
	     * **For security purposes, it is strongly encouraged that web servers escape user-supplied data,
	     * replacing angle brackets (&lt;, &gt;) with &amp;lt; and &amp;gt; respectively, and replacing all
	     * interpolation start/end markers with their escaped counterparts.**
	     *
	     * Escaped interpolation markers are only replaced with the actual interpolation markers in rendered
	     * output when the $interpolate service processes the text. So, for HTML elements interpolated
	     * by {@link ng.$compile $compile}, or otherwise interpolated with the `mustHaveExpression` parameter
	     * set to `true`, the interpolated text must contain an unescaped interpolation expression. As such,
	     * this is typically useful only when user-data is used in rendering a template from the server, or
	     * when otherwise untrusted data is used by a directive.
	     *
	     * <example>
	     *  <file name="index.html">
	     *    <div ng-init="username='A user'">
	     *      <p ng-init="apptitle='Escaping demo'">{{apptitle}}: \{\{ username = "defaced value"; \}\}
	     *        </p>
	     *      <p><strong>{{username}}</strong> attempts to inject code which will deface the
	     *        application, but fails to accomplish their task, because the server has correctly
	     *        escaped the interpolation start/end markers with REVERSE SOLIDUS U+005C (backslash)
	     *        characters.</p>
	     *      <p>Instead, the result of the attempted script injection is visible, and can be removed
	     *        from the database by an administrator.</p>
	     *    </div>
	     *  </file>
	     * </example>
	     *
	     * @param {string} text The text with markup to interpolate.
	     * @param {boolean=} mustHaveExpression if set to true then the interpolation string must have
	     *    embedded expression in order to return an interpolation function. Strings with no
	     *    embedded expression will return null for the interpolation function.
	     * @param {string=} trustedContext when provided, the returned function passes the interpolated
	     *    result through {@link ng.$sce#getTrusted $sce.getTrusted(interpolatedResult,
	     *    trustedContext)} before returning it.  Refer to the {@link ng.$sce $sce} service that
	     *    provides Strict Contextual Escaping for details.
	     * @param {boolean=} allOrNothing if `true`, then the returned function returns undefined
	     *    unless all embedded expressions evaluate to a value other than `undefined`.
	     * @returns {function(context)} an interpolation function which is used to compute the
	     *    interpolated string. The function has these parameters:
	     *
	     * - `context`: evaluation context for all expressions embedded in the interpolated text
	     */
	    function $interpolate(text, mustHaveExpression, trustedContext, allOrNothing) {
	      // Provide a quick exit and simplified result function for text with no interpolation
	      if (!text.length || text.indexOf(startSymbol) === -1) {
	        var constantInterp;
	        if (!mustHaveExpression) {
	          var unescapedText = unescapeText(text);
	          constantInterp = valueFn(unescapedText);
	          constantInterp.exp = text;
	          constantInterp.expressions = [];
	          constantInterp.$$watchDelegate = constantWatchDelegate;
	        }
	        return constantInterp;
	      }
	
	      allOrNothing = !!allOrNothing;
	      var startIndex,
	          endIndex,
	          index = 0,
	          expressions = [],
	          parseFns = [],
	          textLength = text.length,
	          exp,
	          concat = [],
	          expressionPositions = [];
	
	      while (index < textLength) {
	        if (((startIndex = text.indexOf(startSymbol, index)) != -1) &&
	             ((endIndex = text.indexOf(endSymbol, startIndex + startSymbolLength)) != -1)) {
	          if (index !== startIndex) {
	            concat.push(unescapeText(text.substring(index, startIndex)));
	          }
	          exp = text.substring(startIndex + startSymbolLength, endIndex);
	          expressions.push(exp);
	          parseFns.push($parse(exp, parseStringifyInterceptor));
	          index = endIndex + endSymbolLength;
	          expressionPositions.push(concat.length);
	          concat.push('');
	        } else {
	          // we did not find an interpolation, so we have to add the remainder to the separators array
	          if (index !== textLength) {
	            concat.push(unescapeText(text.substring(index)));
	          }
	          break;
	        }
	      }
	
	      // Concatenating expressions makes it hard to reason about whether some combination of
	      // concatenated values are unsafe to use and could easily lead to XSS.  By requiring that a
	      // single expression be used for iframe[src], object[src], etc., we ensure that the value
	      // that's used is assigned or constructed by some JS code somewhere that is more testable or
	      // make it obvious that you bound the value to some user controlled value.  This helps reduce
	      // the load when auditing for XSS issues.
	      if (trustedContext && concat.length > 1) {
	          $interpolateMinErr.throwNoconcat(text);
	      }
	
	      if (!mustHaveExpression || expressions.length) {
	        var compute = function(values) {
	          for (var i = 0, ii = expressions.length; i < ii; i++) {
	            if (allOrNothing && isUndefined(values[i])) return;
	            concat[expressionPositions[i]] = values[i];
	          }
	          return concat.join('');
	        };
	
	        var getValue = function(value) {
	          return trustedContext ?
	            $sce.getTrusted(trustedContext, value) :
	            $sce.valueOf(value);
	        };
	
	        return extend(function interpolationFn(context) {
	            var i = 0;
	            var ii = expressions.length;
	            var values = new Array(ii);
	
	            try {
	              for (; i < ii; i++) {
	                values[i] = parseFns[i](context);
	              }
	
	              return compute(values);
	            } catch (err) {
	              $exceptionHandler($interpolateMinErr.interr(text, err));
	            }
	
	          }, {
	          // all of these properties are undocumented for now
	          exp: text, //just for compatibility with regular watchers created via $watch
	          expressions: expressions,
	          $$watchDelegate: function(scope, listener) {
	            var lastValue;
	            return scope.$watchGroup(parseFns, function interpolateFnWatcher(values, oldValues) {
	              var currValue = compute(values);
	              if (isFunction(listener)) {
	                listener.call(this, currValue, values !== oldValues ? lastValue : currValue, scope);
	              }
	              lastValue = currValue;
	            });
	          }
	        });
	      }
	
	      function parseStringifyInterceptor(value) {
	        try {
	          value = getValue(value);
	          return allOrNothing && !isDefined(value) ? value : stringify(value);
	        } catch (err) {
	          $exceptionHandler($interpolateMinErr.interr(text, err));
	        }
	      }
	    }
	
	
	    /**
	     * @ngdoc method
	     * @name $interpolate#startSymbol
	     * @description
	     * Symbol to denote the start of expression in the interpolated string. Defaults to `{{`.
	     *
	     * Use {@link ng.$interpolateProvider#startSymbol `$interpolateProvider.startSymbol`} to change
	     * the symbol.
	     *
	     * @returns {string} start symbol.
	     */
	    $interpolate.startSymbol = function() {
	      return startSymbol;
	    };
	
	
	    /**
	     * @ngdoc method
	     * @name $interpolate#endSymbol
	     * @description
	     * Symbol to denote the end of expression in the interpolated string. Defaults to `}}`.
	     *
	     * Use {@link ng.$interpolateProvider#endSymbol `$interpolateProvider.endSymbol`} to change
	     * the symbol.
	     *
	     * @returns {string} end symbol.
	     */
	    $interpolate.endSymbol = function() {
	      return endSymbol;
	    };
	
	    return $interpolate;
	  }];
	}
	
	function $IntervalProvider() {
	  this.$get = ['$rootScope', '$window', '$q', '$$q', '$browser',
	       function($rootScope,   $window,   $q,   $$q,   $browser) {
	    var intervals = {};
	
	
	     /**
	      * @ngdoc service
	      * @name $interval
	      *
	      * @description
	      * Angular's wrapper for `window.setInterval`. The `fn` function is executed every `delay`
	      * milliseconds.
	      *
	      * The return value of registering an interval function is a promise. This promise will be
	      * notified upon each tick of the interval, and will be resolved after `count` iterations, or
	      * run indefinitely if `count` is not defined. The value of the notification will be the
	      * number of iterations that have run.
	      * To cancel an interval, call `$interval.cancel(promise)`.
	      *
	      * In tests you can use {@link ngMock.$interval#flush `$interval.flush(millis)`} to
	      * move forward by `millis` milliseconds and trigger any functions scheduled to run in that
	      * time.
	      *
	      * <div class="alert alert-warning">
	      * **Note**: Intervals created by this service must be explicitly destroyed when you are finished
	      * with them.  In particular they are not automatically destroyed when a controller's scope or a
	      * directive's element are destroyed.
	      * You should take this into consideration and make sure to always cancel the interval at the
	      * appropriate moment.  See the example below for more details on how and when to do this.
	      * </div>
	      *
	      * @param {function()} fn A function that should be called repeatedly.
	      * @param {number} delay Number of milliseconds between each function call.
	      * @param {number=} [count=0] Number of times to repeat. If not set, or 0, will repeat
	      *   indefinitely.
	      * @param {boolean=} [invokeApply=true] If set to `false` skips model dirty checking, otherwise
	      *   will invoke `fn` within the {@link ng.$rootScope.Scope#$apply $apply} block.
	      * @param {...*=} Pass additional parameters to the executed function.
	      * @returns {promise} A promise which will be notified on each iteration.
	      *
	      * @example
	      * <example module="intervalExample">
	      * <file name="index.html">
	      *   <script>
	      *     angular.module('intervalExample', [])
	      *       .controller('ExampleController', ['$scope', '$interval',
	      *         function($scope, $interval) {
	      *           $scope.format = 'M/d/yy h:mm:ss a';
	      *           $scope.blood_1 = 100;
	      *           $scope.blood_2 = 120;
	      *
	      *           var stop;
	      *           $scope.fight = function() {
	      *             // Don't start a new fight if we are already fighting
	      *             if ( angular.isDefined(stop) ) return;
	      *
	      *             stop = $interval(function() {
	      *               if ($scope.blood_1 > 0 && $scope.blood_2 > 0) {
	      *                 $scope.blood_1 = $scope.blood_1 - 3;
	      *                 $scope.blood_2 = $scope.blood_2 - 4;
	      *               } else {
	      *                 $scope.stopFight();
	      *               }
	      *             }, 100);
	      *           };
	      *
	      *           $scope.stopFight = function() {
	      *             if (angular.isDefined(stop)) {
	      *               $interval.cancel(stop);
	      *               stop = undefined;
	      *             }
	      *           };
	      *
	      *           $scope.resetFight = function() {
	      *             $scope.blood_1 = 100;
	      *             $scope.blood_2 = 120;
	      *           };
	      *
	      *           $scope.$on('$destroy', function() {
	      *             // Make sure that the interval is destroyed too
	      *             $scope.stopFight();
	      *           });
	      *         }])
	      *       // Register the 'myCurrentTime' directive factory method.
	      *       // We inject $interval and dateFilter service since the factory method is DI.
	      *       .directive('myCurrentTime', ['$interval', 'dateFilter',
	      *         function($interval, dateFilter) {
	      *           // return the directive link function. (compile function not needed)
	      *           return function(scope, element, attrs) {
	      *             var format,  // date format
	      *                 stopTime; // so that we can cancel the time updates
	      *
	      *             // used to update the UI
	      *             function updateTime() {
	      *               element.text(dateFilter(new Date(), format));
	      *             }
	      *
	      *             // watch the expression, and update the UI on change.
	      *             scope.$watch(attrs.myCurrentTime, function(value) {
	      *               format = value;
	      *               updateTime();
	      *             });
	      *
	      *             stopTime = $interval(updateTime, 1000);
	      *
	      *             // listen on DOM destroy (removal) event, and cancel the next UI update
	      *             // to prevent updating time after the DOM element was removed.
	      *             element.on('$destroy', function() {
	      *               $interval.cancel(stopTime);
	      *             });
	      *           }
	      *         }]);
	      *   </script>
	      *
	      *   <div>
	      *     <div ng-controller="ExampleController">
	      *       <label>Date format: <input ng-model="format"></label> <hr/>
	      *       Current time is: <span my-current-time="format"></span>
	      *       <hr/>
	      *       Blood 1 : <font color='red'>{{blood_1}}</font>
	      *       Blood 2 : <font color='red'>{{blood_2}}</font>
	      *       <button type="button" data-ng-click="fight()">Fight</button>
	      *       <button type="button" data-ng-click="stopFight()">StopFight</button>
	      *       <button type="button" data-ng-click="resetFight()">resetFight</button>
	      *     </div>
	      *   </div>
	      *
	      * </file>
	      * </example>
	      */
	    function interval(fn, delay, count, invokeApply) {
	      var hasParams = arguments.length > 4,
	          args = hasParams ? sliceArgs(arguments, 4) : [],
	          setInterval = $window.setInterval,
	          clearInterval = $window.clearInterval,
	          iteration = 0,
	          skipApply = (isDefined(invokeApply) && !invokeApply),
	          deferred = (skipApply ? $$q : $q).defer(),
	          promise = deferred.promise;
	
	      count = isDefined(count) ? count : 0;
	
	      promise.$$intervalId = setInterval(function tick() {
	        if (skipApply) {
	          $browser.defer(callback);
	        } else {
	          $rootScope.$evalAsync(callback);
	        }
	        deferred.notify(iteration++);
	
	        if (count > 0 && iteration >= count) {
	          deferred.resolve(iteration);
	          clearInterval(promise.$$intervalId);
	          delete intervals[promise.$$intervalId];
	        }
	
	        if (!skipApply) $rootScope.$apply();
	
	      }, delay);
	
	      intervals[promise.$$intervalId] = deferred;
	
	      return promise;
	
	      function callback() {
	        if (!hasParams) {
	          fn(iteration);
	        } else {
	          fn.apply(null, args);
	        }
	      }
	    }
	
	
	     /**
	      * @ngdoc method
	      * @name $interval#cancel
	      *
	      * @description
	      * Cancels a task associated with the `promise`.
	      *
	      * @param {Promise=} promise returned by the `$interval` function.
	      * @returns {boolean} Returns `true` if the task was successfully canceled.
	      */
	    interval.cancel = function(promise) {
	      if (promise && promise.$$intervalId in intervals) {
	        intervals[promise.$$intervalId].reject('canceled');
	        $window.clearInterval(promise.$$intervalId);
	        delete intervals[promise.$$intervalId];
	        return true;
	      }
	      return false;
	    };
	
	    return interval;
	  }];
	}
	
	/**
	 * @ngdoc service
	 * @name $locale
	 *
	 * @description
	 * $locale service provides localization rules for various Angular components. As of right now the
	 * only public api is:
	 *
	 * * `id` – `{string}` – locale id formatted as `languageId-countryId` (e.g. `en-us`)
	 */
	
	var PATH_MATCH = /^([^\?#]*)(\?([^#]*))?(#(.*))?$/,
	    DEFAULT_PORTS = {'http': 80, 'https': 443, 'ftp': 21};
	var $locationMinErr = minErr('$location');
	
	
	/**
	 * Encode path using encodeUriSegment, ignoring forward slashes
	 *
	 * @param {string} path Path to encode
	 * @returns {string}
	 */
	function encodePath(path) {
	  var segments = path.split('/'),
	      i = segments.length;
	
	  while (i--) {
	    segments[i] = encodeUriSegment(segments[i]);
	  }
	
	  return segments.join('/');
	}
	
	function parseAbsoluteUrl(absoluteUrl, locationObj) {
	  var parsedUrl = urlResolve(absoluteUrl);
	
	  locationObj.$$protocol = parsedUrl.protocol;
	  locationObj.$$host = parsedUrl.hostname;
	  locationObj.$$port = toInt(parsedUrl.port) || DEFAULT_PORTS[parsedUrl.protocol] || null;
	}
	
	
	function parseAppUrl(relativeUrl, locationObj) {
	  var prefixed = (relativeUrl.charAt(0) !== '/');
	  if (prefixed) {
	    relativeUrl = '/' + relativeUrl;
	  }
	  var match = urlResolve(relativeUrl);
	  locationObj.$$path = decodeURIComponent(prefixed && match.pathname.charAt(0) === '/' ?
	      match.pathname.substring(1) : match.pathname);
	  locationObj.$$search = parseKeyValue(match.search);
	  locationObj.$$hash = decodeURIComponent(match.hash);
	
	  // make sure path starts with '/';
	  if (locationObj.$$path && locationObj.$$path.charAt(0) != '/') {
	    locationObj.$$path = '/' + locationObj.$$path;
	  }
	}
	
	
	/**
	 *
	 * @param {string} begin
	 * @param {string} whole
	 * @returns {string} returns text from whole after begin or undefined if it does not begin with
	 *                   expected string.
	 */
	function beginsWith(begin, whole) {
	  if (whole.indexOf(begin) === 0) {
	    return whole.substr(begin.length);
	  }
	}
	
	
	function stripHash(url) {
	  var index = url.indexOf('#');
	  return index == -1 ? url : url.substr(0, index);
	}
	
	function trimEmptyHash(url) {
	  return url.replace(/(#.+)|#$/, '$1');
	}
	
	
	function stripFile(url) {
	  return url.substr(0, stripHash(url).lastIndexOf('/') + 1);
	}
	
	/* return the server only (scheme://host:port) */
	function serverBase(url) {
	  return url.substring(0, url.indexOf('/', url.indexOf('//') + 2));
	}
	
	
	/**
	 * LocationHtml5Url represents an url
	 * This object is exposed as $location service when HTML5 mode is enabled and supported
	 *
	 * @constructor
	 * @param {string} appBase application base URL
	 * @param {string} appBaseNoFile application base URL stripped of any filename
	 * @param {string} basePrefix url path prefix
	 */
	function LocationHtml5Url(appBase, appBaseNoFile, basePrefix) {
	  this.$$html5 = true;
	  basePrefix = basePrefix || '';
	  parseAbsoluteUrl(appBase, this);
	
	
	  /**
	   * Parse given html5 (regular) url string into properties
	   * @param {string} url HTML5 url
	   * @private
	   */
	  this.$$parse = function(url) {
	    var pathUrl = beginsWith(appBaseNoFile, url);
	    if (!isString(pathUrl)) {
	      throw $locationMinErr('ipthprfx', 'Invalid url "{0}", missing path prefix "{1}".', url,
	          appBaseNoFile);
	    }
	
	    parseAppUrl(pathUrl, this);
	
	    if (!this.$$path) {
	      this.$$path = '/';
	    }
	
	    this.$$compose();
	  };
	
	  /**
	   * Compose url and update `absUrl` property
	   * @private
	   */
	  this.$$compose = function() {
	    var search = toKeyValue(this.$$search),
	        hash = this.$$hash ? '#' + encodeUriSegment(this.$$hash) : '';
	
	    this.$$url = encodePath(this.$$path) + (search ? '?' + search : '') + hash;
	    this.$$absUrl = appBaseNoFile + this.$$url.substr(1); // first char is always '/'
	  };
	
	  this.$$parseLinkUrl = function(url, relHref) {
	    if (relHref && relHref[0] === '#') {
	      // special case for links to hash fragments:
	      // keep the old url and only replace the hash fragment
	      this.hash(relHref.slice(1));
	      return true;
	    }
	    var appUrl, prevAppUrl;
	    var rewrittenUrl;
	
	    if (isDefined(appUrl = beginsWith(appBase, url))) {
	      prevAppUrl = appUrl;
	      if (isDefined(appUrl = beginsWith(basePrefix, appUrl))) {
	        rewrittenUrl = appBaseNoFile + (beginsWith('/', appUrl) || appUrl);
	      } else {
	        rewrittenUrl = appBase + prevAppUrl;
	      }
	    } else if (isDefined(appUrl = beginsWith(appBaseNoFile, url))) {
	      rewrittenUrl = appBaseNoFile + appUrl;
	    } else if (appBaseNoFile == url + '/') {
	      rewrittenUrl = appBaseNoFile;
	    }
	    if (rewrittenUrl) {
	      this.$$parse(rewrittenUrl);
	    }
	    return !!rewrittenUrl;
	  };
	}
	
	
	/**
	 * LocationHashbangUrl represents url
	 * This object is exposed as $location service when developer doesn't opt into html5 mode.
	 * It also serves as the base class for html5 mode fallback on legacy browsers.
	 *
	 * @constructor
	 * @param {string} appBase application base URL
	 * @param {string} appBaseNoFile application base URL stripped of any filename
	 * @param {string} hashPrefix hashbang prefix
	 */
	function LocationHashbangUrl(appBase, appBaseNoFile, hashPrefix) {
	
	  parseAbsoluteUrl(appBase, this);
	
	
	  /**
	   * Parse given hashbang url into properties
	   * @param {string} url Hashbang url
	   * @private
	   */
	  this.$$parse = function(url) {
	    var withoutBaseUrl = beginsWith(appBase, url) || beginsWith(appBaseNoFile, url);
	    var withoutHashUrl;
	
	    if (!isUndefined(withoutBaseUrl) && withoutBaseUrl.charAt(0) === '#') {
	
	      // The rest of the url starts with a hash so we have
	      // got either a hashbang path or a plain hash fragment
	      withoutHashUrl = beginsWith(hashPrefix, withoutBaseUrl);
	      if (isUndefined(withoutHashUrl)) {
	        // There was no hashbang prefix so we just have a hash fragment
	        withoutHashUrl = withoutBaseUrl;
	      }
	
	    } else {
	      // There was no hashbang path nor hash fragment:
	      // If we are in HTML5 mode we use what is left as the path;
	      // Otherwise we ignore what is left
	      if (this.$$html5) {
	        withoutHashUrl = withoutBaseUrl;
	      } else {
	        withoutHashUrl = '';
	        if (isUndefined(withoutBaseUrl)) {
	          appBase = url;
	          this.replace();
	        }
	      }
	    }
	
	    parseAppUrl(withoutHashUrl, this);
	
	    this.$$path = removeWindowsDriveName(this.$$path, withoutHashUrl, appBase);
	
	    this.$$compose();
	
	    /*
	     * In Windows, on an anchor node on documents loaded from
	     * the filesystem, the browser will return a pathname
	     * prefixed with the drive name ('/C:/path') when a
	     * pathname without a drive is set:
	     *  * a.setAttribute('href', '/foo')
	     *   * a.pathname === '/C:/foo' //true
	     *
	     * Inside of Angular, we're always using pathnames that
	     * do not include drive names for routing.
	     */
	    function removeWindowsDriveName(path, url, base) {
	      /*
	      Matches paths for file protocol on windows,
	      such as /C:/foo/bar, and captures only /foo/bar.
	      */
	      var windowsFilePathExp = /^\/[A-Z]:(\/.*)/;
	
	      var firstPathSegmentMatch;
	
	      //Get the relative path from the input URL.
	      if (url.indexOf(base) === 0) {
	        url = url.replace(base, '');
	      }
	
	      // The input URL intentionally contains a first path segment that ends with a colon.
	      if (windowsFilePathExp.exec(url)) {
	        return path;
	      }
	
	      firstPathSegmentMatch = windowsFilePathExp.exec(path);
	      return firstPathSegmentMatch ? firstPathSegmentMatch[1] : path;
	    }
	  };
	
	  /**
	   * Compose hashbang url and update `absUrl` property
	   * @private
	   */
	  this.$$compose = function() {
	    var search = toKeyValue(this.$$search),
	        hash = this.$$hash ? '#' + encodeUriSegment(this.$$hash) : '';
	
	    this.$$url = encodePath(this.$$path) + (search ? '?' + search : '') + hash;
	    this.$$absUrl = appBase + (this.$$url ? hashPrefix + this.$$url : '');
	  };
	
	  this.$$parseLinkUrl = function(url, relHref) {
	    if (stripHash(appBase) == stripHash(url)) {
	      this.$$parse(url);
	      return true;
	    }
	    return false;
	  };
	}
	
	
	/**
	 * LocationHashbangUrl represents url
	 * This object is exposed as $location service when html5 history api is enabled but the browser
	 * does not support it.
	 *
	 * @constructor
	 * @param {string} appBase application base URL
	 * @param {string} appBaseNoFile application base URL stripped of any filename
	 * @param {string} hashPrefix hashbang prefix
	 */
	function LocationHashbangInHtml5Url(appBase, appBaseNoFile, hashPrefix) {
	  this.$$html5 = true;
	  LocationHashbangUrl.apply(this, arguments);
	
	  this.$$parseLinkUrl = function(url, relHref) {
	    if (relHref && relHref[0] === '#') {
	      // special case for links to hash fragments:
	      // keep the old url and only replace the hash fragment
	      this.hash(relHref.slice(1));
	      return true;
	    }
	
	    var rewrittenUrl;
	    var appUrl;
	
	    if (appBase == stripHash(url)) {
	      rewrittenUrl = url;
	    } else if ((appUrl = beginsWith(appBaseNoFile, url))) {
	      rewrittenUrl = appBase + hashPrefix + appUrl;
	    } else if (appBaseNoFile === url + '/') {
	      rewrittenUrl = appBaseNoFile;
	    }
	    if (rewrittenUrl) {
	      this.$$parse(rewrittenUrl);
	    }
	    return !!rewrittenUrl;
	  };
	
	  this.$$compose = function() {
	    var search = toKeyValue(this.$$search),
	        hash = this.$$hash ? '#' + encodeUriSegment(this.$$hash) : '';
	
	    this.$$url = encodePath(this.$$path) + (search ? '?' + search : '') + hash;
	    // include hashPrefix in $$absUrl when $$url is empty so IE9 does not reload page because of removal of '#'
	    this.$$absUrl = appBase + hashPrefix + this.$$url;
	  };
	
	}
	
	
	var locationPrototype = {
	
	  /**
	   * Are we in html5 mode?
	   * @private
	   */
	  $$html5: false,
	
	  /**
	   * Has any change been replacing?
	   * @private
	   */
	  $$replace: false,
	
	  /**
	   * @ngdoc method
	   * @name $location#absUrl
	   *
	   * @description
	   * This method is getter only.
	   *
	   * Return full url representation with all segments encoded according to rules specified in
	   * [RFC 3986](http://www.ietf.org/rfc/rfc3986.txt).
	   *
	   *
	   * ```js
	   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo
	   * var absUrl = $location.absUrl();
	   * // => "http://example.com/#/some/path?foo=bar&baz=xoxo"
	   * ```
	   *
	   * @return {string} full url
	   */
	  absUrl: locationGetter('$$absUrl'),
	
	  /**
	   * @ngdoc method
	   * @name $location#url
	   *
	   * @description
	   * This method is getter / setter.
	   *
	   * Return url (e.g. `/path?a=b#hash`) when called without any parameter.
	   *
	   * Change path, search and hash, when called with parameter and return `$location`.
	   *
	   *
	   * ```js
	   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo
	   * var url = $location.url();
	   * // => "/some/path?foo=bar&baz=xoxo"
	   * ```
	   *
	   * @param {string=} url New url without base prefix (e.g. `/path?a=b#hash`)
	   * @return {string} url
	   */
	  url: function(url) {
	    if (isUndefined(url)) {
	      return this.$$url;
	    }
	
	    var match = PATH_MATCH.exec(url);
	    if (match[1] || url === '') this.path(decodeURIComponent(match[1]));
	    if (match[2] || match[1] || url === '') this.search(match[3] || '');
	    this.hash(match[5] || '');
	
	    return this;
	  },
	
	  /**
	   * @ngdoc method
	   * @name $location#protocol
	   *
	   * @description
	   * This method is getter only.
	   *
	   * Return protocol of current url.
	   *
	   *
	   * ```js
	   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo
	   * var protocol = $location.protocol();
	   * // => "http"
	   * ```
	   *
	   * @return {string} protocol of current url
	   */
	  protocol: locationGetter('$$protocol'),
	
	  /**
	   * @ngdoc method
	   * @name $location#host
	   *
	   * @description
	   * This method is getter only.
	   *
	   * Return host of current url.
	   *
	   * Note: compared to the non-angular version `location.host` which returns `hostname:port`, this returns the `hostname` portion only.
	   *
	   *
	   * ```js
	   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo
	   * var host = $location.host();
	   * // => "example.com"
	   *
	   * // given url http://user:password@example.com:8080/#/some/path?foo=bar&baz=xoxo
	   * host = $location.host();
	   * // => "example.com"
	   * host = location.host;
	   * // => "example.com:8080"
	   * ```
	   *
	   * @return {string} host of current url.
	   */
	  host: locationGetter('$$host'),
	
	  /**
	   * @ngdoc method
	   * @name $location#port
	   *
	   * @description
	   * This method is getter only.
	   *
	   * Return port of current url.
	   *
	   *
	   * ```js
	   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo
	   * var port = $location.port();
	   * // => 80
	   * ```
	   *
	   * @return {Number} port
	   */
	  port: locationGetter('$$port'),
	
	  /**
	   * @ngdoc method
	   * @name $location#path
	   *
	   * @description
	   * This method is getter / setter.
	   *
	   * Return path of current url when called without any parameter.
	   *
	   * Change path when called with parameter and return `$location`.
	   *
	   * Note: Path should always begin with forward slash (/), this method will add the forward slash
	   * if it is missing.
	   *
	   *
	   * ```js
	   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo
	   * var path = $location.path();
	   * // => "/some/path"
	   * ```
	   *
	   * @param {(string|number)=} path New path
	   * @return {string} path
	   */
	  path: locationGetterSetter('$$path', function(path) {
	    path = path !== null ? path.toString() : '';
	    return path.charAt(0) == '/' ? path : '/' + path;
	  }),
	
	  /**
	   * @ngdoc method
	   * @name $location#search
	   *
	   * @description
	   * This method is getter / setter.
	   *
	   * Return search part (as object) of current url when called without any parameter.
	   *
	   * Change search part when called with parameter and return `$location`.
	   *
	   *
	   * ```js
	   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo
	   * var searchObject = $location.search();
	   * // => {foo: 'bar', baz: 'xoxo'}
	   *
	   * // set foo to 'yipee'
	   * $location.search('foo', 'yipee');
	   * // $location.search() => {foo: 'yipee', baz: 'xoxo'}
	   * ```
	   *
	   * @param {string|Object.<string>|Object.<Array.<string>>} search New search params - string or
	   * hash object.
	   *
	   * When called with a single argument the method acts as a setter, setting the `search` component
	   * of `$location` to the specified value.
	   *
	   * If the argument is a hash object containing an array of values, these values will be encoded
	   * as duplicate search parameters in the url.
	   *
	   * @param {(string|Number|Array<string>|boolean)=} paramValue If `search` is a string or number, then `paramValue`
	   * will override only a single search property.
	   *
	   * If `paramValue` is an array, it will override the property of the `search` component of
	   * `$location` specified via the first argument.
	   *
	   * If `paramValue` is `null`, the property specified via the first argument will be deleted.
	   *
	   * If `paramValue` is `true`, the property specified via the first argument will be added with no
	   * value nor trailing equal sign.
	   *
	   * @return {Object} If called with no arguments returns the parsed `search` object. If called with
	   * one or more arguments returns `$location` object itself.
	   */
	  search: function(search, paramValue) {
	    switch (arguments.length) {
	      case 0:
	        return this.$$search;
	      case 1:
	        if (isString(search) || isNumber(search)) {
	          search = search.toString();
	          this.$$search = parseKeyValue(search);
	        } else if (isObject(search)) {
	          search = copy(search, {});
	          // remove object undefined or null properties
	          forEach(search, function(value, key) {
	            if (value == null) delete search[key];
	          });
	
	          this.$$search = search;
	        } else {
	          throw $locationMinErr('isrcharg',
	              'The first argument of the `$location#search()` call must be a string or an object.');
	        }
	        break;
	      default:
	        if (isUndefined(paramValue) || paramValue === null) {
	          delete this.$$search[search];
	        } else {
	          this.$$search[search] = paramValue;
	        }
	    }
	
	    this.$$compose();
	    return this;
	  },
	
	  /**
	   * @ngdoc method
	   * @name $location#hash
	   *
	   * @description
	   * This method is getter / setter.
	   *
	   * Returns the hash fragment when called without any parameters.
	   *
	   * Changes the hash fragment when called with a parameter and returns `$location`.
	   *
	   *
	   * ```js
	   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo#hashValue
	   * var hash = $location.hash();
	   * // => "hashValue"
	   * ```
	   *
	   * @param {(string|number)=} hash New hash fragment
	   * @return {string} hash
	   */
	  hash: locationGetterSetter('$$hash', function(hash) {
	    return hash !== null ? hash.toString() : '';
	  }),
	
	  /**
	   * @ngdoc method
	   * @name $location#replace
	   *
	   * @description
	   * If called, all changes to $location during the current `$digest` will replace the current history
	   * record, instead of adding a new one.
	   */
	  replace: function() {
	    this.$$replace = true;
	    return this;
	  }
	};
	
	forEach([LocationHashbangInHtml5Url, LocationHashbangUrl, LocationHtml5Url], function(Location) {
	  Location.prototype = Object.create(locationPrototype);
	
	  /**
	   * @ngdoc method
	   * @name $location#state
	   *
	   * @description
	   * This method is getter / setter.
	   *
	   * Return the history state object when called without any parameter.
	   *
	   * Change the history state object when called with one parameter and return `$location`.
	   * The state object is later passed to `pushState` or `replaceState`.
	   *
	   * NOTE: This method is supported only in HTML5 mode and only in browsers supporting
	   * the HTML5 History API (i.e. methods `pushState` and `replaceState`). If you need to support
	   * older browsers (like IE9 or Android < 4.0), don't use this method.
	   *
	   * @param {object=} state State object for pushState or replaceState
	   * @return {object} state
	   */
	  Location.prototype.state = function(state) {
	    if (!arguments.length) {
	      return this.$$state;
	    }
	
	    if (Location !== LocationHtml5Url || !this.$$html5) {
	      throw $locationMinErr('nostate', 'History API state support is available only ' +
	        'in HTML5 mode and only in browsers supporting HTML5 History API');
	    }
	    // The user might modify `stateObject` after invoking `$location.state(stateObject)`
	    // but we're changing the $$state reference to $browser.state() during the $digest
	    // so the modification window is narrow.
	    this.$$state = isUndefined(state) ? null : state;
	
	    return this;
	  };
	});
	
	
	function locationGetter(property) {
	  return function() {
	    return this[property];
	  };
	}
	
	
	function locationGetterSetter(property, preprocess) {
	  return function(value) {
	    if (isUndefined(value)) {
	      return this[property];
	    }
	
	    this[property] = preprocess(value);
	    this.$$compose();
	
	    return this;
	  };
	}
	
	
	/**
	 * @ngdoc service
	 * @name $location
	 *
	 * @requires $rootElement
	 *
	 * @description
	 * The $location service parses the URL in the browser address bar (based on the
	 * [window.location](https://developer.mozilla.org/en/window.location)) and makes the URL
	 * available to your application. Changes to the URL in the address bar are reflected into
	 * $location service and changes to $location are reflected into the browser address bar.
	 *
	 * **The $location service:**
	 *
	 * - Exposes the current URL in the browser address bar, so you can
	 *   - Watch and observe the URL.
	 *   - Change the URL.
	 * - Synchronizes the URL with the browser when the user
	 *   - Changes the address bar.
	 *   - Clicks the back or forward button (or clicks a History link).
	 *   - Clicks on a link.
	 * - Represents the URL object as a set of methods (protocol, host, port, path, search, hash).
	 *
	 * For more information see {@link guide/$location Developer Guide: Using $location}
	 */
	
	/**
	 * @ngdoc provider
	 * @name $locationProvider
	 * @description
	 * Use the `$locationProvider` to configure how the application deep linking paths are stored.
	 */
	function $LocationProvider() {
	  var hashPrefix = '',
	      html5Mode = {
	        enabled: false,
	        requireBase: true,
	        rewriteLinks: true
	      };
	
	  /**
	   * @ngdoc method
	   * @name $locationProvider#hashPrefix
	   * @description
	   * @param {string=} prefix Prefix for hash part (containing path and search)
	   * @returns {*} current value if used as getter or itself (chaining) if used as setter
	   */
	  this.hashPrefix = function(prefix) {
	    if (isDefined(prefix)) {
	      hashPrefix = prefix;
	      return this;
	    } else {
	      return hashPrefix;
	    }
	  };
	
	  /**
	   * @ngdoc method
	   * @name $locationProvider#html5Mode
	   * @description
	   * @param {(boolean|Object)=} mode If boolean, sets `html5Mode.enabled` to value.
	   *   If object, sets `enabled`, `requireBase` and `rewriteLinks` to respective values. Supported
	   *   properties:
	   *   - **enabled** – `{boolean}` – (default: false) If true, will rely on `history.pushState` to
	   *     change urls where supported. Will fall back to hash-prefixed paths in browsers that do not
	   *     support `pushState`.
	   *   - **requireBase** - `{boolean}` - (default: `true`) When html5Mode is enabled, specifies
	   *     whether or not a <base> tag is required to be present. If `enabled` and `requireBase` are
	   *     true, and a base tag is not present, an error will be thrown when `$location` is injected.
	   *     See the {@link guide/$location $location guide for more information}
	   *   - **rewriteLinks** - `{boolean}` - (default: `true`) When html5Mode is enabled,
	   *     enables/disables url rewriting for relative links.
	   *
	   * @returns {Object} html5Mode object if used as getter or itself (chaining) if used as setter
	   */
	  this.html5Mode = function(mode) {
	    if (isBoolean(mode)) {
	      html5Mode.enabled = mode;
	      return this;
	    } else if (isObject(mode)) {
	
	      if (isBoolean(mode.enabled)) {
	        html5Mode.enabled = mode.enabled;
	      }
	
	      if (isBoolean(mode.requireBase)) {
	        html5Mode.requireBase = mode.requireBase;
	      }
	
	      if (isBoolean(mode.rewriteLinks)) {
	        html5Mode.rewriteLinks = mode.rewriteLinks;
	      }
	
	      return this;
	    } else {
	      return html5Mode;
	    }
	  };
	
	  /**
	   * @ngdoc event
	   * @name $location#$locationChangeStart
	   * @eventType broadcast on root scope
	   * @description
	   * Broadcasted before a URL will change.
	   *
	   * This change can be prevented by calling
	   * `preventDefault` method of the event. See {@link ng.$rootScope.Scope#$on} for more
	   * details about event object. Upon successful change
	   * {@link ng.$location#$locationChangeSuccess $locationChangeSuccess} is fired.
	   *
	   * The `newState` and `oldState` parameters may be defined only in HTML5 mode and when
	   * the browser supports the HTML5 History API.
	   *
	   * @param {Object} angularEvent Synthetic event object.
	   * @param {string} newUrl New URL
	   * @param {string=} oldUrl URL that was before it was changed.
	   * @param {string=} newState New history state object
	   * @param {string=} oldState History state object that was before it was changed.
	   */
	
	  /**
	   * @ngdoc event
	   * @name $location#$locationChangeSuccess
	   * @eventType broadcast on root scope
	   * @description
	   * Broadcasted after a URL was changed.
	   *
	   * The `newState` and `oldState` parameters may be defined only in HTML5 mode and when
	   * the browser supports the HTML5 History API.
	   *
	   * @param {Object} angularEvent Synthetic event object.
	   * @param {string} newUrl New URL
	   * @param {string=} oldUrl URL that was before it was changed.
	   * @param {string=} newState New history state object
	   * @param {string=} oldState History state object that was before it was changed.
	   */
	
	  this.$get = ['$rootScope', '$browser', '$sniffer', '$rootElement', '$window',
	      function($rootScope, $browser, $sniffer, $rootElement, $window) {
	    var $location,
	        LocationMode,
	        baseHref = $browser.baseHref(), // if base[href] is undefined, it defaults to ''
	        initialUrl = $browser.url(),
	        appBase;
	
	    if (html5Mode.enabled) {
	      if (!baseHref && html5Mode.requireBase) {
	        throw $locationMinErr('nobase',
	          "$location in HTML5 mode requires a <base> tag to be present!");
	      }
	      appBase = serverBase(initialUrl) + (baseHref || '/');
	      LocationMode = $sniffer.history ? LocationHtml5Url : LocationHashbangInHtml5Url;
	    } else {
	      appBase = stripHash(initialUrl);
	      LocationMode = LocationHashbangUrl;
	    }
	    var appBaseNoFile = stripFile(appBase);
	
	    $location = new LocationMode(appBase, appBaseNoFile, '#' + hashPrefix);
	    $location.$$parseLinkUrl(initialUrl, initialUrl);
	
	    $location.$$state = $browser.state();
	
	    var IGNORE_URI_REGEXP = /^\s*(javascript|mailto):/i;
	
	    function setBrowserUrlWithFallback(url, replace, state) {
	      var oldUrl = $location.url();
	      var oldState = $location.$$state;
	      try {
	        $browser.url(url, replace, state);
	
	        // Make sure $location.state() returns referentially identical (not just deeply equal)
	        // state object; this makes possible quick checking if the state changed in the digest
	        // loop. Checking deep equality would be too expensive.
	        $location.$$state = $browser.state();
	      } catch (e) {
	        // Restore old values if pushState fails
	        $location.url(oldUrl);
	        $location.$$state = oldState;
	
	        throw e;
	      }
	    }
	
	    $rootElement.on('click', function(event) {
	      // TODO(vojta): rewrite link when opening in new tab/window (in legacy browser)
	      // currently we open nice url link and redirect then
	
	      if (!html5Mode.rewriteLinks || event.ctrlKey || event.metaKey || event.shiftKey || event.which == 2 || event.button == 2) return;
	
	      var elm = jqLite(event.target);
	
	      // traverse the DOM up to find first A tag
	      while (nodeName_(elm[0]) !== 'a') {
	        // ignore rewriting if no A tag (reached root element, or no parent - removed from document)
	        if (elm[0] === $rootElement[0] || !(elm = elm.parent())[0]) return;
	      }
	
	      var absHref = elm.prop('href');
	      // get the actual href attribute - see
	      // http://msdn.microsoft.com/en-us/library/ie/dd347148(v=vs.85).aspx
	      var relHref = elm.attr('href') || elm.attr('xlink:href');
	
	      if (isObject(absHref) && absHref.toString() === '[object SVGAnimatedString]') {
	        // SVGAnimatedString.animVal should be identical to SVGAnimatedString.baseVal, unless during
	        // an animation.
	        absHref = urlResolve(absHref.animVal).href;
	      }
	
	      // Ignore when url is started with javascript: or mailto:
	      if (IGNORE_URI_REGEXP.test(absHref)) return;
	
	      if (absHref && !elm.attr('target') && !event.isDefaultPrevented()) {
	        if ($location.$$parseLinkUrl(absHref, relHref)) {
	          // We do a preventDefault for all urls that are part of the angular application,
	          // in html5mode and also without, so that we are able to abort navigation without
	          // getting double entries in the location history.
	          event.preventDefault();
	          // update location manually
	          if ($location.absUrl() != $browser.url()) {
	            $rootScope.$apply();
	            // hack to work around FF6 bug 684208 when scenario runner clicks on links
	            $window.angular['ff-684208-preventDefault'] = true;
	          }
	        }
	      }
	    });
	
	
	    // rewrite hashbang url <> html5 url
	    if (trimEmptyHash($location.absUrl()) != trimEmptyHash(initialUrl)) {
	      $browser.url($location.absUrl(), true);
	    }
	
	    var initializing = true;
	
	    // update $location when $browser url changes
	    $browser.onUrlChange(function(newUrl, newState) {
	
	      if (isUndefined(beginsWith(appBaseNoFile, newUrl))) {
	        // If we are navigating outside of the app then force a reload
	        $window.location.href = newUrl;
	        return;
	      }
	
	      $rootScope.$evalAsync(function() {
	        var oldUrl = $location.absUrl();
	        var oldState = $location.$$state;
	        var defaultPrevented;
	        newUrl = trimEmptyHash(newUrl);
	        $location.$$parse(newUrl);
	        $location.$$state = newState;
	
	        defaultPrevented = $rootScope.$broadcast('$locationChangeStart', newUrl, oldUrl,
	            newState, oldState).defaultPrevented;
	
	        // if the location was changed by a `$locationChangeStart` handler then stop
	        // processing this location change
	        if ($location.absUrl() !== newUrl) return;
	
	        if (defaultPrevented) {
	          $location.$$parse(oldUrl);
	          $location.$$state = oldState;
	          setBrowserUrlWithFallback(oldUrl, false, oldState);
	        } else {
	          initializing = false;
	          afterLocationChange(oldUrl, oldState);
	        }
	      });
	      if (!$rootScope.$$phase) $rootScope.$digest();
	    });
	
	    // update browser
	    $rootScope.$watch(function $locationWatch() {
	      var oldUrl = trimEmptyHash($browser.url());
	      var newUrl = trimEmptyHash($location.absUrl());
	      var oldState = $browser.state();
	      var currentReplace = $location.$$replace;
	      var urlOrStateChanged = oldUrl !== newUrl ||
	        ($location.$$html5 && $sniffer.history && oldState !== $location.$$state);
	
	      if (initializing || urlOrStateChanged) {
	        initializing = false;
	
	        $rootScope.$evalAsync(function() {
	          var newUrl = $location.absUrl();
	          var defaultPrevented = $rootScope.$broadcast('$locationChangeStart', newUrl, oldUrl,
	              $location.$$state, oldState).defaultPrevented;
	
	          // if the location was changed by a `$locationChangeStart` handler then stop
	          // processing this location change
	          if ($location.absUrl() !== newUrl) return;
	
	          if (defaultPrevented) {
	            $location.$$parse(oldUrl);
	            $location.$$state = oldState;
	          } else {
	            if (urlOrStateChanged) {
	              setBrowserUrlWithFallback(newUrl, currentReplace,
	                                        oldState === $location.$$state ? null : $location.$$state);
	            }
	            afterLocationChange(oldUrl, oldState);
	          }
	        });
	      }
	
	      $location.$$replace = false;
	
	      // we don't need to return anything because $evalAsync will make the digest loop dirty when
	      // there is a change
	    });
	
	    return $location;
	
	    function afterLocationChange(oldUrl, oldState) {
	      $rootScope.$broadcast('$locationChangeSuccess', $location.absUrl(), oldUrl,
	        $location.$$state, oldState);
	    }
	}];
	}
	
	/**
	 * @ngdoc service
	 * @name $log
	 * @requires $window
	 *
	 * @description
	 * Simple service for logging. Default implementation safely writes the message
	 * into the browser's console (if present).
	 *
	 * The main purpose of this service is to simplify debugging and troubleshooting.
	 *
	 * The default is to log `debug` messages. You can use
	 * {@link ng.$logProvider ng.$logProvider#debugEnabled} to change this.
	 *
	 * @example
	   <example module="logExample">
	     <file name="script.js">
	       angular.module('logExample', [])
	         .controller('LogController', ['$scope', '$log', function($scope, $log) {
	           $scope.$log = $log;
	           $scope.message = 'Hello World!';
	         }]);
	     </file>
	     <file name="index.html">
	       <div ng-controller="LogController">
	         <p>Reload this page with open console, enter text and hit the log button...</p>
	         <label>Message:
	         <input type="text" ng-model="message" /></label>
	         <button ng-click="$log.log(message)">log</button>
	         <button ng-click="$log.warn(message)">warn</button>
	         <button ng-click="$log.info(message)">info</button>
	         <button ng-click="$log.error(message)">error</button>
	         <button ng-click="$log.debug(message)">debug</button>
	       </div>
	     </file>
	   </example>
	 */
	
	/**
	 * @ngdoc provider
	 * @name $logProvider
	 * @description
	 * Use the `$logProvider` to configure how the application logs messages
	 */
	function $LogProvider() {
	  var debug = true,
	      self = this;
	
	  /**
	   * @ngdoc method
	   * @name $logProvider#debugEnabled
	   * @description
	   * @param {boolean=} flag enable or disable debug level messages
	   * @returns {*} current value if used as getter or itself (chaining) if used as setter
	   */
	  this.debugEnabled = function(flag) {
	    if (isDefined(flag)) {
	      debug = flag;
	    return this;
	    } else {
	      return debug;
	    }
	  };
	
	  this.$get = ['$window', function($window) {
	    return {
	      /**
	       * @ngdoc method
	       * @name $log#log
	       *
	       * @description
	       * Write a log message
	       */
	      log: consoleLog('log'),
	
	      /**
	       * @ngdoc method
	       * @name $log#info
	       *
	       * @description
	       * Write an information message
	       */
	      info: consoleLog('info'),
	
	      /**
	       * @ngdoc method
	       * @name $log#warn
	       *
	       * @description
	       * Write a warning message
	       */
	      warn: consoleLog('warn'),
	
	      /**
	       * @ngdoc method
	       * @name $log#error
	       *
	       * @description
	       * Write an error message
	       */
	      error: consoleLog('error'),
	
	      /**
	       * @ngdoc method
	       * @name $log#debug
	       *
	       * @description
	       * Write a debug message
	       */
	      debug: (function() {
	        var fn = consoleLog('debug');
	
	        return function() {
	          if (debug) {
	            fn.apply(self, arguments);
	          }
	        };
	      }())
	    };
	
	    function formatError(arg) {
	      if (arg instanceof Error) {
	        if (arg.stack) {
	          arg = (arg.message && arg.stack.indexOf(arg.message) === -1)
	              ? 'Error: ' + arg.message + '\n' + arg.stack
	              : arg.stack;
	        } else if (arg.sourceURL) {
	          arg = arg.message + '\n' + arg.sourceURL + ':' + arg.line;
	        }
	      }
	      return arg;
	    }
	
	    function consoleLog(type) {
	      var console = $window.console || {},
	          logFn = console[type] || console.log || noop,
	          hasApply = false;
	
	      // Note: reading logFn.apply throws an error in IE11 in IE8 document mode.
	      // The reason behind this is that console.log has type "object" in IE8...
	      try {
	        hasApply = !!logFn.apply;
	      } catch (e) {}
	
	      if (hasApply) {
	        return function() {
	          var args = [];
	          forEach(arguments, function(arg) {
	            args.push(formatError(arg));
	          });
	          return logFn.apply(console, args);
	        };
	      }
	
	      // we are IE which either doesn't have window.console => this is noop and we do nothing,
	      // or we are IE where console.log doesn't have apply so we log at least first 2 args
	      return function(arg1, arg2) {
	        logFn(arg1, arg2 == null ? '' : arg2);
	      };
	    }
	  }];
	}
	
	/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	 *     Any commits to this file should be reviewed with security in mind.  *
	 *   Changes to this file can potentially create security vulnerabilities. *
	 *          An approval from 2 Core members with history of modifying      *
	 *                         this file is required.                          *
	 *                                                                         *
	 *  Does the change somehow allow for arbitrary javascript to be executed? *
	 *    Or allows for someone to change the prototype of built-in objects?   *
	 *     Or gives undesired access to variables likes document or window?    *
	 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
	
	var $parseMinErr = minErr('$parse');
	
	// Sandboxing Angular Expressions
	// ------------------------------
	// Angular expressions are generally considered safe because these expressions only have direct
	// access to `$scope` and locals. However, one can obtain the ability to execute arbitrary JS code by
	// obtaining a reference to native JS functions such as the Function constructor.
	//
	// As an example, consider the following Angular expression:
	//
	//   {}.toString.constructor('alert("evil JS code")')
	//
	// This sandboxing technique is not perfect and doesn't aim to be. The goal is to prevent exploits
	// against the expression language, but not to prevent exploits that were enabled by exposing
	// sensitive JavaScript or browser APIs on Scope. Exposing such objects on a Scope is never a good
	// practice and therefore we are not even trying to protect against interaction with an object
	// explicitly exposed in this way.
	//
	// In general, it is not possible to access a Window object from an angular expression unless a
	// window or some DOM object that has a reference to window is published onto a Scope.
	// Similarly we prevent invocations of function known to be dangerous, as well as assignments to
	// native objects.
	//
	// See https://docs.angularjs.org/guide/security
	
	
	function ensureSafeMemberName(name, fullExpression) {
	  if (name === "__defineGetter__" || name === "__defineSetter__"
	      || name === "__lookupGetter__" || name === "__lookupSetter__"
	      || name === "__proto__") {
	    throw $parseMinErr('isecfld',
	        'Attempting to access a disallowed field in Angular expressions! '
	        + 'Expression: {0}', fullExpression);
	  }
	  return name;
	}
	
	function getStringValue(name) {
	  // Property names must be strings. This means that non-string objects cannot be used
	  // as keys in an object. Any non-string object, including a number, is typecasted
	  // into a string via the toString method.
	  // -- MDN, https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Property_accessors#Property_names
	  //
	  // So, to ensure that we are checking the same `name` that JavaScript would use, we cast it
	  // to a string. It's not always possible. If `name` is an object and its `toString` method is
	  // 'broken' (doesn't return a string, isn't a function, etc.), an error will be thrown:
	  //
	  // TypeError: Cannot convert object to primitive value
	  //
	  // For performance reasons, we don't catch this error here and allow it to propagate up the call
	  // stack. Note that you'll get the same error in JavaScript if you try to access a property using
	  // such a 'broken' object as a key.
	  return name + '';
	}
	
	function ensureSafeObject(obj, fullExpression) {
	  // nifty check if obj is Function that is fast and works across iframes and other contexts
	  if (obj) {
	    if (obj.constructor === obj) {
	      throw $parseMinErr('isecfn',
	          'Referencing Function in Angular expressions is disallowed! Expression: {0}',
	          fullExpression);
	    } else if (// isWindow(obj)
	        obj.window === obj) {
	      throw $parseMinErr('isecwindow',
	          'Referencing the Window in Angular expressions is disallowed! Expression: {0}',
	          fullExpression);
	    } else if (// isElement(obj)
	        obj.children && (obj.nodeName || (obj.prop && obj.attr && obj.find))) {
	      throw $parseMinErr('isecdom',
	          'Referencing DOM nodes in Angular expressions is disallowed! Expression: {0}',
	          fullExpression);
	    } else if (// block Object so that we can't get hold of dangerous Object.* methods
	        obj === Object) {
	      throw $parseMinErr('isecobj',
	          'Referencing Object in Angular expressions is disallowed! Expression: {0}',
	          fullExpression);
	    }
	  }
	  return obj;
	}
	
	var CALL = Function.prototype.call;
	var APPLY = Function.prototype.apply;
	var BIND = Function.prototype.bind;
	
	function ensureSafeFunction(obj, fullExpression) {
	  if (obj) {
	    if (obj.constructor === obj) {
	      throw $parseMinErr('isecfn',
	        'Referencing Function in Angular expressions is disallowed! Expression: {0}',
	        fullExpression);
	    } else if (obj === CALL || obj === APPLY || obj === BIND) {
	      throw $parseMinErr('isecff',
	        'Referencing call, apply or bind in Angular expressions is disallowed! Expression: {0}',
	        fullExpression);
	    }
	  }
	}
	
	function ensureSafeAssignContext(obj, fullExpression) {
	  if (obj) {
	    if (obj === (0).constructor || obj === (false).constructor || obj === ''.constructor ||
	        obj === {}.constructor || obj === [].constructor || obj === Function.constructor) {
	      throw $parseMinErr('isecaf',
	        'Assigning to a constructor is disallowed! Expression: {0}', fullExpression);
	    }
	  }
	}
	
	var OPERATORS = createMap();
	forEach('+ - * / % === !== == != < > <= >= && || ! = |'.split(' '), function(operator) { OPERATORS[operator] = true; });
	var ESCAPE = {"n":"\n", "f":"\f", "r":"\r", "t":"\t", "v":"\v", "'":"'", '"':'"'};
	
	
	/////////////////////////////////////////
	
	
	/**
	 * @constructor
	 */
	var Lexer = function(options) {
	  this.options = options;
	};
	
	Lexer.prototype = {
	  constructor: Lexer,
	
	  lex: function(text) {
	    this.text = text;
	    this.index = 0;
	    this.tokens = [];
	
	    while (this.index < this.text.length) {
	      var ch = this.text.charAt(this.index);
	      if (ch === '"' || ch === "'") {
	        this.readString(ch);
	      } else if (this.isNumber(ch) || ch === '.' && this.isNumber(this.peek())) {
	        this.readNumber();
	      } else if (this.isIdentifierStart(this.peekMultichar())) {
	        this.readIdent();
	      } else if (this.is(ch, '(){}[].,;:?')) {
	        this.tokens.push({index: this.index, text: ch});
	        this.index++;
	      } else if (this.isWhitespace(ch)) {
	        this.index++;
	      } else {
	        var ch2 = ch + this.peek();
	        var ch3 = ch2 + this.peek(2);
	        var op1 = OPERATORS[ch];
	        var op2 = OPERATORS[ch2];
	        var op3 = OPERATORS[ch3];
	        if (op1 || op2 || op3) {
	          var token = op3 ? ch3 : (op2 ? ch2 : ch);
	          this.tokens.push({index: this.index, text: token, operator: true});
	          this.index += token.length;
	        } else {
	          this.throwError('Unexpected next character ', this.index, this.index + 1);
	        }
	      }
	    }
	    return this.tokens;
	  },
	
	  is: function(ch, chars) {
	    return chars.indexOf(ch) !== -1;
	  },
	
	  peek: function(i) {
	    var num = i || 1;
	    return (this.index + num < this.text.length) ? this.text.charAt(this.index + num) : false;
	  },
	
	  isNumber: function(ch) {
	    return ('0' <= ch && ch <= '9') && typeof ch === "string";
	  },
	
	  isWhitespace: function(ch) {
	    // IE treats non-breaking space as \u00A0
	    return (ch === ' ' || ch === '\r' || ch === '\t' ||
	            ch === '\n' || ch === '\v' || ch === '\u00A0');
	  },
	
	  isIdentifierStart: function(ch) {
	    return this.options.isIdentifierStart ?
	        this.options.isIdentifierStart(ch, this.codePointAt(ch)) :
	        this.isValidIdentifierStart(ch);
	  },
	
	  isValidIdentifierStart: function(ch) {
	    return ('a' <= ch && ch <= 'z' ||
	            'A' <= ch && ch <= 'Z' ||
	            '_' === ch || ch === '$');
	  },
	
	  isIdentifierContinue: function(ch) {
	    return this.options.isIdentifierContinue ?
	        this.options.isIdentifierContinue(ch, this.codePointAt(ch)) :
	        this.isValidIdentifierContinue(ch);
	  },
	
	  isValidIdentifierContinue: function(ch, cp) {
	    return this.isValidIdentifierStart(ch, cp) || this.isNumber(ch);
	  },
	
	  codePointAt: function(ch) {
	    if (ch.length === 1) return ch.charCodeAt(0);
	    /*jshint bitwise: false*/
	    return (ch.charCodeAt(0) << 10) + ch.charCodeAt(1) - 0x35FDC00;
	    /*jshint bitwise: true*/
	  },
	
	  peekMultichar: function() {
	    var ch = this.text.charAt(this.index);
	    var peek = this.peek();
	    if (!peek) {
	      return ch;
	    }
	    var cp1 = ch.charCodeAt(0);
	    var cp2 = peek.charCodeAt(0);
	    if (cp1 >= 0xD800 && cp1 <= 0xDBFF && cp2 >= 0xDC00 && cp2 <= 0xDFFF) {
	      return ch + peek;
	    }
	    return ch;
	  },
	
	  isExpOperator: function(ch) {
	    return (ch === '-' || ch === '+' || this.isNumber(ch));
	  },
	
	  throwError: function(error, start, end) {
	    end = end || this.index;
	    var colStr = (isDefined(start)
	            ? 's ' + start +  '-' + this.index + ' [' + this.text.substring(start, end) + ']'
	            : ' ' + end);
	    throw $parseMinErr('lexerr', 'Lexer Error: {0} at column{1} in expression [{2}].',
	        error, colStr, this.text);
	  },
	
	  readNumber: function() {
	    var number = '';
	    var start = this.index;
	    while (this.index < this.text.length) {
	      var ch = lowercase(this.text.charAt(this.index));
	      if (ch == '.' || this.isNumber(ch)) {
	        number += ch;
	      } else {
	        var peekCh = this.peek();
	        if (ch == 'e' && this.isExpOperator(peekCh)) {
	          number += ch;
	        } else if (this.isExpOperator(ch) &&
	            peekCh && this.isNumber(peekCh) &&
	            number.charAt(number.length - 1) == 'e') {
	          number += ch;
	        } else if (this.isExpOperator(ch) &&
	            (!peekCh || !this.isNumber(peekCh)) &&
	            number.charAt(number.length - 1) == 'e') {
	          this.throwError('Invalid exponent');
	        } else {
	          break;
	        }
	      }
	      this.index++;
	    }
	    this.tokens.push({
	      index: start,
	      text: number,
	      constant: true,
	      value: Number(number)
	    });
	  },
	
	  readIdent: function() {
	    var start = this.index;
	    this.index += this.peekMultichar().length;
	    while (this.index < this.text.length) {
	      var ch = this.peekMultichar();
	      if (!this.isIdentifierContinue(ch)) {
	        break;
	      }
	      this.index += ch.length;
	    }
	    this.tokens.push({
	      index: start,
	      text: this.text.slice(start, this.index),
	      identifier: true
	    });
	  },
	
	  readString: function(quote) {
	    var start = this.index;
	    this.index++;
	    var string = '';
	    var rawString = quote;
	    var escape = false;
	    while (this.index < this.text.length) {
	      var ch = this.text.charAt(this.index);
	      rawString += ch;
	      if (escape) {
	        if (ch === 'u') {
	          var hex = this.text.substring(this.index + 1, this.index + 5);
	          if (!hex.match(/[\da-f]{4}/i)) {
	            this.throwError('Invalid unicode escape [\\u' + hex + ']');
	          }
	          this.index += 4;
	          string += String.fromCharCode(parseInt(hex, 16));
	        } else {
	          var rep = ESCAPE[ch];
	          string = string + (rep || ch);
	        }
	        escape = false;
	      } else if (ch === '\\') {
	        escape = true;
	      } else if (ch === quote) {
	        this.index++;
	        this.tokens.push({
	          index: start,
	          text: rawString,
	          constant: true,
	          value: string
	        });
	        return;
	      } else {
	        string += ch;
	      }
	      this.index++;
	    }
	    this.throwError('Unterminated quote', start);
	  }
	};
	
	var AST = function(lexer, options) {
	  this.lexer = lexer;
	  this.options = options;
	};
	
	AST.Program = 'Program';
	AST.ExpressionStatement = 'ExpressionStatement';
	AST.AssignmentExpression = 'AssignmentExpression';
	AST.ConditionalExpression = 'ConditionalExpression';
	AST.LogicalExpression = 'LogicalExpression';
	AST.BinaryExpression = 'BinaryExpression';
	AST.UnaryExpression = 'UnaryExpression';
	AST.CallExpression = 'CallExpression';
	AST.MemberExpression = 'MemberExpression';
	AST.Identifier = 'Identifier';
	AST.Literal = 'Literal';
	AST.ArrayExpression = 'ArrayExpression';
	AST.Property = 'Property';
	AST.ObjectExpression = 'ObjectExpression';
	AST.ThisExpression = 'ThisExpression';
	AST.LocalsExpression = 'LocalsExpression';
	
	// Internal use only
	AST.NGValueParameter = 'NGValueParameter';
	
	AST.prototype = {
	  ast: function(text) {
	    this.text = text;
	    this.tokens = this.lexer.lex(text);
	
	    var value = this.program();
	
	    if (this.tokens.length !== 0) {
	      this.throwError('is an unexpected token', this.tokens[0]);
	    }
	
	    return value;
	  },
	
	  program: function() {
	    var body = [];
	    while (true) {
	      if (this.tokens.length > 0 && !this.peek('}', ')', ';', ']'))
	        body.push(this.expressionStatement());
	      if (!this.expect(';')) {
	        return { type: AST.Program, body: body};
	      }
	    }
	  },
	
	  expressionStatement: function() {
	    return { type: AST.ExpressionStatement, expression: this.filterChain() };
	  },
	
	  filterChain: function() {
	    var left = this.expression();
	    var token;
	    while ((token = this.expect('|'))) {
	      left = this.filter(left);
	    }
	    return left;
	  },
	
	  expression: function() {
	    return this.assignment();
	  },
	
	  assignment: function() {
	    var result = this.ternary();
	    if (this.expect('=')) {
	      result = { type: AST.AssignmentExpression, left: result, right: this.assignment(), operator: '='};
	    }
	    return result;
	  },
	
	  ternary: function() {
	    var test = this.logicalOR();
	    var alternate;
	    var consequent;
	    if (this.expect('?')) {
	      alternate = this.expression();
	      if (this.consume(':')) {
	        consequent = this.expression();
	        return { type: AST.ConditionalExpression, test: test, alternate: alternate, consequent: consequent};
	      }
	    }
	    return test;
	  },
	
	  logicalOR: function() {
	    var left = this.logicalAND();
	    while (this.expect('||')) {
	      left = { type: AST.LogicalExpression, operator: '||', left: left, right: this.logicalAND() };
	    }
	    return left;
	  },
	
	  logicalAND: function() {
	    var left = this.equality();
	    while (this.expect('&&')) {
	      left = { type: AST.LogicalExpression, operator: '&&', left: left, right: this.equality()};
	    }
	    return left;
	  },
	
	  equality: function() {
	    var left = this.relational();
	    var token;
	    while ((token = this.expect('==','!=','===','!=='))) {
	      left = { type: AST.BinaryExpression, operator: token.text, left: left, right: this.relational() };
	    }
	    return left;
	  },
	
	  relational: function() {
	    var left = this.additive();
	    var token;
	    while ((token = this.expect('<', '>', '<=', '>='))) {
	      left = { type: AST.BinaryExpression, operator: token.text, left: left, right: this.additive() };
	    }
	    return left;
	  },
	
	  additive: function() {
	    var left = this.multiplicative();
	    var token;
	    while ((token = this.expect('+','-'))) {
	      left = { type: AST.BinaryExpression, operator: token.text, left: left, right: this.multiplicative() };
	    }
	    return left;
	  },
	
	  multiplicative: function() {
	    var left = this.unary();
	    var token;
	    while ((token = this.expect('*','/','%'))) {
	      left = { type: AST.BinaryExpression, operator: token.text, left: left, right: this.unary() };
	    }
	    return left;
	  },
	
	  unary: function() {
	    var token;
	    if ((token = this.expect('+', '-', '!'))) {
	      return { type: AST.UnaryExpression, operator: token.text, prefix: true, argument: this.unary() };
	    } else {
	      return this.primary();
	    }
	  },
	
	  primary: function() {
	    var primary;
	    if (this.expect('(')) {
	      primary = this.filterChain();
	      this.consume(')');
	    } else if (this.expect('[')) {
	      primary = this.arrayDeclaration();
	    } else if (this.expect('{')) {
	      primary = this.object();
	    } else if (this.selfReferential.hasOwnProperty(this.peek().text)) {
	      primary = copy(this.selfReferential[this.consume().text]);
	    } else if (this.options.literals.hasOwnProperty(this.peek().text)) {
	      primary = { type: AST.Literal, value: this.options.literals[this.consume().text]};
	    } else if (this.peek().identifier) {
	      primary = this.identifier();
	    } else if (this.peek().constant) {
	      primary = this.constant();
	    } else {
	      this.throwError('not a primary expression', this.peek());
	    }
	
	    var next;
	    while ((next = this.expect('(', '[', '.'))) {
	      if (next.text === '(') {
	        primary = {type: AST.CallExpression, callee: primary, arguments: this.parseArguments() };
	        this.consume(')');
	      } else if (next.text === '[') {
	        primary = { type: AST.MemberExpression, object: primary, property: this.expression(), computed: true };
	        this.consume(']');
	      } else if (next.text === '.') {
	        primary = { type: AST.MemberExpression, object: primary, property: this.identifier(), computed: false };
	      } else {
	        this.throwError('IMPOSSIBLE');
	      }
	    }
	    return primary;
	  },
	
	  filter: function(baseExpression) {
	    var args = [baseExpression];
	    var result = {type: AST.CallExpression, callee: this.identifier(), arguments: args, filter: true};
	
	    while (this.expect(':')) {
	      args.push(this.expression());
	    }
	
	    return result;
	  },
	
	  parseArguments: function() {
	    var args = [];
	    if (this.peekToken().text !== ')') {
	      do {
	        args.push(this.expression());
	      } while (this.expect(','));
	    }
	    return args;
	  },
	
	  identifier: function() {
	    var token = this.consume();
	    if (!token.identifier) {
	      this.throwError('is not a valid identifier', token);
	    }
	    return { type: AST.Identifier, name: token.text };
	  },
	
	  constant: function() {
	    // TODO check that it is a constant
	    return { type: AST.Literal, value: this.consume().value };
	  },
	
	  arrayDeclaration: function() {
	    var elements = [];
	    if (this.peekToken().text !== ']') {
	      do {
	        if (this.peek(']')) {
	          // Support trailing commas per ES5.1.
	          break;
	        }
	        elements.push(this.expression());
	      } while (this.expect(','));
	    }
	    this.consume(']');
	
	    return { type: AST.ArrayExpression, elements: elements };
	  },
	
	  object: function() {
	    var properties = [], property;
	    if (this.peekToken().text !== '}') {
	      do {
	        if (this.peek('}')) {
	          // Support trailing commas per ES5.1.
	          break;
	        }
	        property = {type: AST.Property, kind: 'init'};
	        if (this.peek().constant) {
	          property.key = this.constant();
	        } else if (this.peek().identifier) {
	          property.key = this.identifier();
	        } else {
	          this.throwError("invalid key", this.peek());
	        }
	        this.consume(':');
	        property.value = this.expression();
	        properties.push(property);
	      } while (this.expect(','));
	    }
	    this.consume('}');
	
	    return {type: AST.ObjectExpression, properties: properties };
	  },
	
	  throwError: function(msg, token) {
	    throw $parseMinErr('syntax',
	        'Syntax Error: Token \'{0}\' {1} at column {2} of the expression [{3}] starting at [{4}].',
	          token.text, msg, (token.index + 1), this.text, this.text.substring(token.index));
	  },
	
	  consume: function(e1) {
	    if (this.tokens.length === 0) {
	      throw $parseMinErr('ueoe', 'Unexpected end of expression: {0}', this.text);
	    }
	
	    var token = this.expect(e1);
	    if (!token) {
	      this.throwError('is unexpected, expecting [' + e1 + ']', this.peek());
	    }
	    return token;
	  },
	
	  peekToken: function() {
	    if (this.tokens.length === 0) {
	      throw $parseMinErr('ueoe', 'Unexpected end of expression: {0}', this.text);
	    }
	    return this.tokens[0];
	  },
	
	  peek: function(e1, e2, e3, e4) {
	    return this.peekAhead(0, e1, e2, e3, e4);
	  },
	
	  peekAhead: function(i, e1, e2, e3, e4) {
	    if (this.tokens.length > i) {
	      var token = this.tokens[i];
	      var t = token.text;
	      if (t === e1 || t === e2 || t === e3 || t === e4 ||
	          (!e1 && !e2 && !e3 && !e4)) {
	        return token;
	      }
	    }
	    return false;
	  },
	
	  expect: function(e1, e2, e3, e4) {
	    var token = this.peek(e1, e2, e3, e4);
	    if (token) {
	      this.tokens.shift();
	      return token;
	    }
	    return false;
	  },
	
	  selfReferential: {
	    'this': {type: AST.ThisExpression },
	    '$locals': {type: AST.LocalsExpression }
	  }
	};
	
	function ifDefined(v, d) {
	  return typeof v !== 'undefined' ? v : d;
	}
	
	function plusFn(l, r) {
	  if (typeof l === 'undefined') return r;
	  if (typeof r === 'undefined') return l;
	  return l + r;
	}
	
	function isStateless($filter, filterName) {
	  var fn = $filter(filterName);
	  return !fn.$stateful;
	}
	
	function findConstantAndWatchExpressions(ast, $filter) {
	  var allConstants;
	  var argsToWatch;
	  switch (ast.type) {
	  case AST.Program:
	    allConstants = true;
	    forEach(ast.body, function(expr) {
	      findConstantAndWatchExpressions(expr.expression, $filter);
	      allConstants = allConstants && expr.expression.constant;
	    });
	    ast.constant = allConstants;
	    break;
	  case AST.Literal:
	    ast.constant = true;
	    ast.toWatch = [];
	    break;
	  case AST.UnaryExpression:
	    findConstantAndWatchExpressions(ast.argument, $filter);
	    ast.constant = ast.argument.constant;
	    ast.toWatch = ast.argument.toWatch;
	    break;
	  case AST.BinaryExpression:
	    findConstantAndWatchExpressions(ast.left, $filter);
	    findConstantAndWatchExpressions(ast.right, $filter);
	    ast.constant = ast.left.constant && ast.right.constant;
	    ast.toWatch = ast.left.toWatch.concat(ast.right.toWatch);
	    break;
	  case AST.LogicalExpression:
	    findConstantAndWatchExpressions(ast.left, $filter);
	    findConstantAndWatchExpressions(ast.right, $filter);
	    ast.constant = ast.left.constant && ast.right.constant;
	    ast.toWatch = ast.constant ? [] : [ast];
	    break;
	  case AST.ConditionalExpression:
	    findConstantAndWatchExpressions(ast.test, $filter);
	    findConstantAndWatchExpressions(ast.alternate, $filter);
	    findConstantAndWatchExpressions(ast.consequent, $filter);
	    ast.constant = ast.test.constant && ast.alternate.constant && ast.consequent.constant;
	    ast.toWatch = ast.constant ? [] : [ast];
	    break;
	  case AST.Identifier:
	    ast.constant = false;
	    ast.toWatch = [ast];
	    break;
	  case AST.MemberExpression:
	    findConstantAndWatchExpressions(ast.object, $filter);
	    if (ast.computed) {
	      findConstantAndWatchExpressions(ast.property, $filter);
	    }
	    ast.constant = ast.object.constant && (!ast.computed || ast.property.constant);
	    ast.toWatch = [ast];
	    break;
	  case AST.CallExpression:
	    allConstants = ast.filter ? isStateless($filter, ast.callee.name) : false;
	    argsToWatch = [];
	    forEach(ast.arguments, function(expr) {
	      findConstantAndWatchExpressions(expr, $filter);
	      allConstants = allConstants && expr.constant;
	      if (!expr.constant) {
	        argsToWatch.push.apply(argsToWatch, expr.toWatch);
	      }
	    });
	    ast.constant = allConstants;
	    ast.toWatch = ast.filter && isStateless($filter, ast.callee.name) ? argsToWatch : [ast];
	    break;
	  case AST.AssignmentExpression:
	    findConstantAndWatchExpressions(ast.left, $filter);
	    findConstantAndWatchExpressions(ast.right, $filter);
	    ast.constant = ast.left.constant && ast.right.constant;
	    ast.toWatch = [ast];
	    break;
	  case AST.ArrayExpression:
	    allConstants = true;
	    argsToWatch = [];
	    forEach(ast.elements, function(expr) {
	      findConstantAndWatchExpressions(expr, $filter);
	      allConstants = allConstants && expr.constant;
	      if (!expr.constant) {
	        argsToWatch.push.apply(argsToWatch, expr.toWatch);
	      }
	    });
	    ast.constant = allConstants;
	    ast.toWatch = argsToWatch;
	    break;
	  case AST.ObjectExpression:
	    allConstants = true;
	    argsToWatch = [];
	    forEach(ast.properties, function(property) {
	      findConstantAndWatchExpressions(property.value, $filter);
	      allConstants = allConstants && property.value.constant;
	      if (!property.value.constant) {
	        argsToWatch.push.apply(argsToWatch, property.value.toWatch);
	      }
	    });
	    ast.constant = allConstants;
	    ast.toWatch = argsToWatch;
	    break;
	  case AST.ThisExpression:
	    ast.constant = false;
	    ast.toWatch = [];
	    break;
	  case AST.LocalsExpression:
	    ast.constant = false;
	    ast.toWatch = [];
	    break;
	  }
	}
	
	function getInputs(body) {
	  if (body.length != 1) return;
	  var lastExpression = body[0].expression;
	  var candidate = lastExpression.toWatch;
	  if (candidate.length !== 1) return candidate;
	  return candidate[0] !== lastExpression ? candidate : undefined;
	}
	
	function isAssignable(ast) {
	  return ast.type === AST.Identifier || ast.type === AST.MemberExpression;
	}
	
	function assignableAST(ast) {
	  if (ast.body.length === 1 && isAssignable(ast.body[0].expression)) {
	    return {type: AST.AssignmentExpression, left: ast.body[0].expression, right: {type: AST.NGValueParameter}, operator: '='};
	  }
	}
	
	function isLiteral(ast) {
	  return ast.body.length === 0 ||
	      ast.body.length === 1 && (
	      ast.body[0].expression.type === AST.Literal ||
	      ast.body[0].expression.type === AST.ArrayExpression ||
	      ast.body[0].expression.type === AST.ObjectExpression);
	}
	
	function isConstant(ast) {
	  return ast.constant;
	}
	
	function ASTCompiler(astBuilder, $filter) {
	  this.astBuilder = astBuilder;
	  this.$filter = $filter;
	}
	
	ASTCompiler.prototype = {
	  compile: function(expression, expensiveChecks) {
	    var self = this;
	    var ast = this.astBuilder.ast(expression);
	    this.state = {
	      nextId: 0,
	      filters: {},
	      expensiveChecks: expensiveChecks,
	      fn: {vars: [], body: [], own: {}},
	      assign: {vars: [], body: [], own: {}},
	      inputs: []
	    };
	    findConstantAndWatchExpressions(ast, self.$filter);
	    var extra = '';
	    var assignable;
	    this.stage = 'assign';
	    if ((assignable = assignableAST(ast))) {
	      this.state.computing = 'assign';
	      var result = this.nextId();
	      this.recurse(assignable, result);
	      this.return_(result);
	      extra = 'fn.assign=' + this.generateFunction('assign', 's,v,l');
	    }
	    var toWatch = getInputs(ast.body);
	    self.stage = 'inputs';
	    forEach(toWatch, function(watch, key) {
	      var fnKey = 'fn' + key;
	      self.state[fnKey] = {vars: [], body: [], own: {}};
	      self.state.computing = fnKey;
	      var intoId = self.nextId();
	      self.recurse(watch, intoId);
	      self.return_(intoId);
	      self.state.inputs.push(fnKey);
	      watch.watchId = key;
	    });
	    this.state.computing = 'fn';
	    this.stage = 'main';
	    this.recurse(ast);
	    var fnString =
	      // The build and minification steps remove the string "use strict" from the code, but this is done using a regex.
	      // This is a workaround for this until we do a better job at only removing the prefix only when we should.
	      '"' + this.USE + ' ' + this.STRICT + '";\n' +
	      this.filterPrefix() +
	      'var fn=' + this.generateFunction('fn', 's,l,a,i') +
	      extra +
	      this.watchFns() +
	      'return fn;';
	
	    /* jshint -W054 */
	    var fn = (new Function('$filter',
	        'ensureSafeMemberName',
	        'ensureSafeObject',
	        'ensureSafeFunction',
	        'getStringValue',
	        'ensureSafeAssignContext',
	        'ifDefined',
	        'plus',
	        'text',
	        fnString))(
	          this.$filter,
	          ensureSafeMemberName,
	          ensureSafeObject,
	          ensureSafeFunction,
	          getStringValue,
	          ensureSafeAssignContext,
	          ifDefined,
	          plusFn,
	          expression);
	    /* jshint +W054 */
	    this.state = this.stage = undefined;
	    fn.literal = isLiteral(ast);
	    fn.constant = isConstant(ast);
	    return fn;
	  },
	
	  USE: 'use',
	
	  STRICT: 'strict',
	
	  watchFns: function() {
	    var result = [];
	    var fns = this.state.inputs;
	    var self = this;
	    forEach(fns, function(name) {
	      result.push('var ' + name + '=' + self.generateFunction(name, 's'));
	    });
	    if (fns.length) {
	      result.push('fn.inputs=[' + fns.join(',') + '];');
	    }
	    return result.join('');
	  },
	
	  generateFunction: function(name, params) {
	    return 'function(' + params + '){' +
	        this.varsPrefix(name) +
	        this.body(name) +
	        '};';
	  },
	
	  filterPrefix: function() {
	    var parts = [];
	    var self = this;
	    forEach(this.state.filters, function(id, filter) {
	      parts.push(id + '=$filter(' + self.escape(filter) + ')');
	    });
	    if (parts.length) return 'var ' + parts.join(',') + ';';
	    return '';
	  },
	
	  varsPrefix: function(section) {
	    return this.state[section].vars.length ? 'var ' + this.state[section].vars.join(',') + ';' : '';
	  },
	
	  body: function(section) {
	    return this.state[section].body.join('');
	  },
	
	  recurse: function(ast, intoId, nameId, recursionFn, create, skipWatchIdCheck) {
	    var left, right, self = this, args, expression;
	    recursionFn = recursionFn || noop;
	    if (!skipWatchIdCheck && isDefined(ast.watchId)) {
	      intoId = intoId || this.nextId();
	      this.if_('i',
	        this.lazyAssign(intoId, this.computedMember('i', ast.watchId)),
	        this.lazyRecurse(ast, intoId, nameId, recursionFn, create, true)
	      );
	      return;
	    }
	    switch (ast.type) {
	    case AST.Program:
	      forEach(ast.body, function(expression, pos) {
	        self.recurse(expression.expression, undefined, undefined, function(expr) { right = expr; });
	        if (pos !== ast.body.length - 1) {
	          self.current().body.push(right, ';');
	        } else {
	          self.return_(right);
	        }
	      });
	      break;
	    case AST.Literal:
	      expression = this.escape(ast.value);
	      this.assign(intoId, expression);
	      recursionFn(expression);
	      break;
	    case AST.UnaryExpression:
	      this.recurse(ast.argument, undefined, undefined, function(expr) { right = expr; });
	      expression = ast.operator + '(' + this.ifDefined(right, 0) + ')';
	      this.assign(intoId, expression);
	      recursionFn(expression);
	      break;
	    case AST.BinaryExpression:
	      this.recurse(ast.left, undefined, undefined, function(expr) { left = expr; });
	      this.recurse(ast.right, undefined, undefined, function(expr) { right = expr; });
	      if (ast.operator === '+') {
	        expression = this.plus(left, right);
	      } else if (ast.operator === '-') {
	        expression = this.ifDefined(left, 0) + ast.operator + this.ifDefined(right, 0);
	      } else {
	        expression = '(' + left + ')' + ast.operator + '(' + right + ')';
	      }
	      this.assign(intoId, expression);
	      recursionFn(expression);
	      break;
	    case AST.LogicalExpression:
	      intoId = intoId || this.nextId();
	      self.recurse(ast.left, intoId);
	      self.if_(ast.operator === '&&' ? intoId : self.not(intoId), self.lazyRecurse(ast.right, intoId));
	      recursionFn(intoId);
	      break;
	    case AST.ConditionalExpression:
	      intoId = intoId || this.nextId();
	      self.recurse(ast.test, intoId);
	      self.if_(intoId, self.lazyRecurse(ast.alternate, intoId), self.lazyRecurse(ast.consequent, intoId));
	      recursionFn(intoId);
	      break;
	    case AST.Identifier:
	      intoId = intoId || this.nextId();
	      if (nameId) {
	        nameId.context = self.stage === 'inputs' ? 's' : this.assign(this.nextId(), this.getHasOwnProperty('l', ast.name) + '?l:s');
	        nameId.computed = false;
	        nameId.name = ast.name;
	      }
	      ensureSafeMemberName(ast.name);
	      self.if_(self.stage === 'inputs' || self.not(self.getHasOwnProperty('l', ast.name)),
	        function() {
	          self.if_(self.stage === 'inputs' || 's', function() {
	            if (create && create !== 1) {
	              self.if_(
	                self.not(self.nonComputedMember('s', ast.name)),
	                self.lazyAssign(self.nonComputedMember('s', ast.name), '{}'));
	            }
	            self.assign(intoId, self.nonComputedMember('s', ast.name));
	          });
	        }, intoId && self.lazyAssign(intoId, self.nonComputedMember('l', ast.name))
	        );
	      if (self.state.expensiveChecks || isPossiblyDangerousMemberName(ast.name)) {
	        self.addEnsureSafeObject(intoId);
	      }
	      recursionFn(intoId);
	      break;
	    case AST.MemberExpression:
	      left = nameId && (nameId.context = this.nextId()) || this.nextId();
	      intoId = intoId || this.nextId();
	      self.recurse(ast.object, left, undefined, function() {
	        self.if_(self.notNull(left), function() {
	          if (create && create !== 1) {
	            self.addEnsureSafeAssignContext(left);
	          }
	          if (ast.computed) {
	            right = self.nextId();
	            self.recurse(ast.property, right);
	            self.getStringValue(right);
	            self.addEnsureSafeMemberName(right);
	            if (create && create !== 1) {
	              self.if_(self.not(self.computedMember(left, right)), self.lazyAssign(self.computedMember(left, right), '{}'));
	            }
	            expression = self.ensureSafeObject(self.computedMember(left, right));
	            self.assign(intoId, expression);
	            if (nameId) {
	              nameId.computed = true;
	              nameId.name = right;
	            }
	          } else {
	            ensureSafeMemberName(ast.property.name);
	            if (create && create !== 1) {
	              self.if_(self.not(self.nonComputedMember(left, ast.property.name)), self.lazyAssign(self.nonComputedMember(left, ast.property.name), '{}'));
	            }
	            expression = self.nonComputedMember(left, ast.property.name);
	            if (self.state.expensiveChecks || isPossiblyDangerousMemberName(ast.property.name)) {
	              expression = self.ensureSafeObject(expression);
	            }
	            self.assign(intoId, expression);
	            if (nameId) {
	              nameId.computed = false;
	              nameId.name = ast.property.name;
	            }
	          }
	        }, function() {
	          self.assign(intoId, 'undefined');
	        });
	        recursionFn(intoId);
	      }, !!create);
	      break;
	    case AST.CallExpression:
	      intoId = intoId || this.nextId();
	      if (ast.filter) {
	        right = self.filter(ast.callee.name);
	        args = [];
	        forEach(ast.arguments, function(expr) {
	          var argument = self.nextId();
	          self.recurse(expr, argument);
	          args.push(argument);
	        });
	        expression = right + '(' + args.join(',') + ')';
	        self.assign(intoId, expression);
	        recursionFn(intoId);
	      } else {
	        right = self.nextId();
	        left = {};
	        args = [];
	        self.recurse(ast.callee, right, left, function() {
	          self.if_(self.notNull(right), function() {
	            self.addEnsureSafeFunction(right);
	            forEach(ast.arguments, function(expr) {
	              self.recurse(expr, self.nextId(), undefined, function(argument) {
	                args.push(self.ensureSafeObject(argument));
	              });
	            });
	            if (left.name) {
	              if (!self.state.expensiveChecks) {
	                self.addEnsureSafeObject(left.context);
	              }
	              expression = self.member(left.context, left.name, left.computed) + '(' + args.join(',') + ')';
	            } else {
	              expression = right + '(' + args.join(',') + ')';
	            }
	            expression = self.ensureSafeObject(expression);
	            self.assign(intoId, expression);
	          }, function() {
	            self.assign(intoId, 'undefined');
	          });
	          recursionFn(intoId);
	        });
	      }
	      break;
	    case AST.AssignmentExpression:
	      right = this.nextId();
	      left = {};
	      if (!isAssignable(ast.left)) {
	        throw $parseMinErr('lval', 'Trying to assign a value to a non l-value');
	      }
	      this.recurse(ast.left, undefined, left, function() {
	        self.if_(self.notNull(left.context), function() {
	          self.recurse(ast.right, right);
	          self.addEnsureSafeObject(self.member(left.context, left.name, left.computed));
	          self.addEnsureSafeAssignContext(left.context);
	          expression = self.member(left.context, left.name, left.computed) + ast.operator + right;
	          self.assign(intoId, expression);
	          recursionFn(intoId || expression);
	        });
	      }, 1);
	      break;
	    case AST.ArrayExpression:
	      args = [];
	      forEach(ast.elements, function(expr) {
	        self.recurse(expr, self.nextId(), undefined, function(argument) {
	          args.push(argument);
	        });
	      });
	      expression = '[' + args.join(',') + ']';
	      this.assign(intoId, expression);
	      recursionFn(expression);
	      break;
	    case AST.ObjectExpression:
	      args = [];
	      forEach(ast.properties, function(property) {
	        self.recurse(property.value, self.nextId(), undefined, function(expr) {
	          args.push(self.escape(
	              property.key.type === AST.Identifier ? property.key.name :
	                ('' + property.key.value)) +
	              ':' + expr);
	        });
	      });
	      expression = '{' + args.join(',') + '}';
	      this.assign(intoId, expression);
	      recursionFn(expression);
	      break;
	    case AST.ThisExpression:
	      this.assign(intoId, 's');
	      recursionFn('s');
	      break;
	    case AST.LocalsExpression:
	      this.assign(intoId, 'l');
	      recursionFn('l');
	      break;
	    case AST.NGValueParameter:
	      this.assign(intoId, 'v');
	      recursionFn('v');
	      break;
	    }
	  },
	
	  getHasOwnProperty: function(element, property) {
	    var key = element + '.' + property;
	    var own = this.current().own;
	    if (!own.hasOwnProperty(key)) {
	      own[key] = this.nextId(false, element + '&&(' + this.escape(property) + ' in ' + element + ')');
	    }
	    return own[key];
	  },
	
	  assign: function(id, value) {
	    if (!id) return;
	    this.current().body.push(id, '=', value, ';');
	    return id;
	  },
	
	  filter: function(filterName) {
	    if (!this.state.filters.hasOwnProperty(filterName)) {
	      this.state.filters[filterName] = this.nextId(true);
	    }
	    return this.state.filters[filterName];
	  },
	
	  ifDefined: function(id, defaultValue) {
	    return 'ifDefined(' + id + ',' + this.escape(defaultValue) + ')';
	  },
	
	  plus: function(left, right) {
	    return 'plus(' + left + ',' + right + ')';
	  },
	
	  return_: function(id) {
	    this.current().body.push('return ', id, ';');
	  },
	
	  if_: function(test, alternate, consequent) {
	    if (test === true) {
	      alternate();
	    } else {
	      var body = this.current().body;
	      body.push('if(', test, '){');
	      alternate();
	      body.push('}');
	      if (consequent) {
	        body.push('else{');
	        consequent();
	        body.push('}');
	      }
	    }
	  },
	
	  not: function(expression) {
	    return '!(' + expression + ')';
	  },
	
	  notNull: function(expression) {
	    return expression + '!=null';
	  },
	
	  nonComputedMember: function(left, right) {
	    var SAFE_IDENTIFIER = /[$_a-zA-Z][$_a-zA-Z0-9]*/;
	    var UNSAFE_CHARACTERS = /[^$_a-zA-Z0-9]/g;
	    if (SAFE_IDENTIFIER.test(right)) {
	      return left + '.' + right;
	    } else {
	      return left  + '["' + right.replace(UNSAFE_CHARACTERS, this.stringEscapeFn) + '"]';
	    }
	  },
	
	  computedMember: function(left, right) {
	    return left + '[' + right + ']';
	  },
	
	  member: function(left, right, computed) {
	    if (computed) return this.computedMember(left, right);
	    return this.nonComputedMember(left, right);
	  },
	
	  addEnsureSafeObject: function(item) {
	    this.current().body.push(this.ensureSafeObject(item), ';');
	  },
	
	  addEnsureSafeMemberName: function(item) {
	    this.current().body.push(this.ensureSafeMemberName(item), ';');
	  },
	
	  addEnsureSafeFunction: function(item) {
	    this.current().body.push(this.ensureSafeFunction(item), ';');
	  },
	
	  addEnsureSafeAssignContext: function(item) {
	    this.current().body.push(this.ensureSafeAssignContext(item), ';');
	  },
	
	  ensureSafeObject: function(item) {
	    return 'ensureSafeObject(' + item + ',text)';
	  },
	
	  ensureSafeMemberName: function(item) {
	    return 'ensureSafeMemberName(' + item + ',text)';
	  },
	
	  ensureSafeFunction: function(item) {
	    return 'ensureSafeFunction(' + item + ',text)';
	  },
	
	  getStringValue: function(item) {
	    this.assign(item, 'getStringValue(' + item + ')');
	  },
	
	  ensureSafeAssignContext: function(item) {
	    return 'ensureSafeAssignContext(' + item + ',text)';
	  },
	
	  lazyRecurse: function(ast, intoId, nameId, recursionFn, create, skipWatchIdCheck) {
	    var self = this;
	    return function() {
	      self.recurse(ast, intoId, nameId, recursionFn, create, skipWatchIdCheck);
	    };
	  },
	
	  lazyAssign: function(id, value) {
	    var self = this;
	    return function() {
	      self.assign(id, value);
	    };
	  },
	
	  stringEscapeRegex: /[^ a-zA-Z0-9]/g,
	
	  stringEscapeFn: function(c) {
	    return '\\u' + ('0000' + c.charCodeAt(0).toString(16)).slice(-4);
	  },
	
	  escape: function(value) {
	    if (isString(value)) return "'" + value.replace(this.stringEscapeRegex, this.stringEscapeFn) + "'";
	    if (isNumber(value)) return value.toString();
	    if (value === true) return 'true';
	    if (value === false) return 'false';
	    if (value === null) return 'null';
	    if (typeof value === 'undefined') return 'undefined';
	
	    throw $parseMinErr('esc', 'IMPOSSIBLE');
	  },
	
	  nextId: function(skip, init) {
	    var id = 'v' + (this.state.nextId++);
	    if (!skip) {
	      this.current().vars.push(id + (init ? '=' + init : ''));
	    }
	    return id;
	  },
	
	  current: function() {
	    return this.state[this.state.computing];
	  }
	};
	
	
	function ASTInterpreter(astBuilder, $filter) {
	  this.astBuilder = astBuilder;
	  this.$filter = $filter;
	}
	
	ASTInterpreter.prototype = {
	  compile: function(expression, expensiveChecks) {
	    var self = this;
	    var ast = this.astBuilder.ast(expression);
	    this.expression = expression;
	    this.expensiveChecks = expensiveChecks;
	    findConstantAndWatchExpressions(ast, self.$filter);
	    var assignable;
	    var assign;
	    if ((assignable = assignableAST(ast))) {
	      assign = this.recurse(assignable);
	    }
	    var toWatch = getInputs(ast.body);
	    var inputs;
	    if (toWatch) {
	      inputs = [];
	      forEach(toWatch, function(watch, key) {
	        var input = self.recurse(watch);
	        watch.input = input;
	        inputs.push(input);
	        watch.watchId = key;
	      });
	    }
	    var expressions = [];
	    forEach(ast.body, function(expression) {
	      expressions.push(self.recurse(expression.expression));
	    });
	    var fn = ast.body.length === 0 ? noop :
	             ast.body.length === 1 ? expressions[0] :
	             function(scope, locals) {
	               var lastValue;
	               forEach(expressions, function(exp) {
	                 lastValue = exp(scope, locals);
	               });
	               return lastValue;
	             };
	    if (assign) {
	      fn.assign = function(scope, value, locals) {
	        return assign(scope, locals, value);
	      };
	    }
	    if (inputs) {
	      fn.inputs = inputs;
	    }
	    fn.literal = isLiteral(ast);
	    fn.constant = isConstant(ast);
	    return fn;
	  },
	
	  recurse: function(ast, context, create) {
	    var left, right, self = this, args, expression;
	    if (ast.input) {
	      return this.inputs(ast.input, ast.watchId);
	    }
	    switch (ast.type) {
	    case AST.Literal:
	      return this.value(ast.value, context);
	    case AST.UnaryExpression:
	      right = this.recurse(ast.argument);
	      return this['unary' + ast.operator](right, context);
	    case AST.BinaryExpression:
	      left = this.recurse(ast.left);
	      right = this.recurse(ast.right);
	      return this['binary' + ast.operator](left, right, context);
	    case AST.LogicalExpression:
	      left = this.recurse(ast.left);
	      right = this.recurse(ast.right);
	      return this['binary' + ast.operator](left, right, context);
	    case AST.ConditionalExpression:
	      return this['ternary?:'](
	        this.recurse(ast.test),
	        this.recurse(ast.alternate),
	        this.recurse(ast.consequent),
	        context
	      );
	    case AST.Identifier:
	      ensureSafeMemberName(ast.name, self.expression);
	      return self.identifier(ast.name,
	                             self.expensiveChecks || isPossiblyDangerousMemberName(ast.name),
	                             context, create, self.expression);
	    case AST.MemberExpression:
	      left = this.recurse(ast.object, false, !!create);
	      if (!ast.computed) {
	        ensureSafeMemberName(ast.property.name, self.expression);
	        right = ast.property.name;
	      }
	      if (ast.computed) right = this.recurse(ast.property);
	      return ast.computed ?
	        this.computedMember(left, right, context, create, self.expression) :
	        this.nonComputedMember(left, right, self.expensiveChecks, context, create, self.expression);
	    case AST.CallExpression:
	      args = [];
	      forEach(ast.arguments, function(expr) {
	        args.push(self.recurse(expr));
	      });
	      if (ast.filter) right = this.$filter(ast.callee.name);
	      if (!ast.filter) right = this.recurse(ast.callee, true);
	      return ast.filter ?
	        function(scope, locals, assign, inputs) {
	          var values = [];
	          for (var i = 0; i < args.length; ++i) {
	            values.push(args[i](scope, locals, assign, inputs));
	          }
	          var value = right.apply(undefined, values, inputs);
	          return context ? {context: undefined, name: undefined, value: value} : value;
	        } :
	        function(scope, locals, assign, inputs) {
	          var rhs = right(scope, locals, assign, inputs);
	          var value;
	          if (rhs.value != null) {
	            ensureSafeObject(rhs.context, self.expression);
	            ensureSafeFunction(rhs.value, self.expression);
	            var values = [];
	            for (var i = 0; i < args.length; ++i) {
	              values.push(ensureSafeObject(args[i](scope, locals, assign, inputs), self.expression));
	            }
	            value = ensureSafeObject(rhs.value.apply(rhs.context, values), self.expression);
	          }
	          return context ? {value: value} : value;
	        };
	    case AST.AssignmentExpression:
	      left = this.recurse(ast.left, true, 1);
	      right = this.recurse(ast.right);
	      return function(scope, locals, assign, inputs) {
	        var lhs = left(scope, locals, assign, inputs);
	        var rhs = right(scope, locals, assign, inputs);
	        ensureSafeObject(lhs.value, self.expression);
	        ensureSafeAssignContext(lhs.context);
	        lhs.context[lhs.name] = rhs;
	        return context ? {value: rhs} : rhs;
	      };
	    case AST.ArrayExpression:
	      args = [];
	      forEach(ast.elements, function(expr) {
	        args.push(self.recurse(expr));
	      });
	      return function(scope, locals, assign, inputs) {
	        var value = [];
	        for (var i = 0; i < args.length; ++i) {
	          value.push(args[i](scope, locals, assign, inputs));
	        }
	        return context ? {value: value} : value;
	      };
	    case AST.ObjectExpression:
	      args = [];
	      forEach(ast.properties, function(property) {
	        args.push({key: property.key.type === AST.Identifier ?
	                        property.key.name :
	                        ('' + property.key.value),
	                   value: self.recurse(property.value)
	        });
	      });
	      return function(scope, locals, assign, inputs) {
	        var value = {};
	        for (var i = 0; i < args.length; ++i) {
	          value[args[i].key] = args[i].value(scope, locals, assign, inputs);
	        }
	        return context ? {value: value} : value;
	      };
	    case AST.ThisExpression:
	      return function(scope) {
	        return context ? {value: scope} : scope;
	      };
	    case AST.LocalsExpression:
	      return function(scope, locals) {
	        return context ? {value: locals} : locals;
	      };
	    case AST.NGValueParameter:
	      return function(scope, locals, assign) {
	        return context ? {value: assign} : assign;
	      };
	    }
	  },
	
	  'unary+': function(argument, context) {
	    return function(scope, locals, assign, inputs) {
	      var arg = argument(scope, locals, assign, inputs);
	      if (isDefined(arg)) {
	        arg = +arg;
	      } else {
	        arg = 0;
	      }
	      return context ? {value: arg} : arg;
	    };
	  },
	  'unary-': function(argument, context) {
	    return function(scope, locals, assign, inputs) {
	      var arg = argument(scope, locals, assign, inputs);
	      if (isDefined(arg)) {
	        arg = -arg;
	      } else {
	        arg = 0;
	      }
	      return context ? {value: arg} : arg;
	    };
	  },
	  'unary!': function(argument, context) {
	    return function(scope, locals, assign, inputs) {
	      var arg = !argument(scope, locals, assign, inputs);
	      return context ? {value: arg} : arg;
	    };
	  },
	  'binary+': function(left, right, context) {
	    return function(scope, locals, assign, inputs) {
	      var lhs = left(scope, locals, assign, inputs);
	      var rhs = right(scope, locals, assign, inputs);
	      var arg = plusFn(lhs, rhs);
	      return context ? {value: arg} : arg;
	    };
	  },
	  'binary-': function(left, right, context) {
	    return function(scope, locals, assign, inputs) {
	      var lhs = left(scope, locals, assign, inputs);
	      var rhs = right(scope, locals, assign, inputs);
	      var arg = (isDefined(lhs) ? lhs : 0) - (isDefined(rhs) ? rhs : 0);
	      return context ? {value: arg} : arg;
	    };
	  },
	  'binary*': function(left, right, context) {
	    return function(scope, locals, assign, inputs) {
	      var arg = left(scope, locals, assign, inputs) * right(scope, locals, assign, inputs);
	      return context ? {value: arg} : arg;
	    };
	  },
	  'binary/': function(left, right, context) {
	    return function(scope, locals, assign, inputs) {
	      var arg = left(scope, locals, assign, inputs) / right(scope, locals, assign, inputs);
	      return context ? {value: arg} : arg;
	    };
	  },
	  'binary%': function(left, right, context) {
	    return function(scope, locals, assign, inputs) {
	      var arg = left(scope, locals, assign, inputs) % right(scope, locals, assign, inputs);
	      return context ? {value: arg} : arg;
	    };
	  },
	  'binary===': function(left, right, context) {
	    return function(scope, locals, assign, inputs) {
	      var arg = left(scope, locals, assign, inputs) === right(scope, locals, assign, inputs);
	      return context ? {value: arg} : arg;
	    };
	  },
	  'binary!==': function(left, right, context) {
	    return function(scope, locals, assign, inputs) {
	      var arg = left(scope, locals, assign, inputs) !== right(scope, locals, assign, inputs);
	      return context ? {value: arg} : arg;
	    };
	  },
	  'binary==': function(left, right, context) {
	    return function(scope, locals, assign, inputs) {
	      var arg = left(scope, locals, assign, inputs) == right(scope, locals, assign, inputs);
	      return context ? {value: arg} : arg;
	    };
	  },
	  'binary!=': function(left, right, context) {
	    return function(scope, locals, assign, inputs) {
	      var arg = left(scope, locals, assign, inputs) != right(scope, locals, assign, inputs);
	      return context ? {value: arg} : arg;
	    };
	  },
	  'binary<': function(left, right, context) {
	    return function(scope, locals, assign, inputs) {
	      var arg = left(scope, locals, assign, inputs) < right(scope, locals, assign, inputs);
	      return context ? {value: arg} : arg;
	    };
	  },
	  'binary>': function(left, right, context) {
	    return function(scope, locals, assign, inputs) {
	      var arg = left(scope, locals, assign, inputs) > right(scope, locals, assign, inputs);
	      return context ? {value: arg} : arg;
	    };
	  },
	  'binary<=': function(left, right, context) {
	    return function(scope, locals, assign, inputs) {
	      var arg = left(scope, locals, assign, inputs) <= right(scope, locals, assign, inputs);
	      return context ? {value: arg} : arg;
	    };
	  },
	  'binary>=': function(left, right, context) {
	    return function(scope, locals, assign, inputs) {
	      var arg = left(scope, locals, assign, inputs) >= right(scope, locals, assign, inputs);
	      return context ? {value: arg} : arg;
	    };
	  },
	  'binary&&': function(left, right, context) {
	    return function(scope, locals, assign, inputs) {
	      var arg = left(scope, locals, assign, inputs) && right(scope, locals, assign, inputs);
	      return context ? {value: arg} : arg;
	    };
	  },
	  'binary||': function(left, right, context) {
	    return function(scope, locals, assign, inputs) {
	      var arg = left(scope, locals, assign, inputs) || right(scope, locals, assign, inputs);
	      return context ? {value: arg} : arg;
	    };
	  },
	  'ternary?:': function(test, alternate, consequent, context) {
	    return function(scope, locals, assign, inputs) {
	      var arg = test(scope, locals, assign, inputs) ? alternate(scope, locals, assign, inputs) : consequent(scope, locals, assign, inputs);
	      return context ? {value: arg} : arg;
	    };
	  },
	  value: function(value, context) {
	    return function() { return context ? {context: undefined, name: undefined, value: value} : value; };
	  },
	  identifier: function(name, expensiveChecks, context, create, expression) {
	    return function(scope, locals, assign, inputs) {
	      var base = locals && (name in locals) ? locals : scope;
	      if (create && create !== 1 && base && !(base[name])) {
	        base[name] = {};
	      }
	      var value = base ? base[name] : undefined;
	      if (expensiveChecks) {
	        ensureSafeObject(value, expression);
	      }
	      if (context) {
	        return {context: base, name: name, value: value};
	      } else {
	        return value;
	      }
	    };
	  },
	  computedMember: function(left, right, context, create, expression) {
	    return function(scope, locals, assign, inputs) {
	      var lhs = left(scope, locals, assign, inputs);
	      var rhs;
	      var value;
	      if (lhs != null) {
	        rhs = right(scope, locals, assign, inputs);
	        rhs = getStringValue(rhs);
	        ensureSafeMemberName(rhs, expression);
	        if (create && create !== 1) {
	          ensureSafeAssignContext(lhs);
	          if (lhs && !(lhs[rhs])) {
	            lhs[rhs] = {};
	          }
	        }
	        value = lhs[rhs];
	        ensureSafeObject(value, expression);
	      }
	      if (context) {
	        return {context: lhs, name: rhs, value: value};
	      } else {
	        return value;
	      }
	    };
	  },
	  nonComputedMember: function(left, right, expensiveChecks, context, create, expression) {
	    return function(scope, locals, assign, inputs) {
	      var lhs = left(scope, locals, assign, inputs);
	      if (create && create !== 1) {
	        ensureSafeAssignContext(lhs);
	        if (lhs && !(lhs[right])) {
	          lhs[right] = {};
	        }
	      }
	      var value = lhs != null ? lhs[right] : undefined;
	      if (expensiveChecks || isPossiblyDangerousMemberName(right)) {
	        ensureSafeObject(value, expression);
	      }
	      if (context) {
	        return {context: lhs, name: right, value: value};
	      } else {
	        return value;
	      }
	    };
	  },
	  inputs: function(input, watchId) {
	    return function(scope, value, locals, inputs) {
	      if (inputs) return inputs[watchId];
	      return input(scope, value, locals);
	    };
	  }
	};
	
	/**
	 * @constructor
	 */
	var Parser = function(lexer, $filter, options) {
	  this.lexer = lexer;
	  this.$filter = $filter;
	  this.options = options;
	  this.ast = new AST(lexer, options);
	  this.astCompiler = options.csp ? new ASTInterpreter(this.ast, $filter) :
	                                   new ASTCompiler(this.ast, $filter);
	};
	
	Parser.prototype = {
	  constructor: Parser,
	
	  parse: function(text) {
	    return this.astCompiler.compile(text, this.options.expensiveChecks);
	  }
	};
	
	function isPossiblyDangerousMemberName(name) {
	  return name == 'constructor';
	}
	
	var objectValueOf = Object.prototype.valueOf;
	
	function getValueOf(value) {
	  return isFunction(value.valueOf) ? value.valueOf() : objectValueOf.call(value);
	}
	
	///////////////////////////////////
	
	/**
	 * @ngdoc service
	 * @name $parse
	 * @kind function
	 *
	 * @description
	 *
	 * Converts Angular {@link guide/expression expression} into a function.
	 *
	 * ```js
	 *   var getter = $parse('user.name');
	 *   var setter = getter.assign;
	 *   var context = {user:{name:'angular'}};
	 *   var locals = {user:{name:'local'}};
	 *
	 *   expect(getter(context)).toEqual('angular');
	 *   setter(context, 'newValue');
	 *   expect(context.user.name).toEqual('newValue');
	 *   expect(getter(context, locals)).toEqual('local');
	 * ```
	 *
	 *
	 * @param {string} expression String expression to compile.
	 * @returns {function(context, locals)} a function which represents the compiled expression:
	 *
	 *    * `context` – `{object}` – an object against which any expressions embedded in the strings
	 *      are evaluated against (typically a scope object).
	 *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
	 *      `context`.
	 *
	 *    The returned function also has the following properties:
	 *      * `literal` – `{boolean}` – whether the expression's top-level node is a JavaScript
	 *        literal.
	 *      * `constant` – `{boolean}` – whether the expression is made entirely of JavaScript
	 *        constant literals.
	 *      * `assign` – `{?function(context, value)}` – if the expression is assignable, this will be
	 *        set to a function to change its value on the given context.
	 *
	 */
	
	
	/**
	 * @ngdoc provider
	 * @name $parseProvider
	 *
	 * @description
	 * `$parseProvider` can be used for configuring the default behavior of the {@link ng.$parse $parse}
	 *  service.
	 */
	function $ParseProvider() {
	  var cacheDefault = createMap();
	  var cacheExpensive = createMap();
	  var literals = {
	    'true': true,
	    'false': false,
	    'null': null,
	    'undefined': undefined
	  };
	  var identStart, identContinue;
	
	  /**
	   * @ngdoc method
	   * @name $parseProvider#addLiteral
	   * @description
	   *
	   * Configure $parse service to add literal values that will be present as literal at expressions.
	   *
	   * @param {string} literalName Token for the literal value. The literal name value must be a valid literal name.
	   * @param {*} literalValue Value for this literal. All literal values must be primitives or `undefined`.
	   *
	   **/
	  this.addLiteral = function(literalName, literalValue) {
	    literals[literalName] = literalValue;
	  };
	
	 /**
	  * @ngdoc method
	  * @name $parseProvider#setIdentifierFns
	  * @description
	  *
	  * Allows defining the set of characters that are allowed in Angular expressions. The function
	  * `identifierStart` will get called to know if a given character is a valid character to be the
	  * first character for an identifier. The function `identifierContinue` will get called to know if
	  * a given character is a valid character to be a follow-up identifier character. The functions
	  * `identifierStart` and `identifierContinue` will receive as arguments the single character to be
	  * identifier and the character code point. These arguments will be `string` and `numeric`. Keep in
	  * mind that the `string` parameter can be two characters long depending on the character
	  * representation. It is expected for the function to return `true` or `false`, whether that
	  * character is allowed or not.
	  *
	  * Since this function will be called extensivelly, keep the implementation of these functions fast,
	  * as the performance of these functions have a direct impact on the expressions parsing speed.
	  *
	  * @param {function=} identifierStart The function that will decide whether the given character is
	  *   a valid identifier start character.
	  * @param {function=} identifierContinue The function that will decide whether the given character is
	  *   a valid identifier continue character.
	  */
	  this.setIdentifierFns = function(identifierStart, identifierContinue) {
	    identStart = identifierStart;
	    identContinue = identifierContinue;
	    return this;
	  };
	
	  this.$get = ['$filter', function($filter) {
	    var noUnsafeEval = csp().noUnsafeEval;
	    var $parseOptions = {
	          csp: noUnsafeEval,
	          expensiveChecks: false,
	          literals: copy(literals),
	          isIdentifierStart: isFunction(identStart) && identStart,
	          isIdentifierContinue: isFunction(identContinue) && identContinue
	        },
	        $parseOptionsExpensive = {
	          csp: noUnsafeEval,
	          expensiveChecks: true,
	          literals: copy(literals),
	          isIdentifierStart: isFunction(identStart) && identStart,
	          isIdentifierContinue: isFunction(identContinue) && identContinue
	        };
	    var runningChecksEnabled = false;
	
	    $parse.$$runningExpensiveChecks = function() {
	      return runningChecksEnabled;
	    };
	
	    return $parse;
	
	    function $parse(exp, interceptorFn, expensiveChecks) {
	      var parsedExpression, oneTime, cacheKey;
	
	      expensiveChecks = expensiveChecks || runningChecksEnabled;
	
	      switch (typeof exp) {
	        case 'string':
	          exp = exp.trim();
	          cacheKey = exp;
	
	          var cache = (expensiveChecks ? cacheExpensive : cacheDefault);
	          parsedExpression = cache[cacheKey];
	
	          if (!parsedExpression) {
	            if (exp.charAt(0) === ':' && exp.charAt(1) === ':') {
	              oneTime = true;
	              exp = exp.substring(2);
	            }
	            var parseOptions = expensiveChecks ? $parseOptionsExpensive : $parseOptions;
	            var lexer = new Lexer(parseOptions);
	            var parser = new Parser(lexer, $filter, parseOptions);
	            parsedExpression = parser.parse(exp);
	            if (parsedExpression.constant) {
	              parsedExpression.$$watchDelegate = constantWatchDelegate;
	            } else if (oneTime) {
	              parsedExpression.$$watchDelegate = parsedExpression.literal ?
	                  oneTimeLiteralWatchDelegate : oneTimeWatchDelegate;
	            } else if (parsedExpression.inputs) {
	              parsedExpression.$$watchDelegate = inputsWatchDelegate;
	            }
	            if (expensiveChecks) {
	              parsedExpression = expensiveChecksInterceptor(parsedExpression);
	            }
	            cache[cacheKey] = parsedExpression;
	          }
	          return addInterceptor(parsedExpression, interceptorFn);
	
	        case 'function':
	          return addInterceptor(exp, interceptorFn);
	
	        default:
	          return addInterceptor(noop, interceptorFn);
	      }
	    }
	
	    function expensiveChecksInterceptor(fn) {
	      if (!fn) return fn;
	      expensiveCheckFn.$$watchDelegate = fn.$$watchDelegate;
	      expensiveCheckFn.assign = expensiveChecksInterceptor(fn.assign);
	      expensiveCheckFn.constant = fn.constant;
	      expensiveCheckFn.literal = fn.literal;
	      for (var i = 0; fn.inputs && i < fn.inputs.length; ++i) {
	        fn.inputs[i] = expensiveChecksInterceptor(fn.inputs[i]);
	      }
	      expensiveCheckFn.inputs = fn.inputs;
	
	      return expensiveCheckFn;
	
	      function expensiveCheckFn(scope, locals, assign, inputs) {
	        var expensiveCheckOldValue = runningChecksEnabled;
	        runningChecksEnabled = true;
	        try {
	          return fn(scope, locals, assign, inputs);
	        } finally {
	          runningChecksEnabled = expensiveCheckOldValue;
	        }
	      }
	    }
	
	    function expressionInputDirtyCheck(newValue, oldValueOfValue) {
	
	      if (newValue == null || oldValueOfValue == null) { // null/undefined
	        return newValue === oldValueOfValue;
	      }
	
	      if (typeof newValue === 'object') {
	
	        // attempt to convert the value to a primitive type
	        // TODO(docs): add a note to docs that by implementing valueOf even objects and arrays can
	        //             be cheaply dirty-checked
	        newValue = getValueOf(newValue);
	
	        if (typeof newValue === 'object') {
	          // objects/arrays are not supported - deep-watching them would be too expensive
	          return false;
	        }
	
	        // fall-through to the primitive equality check
	      }
	
	      //Primitive or NaN
	      return newValue === oldValueOfValue || (newValue !== newValue && oldValueOfValue !== oldValueOfValue);
	    }
	
	    function inputsWatchDelegate(scope, listener, objectEquality, parsedExpression, prettyPrintExpression) {
	      var inputExpressions = parsedExpression.inputs;
	      var lastResult;
	
	      if (inputExpressions.length === 1) {
	        var oldInputValueOf = expressionInputDirtyCheck; // init to something unique so that equals check fails
	        inputExpressions = inputExpressions[0];
	        return scope.$watch(function expressionInputWatch(scope) {
	          var newInputValue = inputExpressions(scope);
	          if (!expressionInputDirtyCheck(newInputValue, oldInputValueOf)) {
	            lastResult = parsedExpression(scope, undefined, undefined, [newInputValue]);
	            oldInputValueOf = newInputValue && getValueOf(newInputValue);
	          }
	          return lastResult;
	        }, listener, objectEquality, prettyPrintExpression);
	      }
	
	      var oldInputValueOfValues = [];
	      var oldInputValues = [];
	      for (var i = 0, ii = inputExpressions.length; i < ii; i++) {
	        oldInputValueOfValues[i] = expressionInputDirtyCheck; // init to something unique so that equals check fails
	        oldInputValues[i] = null;
	      }
	
	      return scope.$watch(function expressionInputsWatch(scope) {
	        var changed = false;
	
	        for (var i = 0, ii = inputExpressions.length; i < ii; i++) {
	          var newInputValue = inputExpressions[i](scope);
	          if (changed || (changed = !expressionInputDirtyCheck(newInputValue, oldInputValueOfValues[i]))) {
	            oldInputValues[i] = newInputValue;
	            oldInputValueOfValues[i] = newInputValue && getValueOf(newInputValue);
	          }
	        }
	
	        if (changed) {
	          lastResult = parsedExpression(scope, undefined, undefined, oldInputValues);
	        }
	
	        return lastResult;
	      }, listener, objectEquality, prettyPrintExpression);
	    }
	
	    function oneTimeWatchDelegate(scope, listener, objectEquality, parsedExpression) {
	      var unwatch, lastValue;
	      return unwatch = scope.$watch(function oneTimeWatch(scope) {
	        return parsedExpression(scope);
	      }, function oneTimeListener(value, old, scope) {
	        lastValue = value;
	        if (isFunction(listener)) {
	          listener.apply(this, arguments);
	        }
	        if (isDefined(value)) {
	          scope.$$postDigest(function() {
	            if (isDefined(lastValue)) {
	              unwatch();
	            }
	          });
	        }
	      }, objectEquality);
	    }
	
	    function oneTimeLiteralWatchDelegate(scope, listener, objectEquality, parsedExpression) {
	      var unwatch, lastValue;
	      return unwatch = scope.$watch(function oneTimeWatch(scope) {
	        return parsedExpression(scope);
	      }, function oneTimeListener(value, old, scope) {
	        lastValue = value;
	        if (isFunction(listener)) {
	          listener.call(this, value, old, scope);
	        }
	        if (isAllDefined(value)) {
	          scope.$$postDigest(function() {
	            if (isAllDefined(lastValue)) unwatch();
	          });
	        }
	      }, objectEquality);
	
	      function isAllDefined(value) {
	        var allDefined = true;
	        forEach(value, function(val) {
	          if (!isDefined(val)) allDefined = false;
	        });
	        return allDefined;
	      }
	    }
	
	    function constantWatchDelegate(scope, listener, objectEquality, parsedExpression) {
	      var unwatch;
	      return unwatch = scope.$watch(function constantWatch(scope) {
	        unwatch();
	        return parsedExpression(scope);
	      }, listener, objectEquality);
	    }
	
	    function addInterceptor(parsedExpression, interceptorFn) {
	      if (!interceptorFn) return parsedExpression;
	      var watchDelegate = parsedExpression.$$watchDelegate;
	      var useInputs = false;
	
	      var regularWatch =
	          watchDelegate !== oneTimeLiteralWatchDelegate &&
	          watchDelegate !== oneTimeWatchDelegate;
	
	      var fn = regularWatch ? function regularInterceptedExpression(scope, locals, assign, inputs) {
	        var value = useInputs && inputs ? inputs[0] : parsedExpression(scope, locals, assign, inputs);
	        return interceptorFn(value, scope, locals);
	      } : function oneTimeInterceptedExpression(scope, locals, assign, inputs) {
	        var value = parsedExpression(scope, locals, assign, inputs);
	        var result = interceptorFn(value, scope, locals);
	        // we only return the interceptor's result if the
	        // initial value is defined (for bind-once)
	        return isDefined(value) ? result : value;
	      };
	
	      // Propagate $$watchDelegates other then inputsWatchDelegate
	      if (parsedExpression.$$watchDelegate &&
	          parsedExpression.$$watchDelegate !== inputsWatchDelegate) {
	        fn.$$watchDelegate = parsedExpression.$$watchDelegate;
	      } else if (!interceptorFn.$stateful) {
	        // If there is an interceptor, but no watchDelegate then treat the interceptor like
	        // we treat filters - it is assumed to be a pure function unless flagged with $stateful
	        fn.$$watchDelegate = inputsWatchDelegate;
	        useInputs = !parsedExpression.inputs;
	        fn.inputs = parsedExpression.inputs ? parsedExpression.inputs : [parsedExpression];
	      }
	
	      return fn;
	    }
	  }];
	}
	
	/**
	 * @ngdoc service
	 * @name $q
	 * @requires $rootScope
	 *
	 * @description
	 * A service that helps you run functions asynchronously, and use their return values (or exceptions)
	 * when they are done processing.
	 *
	 * This is an implementation of promises/deferred objects inspired by
	 * [Kris Kowal's Q](https://github.com/kriskowal/q).
	 *
	 * $q can be used in two fashions --- one which is more similar to Kris Kowal's Q or jQuery's Deferred
	 * implementations, and the other which resembles ES6 (ES2015) promises to some degree.
	 *
	 * # $q constructor
	 *
	 * The streamlined ES6 style promise is essentially just using $q as a constructor which takes a `resolver`
	 * function as the first argument. This is similar to the native Promise implementation from ES6,
	 * see [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise).
	 *
	 * While the constructor-style use is supported, not all of the supporting methods from ES6 promises are
	 * available yet.
	 *
	 * It can be used like so:
	 *
	 * ```js
	 *   // for the purpose of this example let's assume that variables `$q` and `okToGreet`
	 *   // are available in the current lexical scope (they could have been injected or passed in).
	 *
	 *   function asyncGreet(name) {
	 *     // perform some asynchronous operation, resolve or reject the promise when appropriate.
	 *     return $q(function(resolve, reject) {
	 *       setTimeout(function() {
	 *         if (okToGreet(name)) {
	 *           resolve('Hello, ' + name + '!');
	 *         } else {
	 *           reject('Greeting ' + name + ' is not allowed.');
	 *         }
	 *       }, 1000);
	 *     });
	 *   }
	 *
	 *   var promise = asyncGreet('Robin Hood');
	 *   promise.then(function(greeting) {
	 *     alert('Success: ' + greeting);
	 *   }, function(reason) {
	 *     alert('Failed: ' + reason);
	 *   });
	 * ```
	 *
	 * Note: progress/notify callbacks are not currently supported via the ES6-style interface.
	 *
	 * Note: unlike ES6 behavior, an exception thrown in the constructor function will NOT implicitly reject the promise.
	 *
	 * However, the more traditional CommonJS-style usage is still available, and documented below.
	 *
	 * [The CommonJS Promise proposal](http://wiki.commonjs.org/wiki/Promises) describes a promise as an
	 * interface for interacting with an object that represents the result of an action that is
	 * performed asynchronously, and may or may not be finished at any given point in time.
	 *
	 * From the perspective of dealing with error handling, deferred and promise APIs are to
	 * asynchronous programming what `try`, `catch` and `throw` keywords are to synchronous programming.
	 *
	 * ```js
	 *   // for the purpose of this example let's assume that variables `$q` and `okToGreet`
	 *   // are available in the current lexical scope (they could have been injected or passed in).
	 *
	 *   function asyncGreet(name) {
	 *     var deferred = $q.defer();
	 *
	 *     setTimeout(function() {
	 *       deferred.notify('About to greet ' + name + '.');
	 *
	 *       if (okToGreet(name)) {
	 *         deferred.resolve('Hello, ' + name + '!');
	 *       } else {
	 *         deferred.reject('Greeting ' + name + ' is not allowed.');
	 *       }
	 *     }, 1000);
	 *
	 *     return deferred.promise;
	 *   }
	 *
	 *   var promise = asyncGreet('Robin Hood');
	 *   promise.then(function(greeting) {
	 *     alert('Success: ' + greeting);
	 *   }, function(reason) {
	 *     alert('Failed: ' + reason);
	 *   }, function(update) {
	 *     alert('Got notification: ' + update);
	 *   });
	 * ```
	 *
	 * At first it might not be obvious why this extra complexity is worth the trouble. The payoff
	 * comes in the way of guarantees that promise and deferred APIs make, see
	 * https://github.com/kriskowal/uncommonjs/blob/master/promises/specification.md.
	 *
	 * Additionally the promise api allows for composition that is very hard to do with the
	 * traditional callback ([CPS](http://en.wikipedia.org/wiki/Continuation-passing_style)) approach.
	 * For more on this please see the [Q documentation](https://github.com/kriskowal/q) especially the
	 * section on serial or parallel joining of promises.
	 *
	 * # The Deferred API
	 *
	 * A new instance of deferred is constructed by calling `$q.defer()`.
	 *
	 * The purpose of the deferred object is to expose the associated Promise instance as well as APIs
	 * that can be used for signaling the successful or unsuccessful completion, as well as the status
	 * of the task.
	 *
	 * **Methods**
	 *
	 * - `resolve(value)` – resolves the derived promise with the `value`. If the value is a rejection
	 *   constructed via `$q.reject`, the promise will be rejected instead.
	 * - `reject(reason)` – rejects the derived promise with the `reason`. This is equivalent to
	 *   resolving it with a rejection constructed via `$q.reject`.
	 * - `notify(value)` - provides updates on the status of the promise's execution. This may be called
	 *   multiple times before the promise is either resolved or rejected.
	 *
	 * **Properties**
	 *
	 * - promise – `{Promise}` – promise object associated with this deferred.
	 *
	 *
	 * # The Promise API
	 *
	 * A new promise instance is created when a deferred instance is created and can be retrieved by
	 * calling `deferred.promise`.
	 *
	 * The purpose of the promise object is to allow for interested parties to get access to the result
	 * of the deferred task when it completes.
	 *
	 * **Methods**
	 *
	 * - `then(successCallback, errorCallback, notifyCallback)` – regardless of when the promise was or
	 *   will be resolved or rejected, `then` calls one of the success or error callbacks asynchronously
	 *   as soon as the result is available. The callbacks are called with a single argument: the result
	 *   or rejection reason. Additionally, the notify callback may be called zero or more times to
	 *   provide a progress indication, before the promise is resolved or rejected.
	 *
	 *   This method *returns a new promise* which is resolved or rejected via the return value of the
	 *   `successCallback`, `errorCallback` (unless that value is a promise, in which case it is resolved
	 *   with the value which is resolved in that promise using
	 *   [promise chaining](http://www.html5rocks.com/en/tutorials/es6/promises/#toc-promises-queues)).
	 *   It also notifies via the return value of the `notifyCallback` method. The promise cannot be
	 *   resolved or rejected from the notifyCallback method.
	 *
	 * - `catch(errorCallback)` – shorthand for `promise.then(null, errorCallback)`
	 *
	 * - `finally(callback, notifyCallback)` – allows you to observe either the fulfillment or rejection of a promise,
	 *   but to do so without modifying the final value. This is useful to release resources or do some
	 *   clean-up that needs to be done whether the promise was rejected or resolved. See the [full
	 *   specification](https://github.com/kriskowal/q/wiki/API-Reference#promisefinallycallback) for
	 *   more information.
	 *
	 * # Chaining promises
	 *
	 * Because calling the `then` method of a promise returns a new derived promise, it is easily
	 * possible to create a chain of promises:
	 *
	 * ```js
	 *   promiseB = promiseA.then(function(result) {
	 *     return result + 1;
	 *   });
	 *
	 *   // promiseB will be resolved immediately after promiseA is resolved and its value
	 *   // will be the result of promiseA incremented by 1
	 * ```
	 *
	 * It is possible to create chains of any length and since a promise can be resolved with another
	 * promise (which will defer its resolution further), it is possible to pause/defer resolution of
	 * the promises at any point in the chain. This makes it possible to implement powerful APIs like
	 * $http's response interceptors.
	 *
	 *
	 * # Differences between Kris Kowal's Q and $q
	 *
	 *  There are two main differences:
	 *
	 * - $q is integrated with the {@link ng.$rootScope.Scope} Scope model observation
	 *   mechanism in angular, which means faster propagation of resolution or rejection into your
	 *   models and avoiding unnecessary browser repaints, which would result in flickering UI.
	 * - Q has many more features than $q, but that comes at a cost of bytes. $q is tiny, but contains
	 *   all the important functionality needed for common async tasks.
	 *
	 * # Testing
	 *
	 *  ```js
	 *    it('should simulate promise', inject(function($q, $rootScope) {
	 *      var deferred = $q.defer();
	 *      var promise = deferred.promise;
	 *      var resolvedValue;
	 *
	 *      promise.then(function(value) { resolvedValue = value; });
	 *      expect(resolvedValue).toBeUndefined();
	 *
	 *      // Simulate resolving of promise
	 *      deferred.resolve(123);
	 *      // Note that the 'then' function does not get called synchronously.
	 *      // This is because we want the promise API to always be async, whether or not
	 *      // it got called synchronously or asynchronously.
	 *      expect(resolvedValue).toBeUndefined();
	 *
	 *      // Propagate promise resolution to 'then' functions using $apply().
	 *      $rootScope.$apply();
	 *      expect(resolvedValue).toEqual(123);
	 *    }));
	 *  ```
	 *
	 * @param {function(function, function)} resolver Function which is responsible for resolving or
	 *   rejecting the newly created promise. The first parameter is a function which resolves the
	 *   promise, the second parameter is a function which rejects the promise.
	 *
	 * @returns {Promise} The newly created promise.
	 */
	function $QProvider() {
	
	  this.$get = ['$rootScope', '$exceptionHandler', function($rootScope, $exceptionHandler) {
	    return qFactory(function(callback) {
	      $rootScope.$evalAsync(callback);
	    }, $exceptionHandler);
	  }];
	}
	
	function $$QProvider() {
	  this.$get = ['$browser', '$exceptionHandler', function($browser, $exceptionHandler) {
	    return qFactory(function(callback) {
	      $browser.defer(callback);
	    }, $exceptionHandler);
	  }];
	}
	
	/**
	 * Constructs a promise manager.
	 *
	 * @param {function(function)} nextTick Function for executing functions in the next turn.
	 * @param {function(...*)} exceptionHandler Function into which unexpected exceptions are passed for
	 *     debugging purposes.
	 * @returns {object} Promise manager.
	 */
	function qFactory(nextTick, exceptionHandler) {
	  var $qMinErr = minErr('$q', TypeError);
	
	  /**
	   * @ngdoc method
	   * @name ng.$q#defer
	   * @kind function
	   *
	   * @description
	   * Creates a `Deferred` object which represents a task which will finish in the future.
	   *
	   * @returns {Deferred} Returns a new instance of deferred.
	   */
	  var defer = function() {
	    var d = new Deferred();
	    //Necessary to support unbound execution :/
	    d.resolve = simpleBind(d, d.resolve);
	    d.reject = simpleBind(d, d.reject);
	    d.notify = simpleBind(d, d.notify);
	    return d;
	  };
	
	  function Promise() {
	    this.$$state = { status: 0 };
	  }
	
	  extend(Promise.prototype, {
	    then: function(onFulfilled, onRejected, progressBack) {
	      if (isUndefined(onFulfilled) && isUndefined(onRejected) && isUndefined(progressBack)) {
	        return this;
	      }
	      var result = new Deferred();
	
	      this.$$state.pending = this.$$state.pending || [];
	      this.$$state.pending.push([result, onFulfilled, onRejected, progressBack]);
	      if (this.$$state.status > 0) scheduleProcessQueue(this.$$state);
	
	      return result.promise;
	    },
	
	    "catch": function(callback) {
	      return this.then(null, callback);
	    },
	
	    "finally": function(callback, progressBack) {
	      return this.then(function(value) {
	        return handleCallback(value, true, callback);
	      }, function(error) {
	        return handleCallback(error, false, callback);
	      }, progressBack);
	    }
	  });
	
	  //Faster, more basic than angular.bind http://jsperf.com/angular-bind-vs-custom-vs-native
	  function simpleBind(context, fn) {
	    return function(value) {
	      fn.call(context, value);
	    };
	  }
	
	  function processQueue(state) {
	    var fn, deferred, pending;
	
	    pending = state.pending;
	    state.processScheduled = false;
	    state.pending = undefined;
	    for (var i = 0, ii = pending.length; i < ii; ++i) {
	      deferred = pending[i][0];
	      fn = pending[i][state.status];
	      try {
	        if (isFunction(fn)) {
	          deferred.resolve(fn(state.value));
	        } else if (state.status === 1) {
	          deferred.resolve(state.value);
	        } else {
	          deferred.reject(state.value);
	        }
	      } catch (e) {
	        deferred.reject(e);
	        exceptionHandler(e);
	      }
	    }
	  }
	
	  function scheduleProcessQueue(state) {
	    if (state.processScheduled || !state.pending) return;
	    state.processScheduled = true;
	    nextTick(function() { processQueue(state); });
	  }
	
	  function Deferred() {
	    this.promise = new Promise();
	  }
	
	  extend(Deferred.prototype, {
	    resolve: function(val) {
	      if (this.promise.$$state.status) return;
	      if (val === this.promise) {
	        this.$$reject($qMinErr(
	          'qcycle',
	          "Expected promise to be resolved with value other than itself '{0}'",
	          val));
	      } else {
	        this.$$resolve(val);
	      }
	
	    },
	
	    $$resolve: function(val) {
	      var then;
	      var that = this;
	      var done = false;
	      try {
	        if ((isObject(val) || isFunction(val))) then = val && val.then;
	        if (isFunction(then)) {
	          this.promise.$$state.status = -1;
	          then.call(val, resolvePromise, rejectPromise, simpleBind(this, this.notify));
	        } else {
	          this.promise.$$state.value = val;
	          this.promise.$$state.status = 1;
	          scheduleProcessQueue(this.promise.$$state);
	        }
	      } catch (e) {
	        rejectPromise(e);
	        exceptionHandler(e);
	      }
	
	      function resolvePromise(val) {
	        if (done) return;
	        done = true;
	        that.$$resolve(val);
	      }
	      function rejectPromise(val) {
	        if (done) return;
	        done = true;
	        that.$$reject(val);
	      }
	    },
	
	    reject: function(reason) {
	      if (this.promise.$$state.status) return;
	      this.$$reject(reason);
	    },
	
	    $$reject: function(reason) {
	      this.promise.$$state.value = reason;
	      this.promise.$$state.status = 2;
	      scheduleProcessQueue(this.promise.$$state);
	    },
	
	    notify: function(progress) {
	      var callbacks = this.promise.$$state.pending;
	
	      if ((this.promise.$$state.status <= 0) && callbacks && callbacks.length) {
	        nextTick(function() {
	          var callback, result;
	          for (var i = 0, ii = callbacks.length; i < ii; i++) {
	            result = callbacks[i][0];
	            callback = callbacks[i][3];
	            try {
	              result.notify(isFunction(callback) ? callback(progress) : progress);
	            } catch (e) {
	              exceptionHandler(e);
	            }
	          }
	        });
	      }
	    }
	  });
	
	  /**
	   * @ngdoc method
	   * @name $q#reject
	   * @kind function
	   *
	   * @description
	   * Creates a promise that is resolved as rejected with the specified `reason`. This api should be
	   * used to forward rejection in a chain of promises. If you are dealing with the last promise in
	   * a promise chain, you don't need to worry about it.
	   *
	   * When comparing deferreds/promises to the familiar behavior of try/catch/throw, think of
	   * `reject` as the `throw` keyword in JavaScript. This also means that if you "catch" an error via
	   * a promise error callback and you want to forward the error to the promise derived from the
	   * current promise, you have to "rethrow" the error by returning a rejection constructed via
	   * `reject`.
	   *
	   * ```js
	   *   promiseB = promiseA.then(function(result) {
	   *     // success: do something and resolve promiseB
	   *     //          with the old or a new result
	   *     return result;
	   *   }, function(reason) {
	   *     // error: handle the error if possible and
	   *     //        resolve promiseB with newPromiseOrValue,
	   *     //        otherwise forward the rejection to promiseB
	   *     if (canHandle(reason)) {
	   *      // handle the error and recover
	   *      return newPromiseOrValue;
	   *     }
	   *     return $q.reject(reason);
	   *   });
	   * ```
	   *
	   * @param {*} reason Constant, message, exception or an object representing the rejection reason.
	   * @returns {Promise} Returns a promise that was already resolved as rejected with the `reason`.
	   */
	  var reject = function(reason) {
	    var result = new Deferred();
	    result.reject(reason);
	    return result.promise;
	  };
	
	  var makePromise = function makePromise(value, resolved) {
	    var result = new Deferred();
	    if (resolved) {
	      result.resolve(value);
	    } else {
	      result.reject(value);
	    }
	    return result.promise;
	  };
	
	  var handleCallback = function handleCallback(value, isResolved, callback) {
	    var callbackOutput = null;
	    try {
	      if (isFunction(callback)) callbackOutput = callback();
	    } catch (e) {
	      return makePromise(e, false);
	    }
	    if (isPromiseLike(callbackOutput)) {
	      return callbackOutput.then(function() {
	        return makePromise(value, isResolved);
	      }, function(error) {
	        return makePromise(error, false);
	      });
	    } else {
	      return makePromise(value, isResolved);
	    }
	  };
	
	  /**
	   * @ngdoc method
	   * @name $q#when
	   * @kind function
	   *
	   * @description
	   * Wraps an object that might be a value or a (3rd party) then-able promise into a $q promise.
	   * This is useful when you are dealing with an object that might or might not be a promise, or if
	   * the promise comes from a source that can't be trusted.
	   *
	   * @param {*} value Value or a promise
	   * @param {Function=} successCallback
	   * @param {Function=} errorCallback
	   * @param {Function=} progressCallback
	   * @returns {Promise} Returns a promise of the passed value or promise
	   */
	
	
	  var when = function(value, callback, errback, progressBack) {
	    var result = new Deferred();
	    result.resolve(value);
	    return result.promise.then(callback, errback, progressBack);
	  };
	
	  /**
	   * @ngdoc method
	   * @name $q#resolve
	   * @kind function
	   *
	   * @description
	   * Alias of {@link ng.$q#when when} to maintain naming consistency with ES6.
	   *
	   * @param {*} value Value or a promise
	   * @param {Function=} successCallback
	   * @param {Function=} errorCallback
	   * @param {Function=} progressCallback
	   * @returns {Promise} Returns a promise of the passed value or promise
	   */
	  var resolve = when;
	
	  /**
	   * @ngdoc method
	   * @name $q#all
	   * @kind function
	   *
	   * @description
	   * Combines multiple promises into a single promise that is resolved when all of the input
	   * promises are resolved.
	   *
	   * @param {Array.<Promise>|Object.<Promise>} promises An array or hash of promises.
	   * @returns {Promise} Returns a single promise that will be resolved with an array/hash of values,
	   *   each value corresponding to the promise at the same index/key in the `promises` array/hash.
	   *   If any of the promises is resolved with a rejection, this resulting promise will be rejected
	   *   with the same rejection value.
	   */
	
	  function all(promises) {
	    var deferred = new Deferred(),
	        counter = 0,
	        results = isArray(promises) ? [] : {};
	
	    forEach(promises, function(promise, key) {
	      counter++;
	      when(promise).then(function(value) {
	        if (results.hasOwnProperty(key)) return;
	        results[key] = value;
	        if (!(--counter)) deferred.resolve(results);
	      }, function(reason) {
	        if (results.hasOwnProperty(key)) return;
	        deferred.reject(reason);
	      });
	    });
	
	    if (counter === 0) {
	      deferred.resolve(results);
	    }
	
	    return deferred.promise;
	  }
	
	  var $Q = function Q(resolver) {
	    if (!isFunction(resolver)) {
	      throw $qMinErr('norslvr', "Expected resolverFn, got '{0}'", resolver);
	    }
	
	    var deferred = new Deferred();
	
	    function resolveFn(value) {
	      deferred.resolve(value);
	    }
	
	    function rejectFn(reason) {
	      deferred.reject(reason);
	    }
	
	    resolver(resolveFn, rejectFn);
	
	    return deferred.promise;
	  };
	
	  // Let's make the instanceof operator work for promises, so that
	  // `new $q(fn) instanceof $q` would evaluate to true.
	  $Q.prototype = Promise.prototype;
	
	  $Q.defer = defer;
	  $Q.reject = reject;
	  $Q.when = when;
	  $Q.resolve = resolve;
	  $Q.all = all;
	
	  return $Q;
	}
	
	function $$RAFProvider() { //rAF
	  this.$get = ['$window', '$timeout', function($window, $timeout) {
	    var requestAnimationFrame = $window.requestAnimationFrame ||
	                                $window.webkitRequestAnimationFrame;
	
	    var cancelAnimationFrame = $window.cancelAnimationFrame ||
	                               $window.webkitCancelAnimationFrame ||
	                               $window.webkitCancelRequestAnimationFrame;
	
	    var rafSupported = !!requestAnimationFrame;
	    var raf = rafSupported
	      ? function(fn) {
	          var id = requestAnimationFrame(fn);
	          return function() {
	            cancelAnimationFrame(id);
	          };
	        }
	      : function(fn) {
	          var timer = $timeout(fn, 16.66, false); // 1000 / 60 = 16.666
	          return function() {
	            $timeout.cancel(timer);
	          };
	        };
	
	    raf.supported = rafSupported;
	
	    return raf;
	  }];
	}
	
	/**
	 * DESIGN NOTES
	 *
	 * The design decisions behind the scope are heavily favored for speed and memory consumption.
	 *
	 * The typical use of scope is to watch the expressions, which most of the time return the same
	 * value as last time so we optimize the operation.
	 *
	 * Closures construction is expensive in terms of speed as well as memory:
	 *   - No closures, instead use prototypical inheritance for API
	 *   - Internal state needs to be stored on scope directly, which means that private state is
	 *     exposed as $$____ properties
	 *
	 * Loop operations are optimized by using while(count--) { ... }
	 *   - This means that in order to keep the same order of execution as addition we have to add
	 *     items to the array at the beginning (unshift) instead of at the end (push)
	 *
	 * Child scopes are created and removed often
	 *   - Using an array would be slow since inserts in the middle are expensive; so we use linked lists
	 *
	 * There are fewer watches than observers. This is why you don't want the observer to be implemented
	 * in the same way as watch. Watch requires return of the initialization function which is expensive
	 * to construct.
	 */
	
	
	/**
	 * @ngdoc provider
	 * @name $rootScopeProvider
	 * @description
	 *
	 * Provider for the $rootScope service.
	 */
	
	/**
	 * @ngdoc method
	 * @name $rootScopeProvider#digestTtl
	 * @description
	 *
	 * Sets the number of `$digest` iterations the scope should attempt to execute before giving up and
	 * assuming that the model is unstable.
	 *
	 * The current default is 10 iterations.
	 *
	 * In complex applications it's possible that the dependencies between `$watch`s will result in
	 * several digest iterations. However if an application needs more than the default 10 digest
	 * iterations for its model to stabilize then you should investigate what is causing the model to
	 * continuously change during the digest.
	 *
	 * Increasing the TTL could have performance implications, so you should not change it without
	 * proper justification.
	 *
	 * @param {number} limit The number of digest iterations.
	 */
	
	
	/**
	 * @ngdoc service
	 * @name $rootScope
	 * @description
	 *
	 * Every application has a single root {@link ng.$rootScope.Scope scope}.
	 * All other scopes are descendant scopes of the root scope. Scopes provide separation
	 * between the model and the view, via a mechanism for watching the model for changes.
	 * They also provide event emission/broadcast and subscription facility. See the
	 * {@link guide/scope developer guide on scopes}.
	 */
	function $RootScopeProvider() {
	  var TTL = 10;
	  var $rootScopeMinErr = minErr('$rootScope');
	  var lastDirtyWatch = null;
	  var applyAsyncId = null;
	
	  this.digestTtl = function(value) {
	    if (arguments.length) {
	      TTL = value;
	    }
	    return TTL;
	  };
	
	  function createChildScopeClass(parent) {
	    function ChildScope() {
	      this.$$watchers = this.$$nextSibling =
	          this.$$childHead = this.$$childTail = null;
	      this.$$listeners = {};
	      this.$$listenerCount = {};
	      this.$$watchersCount = 0;
	      this.$id = nextUid();
	      this.$$ChildScope = null;
	    }
	    ChildScope.prototype = parent;
	    return ChildScope;
	  }
	
	  this.$get = ['$exceptionHandler', '$parse', '$browser',
	      function($exceptionHandler, $parse, $browser) {
	
	    function destroyChildScope($event) {
	        $event.currentScope.$$destroyed = true;
	    }
	
	    function cleanUpScope($scope) {
	
	      if (msie === 9) {
	        // There is a memory leak in IE9 if all child scopes are not disconnected
	        // completely when a scope is destroyed. So this code will recurse up through
	        // all this scopes children
	        //
	        // See issue https://github.com/angular/angular.js/issues/10706
	        $scope.$$childHead && cleanUpScope($scope.$$childHead);
	        $scope.$$nextSibling && cleanUpScope($scope.$$nextSibling);
	      }
	
	      // The code below works around IE9 and V8's memory leaks
	      //
	      // See:
	      // - https://code.google.com/p/v8/issues/detail?id=2073#c26
	      // - https://github.com/angular/angular.js/issues/6794#issuecomment-38648909
	      // - https://github.com/angular/angular.js/issues/1313#issuecomment-10378451
	
	      $scope.$parent = $scope.$$nextSibling = $scope.$$prevSibling = $scope.$$childHead =
	          $scope.$$childTail = $scope.$root = $scope.$$watchers = null;
	    }
	
	    /**
	     * @ngdoc type
	     * @name $rootScope.Scope
	     *
	     * @description
	     * A root scope can be retrieved using the {@link ng.$rootScope $rootScope} key from the
	     * {@link auto.$injector $injector}. Child scopes are created using the
	     * {@link ng.$rootScope.Scope#$new $new()} method. (Most scopes are created automatically when
	     * compiled HTML template is executed.) See also the {@link guide/scope Scopes guide} for
	     * an in-depth introduction and usage examples.
	     *
	     *
	     * # Inheritance
	     * A scope can inherit from a parent scope, as in this example:
	     * ```js
	         var parent = $rootScope;
	         var child = parent.$new();
	
	         parent.salutation = "Hello";
	         expect(child.salutation).toEqual('Hello');
	
	         child.salutation = "Welcome";
	         expect(child.salutation).toEqual('Welcome');
	         expect(parent.salutation).toEqual('Hello');
	     * ```
	     *
	     * When interacting with `Scope` in tests, additional helper methods are available on the
	     * instances of `Scope` type. See {@link ngMock.$rootScope.Scope ngMock Scope} for additional
	     * details.
	     *
	     *
	     * @param {Object.<string, function()>=} providers Map of service factory which need to be
	     *                                       provided for the current scope. Defaults to {@link ng}.
	     * @param {Object.<string, *>=} instanceCache Provides pre-instantiated services which should
	     *                              append/override services provided by `providers`. This is handy
	     *                              when unit-testing and having the need to override a default
	     *                              service.
	     * @returns {Object} Newly created scope.
	     *
	     */
	    function Scope() {
	      this.$id = nextUid();
	      this.$$phase = this.$parent = this.$$watchers =
	                     this.$$nextSibling = this.$$prevSibling =
	                     this.$$childHead = this.$$childTail = null;
	      this.$root = this;
	      this.$$destroyed = false;
	      this.$$listeners = {};
	      this.$$listenerCount = {};
	      this.$$watchersCount = 0;
	      this.$$isolateBindings = null;
	    }
	
	    /**
	     * @ngdoc property
	     * @name $rootScope.Scope#$id
	     *
	     * @description
	     * Unique scope ID (monotonically increasing) useful for debugging.
	     */
	
	     /**
	      * @ngdoc property
	      * @name $rootScope.Scope#$parent
	      *
	      * @description
	      * Reference to the parent scope.
	      */
	
	      /**
	       * @ngdoc property
	       * @name $rootScope.Scope#$root
	       *
	       * @description
	       * Reference to the root scope.
	       */
	
	    Scope.prototype = {
	      constructor: Scope,
	      /**
	       * @ngdoc method
	       * @name $rootScope.Scope#$new
	       * @kind function
	       *
	       * @description
	       * Creates a new child {@link ng.$rootScope.Scope scope}.
	       *
	       * The parent scope will propagate the {@link ng.$rootScope.Scope#$digest $digest()} event.
	       * The scope can be removed from the scope hierarchy using {@link ng.$rootScope.Scope#$destroy $destroy()}.
	       *
	       * {@link ng.$rootScope.Scope#$destroy $destroy()} must be called on a scope when it is
	       * desired for the scope and its child scopes to be permanently detached from the parent and
	       * thus stop participating in model change detection and listener notification by invoking.
	       *
	       * @param {boolean} isolate If true, then the scope does not prototypically inherit from the
	       *         parent scope. The scope is isolated, as it can not see parent scope properties.
	       *         When creating widgets, it is useful for the widget to not accidentally read parent
	       *         state.
	       *
	       * @param {Scope} [parent=this] The {@link ng.$rootScope.Scope `Scope`} that will be the `$parent`
	       *                              of the newly created scope. Defaults to `this` scope if not provided.
	       *                              This is used when creating a transclude scope to correctly place it
	       *                              in the scope hierarchy while maintaining the correct prototypical
	       *                              inheritance.
	       *
	       * @returns {Object} The newly created child scope.
	       *
	       */
	      $new: function(isolate, parent) {
	        var child;
	
	        parent = parent || this;
	
	        if (isolate) {
	          child = new Scope();
	          child.$root = this.$root;
	        } else {
	          // Only create a child scope class if somebody asks for one,
	          // but cache it to allow the VM to optimize lookups.
	          if (!this.$$ChildScope) {
	            this.$$ChildScope = createChildScopeClass(this);
	          }
	          child = new this.$$ChildScope();
	        }
	        child.$parent = parent;
	        child.$$prevSibling = parent.$$childTail;
	        if (parent.$$childHead) {
	          parent.$$childTail.$$nextSibling = child;
	          parent.$$childTail = child;
	        } else {
	          parent.$$childHead = parent.$$childTail = child;
	        }
	
	        // When the new scope is not isolated or we inherit from `this`, and
	        // the parent scope is destroyed, the property `$$destroyed` is inherited
	        // prototypically. In all other cases, this property needs to be set
	        // when the parent scope is destroyed.
	        // The listener needs to be added after the parent is set
	        if (isolate || parent != this) child.$on('$destroy', destroyChildScope);
	
	        return child;
	      },
	
	      /**
	       * @ngdoc method
	       * @name $rootScope.Scope#$watch
	       * @kind function
	       *
	       * @description
	       * Registers a `listener` callback to be executed whenever the `watchExpression` changes.
	       *
	       * - The `watchExpression` is called on every call to {@link ng.$rootScope.Scope#$digest
	       *   $digest()} and should return the value that will be watched. (`watchExpression` should not change
	       *   its value when executed multiple times with the same input because it may be executed multiple
	       *   times by {@link ng.$rootScope.Scope#$digest $digest()}. That is, `watchExpression` should be
	       *   [idempotent](http://en.wikipedia.org/wiki/Idempotence).
	       * - The `listener` is called only when the value from the current `watchExpression` and the
	       *   previous call to `watchExpression` are not equal (with the exception of the initial run,
	       *   see below). Inequality is determined according to reference inequality,
	       *   [strict comparison](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators)
	       *    via the `!==` Javascript operator, unless `objectEquality == true`
	       *   (see next point)
	       * - When `objectEquality == true`, inequality of the `watchExpression` is determined
	       *   according to the {@link angular.equals} function. To save the value of the object for
	       *   later comparison, the {@link angular.copy} function is used. This therefore means that
	       *   watching complex objects will have adverse memory and performance implications.
	       * - The watch `listener` may change the model, which may trigger other `listener`s to fire.
	       *   This is achieved by rerunning the watchers until no changes are detected. The rerun
	       *   iteration limit is 10 to prevent an infinite loop deadlock.
	       *
	       *
	       * If you want to be notified whenever {@link ng.$rootScope.Scope#$digest $digest} is called,
	       * you can register a `watchExpression` function with no `listener`. (Be prepared for
	       * multiple calls to your `watchExpression` because it will execute multiple times in a
	       * single {@link ng.$rootScope.Scope#$digest $digest} cycle if a change is detected.)
	       *
	       * After a watcher is registered with the scope, the `listener` fn is called asynchronously
	       * (via {@link ng.$rootScope.Scope#$evalAsync $evalAsync}) to initialize the
	       * watcher. In rare cases, this is undesirable because the listener is called when the result
	       * of `watchExpression` didn't change. To detect this scenario within the `listener` fn, you
	       * can compare the `newVal` and `oldVal`. If these two values are identical (`===`) then the
	       * listener was called due to initialization.
	       *
	       *
	       *
	       * # Example
	       * ```js
	           // let's assume that scope was dependency injected as the $rootScope
	           var scope = $rootScope;
	           scope.name = 'misko';
	           scope.counter = 0;
	
	           expect(scope.counter).toEqual(0);
	           scope.$watch('name', function(newValue, oldValue) {
	             scope.counter = scope.counter + 1;
	           });
	           expect(scope.counter).toEqual(0);
	
	           scope.$digest();
	           // the listener is always called during the first $digest loop after it was registered
	           expect(scope.counter).toEqual(1);
	
	           scope.$digest();
	           // but now it will not be called unless the value changes
	           expect(scope.counter).toEqual(1);
	
	           scope.name = 'adam';
	           scope.$digest();
	           expect(scope.counter).toEqual(2);
	
	
	
	           // Using a function as a watchExpression
	           var food;
	           scope.foodCounter = 0;
	           expect(scope.foodCounter).toEqual(0);
	           scope.$watch(
	             // This function returns the value being watched. It is called for each turn of the $digest loop
	             function() { return food; },
	             // This is the change listener, called when the value returned from the above function changes
	             function(newValue, oldValue) {
	               if ( newValue !== oldValue ) {
	                 // Only increment the counter if the value changed
	                 scope.foodCounter = scope.foodCounter + 1;
	               }
	             }
	           );
	           // No digest has been run so the counter will be zero
	           expect(scope.foodCounter).toEqual(0);
	
	           // Run the digest but since food has not changed count will still be zero
	           scope.$digest();
	           expect(scope.foodCounter).toEqual(0);
	
	           // Update food and run digest.  Now the counter will increment
	           food = 'cheeseburger';
	           scope.$digest();
	           expect(scope.foodCounter).toEqual(1);
	
	       * ```
	       *
	       *
	       *
	       * @param {(function()|string)} watchExpression Expression that is evaluated on each
	       *    {@link ng.$rootScope.Scope#$digest $digest} cycle. A change in the return value triggers
	       *    a call to the `listener`.
	       *
	       *    - `string`: Evaluated as {@link guide/expression expression}
	       *    - `function(scope)`: called with current `scope` as a parameter.
	       * @param {function(newVal, oldVal, scope)} listener Callback called whenever the value
	       *    of `watchExpression` changes.
	       *
	       *    - `newVal` contains the current value of the `watchExpression`
	       *    - `oldVal` contains the previous value of the `watchExpression`
	       *    - `scope` refers to the current scope
	       * @param {boolean=} [objectEquality=false] Compare for object equality using {@link angular.equals} instead of
	       *     comparing for reference equality.
	       * @returns {function()} Returns a deregistration function for this listener.
	       */
	      $watch: function(watchExp, listener, objectEquality, prettyPrintExpression) {
	        var get = $parse(watchExp);
	
	        if (get.$$watchDelegate) {
	          return get.$$watchDelegate(this, listener, objectEquality, get, watchExp);
	        }
	        var scope = this,
	            array = scope.$$watchers,
	            watcher = {
	              fn: listener,
	              last: initWatchVal,
	              get: get,
	              exp: prettyPrintExpression || watchExp,
	              eq: !!objectEquality
	            };
	
	        lastDirtyWatch = null;
	
	        if (!isFunction(listener)) {
	          watcher.fn = noop;
	        }
	
	        if (!array) {
	          array = scope.$$watchers = [];
	        }
	        // we use unshift since we use a while loop in $digest for speed.
	        // the while loop reads in reverse order.
	        array.unshift(watcher);
	        incrementWatchersCount(this, 1);
	
	        return function deregisterWatch() {
	          if (arrayRemove(array, watcher) >= 0) {
	            incrementWatchersCount(scope, -1);
	          }
	          lastDirtyWatch = null;
	        };
	      },
	
	      /**
	       * @ngdoc method
	       * @name $rootScope.Scope#$watchGroup
	       * @kind function
	       *
	       * @description
	       * A variant of {@link ng.$rootScope.Scope#$watch $watch()} where it watches an array of `watchExpressions`.
	       * If any one expression in the collection changes the `listener` is executed.
	       *
	       * - The items in the `watchExpressions` array are observed via standard $watch operation and are examined on every
	       *   call to $digest() to see if any items changes.
	       * - The `listener` is called whenever any expression in the `watchExpressions` array changes.
	       *
	       * @param {Array.<string|Function(scope)>} watchExpressions Array of expressions that will be individually
	       * watched using {@link ng.$rootScope.Scope#$watch $watch()}
	       *
	       * @param {function(newValues, oldValues, scope)} listener Callback called whenever the return value of any
	       *    expression in `watchExpressions` changes
	       *    The `newValues` array contains the current values of the `watchExpressions`, with the indexes matching
	       *    those of `watchExpression`
	       *    and the `oldValues` array contains the previous values of the `watchExpressions`, with the indexes matching
	       *    those of `watchExpression`
	       *    The `scope` refers to the current scope.
	       * @returns {function()} Returns a de-registration function for all listeners.
	       */
	      $watchGroup: function(watchExpressions, listener) {
	        var oldValues = new Array(watchExpressions.length);
	        var newValues = new Array(watchExpressions.length);
	        var deregisterFns = [];
	        var self = this;
	        var changeReactionScheduled = false;
	        var firstRun = true;
	
	        if (!watchExpressions.length) {
	          // No expressions means we call the listener ASAP
	          var shouldCall = true;
	          self.$evalAsync(function() {
	            if (shouldCall) listener(newValues, newValues, self);
	          });
	          return function deregisterWatchGroup() {
	            shouldCall = false;
	          };
	        }
	
	        if (watchExpressions.length === 1) {
	          // Special case size of one
	          return this.$watch(watchExpressions[0], function watchGroupAction(value, oldValue, scope) {
	            newValues[0] = value;
	            oldValues[0] = oldValue;
	            listener(newValues, (value === oldValue) ? newValues : oldValues, scope);
	          });
	        }
	
	        forEach(watchExpressions, function(expr, i) {
	          var unwatchFn = self.$watch(expr, function watchGroupSubAction(value, oldValue) {
	            newValues[i] = value;
	            oldValues[i] = oldValue;
	            if (!changeReactionScheduled) {
	              changeReactionScheduled = true;
	              self.$evalAsync(watchGroupAction);
	            }
	          });
	          deregisterFns.push(unwatchFn);
	        });
	
	        function watchGroupAction() {
	          changeReactionScheduled = false;
	
	          if (firstRun) {
	            firstRun = false;
	            listener(newValues, newValues, self);
	          } else {
	            listener(newValues, oldValues, self);
	          }
	        }
	
	        return function deregisterWatchGroup() {
	          while (deregisterFns.length) {
	            deregisterFns.shift()();
	          }
	        };
	      },
	
	
	      /**
	       * @ngdoc method
	       * @name $rootScope.Scope#$watchCollection
	       * @kind function
	       *
	       * @description
	       * Shallow watches the properties of an object and fires whenever any of the properties change
	       * (for arrays, this implies watching the array items; for object maps, this implies watching
	       * the properties). If a change is detected, the `listener` callback is fired.
	       *
	       * - The `obj` collection is observed via standard $watch operation and is examined on every
	       *   call to $digest() to see if any items have been added, removed, or moved.
	       * - The `listener` is called whenever anything within the `obj` has changed. Examples include
	       *   adding, removing, and moving items belonging to an object or array.
	       *
	       *
	       * # Example
	       * ```js
	          $scope.names = ['igor', 'matias', 'misko', 'james'];
	          $scope.dataCount = 4;
	
	          $scope.$watchCollection('names', function(newNames, oldNames) {
	            $scope.dataCount = newNames.length;
	          });
	
	          expect($scope.dataCount).toEqual(4);
	          $scope.$digest();
	
	          //still at 4 ... no changes
	          expect($scope.dataCount).toEqual(4);
	
	          $scope.names.pop();
	          $scope.$digest();
	
	          //now there's been a change
	          expect($scope.dataCount).toEqual(3);
	       * ```
	       *
	       *
	       * @param {string|function(scope)} obj Evaluated as {@link guide/expression expression}. The
	       *    expression value should evaluate to an object or an array which is observed on each
	       *    {@link ng.$rootScope.Scope#$digest $digest} cycle. Any shallow change within the
	       *    collection will trigger a call to the `listener`.
	       *
	       * @param {function(newCollection, oldCollection, scope)} listener a callback function called
	       *    when a change is detected.
	       *    - The `newCollection` object is the newly modified data obtained from the `obj` expression
	       *    - The `oldCollection` object is a copy of the former collection data.
	       *      Due to performance considerations, the`oldCollection` value is computed only if the
	       *      `listener` function declares two or more arguments.
	       *    - The `scope` argument refers to the current scope.
	       *
	       * @returns {function()} Returns a de-registration function for this listener. When the
	       *    de-registration function is executed, the internal watch operation is terminated.
	       */
	      $watchCollection: function(obj, listener) {
	        $watchCollectionInterceptor.$stateful = true;
	
	        var self = this;
	        // the current value, updated on each dirty-check run
	        var newValue;
	        // a shallow copy of the newValue from the last dirty-check run,
	        // updated to match newValue during dirty-check run
	        var oldValue;
	        // a shallow copy of the newValue from when the last change happened
	        var veryOldValue;
	        // only track veryOldValue if the listener is asking for it
	        var trackVeryOldValue = (listener.length > 1);
	        var changeDetected = 0;
	        var changeDetector = $parse(obj, $watchCollectionInterceptor);
	        var internalArray = [];
	        var internalObject = {};
	        var initRun = true;
	        var oldLength = 0;
	
	        function $watchCollectionInterceptor(_value) {
	          newValue = _value;
	          var newLength, key, bothNaN, newItem, oldItem;
	
	          // If the new value is undefined, then return undefined as the watch may be a one-time watch
	          if (isUndefined(newValue)) return;
	
	          if (!isObject(newValue)) { // if primitive
	            if (oldValue !== newValue) {
	              oldValue = newValue;
	              changeDetected++;
	            }
	          } else if (isArrayLike(newValue)) {
	            if (oldValue !== internalArray) {
	              // we are transitioning from something which was not an array into array.
	              oldValue = internalArray;
	              oldLength = oldValue.length = 0;
	              changeDetected++;
	            }
	
	            newLength = newValue.length;
	
	            if (oldLength !== newLength) {
	              // if lengths do not match we need to trigger change notification
	              changeDetected++;
	              oldValue.length = oldLength = newLength;
	            }
	            // copy the items to oldValue and look for changes.
	            for (var i = 0; i < newLength; i++) {
	              oldItem = oldValue[i];
	              newItem = newValue[i];
	
	              bothNaN = (oldItem !== oldItem) && (newItem !== newItem);
	              if (!bothNaN && (oldItem !== newItem)) {
	                changeDetected++;
	                oldValue[i] = newItem;
	              }
	            }
	          } else {
	            if (oldValue !== internalObject) {
	              // we are transitioning from something which was not an object into object.
	              oldValue = internalObject = {};
	              oldLength = 0;
	              changeDetected++;
	            }
	            // copy the items to oldValue and look for changes.
	            newLength = 0;
	            for (key in newValue) {
	              if (hasOwnProperty.call(newValue, key)) {
	                newLength++;
	                newItem = newValue[key];
	                oldItem = oldValue[key];
	
	                if (key in oldValue) {
	                  bothNaN = (oldItem !== oldItem) && (newItem !== newItem);
	                  if (!bothNaN && (oldItem !== newItem)) {
	                    changeDetected++;
	                    oldValue[key] = newItem;
	                  }
	                } else {
	                  oldLength++;
	                  oldValue[key] = newItem;
	                  changeDetected++;
	                }
	              }
	            }
	            if (oldLength > newLength) {
	              // we used to have more keys, need to find them and destroy them.
	              changeDetected++;
	              for (key in oldValue) {
	                if (!hasOwnProperty.call(newValue, key)) {
	                  oldLength--;
	                  delete oldValue[key];
	                }
	              }
	            }
	          }
	          return changeDetected;
	        }
	
	        function $watchCollectionAction() {
	          if (initRun) {
	            initRun = false;
	            listener(newValue, newValue, self);
	          } else {
	            listener(newValue, veryOldValue, self);
	          }
	
	          // make a copy for the next time a collection is changed
	          if (trackVeryOldValue) {
	            if (!isObject(newValue)) {
	              //primitive
	              veryOldValue = newValue;
	            } else if (isArrayLike(newValue)) {
	              veryOldValue = new Array(newValue.length);
	              for (var i = 0; i < newValue.length; i++) {
	                veryOldValue[i] = newValue[i];
	              }
	            } else { // if object
	              veryOldValue = {};
	              for (var key in newValue) {
	                if (hasOwnProperty.call(newValue, key)) {
	                  veryOldValue[key] = newValue[key];
	                }
	              }
	            }
	          }
	        }
	
	        return this.$watch(changeDetector, $watchCollectionAction);
	      },
	
	      /**
	       * @ngdoc method
	       * @name $rootScope.Scope#$digest
	       * @kind function
	       *
	       * @description
	       * Processes all of the {@link ng.$rootScope.Scope#$watch watchers} of the current scope and
	       * its children. Because a {@link ng.$rootScope.Scope#$watch watcher}'s listener can change
	       * the model, the `$digest()` keeps calling the {@link ng.$rootScope.Scope#$watch watchers}
	       * until no more listeners are firing. This means that it is possible to get into an infinite
	       * loop. This function will throw `'Maximum iteration limit exceeded.'` if the number of
	       * iterations exceeds 10.
	       *
	       * Usually, you don't call `$digest()` directly in
	       * {@link ng.directive:ngController controllers} or in
	       * {@link ng.$compileProvider#directive directives}.
	       * Instead, you should call {@link ng.$rootScope.Scope#$apply $apply()} (typically from within
	       * a {@link ng.$compileProvider#directive directive}), which will force a `$digest()`.
	       *
	       * If you want to be notified whenever `$digest()` is called,
	       * you can register a `watchExpression` function with
	       * {@link ng.$rootScope.Scope#$watch $watch()} with no `listener`.
	       *
	       * In unit tests, you may need to call `$digest()` to simulate the scope life cycle.
	       *
	       * # Example
	       * ```js
	           var scope = ...;
	           scope.name = 'misko';
	           scope.counter = 0;
	
	           expect(scope.counter).toEqual(0);
	           scope.$watch('name', function(newValue, oldValue) {
	             scope.counter = scope.counter + 1;
	           });
	           expect(scope.counter).toEqual(0);
	
	           scope.$digest();
	           // the listener is always called during the first $digest loop after it was registered
	           expect(scope.counter).toEqual(1);
	
	           scope.$digest();
	           // but now it will not be called unless the value changes
	           expect(scope.counter).toEqual(1);
	
	           scope.name = 'adam';
	           scope.$digest();
	           expect(scope.counter).toEqual(2);
	       * ```
	       *
	       */
	      $digest: function() {
	        var watch, value, last, fn, get,
	            watchers,
	            length,
	            dirty, ttl = TTL,
	            next, current, target = this,
	            watchLog = [],
	            logIdx, asyncTask;
	
	        beginPhase('$digest');
	        // Check for changes to browser url that happened in sync before the call to $digest
	        $browser.$$checkUrlChange();
	
	        if (this === $rootScope && applyAsyncId !== null) {
	          // If this is the root scope, and $applyAsync has scheduled a deferred $apply(), then
	          // cancel the scheduled $apply and flush the queue of expressions to be evaluated.
	          $browser.defer.cancel(applyAsyncId);
	          flushApplyAsync();
	        }
	
	        lastDirtyWatch = null;
	
	        do { // "while dirty" loop
	          dirty = false;
	          current = target;
	
	          while (asyncQueue.length) {
	            try {
	              asyncTask = asyncQueue.shift();
	              asyncTask.scope.$eval(asyncTask.expression, asyncTask.locals);
	            } catch (e) {
	              $exceptionHandler(e);
	            }
	            lastDirtyWatch = null;
	          }
	
	          traverseScopesLoop:
	          do { // "traverse the scopes" loop
	            if ((watchers = current.$$watchers)) {
	              // process our watches
	              length = watchers.length;
	              while (length--) {
	                try {
	                  watch = watchers[length];
	                  // Most common watches are on primitives, in which case we can short
	                  // circuit it with === operator, only when === fails do we use .equals
	                  if (watch) {
	                    get = watch.get;
	                    if ((value = get(current)) !== (last = watch.last) &&
	                        !(watch.eq
	                            ? equals(value, last)
	                            : (typeof value === 'number' && typeof last === 'number'
	                               && isNaN(value) && isNaN(last)))) {
	                      dirty = true;
	                      lastDirtyWatch = watch;
	                      watch.last = watch.eq ? copy(value, null) : value;
	                      fn = watch.fn;
	                      fn(value, ((last === initWatchVal) ? value : last), current);
	                      if (ttl < 5) {
	                        logIdx = 4 - ttl;
	                        if (!watchLog[logIdx]) watchLog[logIdx] = [];
	                        watchLog[logIdx].push({
	                          msg: isFunction(watch.exp) ? 'fn: ' + (watch.exp.name || watch.exp.toString()) : watch.exp,
	                          newVal: value,
	                          oldVal: last
	                        });
	                      }
	                    } else if (watch === lastDirtyWatch) {
	                      // If the most recently dirty watcher is now clean, short circuit since the remaining watchers
	                      // have already been tested.
	                      dirty = false;
	                      break traverseScopesLoop;
	                    }
	                  }
	                } catch (e) {
	                  $exceptionHandler(e);
	                }
	              }
	            }
	
	            // Insanity Warning: scope depth-first traversal
	            // yes, this code is a bit crazy, but it works and we have tests to prove it!
	            // this piece should be kept in sync with the traversal in $broadcast
	            if (!(next = ((current.$$watchersCount && current.$$childHead) ||
	                (current !== target && current.$$nextSibling)))) {
	              while (current !== target && !(next = current.$$nextSibling)) {
	                current = current.$parent;
	              }
	            }
	          } while ((current = next));
	
	          // `break traverseScopesLoop;` takes us to here
	
	          if ((dirty || asyncQueue.length) && !(ttl--)) {
	            clearPhase();
	            throw $rootScopeMinErr('infdig',
	                '{0} $digest() iterations reached. Aborting!\n' +
	                'Watchers fired in the last 5 iterations: {1}',
	                TTL, watchLog);
	          }
	
	        } while (dirty || asyncQueue.length);
	
	        clearPhase();
	
	        while (postDigestQueue.length) {
	          try {
	            postDigestQueue.shift()();
	          } catch (e) {
	            $exceptionHandler(e);
	          }
	        }
	      },
	
	
	      /**
	       * @ngdoc event
	       * @name $rootScope.Scope#$destroy
	       * @eventType broadcast on scope being destroyed
	       *
	       * @description
	       * Broadcasted when a scope and its children are being destroyed.
	       *
	       * Note that, in AngularJS, there is also a `$destroy` jQuery event, which can be used to
	       * clean up DOM bindings before an element is removed from the DOM.
	       */
	
	      /**
	       * @ngdoc method
	       * @name $rootScope.Scope#$destroy
	       * @kind function
	       *
	       * @description
	       * Removes the current scope (and all of its children) from the parent scope. Removal implies
	       * that calls to {@link ng.$rootScope.Scope#$digest $digest()} will no longer
	       * propagate to the current scope and its children. Removal also implies that the current
	       * scope is eligible for garbage collection.
	       *
	       * The `$destroy()` is usually used by directives such as
	       * {@link ng.directive:ngRepeat ngRepeat} for managing the
	       * unrolling of the loop.
	       *
	       * Just before a scope is destroyed, a `$destroy` event is broadcasted on this scope.
	       * Application code can register a `$destroy` event handler that will give it a chance to
	       * perform any necessary cleanup.
	       *
	       * Note that, in AngularJS, there is also a `$destroy` jQuery event, which can be used to
	       * clean up DOM bindings before an element is removed from the DOM.
	       */
	      $destroy: function() {
	        // We can't destroy a scope that has been already destroyed.
	        if (this.$$destroyed) return;
	        var parent = this.$parent;
	
	        this.$broadcast('$destroy');
	        this.$$destroyed = true;
	
	        if (this === $rootScope) {
	          //Remove handlers attached to window when $rootScope is removed
	          $browser.$$applicationDestroyed();
	        }
	
	        incrementWatchersCount(this, -this.$$watchersCount);
	        for (var eventName in this.$$listenerCount) {
	          decrementListenerCount(this, this.$$listenerCount[eventName], eventName);
	        }
	
	        // sever all the references to parent scopes (after this cleanup, the current scope should
	        // not be retained by any of our references and should be eligible for garbage collection)
	        if (parent && parent.$$childHead == this) parent.$$childHead = this.$$nextSibling;
	        if (parent && parent.$$childTail == this) parent.$$childTail = this.$$prevSibling;
	        if (this.$$prevSibling) this.$$prevSibling.$$nextSibling = this.$$nextSibling;
	        if (this.$$nextSibling) this.$$nextSibling.$$prevSibling = this.$$prevSibling;
	
	        // Disable listeners, watchers and apply/digest methods
	        this.$destroy = this.$digest = this.$apply = this.$evalAsync = this.$applyAsync = noop;
	        this.$on = this.$watch = this.$watchGroup = function() { return noop; };
	        this.$$listeners = {};
	
	        // Disconnect the next sibling to prevent `cleanUpScope` destroying those too
	        this.$$nextSibling = null;
	        cleanUpScope(this);
	      },
	
	      /**
	       * @ngdoc method
	       * @name $rootScope.Scope#$eval
	       * @kind function
	       *
	       * @description
	       * Executes the `expression` on the current scope and returns the result. Any exceptions in
	       * the expression are propagated (uncaught). This is useful when evaluating Angular
	       * expressions.
	       *
	       * # Example
	       * ```js
	           var scope = ng.$rootScope.Scope();
	           scope.a = 1;
	           scope.b = 2;
	
	           expect(scope.$eval('a+b')).toEqual(3);
	           expect(scope.$eval(function(scope){ return scope.a + scope.b; })).toEqual(3);
	       * ```
	       *
	       * @param {(string|function())=} expression An angular expression to be executed.
	       *
	       *    - `string`: execute using the rules as defined in  {@link guide/expression expression}.
	       *    - `function(scope)`: execute the function with the current `scope` parameter.
	       *
	       * @param {(object)=} locals Local variables object, useful for overriding values in scope.
	       * @returns {*} The result of evaluating the expression.
	       */
	      $eval: function(expr, locals) {
	        return $parse(expr)(this, locals);
	      },
	
	      /**
	       * @ngdoc method
	       * @name $rootScope.Scope#$evalAsync
	       * @kind function
	       *
	       * @description
	       * Executes the expression on the current scope at a later point in time.
	       *
	       * The `$evalAsync` makes no guarantees as to when the `expression` will be executed, only
	       * that:
	       *
	       *   - it will execute after the function that scheduled the evaluation (preferably before DOM
	       *     rendering).
	       *   - at least one {@link ng.$rootScope.Scope#$digest $digest cycle} will be performed after
	       *     `expression` execution.
	       *
	       * Any exceptions from the execution of the expression are forwarded to the
	       * {@link ng.$exceptionHandler $exceptionHandler} service.
	       *
	       * __Note:__ if this function is called outside of a `$digest` cycle, a new `$digest` cycle
	       * will be scheduled. However, it is encouraged to always call code that changes the model
	       * from within an `$apply` call. That includes code evaluated via `$evalAsync`.
	       *
	       * @param {(string|function())=} expression An angular expression to be executed.
	       *
	       *    - `string`: execute using the rules as defined in {@link guide/expression expression}.
	       *    - `function(scope)`: execute the function with the current `scope` parameter.
	       *
	       * @param {(object)=} locals Local variables object, useful for overriding values in scope.
	       */
	      $evalAsync: function(expr, locals) {
	        // if we are outside of an $digest loop and this is the first time we are scheduling async
	        // task also schedule async auto-flush
	        if (!$rootScope.$$phase && !asyncQueue.length) {
	          $browser.defer(function() {
	            if (asyncQueue.length) {
	              $rootScope.$digest();
	            }
	          });
	        }
	
	        asyncQueue.push({scope: this, expression: $parse(expr), locals: locals});
	      },
	
	      $$postDigest: function(fn) {
	        postDigestQueue.push(fn);
	      },
	
	      /**
	       * @ngdoc method
	       * @name $rootScope.Scope#$apply
	       * @kind function
	       *
	       * @description
	       * `$apply()` is used to execute an expression in angular from outside of the angular
	       * framework. (For example from browser DOM events, setTimeout, XHR or third party libraries).
	       * Because we are calling into the angular framework we need to perform proper scope life
	       * cycle of {@link ng.$exceptionHandler exception handling},
	       * {@link ng.$rootScope.Scope#$digest executing watches}.
	       *
	       * ## Life cycle
	       *
	       * # Pseudo-Code of `$apply()`
	       * ```js
	           function $apply(expr) {
	             try {
	               return $eval(expr);
	             } catch (e) {
	               $exceptionHandler(e);
	             } finally {
	               $root.$digest();
	             }
	           }
	       * ```
	       *
	       *
	       * Scope's `$apply()` method transitions through the following stages:
	       *
	       * 1. The {@link guide/expression expression} is executed using the
	       *    {@link ng.$rootScope.Scope#$eval $eval()} method.
	       * 2. Any exceptions from the execution of the expression are forwarded to the
	       *    {@link ng.$exceptionHandler $exceptionHandler} service.
	       * 3. The {@link ng.$rootScope.Scope#$watch watch} listeners are fired immediately after the
	       *    expression was executed using the {@link ng.$rootScope.Scope#$digest $digest()} method.
	       *
	       *
	       * @param {(string|function())=} exp An angular expression to be executed.
	       *
	       *    - `string`: execute using the rules as defined in {@link guide/expression expression}.
	       *    - `function(scope)`: execute the function with current `scope` parameter.
	       *
	       * @returns {*} The result of evaluating the expression.
	       */
	      $apply: function(expr) {
	        try {
	          beginPhase('$apply');
	          try {
	            return this.$eval(expr);
	          } finally {
	            clearPhase();
	          }
	        } catch (e) {
	          $exceptionHandler(e);
	        } finally {
	          try {
	            $rootScope.$digest();
	          } catch (e) {
	            $exceptionHandler(e);
	            throw e;
	          }
	        }
	      },
	
	      /**
	       * @ngdoc method
	       * @name $rootScope.Scope#$applyAsync
	       * @kind function
	       *
	       * @description
	       * Schedule the invocation of $apply to occur at a later time. The actual time difference
	       * varies across browsers, but is typically around ~10 milliseconds.
	       *
	       * This can be used to queue up multiple expressions which need to be evaluated in the same
	       * digest.
	       *
	       * @param {(string|function())=} exp An angular expression to be executed.
	       *
	       *    - `string`: execute using the rules as defined in {@link guide/expression expression}.
	       *    - `function(scope)`: execute the function with current `scope` parameter.
	       */
	      $applyAsync: function(expr) {
	        var scope = this;
	        expr && applyAsyncQueue.push($applyAsyncExpression);
	        expr = $parse(expr);
	        scheduleApplyAsync();
	
	        function $applyAsyncExpression() {
	          scope.$eval(expr);
	        }
	      },
	
	      /**
	       * @ngdoc method
	       * @name $rootScope.Scope#$on
	       * @kind function
	       *
	       * @description
	       * Listens on events of a given type. See {@link ng.$rootScope.Scope#$emit $emit} for
	       * discussion of event life cycle.
	       *
	       * The event listener function format is: `function(event, args...)`. The `event` object
	       * passed into the listener has the following attributes:
	       *
	       *   - `targetScope` - `{Scope}`: the scope on which the event was `$emit`-ed or
	       *     `$broadcast`-ed.
	       *   - `currentScope` - `{Scope}`: the scope that is currently handling the event. Once the
	       *     event propagates through the scope hierarchy, this property is set to null.
	       *   - `name` - `{string}`: name of the event.
	       *   - `stopPropagation` - `{function=}`: calling `stopPropagation` function will cancel
	       *     further event propagation (available only for events that were `$emit`-ed).
	       *   - `preventDefault` - `{function}`: calling `preventDefault` sets `defaultPrevented` flag
	       *     to true.
	       *   - `defaultPrevented` - `{boolean}`: true if `preventDefault` was called.
	       *
	       * @param {string} name Event name to listen on.
	       * @param {function(event, ...args)} listener Function to call when the event is emitted.
	       * @returns {function()} Returns a deregistration function for this listener.
	       */
	      $on: function(name, listener) {
	        var namedListeners = this.$$listeners[name];
	        if (!namedListeners) {
	          this.$$listeners[name] = namedListeners = [];
	        }
	        namedListeners.push(listener);
	
	        var current = this;
	        do {
	          if (!current.$$listenerCount[name]) {
	            current.$$listenerCount[name] = 0;
	          }
	          current.$$listenerCount[name]++;
	        } while ((current = current.$parent));
	
	        var self = this;
	        return function() {
	          var indexOfListener = namedListeners.indexOf(listener);
	          if (indexOfListener !== -1) {
	            namedListeners[indexOfListener] = null;
	            decrementListenerCount(self, 1, name);
	          }
	        };
	      },
	
	
	      /**
	       * @ngdoc method
	       * @name $rootScope.Scope#$emit
	       * @kind function
	       *
	       * @description
	       * Dispatches an event `name` upwards through the scope hierarchy notifying the
	       * registered {@link ng.$rootScope.Scope#$on} listeners.
	       *
	       * The event life cycle starts at the scope on which `$emit` was called. All
	       * {@link ng.$rootScope.Scope#$on listeners} listening for `name` event on this scope get
	       * notified. Afterwards, the event traverses upwards toward the root scope and calls all
	       * registered listeners along the way. The event will stop propagating if one of the listeners
	       * cancels it.
	       *
	       * Any exception emitted from the {@link ng.$rootScope.Scope#$on listeners} will be passed
	       * onto the {@link ng.$exceptionHandler $exceptionHandler} service.
	       *
	       * @param {string} name Event name to emit.
	       * @param {...*} args Optional one or more arguments which will be passed onto the event listeners.
	       * @return {Object} Event object (see {@link ng.$rootScope.Scope#$on}).
	       */
	      $emit: function(name, args) {
	        var empty = [],
	            namedListeners,
	            scope = this,
	            stopPropagation = false,
	            event = {
	              name: name,
	              targetScope: scope,
	              stopPropagation: function() {stopPropagation = true;},
	              preventDefault: function() {
	                event.defaultPrevented = true;
	              },
	              defaultPrevented: false
	            },
	            listenerArgs = concat([event], arguments, 1),
	            i, length;
	
	        do {
	          namedListeners = scope.$$listeners[name] || empty;
	          event.currentScope = scope;
	          for (i = 0, length = namedListeners.length; i < length; i++) {
	
	            // if listeners were deregistered, defragment the array
	            if (!namedListeners[i]) {
	              namedListeners.splice(i, 1);
	              i--;
	              length--;
	              continue;
	            }
	            try {
	              //allow all listeners attached to the current scope to run
	              namedListeners[i].apply(null, listenerArgs);
	            } catch (e) {
	              $exceptionHandler(e);
	            }
	          }
	          //if any listener on the current scope stops propagation, prevent bubbling
	          if (stopPropagation) {
	            event.currentScope = null;
	            return event;
	          }
	          //traverse upwards
	          scope = scope.$parent;
	        } while (scope);
	
	        event.currentScope = null;
	
	        return event;
	      },
	
	
	      /**
	       * @ngdoc method
	       * @name $rootScope.Scope#$broadcast
	       * @kind function
	       *
	       * @description
	       * Dispatches an event `name` downwards to all child scopes (and their children) notifying the
	       * registered {@link ng.$rootScope.Scope#$on} listeners.
	       *
	       * The event life cycle starts at the scope on which `$broadcast` was called. All
	       * {@link ng.$rootScope.Scope#$on listeners} listening for `name` event on this scope get
	       * notified. Afterwards, the event propagates to all direct and indirect scopes of the current
	       * scope and calls all registered listeners along the way. The event cannot be canceled.
	       *
	       * Any exception emitted from the {@link ng.$rootScope.Scope#$on listeners} will be passed
	       * onto the {@link ng.$exceptionHandler $exceptionHandler} service.
	       *
	       * @param {string} name Event name to broadcast.
	       * @param {...*} args Optional one or more arguments which will be passed onto the event listeners.
	       * @return {Object} Event object, see {@link ng.$rootScope.Scope#$on}
	       */
	      $broadcast: function(name, args) {
	        var target = this,
	            current = target,
	            next = target,
	            event = {
	              name: name,
	              targetScope: target,
	              preventDefault: function() {
	                event.defaultPrevented = true;
	              },
	              defaultPrevented: false
	            };
	
	        if (!target.$$listenerCount[name]) return event;
	
	        var listenerArgs = concat([event], arguments, 1),
	            listeners, i, length;
	
	        //down while you can, then up and next sibling or up and next sibling until back at root
	        while ((current = next)) {
	          event.currentScope = current;
	          listeners = current.$$listeners[name] || [];
	          for (i = 0, length = listeners.length; i < length; i++) {
	            // if listeners were deregistered, defragment the array
	            if (!listeners[i]) {
	              listeners.splice(i, 1);
	              i--;
	              length--;
	              continue;
	            }
	
	            try {
	              listeners[i].apply(null, listenerArgs);
	            } catch (e) {
	              $exceptionHandler(e);
	            }
	          }
	
	          // Insanity Warning: scope depth-first traversal
	          // yes, this code is a bit crazy, but it works and we have tests to prove it!
	          // this piece should be kept in sync with the traversal in $digest
	          // (though it differs due to having the extra check for $$listenerCount)
	          if (!(next = ((current.$$listenerCount[name] && current.$$childHead) ||
	              (current !== target && current.$$nextSibling)))) {
	            while (current !== target && !(next = current.$$nextSibling)) {
	              current = current.$parent;
	            }
	          }
	        }
	
	        event.currentScope = null;
	        return event;
	      }
	    };
	
	    var $rootScope = new Scope();
	
	    //The internal queues. Expose them on the $rootScope for debugging/testing purposes.
	    var asyncQueue = $rootScope.$$asyncQueue = [];
	    var postDigestQueue = $rootScope.$$postDigestQueue = [];
	    var applyAsyncQueue = $rootScope.$$applyAsyncQueue = [];
	
	    return $rootScope;
	
	
	    function beginPhase(phase) {
	      if ($rootScope.$$phase) {
	        throw $rootScopeMinErr('inprog', '{0} already in progress', $rootScope.$$phase);
	      }
	
	      $rootScope.$$phase = phase;
	    }
	
	    function clearPhase() {
	      $rootScope.$$phase = null;
	    }
	
	    function incrementWatchersCount(current, count) {
	      do {
	        current.$$watchersCount += count;
	      } while ((current = current.$parent));
	    }
	
	    function decrementListenerCount(current, count, name) {
	      do {
	        current.$$listenerCount[name] -= count;
	
	        if (current.$$listenerCount[name] === 0) {
	          delete current.$$listenerCount[name];
	        }
	      } while ((current = current.$parent));
	    }
	
	    /**
	     * function used as an initial value for watchers.
	     * because it's unique we can easily tell it apart from other values
	     */
	    function initWatchVal() {}
	
	    function flushApplyAsync() {
	      while (applyAsyncQueue.length) {
	        try {
	          applyAsyncQueue.shift()();
	        } catch (e) {
	          $exceptionHandler(e);
	        }
	      }
	      applyAsyncId = null;
	    }
	
	    function scheduleApplyAsync() {
	      if (applyAsyncId === null) {
	        applyAsyncId = $browser.defer(function() {
	          $rootScope.$apply(flushApplyAsync);
	        });
	      }
	    }
	  }];
	}
	
	/**
	 * @ngdoc service
	 * @name $rootElement
	 *
	 * @description
	 * The root element of Angular application. This is either the element where {@link
	 * ng.directive:ngApp ngApp} was declared or the element passed into
	 * {@link angular.bootstrap}. The element represents the root element of application. It is also the
	 * location where the application's {@link auto.$injector $injector} service gets
	 * published, and can be retrieved using `$rootElement.injector()`.
	 */
	
	
	// the implementation is in angular.bootstrap
	
	/**
	 * @description
	 * Private service to sanitize uris for links and images. Used by $compile and $sanitize.
	 */
	function $$SanitizeUriProvider() {
	  var aHrefSanitizationWhitelist = /^\s*(https?|ftp|mailto|tel|file):/,
	    imgSrcSanitizationWhitelist = /^\s*((https?|ftp|file|blob):|data:image\/)/;
	
	  /**
	   * @description
	   * Retrieves or overrides the default regular expression that is used for whitelisting of safe
	   * urls during a[href] sanitization.
	   *
	   * The sanitization is a security measure aimed at prevent XSS attacks via html links.
	   *
	   * Any url about to be assigned to a[href] via data-binding is first normalized and turned into
	   * an absolute url. Afterwards, the url is matched against the `aHrefSanitizationWhitelist`
	   * regular expression. If a match is found, the original url is written into the dom. Otherwise,
	   * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.
	   *
	   * @param {RegExp=} regexp New regexp to whitelist urls with.
	   * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for
	   *    chaining otherwise.
	   */
	  this.aHrefSanitizationWhitelist = function(regexp) {
	    if (isDefined(regexp)) {
	      aHrefSanitizationWhitelist = regexp;
	      return this;
	    }
	    return aHrefSanitizationWhitelist;
	  };
	
	
	  /**
	   * @description
	   * Retrieves or overrides the default regular expression that is used for whitelisting of safe
	   * urls during img[src] sanitization.
	   *
	   * The sanitization is a security measure aimed at prevent XSS attacks via html links.
	   *
	   * Any url about to be assigned to img[src] via data-binding is first normalized and turned into
	   * an absolute url. Afterwards, the url is matched against the `imgSrcSanitizationWhitelist`
	   * regular expression. If a match is found, the original url is written into the dom. Otherwise,
	   * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.
	   *
	   * @param {RegExp=} regexp New regexp to whitelist urls with.
	   * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for
	   *    chaining otherwise.
	   */
	  this.imgSrcSanitizationWhitelist = function(regexp) {
	    if (isDefined(regexp)) {
	      imgSrcSanitizationWhitelist = regexp;
	      return this;
	    }
	    return imgSrcSanitizationWhitelist;
	  };
	
	  this.$get = function() {
	    return function sanitizeUri(uri, isImage) {
	      var regex = isImage ? imgSrcSanitizationWhitelist : aHrefSanitizationWhitelist;
	      var normalizedVal;
	      normalizedVal = urlResolve(uri).href;
	      if (normalizedVal !== '' && !normalizedVal.match(regex)) {
	        return 'unsafe:' + normalizedVal;
	      }
	      return uri;
	    };
	  };
	}
	
	/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	 *     Any commits to this file should be reviewed with security in mind.  *
	 *   Changes to this file can potentially create security vulnerabilities. *
	 *          An approval from 2 Core members with history of modifying      *
	 *                         this file is required.                          *
	 *                                                                         *
	 *  Does the change somehow allow for arbitrary javascript to be executed? *
	 *    Or allows for someone to change the prototype of built-in objects?   *
	 *     Or gives undesired access to variables likes document or window?    *
	 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
	
	var $sceMinErr = minErr('$sce');
	
	var SCE_CONTEXTS = {
	  HTML: 'html',
	  CSS: 'css',
	  URL: 'url',
	  // RESOURCE_URL is a subtype of URL used in contexts where a privileged resource is sourced from a
	  // url.  (e.g. ng-include, script src, templateUrl)
	  RESOURCE_URL: 'resourceUrl',
	  JS: 'js'
	};
	
	// Helper functions follow.
	
	function adjustMatcher(matcher) {
	  if (matcher === 'self') {
	    return matcher;
	  } else if (isString(matcher)) {
	    // Strings match exactly except for 2 wildcards - '*' and '**'.
	    // '*' matches any character except those from the set ':/.?&'.
	    // '**' matches any character (like .* in a RegExp).
	    // More than 2 *'s raises an error as it's ill defined.
	    if (matcher.indexOf('***') > -1) {
	      throw $sceMinErr('iwcard',
	          'Illegal sequence *** in string matcher.  String: {0}', matcher);
	    }
	    matcher = escapeForRegexp(matcher).
	                  replace('\\*\\*', '.*').
	                  replace('\\*', '[^:/.?&;]*');
	    return new RegExp('^' + matcher + '$');
	  } else if (isRegExp(matcher)) {
	    // The only other type of matcher allowed is a Regexp.
	    // Match entire URL / disallow partial matches.
	    // Flags are reset (i.e. no global, ignoreCase or multiline)
	    return new RegExp('^' + matcher.source + '$');
	  } else {
	    throw $sceMinErr('imatcher',
	        'Matchers may only be "self", string patterns or RegExp objects');
	  }
	}
	
	
	function adjustMatchers(matchers) {
	  var adjustedMatchers = [];
	  if (isDefined(matchers)) {
	    forEach(matchers, function(matcher) {
	      adjustedMatchers.push(adjustMatcher(matcher));
	    });
	  }
	  return adjustedMatchers;
	}
	
	
	/**
	 * @ngdoc service
	 * @name $sceDelegate
	 * @kind function
	 *
	 * @description
	 *
	 * `$sceDelegate` is a service that is used by the `$sce` service to provide {@link ng.$sce Strict
	 * Contextual Escaping (SCE)} services to AngularJS.
	 *
	 * Typically, you would configure or override the {@link ng.$sceDelegate $sceDelegate} instead of
	 * the `$sce` service to customize the way Strict Contextual Escaping works in AngularJS.  This is
	 * because, while the `$sce` provides numerous shorthand methods, etc., you really only need to
	 * override 3 core functions (`trustAs`, `getTrusted` and `valueOf`) to replace the way things
	 * work because `$sce` delegates to `$sceDelegate` for these operations.
	 *
	 * Refer {@link ng.$sceDelegateProvider $sceDelegateProvider} to configure this service.
	 *
	 * The default instance of `$sceDelegate` should work out of the box with little pain.  While you
	 * can override it completely to change the behavior of `$sce`, the common case would
	 * involve configuring the {@link ng.$sceDelegateProvider $sceDelegateProvider} instead by setting
	 * your own whitelists and blacklists for trusting URLs used for loading AngularJS resources such as
	 * templates.  Refer {@link ng.$sceDelegateProvider#resourceUrlWhitelist
	 * $sceDelegateProvider.resourceUrlWhitelist} and {@link
	 * ng.$sceDelegateProvider#resourceUrlBlacklist $sceDelegateProvider.resourceUrlBlacklist}
	 */
	
	/**
	 * @ngdoc provider
	 * @name $sceDelegateProvider
	 * @description
	 *
	 * The `$sceDelegateProvider` provider allows developers to configure the {@link ng.$sceDelegate
	 * $sceDelegate} service.  This allows one to get/set the whitelists and blacklists used to ensure
	 * that the URLs used for sourcing Angular templates are safe.  Refer {@link
	 * ng.$sceDelegateProvider#resourceUrlWhitelist $sceDelegateProvider.resourceUrlWhitelist} and
	 * {@link ng.$sceDelegateProvider#resourceUrlBlacklist $sceDelegateProvider.resourceUrlBlacklist}
	 *
	 * For the general details about this service in Angular, read the main page for {@link ng.$sce
	 * Strict Contextual Escaping (SCE)}.
	 *
	 * **Example**:  Consider the following case. <a name="example"></a>
	 *
	 * - your app is hosted at url `http://myapp.example.com/`
	 * - but some of your templates are hosted on other domains you control such as
	 *   `http://srv01.assets.example.com/`,  `http://srv02.assets.example.com/`, etc.
	 * - and you have an open redirect at `http://myapp.example.com/clickThru?...`.
	 *
	 * Here is what a secure configuration for this scenario might look like:
	 *
	 * ```
	 *  angular.module('myApp', []).config(function($sceDelegateProvider) {
	 *    $sceDelegateProvider.resourceUrlWhitelist([
	 *      // Allow same origin resource loads.
	 *      'self',
	 *      // Allow loading from our assets domain.  Notice the difference between * and **.
	 *      'http://srv*.assets.example.com/**'
	 *    ]);
	 *
	 *    // The blacklist overrides the whitelist so the open redirect here is blocked.
	 *    $sceDelegateProvider.resourceUrlBlacklist([
	 *      'http://myapp.example.com/clickThru**'
	 *    ]);
	 *  });
	 * ```
	 */
	
	function $SceDelegateProvider() {
	  this.SCE_CONTEXTS = SCE_CONTEXTS;
	
	  // Resource URLs can also be trusted by policy.
	  var resourceUrlWhitelist = ['self'],
	      resourceUrlBlacklist = [];
	
	  /**
	   * @ngdoc method
	   * @name $sceDelegateProvider#resourceUrlWhitelist
	   * @kind function
	   *
	   * @param {Array=} whitelist When provided, replaces the resourceUrlWhitelist with the value
	   *    provided.  This must be an array or null.  A snapshot of this array is used so further
	   *    changes to the array are ignored.
	   *
	   *    Follow {@link ng.$sce#resourceUrlPatternItem this link} for a description of the items
	   *    allowed in this array.
	   *
	   *    <div class="alert alert-warning">
	   *    **Note:** an empty whitelist array will block all URLs!
	   *    </div>
	   *
	   * @return {Array} the currently set whitelist array.
	   *
	   * The **default value** when no whitelist has been explicitly set is `['self']` allowing only
	   * same origin resource requests.
	   *
	   * @description
	   * Sets/Gets the whitelist of trusted resource URLs.
	   */
	  this.resourceUrlWhitelist = function(value) {
	    if (arguments.length) {
	      resourceUrlWhitelist = adjustMatchers(value);
	    }
	    return resourceUrlWhitelist;
	  };
	
	  /**
	   * @ngdoc method
	   * @name $sceDelegateProvider#resourceUrlBlacklist
	   * @kind function
	   *
	   * @param {Array=} blacklist When provided, replaces the resourceUrlBlacklist with the value
	   *    provided.  This must be an array or null.  A snapshot of this array is used so further
	   *    changes to the array are ignored.
	   *
	   *    Follow {@link ng.$sce#resourceUrlPatternItem this link} for a description of the items
	   *    allowed in this array.
	   *
	   *    The typical usage for the blacklist is to **block
	   *    [open redirects](http://cwe.mitre.org/data/definitions/601.html)** served by your domain as
	   *    these would otherwise be trusted but actually return content from the redirected domain.
	   *
	   *    Finally, **the blacklist overrides the whitelist** and has the final say.
	   *
	   * @return {Array} the currently set blacklist array.
	   *
	   * The **default value** when no whitelist has been explicitly set is the empty array (i.e. there
	   * is no blacklist.)
	   *
	   * @description
	   * Sets/Gets the blacklist of trusted resource URLs.
	   */
	
	  this.resourceUrlBlacklist = function(value) {
	    if (arguments.length) {
	      resourceUrlBlacklist = adjustMatchers(value);
	    }
	    return resourceUrlBlacklist;
	  };
	
	  this.$get = ['$injector', function($injector) {
	
	    var htmlSanitizer = function htmlSanitizer(html) {
	      throw $sceMinErr('unsafe', 'Attempting to use an unsafe value in a safe context.');
	    };
	
	    if ($injector.has('$sanitize')) {
	      htmlSanitizer = $injector.get('$sanitize');
	    }
	
	
	    function matchUrl(matcher, parsedUrl) {
	      if (matcher === 'self') {
	        return urlIsSameOrigin(parsedUrl);
	      } else {
	        // definitely a regex.  See adjustMatchers()
	        return !!matcher.exec(parsedUrl.href);
	      }
	    }
	
	    function isResourceUrlAllowedByPolicy(url) {
	      var parsedUrl = urlResolve(url.toString());
	      var i, n, allowed = false;
	      // Ensure that at least one item from the whitelist allows this url.
	      for (i = 0, n = resourceUrlWhitelist.length; i < n; i++) {
	        if (matchUrl(resourceUrlWhitelist[i], parsedUrl)) {
	          allowed = true;
	          break;
	        }
	      }
	      if (allowed) {
	        // Ensure that no item from the blacklist blocked this url.
	        for (i = 0, n = resourceUrlBlacklist.length; i < n; i++) {
	          if (matchUrl(resourceUrlBlacklist[i], parsedUrl)) {
	            allowed = false;
	            break;
	          }
	        }
	      }
	      return allowed;
	    }
	
	    function generateHolderType(Base) {
	      var holderType = function TrustedValueHolderType(trustedValue) {
	        this.$$unwrapTrustedValue = function() {
	          return trustedValue;
	        };
	      };
	      if (Base) {
	        holderType.prototype = new Base();
	      }
	      holderType.prototype.valueOf = function sceValueOf() {
	        return this.$$unwrapTrustedValue();
	      };
	      holderType.prototype.toString = function sceToString() {
	        return this.$$unwrapTrustedValue().toString();
	      };
	      return holderType;
	    }
	
	    var trustedValueHolderBase = generateHolderType(),
	        byType = {};
	
	    byType[SCE_CONTEXTS.HTML] = generateHolderType(trustedValueHolderBase);
	    byType[SCE_CONTEXTS.CSS] = generateHolderType(trustedValueHolderBase);
	    byType[SCE_CONTEXTS.URL] = generateHolderType(trustedValueHolderBase);
	    byType[SCE_CONTEXTS.JS] = generateHolderType(trustedValueHolderBase);
	    byType[SCE_CONTEXTS.RESOURCE_URL] = generateHolderType(byType[SCE_CONTEXTS.URL]);
	
	    /**
	     * @ngdoc method
	     * @name $sceDelegate#trustAs
	     *
	     * @description
	     * Returns an object that is trusted by angular for use in specified strict
	     * contextual escaping contexts (such as ng-bind-html, ng-include, any src
	     * attribute interpolation, any dom event binding attribute interpolation
	     * such as for onclick,  etc.) that uses the provided value.
	     * See {@link ng.$sce $sce} for enabling strict contextual escaping.
	     *
	     * @param {string} type The kind of context in which this value is safe for use.  e.g. url,
	     *   resourceUrl, html, js and css.
	     * @param {*} value The value that that should be considered trusted/safe.
	     * @returns {*} A value that can be used to stand in for the provided `value` in places
	     * where Angular expects a $sce.trustAs() return value.
	     */
	    function trustAs(type, trustedValue) {
	      var Constructor = (byType.hasOwnProperty(type) ? byType[type] : null);
	      if (!Constructor) {
	        throw $sceMinErr('icontext',
	            'Attempted to trust a value in invalid context. Context: {0}; Value: {1}',
	            type, trustedValue);
	      }
	      if (trustedValue === null || isUndefined(trustedValue) || trustedValue === '') {
	        return trustedValue;
	      }
	      // All the current contexts in SCE_CONTEXTS happen to be strings.  In order to avoid trusting
	      // mutable objects, we ensure here that the value passed in is actually a string.
	      if (typeof trustedValue !== 'string') {
	        throw $sceMinErr('itype',
	            'Attempted to trust a non-string value in a content requiring a string: Context: {0}',
	            type);
	      }
	      return new Constructor(trustedValue);
	    }
	
	    /**
	     * @ngdoc method
	     * @name $sceDelegate#valueOf
	     *
	     * @description
	     * If the passed parameter had been returned by a prior call to {@link ng.$sceDelegate#trustAs
	     * `$sceDelegate.trustAs`}, returns the value that had been passed to {@link
	     * ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}.
	     *
	     * If the passed parameter is not a value that had been returned by {@link
	     * ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}, returns it as-is.
	     *
	     * @param {*} value The result of a prior {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}
	     *      call or anything else.
	     * @returns {*} The `value` that was originally provided to {@link ng.$sceDelegate#trustAs
	     *     `$sceDelegate.trustAs`} if `value` is the result of such a call.  Otherwise, returns
	     *     `value` unchanged.
	     */
	    function valueOf(maybeTrusted) {
	      if (maybeTrusted instanceof trustedValueHolderBase) {
	        return maybeTrusted.$$unwrapTrustedValue();
	      } else {
	        return maybeTrusted;
	      }
	    }
	
	    /**
	     * @ngdoc method
	     * @name $sceDelegate#getTrusted
	     *
	     * @description
	     * Takes the result of a {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs`} call and
	     * returns the originally supplied value if the queried context type is a supertype of the
	     * created type.  If this condition isn't satisfied, throws an exception.
	     *
	     * <div class="alert alert-danger">
	     * Disabling auto-escaping is extremely dangerous, it usually creates a Cross Site Scripting
	     * (XSS) vulnerability in your application.
	     * </div>
	     *
	     * @param {string} type The kind of context in which this value is to be used.
	     * @param {*} maybeTrusted The result of a prior {@link ng.$sceDelegate#trustAs
	     *     `$sceDelegate.trustAs`} call.
	     * @returns {*} The value the was originally provided to {@link ng.$sceDelegate#trustAs
	     *     `$sceDelegate.trustAs`} if valid in this context.  Otherwise, throws an exception.
	     */
	    function getTrusted(type, maybeTrusted) {
	      if (maybeTrusted === null || isUndefined(maybeTrusted) || maybeTrusted === '') {
	        return maybeTrusted;
	      }
	      var constructor = (byType.hasOwnProperty(type) ? byType[type] : null);
	      if (constructor && maybeTrusted instanceof constructor) {
	        return maybeTrusted.$$unwrapTrustedValue();
	      }
	      // If we get here, then we may only take one of two actions.
	      // 1. sanitize the value for the requested type, or
	      // 2. throw an exception.
	      if (type === SCE_CONTEXTS.RESOURCE_URL) {
	        if (isResourceUrlAllowedByPolicy(maybeTrusted)) {
	          return maybeTrusted;
	        } else {
	          throw $sceMinErr('insecurl',
	              'Blocked loading resource from url not allowed by $sceDelegate policy.  URL: {0}',
	              maybeTrusted.toString());
	        }
	      } else if (type === SCE_CONTEXTS.HTML) {
	        return htmlSanitizer(maybeTrusted);
	      }
	      throw $sceMinErr('unsafe', 'Attempting to use an unsafe value in a safe context.');
	    }
	
	    return { trustAs: trustAs,
	             getTrusted: getTrusted,
	             valueOf: valueOf };
	  }];
	}
	
	
	/**
	 * @ngdoc provider
	 * @name $sceProvider
	 * @description
	 *
	 * The $sceProvider provider allows developers to configure the {@link ng.$sce $sce} service.
	 * -   enable/disable Strict Contextual Escaping (SCE) in a module
	 * -   override the default implementation with a custom delegate
	 *
	 * Read more about {@link ng.$sce Strict Contextual Escaping (SCE)}.
	 */
	
	/* jshint maxlen: false*/
	
	/**
	 * @ngdoc service
	 * @name $sce
	 * @kind function
	 *
	 * @description
	 *
	 * `$sce` is a service that provides Strict Contextual Escaping services to AngularJS.
	 *
	 * # Strict Contextual Escaping
	 *
	 * Strict Contextual Escaping (SCE) is a mode in which AngularJS requires bindings in certain
	 * contexts to result in a value that is marked as safe to use for that context.  One example of
	 * such a context is binding arbitrary html controlled by the user via `ng-bind-html`.  We refer
	 * to these contexts as privileged or SCE contexts.
	 *
	 * As of version 1.2, Angular ships with SCE enabled by default.
	 *
	 * Note:  When enabled (the default), IE<11 in quirks mode is not supported.  In this mode, IE<11 allow
	 * one to execute arbitrary javascript by the use of the expression() syntax.  Refer
	 * <http://blogs.msdn.com/b/ie/archive/2008/10/16/ending-expressions.aspx> to learn more about them.
	 * You can ensure your document is in standards mode and not quirks mode by adding `<!doctype html>`
	 * to the top of your HTML document.
	 *
	 * SCE assists in writing code in way that (a) is secure by default and (b) makes auditing for
	 * security vulnerabilities such as XSS, clickjacking, etc. a lot easier.
	 *
	 * Here's an example of a binding in a privileged context:
	 *
	 * ```
	 * <input ng-model="userHtml" aria-label="User input">
	 * <div ng-bind-html="userHtml"></div>
	 * ```
	 *
	 * Notice that `ng-bind-html` is bound to `userHtml` controlled by the user.  With SCE
	 * disabled, this application allows the user to render arbitrary HTML into the DIV.
	 * In a more realistic example, one may be rendering user comments, blog articles, etc. via
	 * bindings.  (HTML is just one example of a context where rendering user controlled input creates
	 * security vulnerabilities.)
	 *
	 * For the case of HTML, you might use a library, either on the client side, or on the server side,
	 * to sanitize unsafe HTML before binding to the value and rendering it in the document.
	 *
	 * How would you ensure that every place that used these types of bindings was bound to a value that
	 * was sanitized by your library (or returned as safe for rendering by your server?)  How can you
	 * ensure that you didn't accidentally delete the line that sanitized the value, or renamed some
	 * properties/fields and forgot to update the binding to the sanitized value?
	 *
	 * To be secure by default, you want to ensure that any such bindings are disallowed unless you can
	 * determine that something explicitly says it's safe to use a value for binding in that
	 * context.  You can then audit your code (a simple grep would do) to ensure that this is only done
	 * for those values that you can easily tell are safe - because they were received from your server,
	 * sanitized by your library, etc.  You can organize your codebase to help with this - perhaps
	 * allowing only the files in a specific directory to do this.  Ensuring that the internal API
	 * exposed by that code doesn't markup arbitrary values as safe then becomes a more manageable task.
	 *
	 * In the case of AngularJS' SCE service, one uses {@link ng.$sce#trustAs $sce.trustAs}
	 * (and shorthand methods such as {@link ng.$sce#trustAsHtml $sce.trustAsHtml}, etc.) to
	 * obtain values that will be accepted by SCE / privileged contexts.
	 *
	 *
	 * ## How does it work?
	 *
	 * In privileged contexts, directives and code will bind to the result of {@link ng.$sce#getTrusted
	 * $sce.getTrusted(context, value)} rather than to the value directly.  Directives use {@link
	 * ng.$sce#parseAs $sce.parseAs} rather than `$parse` to watch attribute bindings, which performs the
	 * {@link ng.$sce#getTrusted $sce.getTrusted} behind the scenes on non-constant literals.
	 *
	 * As an example, {@link ng.directive:ngBindHtml ngBindHtml} uses {@link
	 * ng.$sce#parseAsHtml $sce.parseAsHtml(binding expression)}.  Here's the actual code (slightly
	 * simplified):
	 *
	 * ```
	 * var ngBindHtmlDirective = ['$sce', function($sce) {
	 *   return function(scope, element, attr) {
	 *     scope.$watch($sce.parseAsHtml(attr.ngBindHtml), function(value) {
	 *       element.html(value || '');
	 *     });
	 *   };
	 * }];
	 * ```
	 *
	 * ## Impact on loading templates
	 *
	 * This applies both to the {@link ng.directive:ngInclude `ng-include`} directive as well as
	 * `templateUrl`'s specified by {@link guide/directive directives}.
	 *
	 * By default, Angular only loads templates from the same domain and protocol as the application
	 * document.  This is done by calling {@link ng.$sce#getTrustedResourceUrl
	 * $sce.getTrustedResourceUrl} on the template URL.  To load templates from other domains and/or
	 * protocols, you may either {@link ng.$sceDelegateProvider#resourceUrlWhitelist whitelist
	 * them} or {@link ng.$sce#trustAsResourceUrl wrap it} into a trusted value.
	 *
	 * *Please note*:
	 * The browser's
	 * [Same Origin Policy](https://code.google.com/p/browsersec/wiki/Part2#Same-origin_policy_for_XMLHttpRequest)
	 * and [Cross-Origin Resource Sharing (CORS)](http://www.w3.org/TR/cors/)
	 * policy apply in addition to this and may further restrict whether the template is successfully
	 * loaded.  This means that without the right CORS policy, loading templates from a different domain
	 * won't work on all browsers.  Also, loading templates from `file://` URL does not work on some
	 * browsers.
	 *
	 * ## This feels like too much overhead
	 *
	 * It's important to remember that SCE only applies to interpolation expressions.
	 *
	 * If your expressions are constant literals, they're automatically trusted and you don't need to
	 * call `$sce.trustAs` on them (remember to include the `ngSanitize` module) (e.g.
	 * `<div ng-bind-html="'<b>implicitly trusted</b>'"></div>`) just works.
	 *
	 * Additionally, `a[href]` and `img[src]` automatically sanitize their URLs and do not pass them
	 * through {@link ng.$sce#getTrusted $sce.getTrusted}.  SCE doesn't play a role here.
	 *
	 * The included {@link ng.$sceDelegate $sceDelegate} comes with sane defaults to allow you to load
	 * templates in `ng-include` from your application's domain without having to even know about SCE.
	 * It blocks loading templates from other domains or loading templates over http from an https
	 * served document.  You can change these by setting your own custom {@link
	 * ng.$sceDelegateProvider#resourceUrlWhitelist whitelists} and {@link
	 * ng.$sceDelegateProvider#resourceUrlBlacklist blacklists} for matching such URLs.
	 *
	 * This significantly reduces the overhead.  It is far easier to pay the small overhead and have an
	 * application that's secure and can be audited to verify that with much more ease than bolting
	 * security onto an application later.
	 *
	 * <a name="contexts"></a>
	 * ## What trusted context types are supported?
	 *
	 * | Context             | Notes          |
	 * |---------------------|----------------|
	 * | `$sce.HTML`         | For HTML that's safe to source into the application.  The {@link ng.directive:ngBindHtml ngBindHtml} directive uses this context for bindings. If an unsafe value is encountered and the {@link ngSanitize $sanitize} module is present this will sanitize the value instead of throwing an error. |
	 * | `$sce.CSS`          | For CSS that's safe to source into the application.  Currently unused.  Feel free to use it in your own directives. |
	 * | `$sce.URL`          | For URLs that are safe to follow as links.  Currently unused (`<a href=` and `<img src=` sanitize their urls and don't constitute an SCE context. |
	 * | `$sce.RESOURCE_URL` | For URLs that are not only safe to follow as links, but whose contents are also safe to include in your application.  Examples include `ng-include`, `src` / `ngSrc` bindings for tags other than `IMG` (e.g. `IFRAME`, `OBJECT`, etc.)  <br><br>Note that `$sce.RESOURCE_URL` makes a stronger statement about the URL than `$sce.URL` does and therefore contexts requiring values trusted for `$sce.RESOURCE_URL` can be used anywhere that values trusted for `$sce.URL` are required. |
	 * | `$sce.JS`           | For JavaScript that is safe to execute in your application's context.  Currently unused.  Feel free to use it in your own directives. |
	 *
	 * ## Format of items in {@link ng.$sceDelegateProvider#resourceUrlWhitelist resourceUrlWhitelist}/{@link ng.$sceDelegateProvider#resourceUrlBlacklist Blacklist} <a name="resourceUrlPatternItem"></a>
	 *
	 *  Each element in these arrays must be one of the following:
	 *
	 *  - **'self'**
	 *    - The special **string**, `'self'`, can be used to match against all URLs of the **same
	 *      domain** as the application document using the **same protocol**.
	 *  - **String** (except the special value `'self'`)
	 *    - The string is matched against the full *normalized / absolute URL* of the resource
	 *      being tested (substring matches are not good enough.)
	 *    - There are exactly **two wildcard sequences** - `*` and `**`.  All other characters
	 *      match themselves.
	 *    - `*`: matches zero or more occurrences of any character other than one of the following 6
	 *      characters: '`:`', '`/`', '`.`', '`?`', '`&`' and '`;`'.  It's a useful wildcard for use
	 *      in a whitelist.
	 *    - `**`: matches zero or more occurrences of *any* character.  As such, it's not
	 *      appropriate for use in a scheme, domain, etc. as it would match too much.  (e.g.
	 *      http://**.example.com/ would match http://evil.com/?ignore=.example.com/ and that might
	 *      not have been the intention.)  Its usage at the very end of the path is ok.  (e.g.
	 *      http://foo.example.com/templates/**).
	 *  - **RegExp** (*see caveat below*)
	 *    - *Caveat*:  While regular expressions are powerful and offer great flexibility,  their syntax
	 *      (and all the inevitable escaping) makes them *harder to maintain*.  It's easy to
	 *      accidentally introduce a bug when one updates a complex expression (imho, all regexes should
	 *      have good test coverage).  For instance, the use of `.` in the regex is correct only in a
	 *      small number of cases.  A `.` character in the regex used when matching the scheme or a
	 *      subdomain could be matched against a `:` or literal `.` that was likely not intended.   It
	 *      is highly recommended to use the string patterns and only fall back to regular expressions
	 *      as a last resort.
	 *    - The regular expression must be an instance of RegExp (i.e. not a string.)  It is
	 *      matched against the **entire** *normalized / absolute URL* of the resource being tested
	 *      (even when the RegExp did not have the `^` and `$` codes.)  In addition, any flags
	 *      present on the RegExp (such as multiline, global, ignoreCase) are ignored.
	 *    - If you are generating your JavaScript from some other templating engine (not
	 *      recommended, e.g. in issue [#4006](https://github.com/angular/angular.js/issues/4006)),
	 *      remember to escape your regular expression (and be aware that you might need more than
	 *      one level of escaping depending on your templating engine and the way you interpolated
	 *      the value.)  Do make use of your platform's escaping mechanism as it might be good
	 *      enough before coding your own.  E.g. Ruby has
	 *      [Regexp.escape(str)](http://www.ruby-doc.org/core-2.0.0/Regexp.html#method-c-escape)
	 *      and Python has [re.escape](http://docs.python.org/library/re.html#re.escape).
	 *      Javascript lacks a similar built in function for escaping.  Take a look at Google
	 *      Closure library's [goog.string.regExpEscape(s)](
	 *      http://docs.closure-library.googlecode.com/git/closure_goog_string_string.js.source.html#line962).
	 *
	 * Refer {@link ng.$sceDelegateProvider $sceDelegateProvider} for an example.
	 *
	 * ## Show me an example using SCE.
	 *
	 * <example module="mySceApp" deps="angular-sanitize.js">
	 * <file name="index.html">
	 *   <div ng-controller="AppController as myCtrl">
	 *     <i ng-bind-html="myCtrl.explicitlyTrustedHtml" id="explicitlyTrustedHtml"></i><br><br>
	 *     <b>User comments</b><br>
	 *     By default, HTML that isn't explicitly trusted (e.g. Alice's comment) is sanitized when
	 *     $sanitize is available.  If $sanitize isn't available, this results in an error instead of an
	 *     exploit.
	 *     <div class="well">
	 *       <div ng-repeat="userComment in myCtrl.userComments">
	 *         <b>{{userComment.name}}</b>:
	 *         <span ng-bind-html="userComment.htmlComment" class="htmlComment"></span>
	 *         <br>
	 *       </div>
	 *     </div>
	 *   </div>
	 * </file>
	 *
	 * <file name="script.js">
	 *   angular.module('mySceApp', ['ngSanitize'])
	 *     .controller('AppController', ['$http', '$templateCache', '$sce',
	 *       function($http, $templateCache, $sce) {
	 *         var self = this;
	 *         $http.get("test_data.json", {cache: $templateCache}).success(function(userComments) {
	 *           self.userComments = userComments;
	 *         });
	 *         self.explicitlyTrustedHtml = $sce.trustAsHtml(
	 *             '<span onmouseover="this.textContent=&quot;Explicitly trusted HTML bypasses ' +
	 *             'sanitization.&quot;">Hover over this text.</span>');
	 *       }]);
	 * </file>
	 *
	 * <file name="test_data.json">
	 * [
	 *   { "name": "Alice",
	 *     "htmlComment":
	 *         "<span onmouseover='this.textContent=\"PWN3D!\"'>Is <i>anyone</i> reading this?</span>"
	 *   },
	 *   { "name": "Bob",
	 *     "htmlComment": "<i>Yes!</i>  Am I the only other one?"
	 *   }
	 * ]
	 * </file>
	 *
	 * <file name="protractor.js" type="protractor">
	 *   describe('SCE doc demo', function() {
	 *     it('should sanitize untrusted values', function() {
	 *       expect(element.all(by.css('.htmlComment')).first().getInnerHtml())
	 *           .toBe('<span>Is <i>anyone</i> reading this?</span>');
	 *     });
	 *
	 *     it('should NOT sanitize explicitly trusted values', function() {
	 *       expect(element(by.id('explicitlyTrustedHtml')).getInnerHtml()).toBe(
	 *           '<span onmouseover="this.textContent=&quot;Explicitly trusted HTML bypasses ' +
	 *           'sanitization.&quot;">Hover over this text.</span>');
	 *     });
	 *   });
	 * </file>
	 * </example>
	 *
	 *
	 *
	 * ## Can I disable SCE completely?
	 *
	 * Yes, you can.  However, this is strongly discouraged.  SCE gives you a lot of security benefits
	 * for little coding overhead.  It will be much harder to take an SCE disabled application and
	 * either secure it on your own or enable SCE at a later stage.  It might make sense to disable SCE
	 * for cases where you have a lot of existing code that was written before SCE was introduced and
	 * you're migrating them a module at a time.
	 *
	 * That said, here's how you can completely disable SCE:
	 *
	 * ```
	 * angular.module('myAppWithSceDisabledmyApp', []).config(function($sceProvider) {
	 *   // Completely disable SCE.  For demonstration purposes only!
	 *   // Do not use in new projects.
	 *   $sceProvider.enabled(false);
	 * });
	 * ```
	 *
	 */
	/* jshint maxlen: 100 */
	
	function $SceProvider() {
	  var enabled = true;
	
	  /**
	   * @ngdoc method
	   * @name $sceProvider#enabled
	   * @kind function
	   *
	   * @param {boolean=} value If provided, then enables/disables SCE.
	   * @return {boolean} true if SCE is enabled, false otherwise.
	   *
	   * @description
	   * Enables/disables SCE and returns the current value.
	   */
	  this.enabled = function(value) {
	    if (arguments.length) {
	      enabled = !!value;
	    }
	    return enabled;
	  };
	
	
	  /* Design notes on the default implementation for SCE.
	   *
	   * The API contract for the SCE delegate
	   * -------------------------------------
	   * The SCE delegate object must provide the following 3 methods:
	   *
	   * - trustAs(contextEnum, value)
	   *     This method is used to tell the SCE service that the provided value is OK to use in the
	   *     contexts specified by contextEnum.  It must return an object that will be accepted by
	   *     getTrusted() for a compatible contextEnum and return this value.
	   *
	   * - valueOf(value)
	   *     For values that were not produced by trustAs(), return them as is.  For values that were
	   *     produced by trustAs(), return the corresponding input value to trustAs.  Basically, if
	   *     trustAs is wrapping the given values into some type, this operation unwraps it when given
	   *     such a value.
	   *
	   * - getTrusted(contextEnum, value)
	   *     This function should return the a value that is safe to use in the context specified by
	   *     contextEnum or throw and exception otherwise.
	   *
	   * NOTE: This contract deliberately does NOT state that values returned by trustAs() must be
	   * opaque or wrapped in some holder object.  That happens to be an implementation detail.  For
	   * instance, an implementation could maintain a registry of all trusted objects by context.  In
	   * such a case, trustAs() would return the same object that was passed in.  getTrusted() would
	   * return the same object passed in if it was found in the registry under a compatible context or
	   * throw an exception otherwise.  An implementation might only wrap values some of the time based
	   * on some criteria.  getTrusted() might return a value and not throw an exception for special
	   * constants or objects even if not wrapped.  All such implementations fulfill this contract.
	   *
	   *
	   * A note on the inheritance model for SCE contexts
	   * ------------------------------------------------
	   * I've used inheritance and made RESOURCE_URL wrapped types a subtype of URL wrapped types.  This
	   * is purely an implementation details.
	   *
	   * The contract is simply this:
	   *
	   *     getTrusted($sce.RESOURCE_URL, value) succeeding implies that getTrusted($sce.URL, value)
	   *     will also succeed.
	   *
	   * Inheritance happens to capture this in a natural way.  In some future, we
	   * may not use inheritance anymore.  That is OK because no code outside of
	   * sce.js and sceSpecs.js would need to be aware of this detail.
	   */
	
	  this.$get = ['$parse', '$sceDelegate', function(
	                $parse,   $sceDelegate) {
	    // Prereq: Ensure that we're not running in IE<11 quirks mode.  In that mode, IE < 11 allow
	    // the "expression(javascript expression)" syntax which is insecure.
	    if (enabled && msie < 8) {
	      throw $sceMinErr('iequirks',
	        'Strict Contextual Escaping does not support Internet Explorer version < 11 in quirks ' +
	        'mode.  You can fix this by adding the text <!doctype html> to the top of your HTML ' +
	        'document.  See http://docs.angularjs.org/api/ng.$sce for more information.');
	    }
	
	    var sce = shallowCopy(SCE_CONTEXTS);
	
	    /**
	     * @ngdoc method
	     * @name $sce#isEnabled
	     * @kind function
	     *
	     * @return {Boolean} true if SCE is enabled, false otherwise.  If you want to set the value, you
	     * have to do it at module config time on {@link ng.$sceProvider $sceProvider}.
	     *
	     * @description
	     * Returns a boolean indicating if SCE is enabled.
	     */
	    sce.isEnabled = function() {
	      return enabled;
	    };
	    sce.trustAs = $sceDelegate.trustAs;
	    sce.getTrusted = $sceDelegate.getTrusted;
	    sce.valueOf = $sceDelegate.valueOf;
	
	    if (!enabled) {
	      sce.trustAs = sce.getTrusted = function(type, value) { return value; };
	      sce.valueOf = identity;
	    }
	
	    /**
	     * @ngdoc method
	     * @name $sce#parseAs
	     *
	     * @description
	     * Converts Angular {@link guide/expression expression} into a function.  This is like {@link
	     * ng.$parse $parse} and is identical when the expression is a literal constant.  Otherwise, it
	     * wraps the expression in a call to {@link ng.$sce#getTrusted $sce.getTrusted(*type*,
	     * *result*)}
	     *
	     * @param {string} type The kind of SCE context in which this result will be used.
	     * @param {string} expression String expression to compile.
	     * @returns {function(context, locals)} a function which represents the compiled expression:
	     *
	     *    * `context` – `{object}` – an object against which any expressions embedded in the strings
	     *      are evaluated against (typically a scope object).
	     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
	     *      `context`.
	     */
	    sce.parseAs = function sceParseAs(type, expr) {
	      var parsed = $parse(expr);
	      if (parsed.literal && parsed.constant) {
	        return parsed;
	      } else {
	        return $parse(expr, function(value) {
	          return sce.getTrusted(type, value);
	        });
	      }
	    };
	
	    /**
	     * @ngdoc method
	     * @name $sce#trustAs
	     *
	     * @description
	     * Delegates to {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}.  As such,
	     * returns an object that is trusted by angular for use in specified strict contextual
	     * escaping contexts (such as ng-bind-html, ng-include, any src attribute
	     * interpolation, any dom event binding attribute interpolation such as for onclick,  etc.)
	     * that uses the provided value.  See * {@link ng.$sce $sce} for enabling strict contextual
	     * escaping.
	     *
	     * @param {string} type The kind of context in which this value is safe for use.  e.g. url,
	     *   resourceUrl, html, js and css.
	     * @param {*} value The value that that should be considered trusted/safe.
	     * @returns {*} A value that can be used to stand in for the provided `value` in places
	     * where Angular expects a $sce.trustAs() return value.
	     */
	
	    /**
	     * @ngdoc method
	     * @name $sce#trustAsHtml
	     *
	     * @description
	     * Shorthand method.  `$sce.trustAsHtml(value)` →
	     *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.HTML, value)`}
	     *
	     * @param {*} value The value to trustAs.
	     * @returns {*} An object that can be passed to {@link ng.$sce#getTrustedHtml
	     *     $sce.getTrustedHtml(value)} to obtain the original value.  (privileged directives
	     *     only accept expressions that are either literal constants or are the
	     *     return value of {@link ng.$sce#trustAs $sce.trustAs}.)
	     */
	
	    /**
	     * @ngdoc method
	     * @name $sce#trustAsUrl
	     *
	     * @description
	     * Shorthand method.  `$sce.trustAsUrl(value)` →
	     *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.URL, value)`}
	     *
	     * @param {*} value The value to trustAs.
	     * @returns {*} An object that can be passed to {@link ng.$sce#getTrustedUrl
	     *     $sce.getTrustedUrl(value)} to obtain the original value.  (privileged directives
	     *     only accept expressions that are either literal constants or are the
	     *     return value of {@link ng.$sce#trustAs $sce.trustAs}.)
	     */
	
	    /**
	     * @ngdoc method
	     * @name $sce#trustAsResourceUrl
	     *
	     * @description
	     * Shorthand method.  `$sce.trustAsResourceUrl(value)` →
	     *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.RESOURCE_URL, value)`}
	     *
	     * @param {*} value The value to trustAs.
	     * @returns {*} An object that can be passed to {@link ng.$sce#getTrustedResourceUrl
	     *     $sce.getTrustedResourceUrl(value)} to obtain the original value.  (privileged directives
	     *     only accept expressions that are either literal constants or are the return
	     *     value of {@link ng.$sce#trustAs $sce.trustAs}.)
	     */
	
	    /**
	     * @ngdoc method
	     * @name $sce#trustAsJs
	     *
	     * @description
	     * Shorthand method.  `$sce.trustAsJs(value)` →
	     *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.JS, value)`}
	     *
	     * @param {*} value The value to trustAs.
	     * @returns {*} An object that can be passed to {@link ng.$sce#getTrustedJs
	     *     $sce.getTrustedJs(value)} to obtain the original value.  (privileged directives
	     *     only accept expressions that are either literal constants or are the
	     *     return value of {@link ng.$sce#trustAs $sce.trustAs}.)
	     */
	
	    /**
	     * @ngdoc method
	     * @name $sce#getTrusted
	     *
	     * @description
	     * Delegates to {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted`}.  As such,
	     * takes the result of a {@link ng.$sce#trustAs `$sce.trustAs`}() call and returns the
	     * originally supplied value if the queried context type is a supertype of the created type.
	     * If this condition isn't satisfied, throws an exception.
	     *
	     * @param {string} type The kind of context in which this value is to be used.
	     * @param {*} maybeTrusted The result of a prior {@link ng.$sce#trustAs `$sce.trustAs`}
	     *                         call.
	     * @returns {*} The value the was originally provided to
	     *              {@link ng.$sce#trustAs `$sce.trustAs`} if valid in this context.
	     *              Otherwise, throws an exception.
	     */
	
	    /**
	     * @ngdoc method
	     * @name $sce#getTrustedHtml
	     *
	     * @description
	     * Shorthand method.  `$sce.getTrustedHtml(value)` →
	     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.HTML, value)`}
	     *
	     * @param {*} value The value to pass to `$sce.getTrusted`.
	     * @returns {*} The return value of `$sce.getTrusted($sce.HTML, value)`
	     */
	
	    /**
	     * @ngdoc method
	     * @name $sce#getTrustedCss
	     *
	     * @description
	     * Shorthand method.  `$sce.getTrustedCss(value)` →
	     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.CSS, value)`}
	     *
	     * @param {*} value The value to pass to `$sce.getTrusted`.
	     * @returns {*} The return value of `$sce.getTrusted($sce.CSS, value)`
	     */
	
	    /**
	     * @ngdoc method
	     * @name $sce#getTrustedUrl
	     *
	     * @description
	     * Shorthand method.  `$sce.getTrustedUrl(value)` →
	     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.URL, value)`}
	     *
	     * @param {*} value The value to pass to `$sce.getTrusted`.
	     * @returns {*} The return value of `$sce.getTrusted($sce.URL, value)`
	     */
	
	    /**
	     * @ngdoc method
	     * @name $sce#getTrustedResourceUrl
	     *
	     * @description
	     * Shorthand method.  `$sce.getTrustedResourceUrl(value)` →
	     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.RESOURCE_URL, value)`}
	     *
	     * @param {*} value The value to pass to `$sceDelegate.getTrusted`.
	     * @returns {*} The return value of `$sce.getTrusted($sce.RESOURCE_URL, value)`
	     */
	
	    /**
	     * @ngdoc method
	     * @name $sce#getTrustedJs
	     *
	     * @description
	     * Shorthand method.  `$sce.getTrustedJs(value)` →
	     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.JS, value)`}
	     *
	     * @param {*} value The value to pass to `$sce.getTrusted`.
	     * @returns {*} The return value of `$sce.getTrusted($sce.JS, value)`
	     */
	
	    /**
	     * @ngdoc method
	     * @name $sce#parseAsHtml
	     *
	     * @description
	     * Shorthand method.  `$sce.parseAsHtml(expression string)` →
	     *     {@link ng.$sce#parseAs `$sce.parseAs($sce.HTML, value)`}
	     *
	     * @param {string} expression String expression to compile.
	     * @returns {function(context, locals)} a function which represents the compiled expression:
	     *
	     *    * `context` – `{object}` – an object against which any expressions embedded in the strings
	     *      are evaluated against (typically a scope object).
	     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
	     *      `context`.
	     */
	
	    /**
	     * @ngdoc method
	     * @name $sce#parseAsCss
	     *
	     * @description
	     * Shorthand method.  `$sce.parseAsCss(value)` →
	     *     {@link ng.$sce#parseAs `$sce.parseAs($sce.CSS, value)`}
	     *
	     * @param {string} expression String expression to compile.
	     * @returns {function(context, locals)} a function which represents the compiled expression:
	     *
	     *    * `context` – `{object}` – an object against which any expressions embedded in the strings
	     *      are evaluated against (typically a scope object).
	     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
	     *      `context`.
	     */
	
	    /**
	     * @ngdoc method
	     * @name $sce#parseAsUrl
	     *
	     * @description
	     * Shorthand method.  `$sce.parseAsUrl(value)` →
	     *     {@link ng.$sce#parseAs `$sce.parseAs($sce.URL, value)`}
	     *
	     * @param {string} expression String expression to compile.
	     * @returns {function(context, locals)} a function which represents the compiled expression:
	     *
	     *    * `context` – `{object}` – an object against which any expressions embedded in the strings
	     *      are evaluated against (typically a scope object).
	     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
	     *      `context`.
	     */
	
	    /**
	     * @ngdoc method
	     * @name $sce#parseAsResourceUrl
	     *
	     * @description
	     * Shorthand method.  `$sce.parseAsResourceUrl(value)` →
	     *     {@link ng.$sce#parseAs `$sce.parseAs($sce.RESOURCE_URL, value)`}
	     *
	     * @param {string} expression String expression to compile.
	     * @returns {function(context, locals)} a function which represents the compiled expression:
	     *
	     *    * `context` – `{object}` – an object against which any expressions embedded in the strings
	     *      are evaluated against (typically a scope object).
	     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
	     *      `context`.
	     */
	
	    /**
	     * @ngdoc method
	     * @name $sce#parseAsJs
	     *
	     * @description
	     * Shorthand method.  `$sce.parseAsJs(value)` →
	     *     {@link ng.$sce#parseAs `$sce.parseAs($sce.JS, value)`}
	     *
	     * @param {string} expression String expression to compile.
	     * @returns {function(context, locals)} a function which represents the compiled expression:
	     *
	     *    * `context` – `{object}` – an object against which any expressions embedded in the strings
	     *      are evaluated against (typically a scope object).
	     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
	     *      `context`.
	     */
	
	    // Shorthand delegations.
	    var parse = sce.parseAs,
	        getTrusted = sce.getTrusted,
	        trustAs = sce.trustAs;
	
	    forEach(SCE_CONTEXTS, function(enumValue, name) {
	      var lName = lowercase(name);
	      sce[camelCase("parse_as_" + lName)] = function(expr) {
	        return parse(enumValue, expr);
	      };
	      sce[camelCase("get_trusted_" + lName)] = function(value) {
	        return getTrusted(enumValue, value);
	      };
	      sce[camelCase("trust_as_" + lName)] = function(value) {
	        return trustAs(enumValue, value);
	      };
	    });
	
	    return sce;
	  }];
	}
	
	/**
	 * !!! This is an undocumented "private" service !!!
	 *
	 * @name $sniffer
	 * @requires $window
	 * @requires $document
	 *
	 * @property {boolean} history Does the browser support html5 history api ?
	 * @property {boolean} transitions Does the browser support CSS transition events ?
	 * @property {boolean} animations Does the browser support CSS animation events ?
	 *
	 * @description
	 * This is very simple implementation of testing browser's features.
	 */
	function $SnifferProvider() {
	  this.$get = ['$window', '$document', function($window, $document) {
	    var eventSupport = {},
	        // Chrome Packaged Apps are not allowed to access `history.pushState`. They can be detected by
	        // the presence of `chrome.app.runtime` (see https://developer.chrome.com/apps/api_index)
	        isChromePackagedApp = $window.chrome && $window.chrome.app && $window.chrome.app.runtime,
	        hasHistoryPushState = !isChromePackagedApp && $window.history && $window.history.pushState,
	        android =
	          toInt((/android (\d+)/.exec(lowercase(($window.navigator || {}).userAgent)) || [])[1]),
	        boxee = /Boxee/i.test(($window.navigator || {}).userAgent),
	        document = $document[0] || {},
	        vendorPrefix,
	        vendorRegex = /^(Moz|webkit|ms)(?=[A-Z])/,
	        bodyStyle = document.body && document.body.style,
	        transitions = false,
	        animations = false,
	        match;
	
	    if (bodyStyle) {
	      for (var prop in bodyStyle) {
	        if (match = vendorRegex.exec(prop)) {
	          vendorPrefix = match[0];
	          vendorPrefix = vendorPrefix.substr(0, 1).toUpperCase() + vendorPrefix.substr(1);
	          break;
	        }
	      }
	
	      if (!vendorPrefix) {
	        vendorPrefix = ('WebkitOpacity' in bodyStyle) && 'webkit';
	      }
	
	      transitions = !!(('transition' in bodyStyle) || (vendorPrefix + 'Transition' in bodyStyle));
	      animations  = !!(('animation' in bodyStyle) || (vendorPrefix + 'Animation' in bodyStyle));
	
	      if (android && (!transitions ||  !animations)) {
	        transitions = isString(bodyStyle.webkitTransition);
	        animations = isString(bodyStyle.webkitAnimation);
	      }
	    }
	
	
	    return {
	      // Android has history.pushState, but it does not update location correctly
	      // so let's not use the history API at all.
	      // http://code.google.com/p/android/issues/detail?id=17471
	      // https://github.com/angular/angular.js/issues/904
	
	      // older webkit browser (533.9) on Boxee box has exactly the same problem as Android has
	      // so let's not use the history API also
	      // We are purposefully using `!(android < 4)` to cover the case when `android` is undefined
	      // jshint -W018
	      history: !!(hasHistoryPushState && !(android < 4) && !boxee),
	      // jshint +W018
	      hasEvent: function(event) {
	        // IE9 implements 'input' event it's so fubared that we rather pretend that it doesn't have
	        // it. In particular the event is not fired when backspace or delete key are pressed or
	        // when cut operation is performed.
	        // IE10+ implements 'input' event but it erroneously fires under various situations,
	        // e.g. when placeholder changes, or a form is focused.
	        if (event === 'input' && msie <= 11) return false;
	
	        if (isUndefined(eventSupport[event])) {
	          var divElm = document.createElement('div');
	          eventSupport[event] = 'on' + event in divElm;
	        }
	
	        return eventSupport[event];
	      },
	      csp: csp(),
	      vendorPrefix: vendorPrefix,
	      transitions: transitions,
	      animations: animations,
	      android: android
	    };
	  }];
	}
	
	var $templateRequestMinErr = minErr('$compile');
	
	/**
	 * @ngdoc provider
	 * @name $templateRequestProvider
	 * @description
	 * Used to configure the options passed to the {@link $http} service when making a template request.
	 *
	 * For example, it can be used for specifying the "Accept" header that is sent to the server, when
	 * requesting a template.
	 */
	function $TemplateRequestProvider() {
	
	  var httpOptions;
	
	  /**
	   * @ngdoc method
	   * @name $templateRequestProvider#httpOptions
	   * @description
	   * The options to be passed to the {@link $http} service when making the request.
	   * You can use this to override options such as the "Accept" header for template requests.
	   *
	   * The {@link $templateRequest} will set the `cache` and the `transformResponse` properties of the
	   * options if not overridden here.
	   *
	   * @param {string=} value new value for the {@link $http} options.
	   * @returns {string|self} Returns the {@link $http} options when used as getter and self if used as setter.
	   */
	  this.httpOptions = function(val) {
	    if (val) {
	      httpOptions = val;
	      return this;
	    }
	    return httpOptions;
	  };
	
	  /**
	   * @ngdoc service
	   * @name $templateRequest
	   *
	   * @description
	   * The `$templateRequest` service runs security checks then downloads the provided template using
	   * `$http` and, upon success, stores the contents inside of `$templateCache`. If the HTTP request
	   * fails or the response data of the HTTP request is empty, a `$compile` error will be thrown (the
	   * exception can be thwarted by setting the 2nd parameter of the function to true). Note that the
	   * contents of `$templateCache` are trusted, so the call to `$sce.getTrustedUrl(tpl)` is omitted
	   * when `tpl` is of type string and `$templateCache` has the matching entry.
	   *
	   * If you want to pass custom options to the `$http` service, such as setting the Accept header you
	   * can configure this via {@link $templateRequestProvider#httpOptions}.
	   *
	   * @param {string|TrustedResourceUrl} tpl The HTTP request template URL
	   * @param {boolean=} ignoreRequestError Whether or not to ignore the exception when the request fails or the template is empty
	   *
	   * @return {Promise} a promise for the HTTP response data of the given URL.
	   *
	   * @property {number} totalPendingRequests total amount of pending template requests being downloaded.
	   */
	  this.$get = ['$templateCache', '$http', '$q', '$sce', function($templateCache, $http, $q, $sce) {
	
	    function handleRequestFn(tpl, ignoreRequestError) {
	      handleRequestFn.totalPendingRequests++;
	
	      // We consider the template cache holds only trusted templates, so
	      // there's no need to go through whitelisting again for keys that already
	      // are included in there. This also makes Angular accept any script
	      // directive, no matter its name. However, we still need to unwrap trusted
	      // types.
	      if (!isString(tpl) || !$templateCache.get(tpl)) {
	        tpl = $sce.getTrustedResourceUrl(tpl);
	      }
	
	      var transformResponse = $http.defaults && $http.defaults.transformResponse;
	
	      if (isArray(transformResponse)) {
	        transformResponse = transformResponse.filter(function(transformer) {
	          return transformer !== defaultHttpResponseTransform;
	        });
	      } else if (transformResponse === defaultHttpResponseTransform) {
	        transformResponse = null;
	      }
	
	      return $http.get(tpl, extend({
	          cache: $templateCache,
	          transformResponse: transformResponse
	        }, httpOptions))
	        ['finally'](function() {
	          handleRequestFn.totalPendingRequests--;
	        })
	        .then(function(response) {
	          $templateCache.put(tpl, response.data);
	          return response.data;
	        }, handleError);
	
	      function handleError(resp) {
	        if (!ignoreRequestError) {
	          throw $templateRequestMinErr('tpload', 'Failed to load template: {0} (HTTP status: {1} {2})',
	            tpl, resp.status, resp.statusText);
	        }
	        return $q.reject(resp);
	      }
	    }
	
	    handleRequestFn.totalPendingRequests = 0;
	
	    return handleRequestFn;
	  }];
	}
	
	function $$TestabilityProvider() {
	  this.$get = ['$rootScope', '$browser', '$location',
	       function($rootScope,   $browser,   $location) {
	
	    /**
	     * @name $testability
	     *
	     * @description
	     * The private $$testability service provides a collection of methods for use when debugging
	     * or by automated test and debugging tools.
	     */
	    var testability = {};
	
	    /**
	     * @name $$testability#findBindings
	     *
	     * @description
	     * Returns an array of elements that are bound (via ng-bind or {{}})
	     * to expressions matching the input.
	     *
	     * @param {Element} element The element root to search from.
	     * @param {string} expression The binding expression to match.
	     * @param {boolean} opt_exactMatch If true, only returns exact matches
	     *     for the expression. Filters and whitespace are ignored.
	     */
	    testability.findBindings = function(element, expression, opt_exactMatch) {
	      var bindings = element.getElementsByClassName('ng-binding');
	      var matches = [];
	      forEach(bindings, function(binding) {
	        var dataBinding = angular.element(binding).data('$binding');
	        if (dataBinding) {
	          forEach(dataBinding, function(bindingName) {
	            if (opt_exactMatch) {
	              var matcher = new RegExp('(^|\\s)' + escapeForRegexp(expression) + '(\\s|\\||$)');
	              if (matcher.test(bindingName)) {
	                matches.push(binding);
	              }
	            } else {
	              if (bindingName.indexOf(expression) != -1) {
	                matches.push(binding);
	              }
	            }
	          });
	        }
	      });
	      return matches;
	    };
	
	    /**
	     * @name $$testability#findModels
	     *
	     * @description
	     * Returns an array of elements that are two-way found via ng-model to
	     * expressions matching the input.
	     *
	     * @param {Element} element The element root to search from.
	     * @param {string} expression The model expression to match.
	     * @param {boolean} opt_exactMatch If true, only returns exact matches
	     *     for the expression.
	     */
	    testability.findModels = function(element, expression, opt_exactMatch) {
	      var prefixes = ['ng-', 'data-ng-', 'ng\\:'];
	      for (var p = 0; p < prefixes.length; ++p) {
	        var attributeEquals = opt_exactMatch ? '=' : '*=';
	        var selector = '[' + prefixes[p] + 'model' + attributeEquals + '"' + expression + '"]';
	        var elements = element.querySelectorAll(selector);
	        if (elements.length) {
	          return elements;
	        }
	      }
	    };
	
	    /**
	     * @name $$testability#getLocation
	     *
	     * @description
	     * Shortcut for getting the location in a browser agnostic way. Returns
	     *     the path, search, and hash. (e.g. /path?a=b#hash)
	     */
	    testability.getLocation = function() {
	      return $location.url();
	    };
	
	    /**
	     * @name $$testability#setLocation
	     *
	     * @description
	     * Shortcut for navigating to a location without doing a full page reload.
	     *
	     * @param {string} url The location url (path, search and hash,
	     *     e.g. /path?a=b#hash) to go to.
	     */
	    testability.setLocation = function(url) {
	      if (url !== $location.url()) {
	        $location.url(url);
	        $rootScope.$digest();
	      }
	    };
	
	    /**
	     * @name $$testability#whenStable
	     *
	     * @description
	     * Calls the callback when $timeout and $http requests are completed.
	     *
	     * @param {function} callback
	     */
	    testability.whenStable = function(callback) {
	      $browser.notifyWhenNoOutstandingRequests(callback);
	    };
	
	    return testability;
	  }];
	}
	
	function $TimeoutProvider() {
	  this.$get = ['$rootScope', '$browser', '$q', '$$q', '$exceptionHandler',
	       function($rootScope,   $browser,   $q,   $$q,   $exceptionHandler) {
	
	    var deferreds = {};
	
	
	     /**
	      * @ngdoc service
	      * @name $timeout
	      *
	      * @description
	      * Angular's wrapper for `window.setTimeout`. The `fn` function is wrapped into a try/catch
	      * block and delegates any exceptions to
	      * {@link ng.$exceptionHandler $exceptionHandler} service.
	      *
	      * The return value of calling `$timeout` is a promise, which will be resolved when
	      * the delay has passed and the timeout function, if provided, is executed.
	      *
	      * To cancel a timeout request, call `$timeout.cancel(promise)`.
	      *
	      * In tests you can use {@link ngMock.$timeout `$timeout.flush()`} to
	      * synchronously flush the queue of deferred functions.
	      *
	      * If you only want a promise that will be resolved after some specified delay
	      * then you can call `$timeout` without the `fn` function.
	      *
	      * @param {function()=} fn A function, whose execution should be delayed.
	      * @param {number=} [delay=0] Delay in milliseconds.
	      * @param {boolean=} [invokeApply=true] If set to `false` skips model dirty checking, otherwise
	      *   will invoke `fn` within the {@link ng.$rootScope.Scope#$apply $apply} block.
	      * @param {...*=} Pass additional parameters to the executed function.
	      * @returns {Promise} Promise that will be resolved when the timeout is reached. The promise
	      *   will be resolved with the return value of the `fn` function.
	      *
	      */
	    function timeout(fn, delay, invokeApply) {
	      if (!isFunction(fn)) {
	        invokeApply = delay;
	        delay = fn;
	        fn = noop;
	      }
	
	      var args = sliceArgs(arguments, 3),
	          skipApply = (isDefined(invokeApply) && !invokeApply),
	          deferred = (skipApply ? $$q : $q).defer(),
	          promise = deferred.promise,
	          timeoutId;
	
	      timeoutId = $browser.defer(function() {
	        try {
	          deferred.resolve(fn.apply(null, args));
	        } catch (e) {
	          deferred.reject(e);
	          $exceptionHandler(e);
	        }
	        finally {
	          delete deferreds[promise.$$timeoutId];
	        }
	
	        if (!skipApply) $rootScope.$apply();
	      }, delay);
	
	      promise.$$timeoutId = timeoutId;
	      deferreds[timeoutId] = deferred;
	
	      return promise;
	    }
	
	
	     /**
	      * @ngdoc method
	      * @name $timeout#cancel
	      *
	      * @description
	      * Cancels a task associated with the `promise`. As a result of this, the promise will be
	      * resolved with a rejection.
	      *
	      * @param {Promise=} promise Promise returned by the `$timeout` function.
	      * @returns {boolean} Returns `true` if the task hasn't executed yet and was successfully
	      *   canceled.
	      */
	    timeout.cancel = function(promise) {
	      if (promise && promise.$$timeoutId in deferreds) {
	        deferreds[promise.$$timeoutId].reject('canceled');
	        delete deferreds[promise.$$timeoutId];
	        return $browser.defer.cancel(promise.$$timeoutId);
	      }
	      return false;
	    };
	
	    return timeout;
	  }];
	}
	
	// NOTE:  The usage of window and document instead of $window and $document here is
	// deliberate.  This service depends on the specific behavior of anchor nodes created by the
	// browser (resolving and parsing URLs) that is unlikely to be provided by mock objects and
	// cause us to break tests.  In addition, when the browser resolves a URL for XHR, it
	// doesn't know about mocked locations and resolves URLs to the real document - which is
	// exactly the behavior needed here.  There is little value is mocking these out for this
	// service.
	var urlParsingNode = window.document.createElement("a");
	var originUrl = urlResolve(window.location.href);
	
	
	/**
	 *
	 * Implementation Notes for non-IE browsers
	 * ----------------------------------------
	 * Assigning a URL to the href property of an anchor DOM node, even one attached to the DOM,
	 * results both in the normalizing and parsing of the URL.  Normalizing means that a relative
	 * URL will be resolved into an absolute URL in the context of the application document.
	 * Parsing means that the anchor node's host, hostname, protocol, port, pathname and related
	 * properties are all populated to reflect the normalized URL.  This approach has wide
	 * compatibility - Safari 1+, Mozilla 1+, Opera 7+,e etc.  See
	 * http://www.aptana.com/reference/html/api/HTMLAnchorElement.html
	 *
	 * Implementation Notes for IE
	 * ---------------------------
	 * IE <= 10 normalizes the URL when assigned to the anchor node similar to the other
	 * browsers.  However, the parsed components will not be set if the URL assigned did not specify
	 * them.  (e.g. if you assign a.href = "foo", then a.protocol, a.host, etc. will be empty.)  We
	 * work around that by performing the parsing in a 2nd step by taking a previously normalized
	 * URL (e.g. by assigning to a.href) and assigning it a.href again.  This correctly populates the
	 * properties such as protocol, hostname, port, etc.
	 *
	 * References:
	 *   http://developer.mozilla.org/en-US/docs/Web/API/HTMLAnchorElement
	 *   http://www.aptana.com/reference/html/api/HTMLAnchorElement.html
	 *   http://url.spec.whatwg.org/#urlutils
	 *   https://github.com/angular/angular.js/pull/2902
	 *   http://james.padolsey.com/javascript/parsing-urls-with-the-dom/
	 *
	 * @kind function
	 * @param {string} url The URL to be parsed.
	 * @description Normalizes and parses a URL.
	 * @returns {object} Returns the normalized URL as a dictionary.
	 *
	 *   | member name   | Description    |
	 *   |---------------|----------------|
	 *   | href          | A normalized version of the provided URL if it was not an absolute URL |
	 *   | protocol      | The protocol including the trailing colon                              |
	 *   | host          | The host and port (if the port is non-default) of the normalizedUrl    |
	 *   | search        | The search params, minus the question mark                             |
	 *   | hash          | The hash string, minus the hash symbol
	 *   | hostname      | The hostname
	 *   | port          | The port, without ":"
	 *   | pathname      | The pathname, beginning with "/"
	 *
	 */
	function urlResolve(url) {
	  var href = url;
	
	  if (msie) {
	    // Normalize before parse.  Refer Implementation Notes on why this is
	    // done in two steps on IE.
	    urlParsingNode.setAttribute("href", href);
	    href = urlParsingNode.href;
	  }
	
	  urlParsingNode.setAttribute('href', href);
	
	  // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
	  return {
	    href: urlParsingNode.href,
	    protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
	    host: urlParsingNode.host,
	    search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
	    hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
	    hostname: urlParsingNode.hostname,
	    port: urlParsingNode.port,
	    pathname: (urlParsingNode.pathname.charAt(0) === '/')
	      ? urlParsingNode.pathname
	      : '/' + urlParsingNode.pathname
	  };
	}
	
	/**
	 * Parse a request URL and determine whether this is a same-origin request as the application document.
	 *
	 * @param {string|object} requestUrl The url of the request as a string that will be resolved
	 * or a parsed URL object.
	 * @returns {boolean} Whether the request is for the same origin as the application document.
	 */
	function urlIsSameOrigin(requestUrl) {
	  var parsed = (isString(requestUrl)) ? urlResolve(requestUrl) : requestUrl;
	  return (parsed.protocol === originUrl.protocol &&
	          parsed.host === originUrl.host);
	}
	
	/**
	 * @ngdoc service
	 * @name $window
	 *
	 * @description
	 * A reference to the browser's `window` object. While `window`
	 * is globally available in JavaScript, it causes testability problems, because
	 * it is a global variable. In angular we always refer to it through the
	 * `$window` service, so it may be overridden, removed or mocked for testing.
	 *
	 * Expressions, like the one defined for the `ngClick` directive in the example
	 * below, are evaluated with respect to the current scope.  Therefore, there is
	 * no risk of inadvertently coding in a dependency on a global value in such an
	 * expression.
	 *
	 * @example
	   <example module="windowExample">
	     <file name="index.html">
	       <script>
	         angular.module('windowExample', [])
	           .controller('ExampleController', ['$scope', '$window', function($scope, $window) {
	             $scope.greeting = 'Hello, World!';
	             $scope.doGreeting = function(greeting) {
	               $window.alert(greeting);
	             };
	           }]);
	       </script>
	       <div ng-controller="ExampleController">
	         <input type="text" ng-model="greeting" aria-label="greeting" />
	         <button ng-click="doGreeting(greeting)">ALERT</button>
	       </div>
	     </file>
	     <file name="protractor.js" type="protractor">
	      it('should display the greeting in the input box', function() {
	       element(by.model('greeting')).sendKeys('Hello, E2E Tests');
	       // If we click the button it will block the test runner
	       // element(':button').click();
	      });
	     </file>
	   </example>
	 */
	function $WindowProvider() {
	  this.$get = valueFn(window);
	}
	
	/**
	 * @name $$cookieReader
	 * @requires $document
	 *
	 * @description
	 * This is a private service for reading cookies used by $http and ngCookies
	 *
	 * @return {Object} a key/value map of the current cookies
	 */
	function $$CookieReader($document) {
	  var rawDocument = $document[0] || {};
	  var lastCookies = {};
	  var lastCookieString = '';
	
	  function safeDecodeURIComponent(str) {
	    try {
	      return decodeURIComponent(str);
	    } catch (e) {
	      return str;
	    }
	  }
	
	  return function() {
	    var cookieArray, cookie, i, index, name;
	    var currentCookieString = rawDocument.cookie || '';
	
	    if (currentCookieString !== lastCookieString) {
	      lastCookieString = currentCookieString;
	      cookieArray = lastCookieString.split('; ');
	      lastCookies = {};
	
	      for (i = 0; i < cookieArray.length; i++) {
	        cookie = cookieArray[i];
	        index = cookie.indexOf('=');
	        if (index > 0) { //ignore nameless cookies
	          name = safeDecodeURIComponent(cookie.substring(0, index));
	          // the first value that is seen for a cookie is the most
	          // specific one.  values for the same cookie name that
	          // follow are for less specific paths.
	          if (isUndefined(lastCookies[name])) {
	            lastCookies[name] = safeDecodeURIComponent(cookie.substring(index + 1));
	          }
	        }
	      }
	    }
	    return lastCookies;
	  };
	}
	
	$$CookieReader.$inject = ['$document'];
	
	function $$CookieReaderProvider() {
	  this.$get = $$CookieReader;
	}
	
	/* global currencyFilter: true,
	 dateFilter: true,
	 filterFilter: true,
	 jsonFilter: true,
	 limitToFilter: true,
	 lowercaseFilter: true,
	 numberFilter: true,
	 orderByFilter: true,
	 uppercaseFilter: true,
	 */
	
	/**
	 * @ngdoc provider
	 * @name $filterProvider
	 * @description
	 *
	 * Filters are just functions which transform input to an output. However filters need to be
	 * Dependency Injected. To achieve this a filter definition consists of a factory function which is
	 * annotated with dependencies and is responsible for creating a filter function.
	 *
	 * <div class="alert alert-warning">
	 * **Note:** Filter names must be valid angular {@link expression} identifiers, such as `uppercase` or `orderBy`.
	 * Names with special characters, such as hyphens and dots, are not allowed. If you wish to namespace
	 * your filters, then you can use capitalization (`myappSubsectionFilterx`) or underscores
	 * (`myapp_subsection_filterx`).
	 * </div>
	 *
	 * ```js
	 *   // Filter registration
	 *   function MyModule($provide, $filterProvider) {
	 *     // create a service to demonstrate injection (not always needed)
	 *     $provide.value('greet', function(name){
	 *       return 'Hello ' + name + '!';
	 *     });
	 *
	 *     // register a filter factory which uses the
	 *     // greet service to demonstrate DI.
	 *     $filterProvider.register('greet', function(greet){
	 *       // return the filter function which uses the greet service
	 *       // to generate salutation
	 *       return function(text) {
	 *         // filters need to be forgiving so check input validity
	 *         return text && greet(text) || text;
	 *       };
	 *     });
	 *   }
	 * ```
	 *
	 * The filter function is registered with the `$injector` under the filter name suffix with
	 * `Filter`.
	 *
	 * ```js
	 *   it('should be the same instance', inject(
	 *     function($filterProvider) {
	 *       $filterProvider.register('reverse', function(){
	 *         return ...;
	 *       });
	 *     },
	 *     function($filter, reverseFilter) {
	 *       expect($filter('reverse')).toBe(reverseFilter);
	 *     });
	 * ```
	 *
	 *
	 * For more information about how angular filters work, and how to create your own filters, see
	 * {@link guide/filter Filters} in the Angular Developer Guide.
	 */
	
	/**
	 * @ngdoc service
	 * @name $filter
	 * @kind function
	 * @description
	 * Filters are used for formatting data displayed to the user.
	 *
	 * The general syntax in templates is as follows:
	 *
	 *         {{ expression [| filter_name[:parameter_value] ... ] }}
	 *
	 * @param {String} name Name of the filter function to retrieve
	 * @return {Function} the filter function
	 * @example
	   <example name="$filter" module="filterExample">
	     <file name="index.html">
	       <div ng-controller="MainCtrl">
	        <h3>{{ originalText }}</h3>
	        <h3>{{ filteredText }}</h3>
	       </div>
	     </file>
	
	     <file name="script.js">
	      angular.module('filterExample', [])
	      .controller('MainCtrl', function($scope, $filter) {
	        $scope.originalText = 'hello';
	        $scope.filteredText = $filter('uppercase')($scope.originalText);
	      });
	     </file>
	   </example>
	  */
	$FilterProvider.$inject = ['$provide'];
	function $FilterProvider($provide) {
	  var suffix = 'Filter';
	
	  /**
	   * @ngdoc method
	   * @name $filterProvider#register
	   * @param {string|Object} name Name of the filter function, or an object map of filters where
	   *    the keys are the filter names and the values are the filter factories.
	   *
	   *    <div class="alert alert-warning">
	   *    **Note:** Filter names must be valid angular {@link expression} identifiers, such as `uppercase` or `orderBy`.
	   *    Names with special characters, such as hyphens and dots, are not allowed. If you wish to namespace
	   *    your filters, then you can use capitalization (`myappSubsectionFilterx`) or underscores
	   *    (`myapp_subsection_filterx`).
	   *    </div>
	    * @param {Function} factory If the first argument was a string, a factory function for the filter to be registered.
	   * @returns {Object} Registered filter instance, or if a map of filters was provided then a map
	   *    of the registered filter instances.
	   */
	  function register(name, factory) {
	    if (isObject(name)) {
	      var filters = {};
	      forEach(name, function(filter, key) {
	        filters[key] = register(key, filter);
	      });
	      return filters;
	    } else {
	      return $provide.factory(name + suffix, factory);
	    }
	  }
	  this.register = register;
	
	  this.$get = ['$injector', function($injector) {
	    return function(name) {
	      return $injector.get(name + suffix);
	    };
	  }];
	
	  ////////////////////////////////////////
	
	  /* global
	    currencyFilter: false,
	    dateFilter: false,
	    filterFilter: false,
	    jsonFilter: false,
	    limitToFilter: false,
	    lowercaseFilter: false,
	    numberFilter: false,
	    orderByFilter: false,
	    uppercaseFilter: false,
	  */
	
	  register('currency', currencyFilter);
	  register('date', dateFilter);
	  register('filter', filterFilter);
	  register('json', jsonFilter);
	  register('limitTo', limitToFilter);
	  register('lowercase', lowercaseFilter);
	  register('number', numberFilter);
	  register('orderBy', orderByFilter);
	  register('uppercase', uppercaseFilter);
	}
	
	/**
	 * @ngdoc filter
	 * @name filter
	 * @kind function
	 *
	 * @description
	 * Selects a subset of items from `array` and returns it as a new array.
	 *
	 * @param {Array} array The source array.
	 * @param {string|Object|function()} expression The predicate to be used for selecting items from
	 *   `array`.
	 *
	 *   Can be one of:
	 *
	 *   - `string`: The string is used for matching against the contents of the `array`. All strings or
	 *     objects with string properties in `array` that match this string will be returned. This also
	 *     applies to nested object properties.
	 *     The predicate can be negated by prefixing the string with `!`.
	 *
	 *   - `Object`: A pattern object can be used to filter specific properties on objects contained
	 *     by `array`. For example `{name:"M", phone:"1"}` predicate will return an array of items
	 *     which have property `name` containing "M" and property `phone` containing "1". A special
	 *     property name `$` can be used (as in `{$:"text"}`) to accept a match against any
	 *     property of the object or its nested object properties. That's equivalent to the simple
	 *     substring match with a `string` as described above. The predicate can be negated by prefixing
	 *     the string with `!`.
	 *     For example `{name: "!M"}` predicate will return an array of items which have property `name`
	 *     not containing "M".
	 *
	 *     Note that a named property will match properties on the same level only, while the special
	 *     `$` property will match properties on the same level or deeper. E.g. an array item like
	 *     `{name: {first: 'John', last: 'Doe'}}` will **not** be matched by `{name: 'John'}`, but
	 *     **will** be matched by `{$: 'John'}`.
	 *
	 *   - `function(value, index, array)`: A predicate function can be used to write arbitrary filters.
	 *     The function is called for each element of the array, with the element, its index, and
	 *     the entire array itself as arguments.
	 *
	 *     The final result is an array of those elements that the predicate returned true for.
	 *
	 * @param {function(actual, expected)|true|undefined} comparator Comparator which is used in
	 *     determining if the expected value (from the filter expression) and actual value (from
	 *     the object in the array) should be considered a match.
	 *
	 *   Can be one of:
	 *
	 *   - `function(actual, expected)`:
	 *     The function will be given the object value and the predicate value to compare and
	 *     should return true if both values should be considered equal.
	 *
	 *   - `true`: A shorthand for `function(actual, expected) { return angular.equals(actual, expected)}`.
	 *     This is essentially strict comparison of expected and actual.
	 *
	 *   - `false|undefined`: A short hand for a function which will look for a substring match in case
	 *     insensitive way.
	 *
	 *     Primitive values are converted to strings. Objects are not compared against primitives,
	 *     unless they have a custom `toString` method (e.g. `Date` objects).
	 *
	 * @example
	   <example>
	     <file name="index.html">
	       <div ng-init="friends = [{name:'John', phone:'555-1276'},
	                                {name:'Mary', phone:'800-BIG-MARY'},
	                                {name:'Mike', phone:'555-4321'},
	                                {name:'Adam', phone:'555-5678'},
	                                {name:'Julie', phone:'555-8765'},
	                                {name:'Juliette', phone:'555-5678'}]"></div>
	
	       <label>Search: <input ng-model="searchText"></label>
	       <table id="searchTextResults">
	         <tr><th>Name</th><th>Phone</th></tr>
	         <tr ng-repeat="friend in friends | filter:searchText">
	           <td>{{friend.name}}</td>
	           <td>{{friend.phone}}</td>
	         </tr>
	       </table>
	       <hr>
	       <label>Any: <input ng-model="search.$"></label> <br>
	       <label>Name only <input ng-model="search.name"></label><br>
	       <label>Phone only <input ng-model="search.phone"></label><br>
	       <label>Equality <input type="checkbox" ng-model="strict"></label><br>
	       <table id="searchObjResults">
	         <tr><th>Name</th><th>Phone</th></tr>
	         <tr ng-repeat="friendObj in friends | filter:search:strict">
	           <td>{{friendObj.name}}</td>
	           <td>{{friendObj.phone}}</td>
	         </tr>
	       </table>
	     </file>
	     <file name="protractor.js" type="protractor">
	       var expectFriendNames = function(expectedNames, key) {
	         element.all(by.repeater(key + ' in friends').column(key + '.name')).then(function(arr) {
	           arr.forEach(function(wd, i) {
	             expect(wd.getText()).toMatch(expectedNames[i]);
	           });
	         });
	       };
	
	       it('should search across all fields when filtering with a string', function() {
	         var searchText = element(by.model('searchText'));
	         searchText.clear();
	         searchText.sendKeys('m');
	         expectFriendNames(['Mary', 'Mike', 'Adam'], 'friend');
	
	         searchText.clear();
	         searchText.sendKeys('76');
	         expectFriendNames(['John', 'Julie'], 'friend');
	       });
	
	       it('should search in specific fields when filtering with a predicate object', function() {
	         var searchAny = element(by.model('search.$'));
	         searchAny.clear();
	         searchAny.sendKeys('i');
	         expectFriendNames(['Mary', 'Mike', 'Julie', 'Juliette'], 'friendObj');
	       });
	       it('should use a equal comparison when comparator is true', function() {
	         var searchName = element(by.model('search.name'));
	         var strict = element(by.model('strict'));
	         searchName.clear();
	         searchName.sendKeys('Julie');
	         strict.click();
	         expectFriendNames(['Julie'], 'friendObj');
	       });
	     </file>
	   </example>
	 */
	function filterFilter() {
	  return function(array, expression, comparator) {
	    if (!isArrayLike(array)) {
	      if (array == null) {
	        return array;
	      } else {
	        throw minErr('filter')('notarray', 'Expected array but received: {0}', array);
	      }
	    }
	
	    var expressionType = getTypeForFilter(expression);
	    var predicateFn;
	    var matchAgainstAnyProp;
	
	    switch (expressionType) {
	      case 'function':
	        predicateFn = expression;
	        break;
	      case 'boolean':
	      case 'null':
	      case 'number':
	      case 'string':
	        matchAgainstAnyProp = true;
	        //jshint -W086
	      case 'object':
	        //jshint +W086
	        predicateFn = createPredicateFn(expression, comparator, matchAgainstAnyProp);
	        break;
	      default:
	        return array;
	    }
	
	    return Array.prototype.filter.call(array, predicateFn);
	  };
	}
	
	// Helper functions for `filterFilter`
	function createPredicateFn(expression, comparator, matchAgainstAnyProp) {
	  var shouldMatchPrimitives = isObject(expression) && ('$' in expression);
	  var predicateFn;
	
	  if (comparator === true) {
	    comparator = equals;
	  } else if (!isFunction(comparator)) {
	    comparator = function(actual, expected) {
	      if (isUndefined(actual)) {
	        // No substring matching against `undefined`
	        return false;
	      }
	      if ((actual === null) || (expected === null)) {
	        // No substring matching against `null`; only match against `null`
	        return actual === expected;
	      }
	      if (isObject(expected) || (isObject(actual) && !hasCustomToString(actual))) {
	        // Should not compare primitives against objects, unless they have custom `toString` method
	        return false;
	      }
	
	      actual = lowercase('' + actual);
	      expected = lowercase('' + expected);
	      return actual.indexOf(expected) !== -1;
	    };
	  }
	
	  predicateFn = function(item) {
	    if (shouldMatchPrimitives && !isObject(item)) {
	      return deepCompare(item, expression.$, comparator, false);
	    }
	    return deepCompare(item, expression, comparator, matchAgainstAnyProp);
	  };
	
	  return predicateFn;
	}
	
	function deepCompare(actual, expected, comparator, matchAgainstAnyProp, dontMatchWholeObject) {
	  var actualType = getTypeForFilter(actual);
	  var expectedType = getTypeForFilter(expected);
	
	  if ((expectedType === 'string') && (expected.charAt(0) === '!')) {
	    return !deepCompare(actual, expected.substring(1), comparator, matchAgainstAnyProp);
	  } else if (isArray(actual)) {
	    // In case `actual` is an array, consider it a match
	    // if ANY of it's items matches `expected`
	    return actual.some(function(item) {
	      return deepCompare(item, expected, comparator, matchAgainstAnyProp);
	    });
	  }
	
	  switch (actualType) {
	    case 'object':
	      var key;
	      if (matchAgainstAnyProp) {
	        for (key in actual) {
	          if ((key.charAt(0) !== '$') && deepCompare(actual[key], expected, comparator, true)) {
	            return true;
	          }
	        }
	        return dontMatchWholeObject ? false : deepCompare(actual, expected, comparator, false);
	      } else if (expectedType === 'object') {
	        for (key in expected) {
	          var expectedVal = expected[key];
	          if (isFunction(expectedVal) || isUndefined(expectedVal)) {
	            continue;
	          }
	
	          var matchAnyProperty = key === '$';
	          var actualVal = matchAnyProperty ? actual : actual[key];
	          if (!deepCompare(actualVal, expectedVal, comparator, matchAnyProperty, matchAnyProperty)) {
	            return false;
	          }
	        }
	        return true;
	      } else {
	        return comparator(actual, expected);
	      }
	      break;
	    case 'function':
	      return false;
	    default:
	      return comparator(actual, expected);
	  }
	}
	
	// Used for easily differentiating between `null` and actual `object`
	function getTypeForFilter(val) {
	  return (val === null) ? 'null' : typeof val;
	}
	
	var MAX_DIGITS = 22;
	var DECIMAL_SEP = '.';
	var ZERO_CHAR = '0';
	
	/**
	 * @ngdoc filter
	 * @name currency
	 * @kind function
	 *
	 * @description
	 * Formats a number as a currency (ie $1,234.56). When no currency symbol is provided, default
	 * symbol for current locale is used.
	 *
	 * @param {number} amount Input to filter.
	 * @param {string=} symbol Currency symbol or identifier to be displayed.
	 * @param {number=} fractionSize Number of decimal places to round the amount to, defaults to default max fraction size for current locale
	 * @returns {string} Formatted number.
	 *
	 *
	 * @example
	   <example module="currencyExample">
	     <file name="index.html">
	       <script>
	         angular.module('currencyExample', [])
	           .controller('ExampleController', ['$scope', function($scope) {
	             $scope.amount = 1234.56;
	           }]);
	       </script>
	       <div ng-controller="ExampleController">
	         <input type="number" ng-model="amount" aria-label="amount"> <br>
	         default currency symbol ($): <span id="currency-default">{{amount | currency}}</span><br>
	         custom currency identifier (USD$): <span id="currency-custom">{{amount | currency:"USD$"}}</span>
	         no fractions (0): <span id="currency-no-fractions">{{amount | currency:"USD$":0}}</span>
	       </div>
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should init with 1234.56', function() {
	         expect(element(by.id('currency-default')).getText()).toBe('$1,234.56');
	         expect(element(by.id('currency-custom')).getText()).toBe('USD$1,234.56');
	         expect(element(by.id('currency-no-fractions')).getText()).toBe('USD$1,235');
	       });
	       it('should update', function() {
	         if (browser.params.browser == 'safari') {
	           // Safari does not understand the minus key. See
	           // https://github.com/angular/protractor/issues/481
	           return;
	         }
	         element(by.model('amount')).clear();
	         element(by.model('amount')).sendKeys('-1234');
	         expect(element(by.id('currency-default')).getText()).toBe('-$1,234.00');
	         expect(element(by.id('currency-custom')).getText()).toBe('-USD$1,234.00');
	         expect(element(by.id('currency-no-fractions')).getText()).toBe('-USD$1,234');
	       });
	     </file>
	   </example>
	 */
	currencyFilter.$inject = ['$locale'];
	function currencyFilter($locale) {
	  var formats = $locale.NUMBER_FORMATS;
	  return function(amount, currencySymbol, fractionSize) {
	    if (isUndefined(currencySymbol)) {
	      currencySymbol = formats.CURRENCY_SYM;
	    }
	
	    if (isUndefined(fractionSize)) {
	      fractionSize = formats.PATTERNS[1].maxFrac;
	    }
	
	    // if null or undefined pass it through
	    return (amount == null)
	        ? amount
	        : formatNumber(amount, formats.PATTERNS[1], formats.GROUP_SEP, formats.DECIMAL_SEP, fractionSize).
	            replace(/\u00A4/g, currencySymbol);
	  };
	}
	
	/**
	 * @ngdoc filter
	 * @name number
	 * @kind function
	 *
	 * @description
	 * Formats a number as text.
	 *
	 * If the input is null or undefined, it will just be returned.
	 * If the input is infinite (Infinity or -Infinity), the Infinity symbol '∞' or '-∞' is returned, respectively.
	 * If the input is not a number an empty string is returned.
	 *
	 *
	 * @param {number|string} number Number to format.
	 * @param {(number|string)=} fractionSize Number of decimal places to round the number to.
	 * If this is not provided then the fraction size is computed from the current locale's number
	 * formatting pattern. In the case of the default locale, it will be 3.
	 * @returns {string} Number rounded to `fractionSize` appropriately formatted based on the current
	 *                   locale (e.g., in the en_US locale it will have "." as the decimal separator and
	 *                   include "," group separators after each third digit).
	 *
	 * @example
	   <example module="numberFilterExample">
	     <file name="index.html">
	       <script>
	         angular.module('numberFilterExample', [])
	           .controller('ExampleController', ['$scope', function($scope) {
	             $scope.val = 1234.56789;
	           }]);
	       </script>
	       <div ng-controller="ExampleController">
	         <label>Enter number: <input ng-model='val'></label><br>
	         Default formatting: <span id='number-default'>{{val | number}}</span><br>
	         No fractions: <span>{{val | number:0}}</span><br>
	         Negative number: <span>{{-val | number:4}}</span>
	       </div>
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should format numbers', function() {
	         expect(element(by.id('number-default')).getText()).toBe('1,234.568');
	         expect(element(by.binding('val | number:0')).getText()).toBe('1,235');
	         expect(element(by.binding('-val | number:4')).getText()).toBe('-1,234.5679');
	       });
	
	       it('should update', function() {
	         element(by.model('val')).clear();
	         element(by.model('val')).sendKeys('3374.333');
	         expect(element(by.id('number-default')).getText()).toBe('3,374.333');
	         expect(element(by.binding('val | number:0')).getText()).toBe('3,374');
	         expect(element(by.binding('-val | number:4')).getText()).toBe('-3,374.3330');
	      });
	     </file>
	   </example>
	 */
	numberFilter.$inject = ['$locale'];
	function numberFilter($locale) {
	  var formats = $locale.NUMBER_FORMATS;
	  return function(number, fractionSize) {
	
	    // if null or undefined pass it through
	    return (number == null)
	        ? number
	        : formatNumber(number, formats.PATTERNS[0], formats.GROUP_SEP, formats.DECIMAL_SEP,
	                       fractionSize);
	  };
	}
	
	/**
	 * Parse a number (as a string) into three components that can be used
	 * for formatting the number.
	 *
	 * (Significant bits of this parse algorithm came from https://github.com/MikeMcl/big.js/)
	 *
	 * @param  {string} numStr The number to parse
	 * @return {object} An object describing this number, containing the following keys:
	 *  - d : an array of digits containing leading zeros as necessary
	 *  - i : the number of the digits in `d` that are to the left of the decimal point
	 *  - e : the exponent for numbers that would need more than `MAX_DIGITS` digits in `d`
	 *
	 */
	function parse(numStr) {
	  var exponent = 0, digits, numberOfIntegerDigits;
	  var i, j, zeros;
	
	  // Decimal point?
	  if ((numberOfIntegerDigits = numStr.indexOf(DECIMAL_SEP)) > -1) {
	    numStr = numStr.replace(DECIMAL_SEP, '');
	  }
	
	  // Exponential form?
	  if ((i = numStr.search(/e/i)) > 0) {
	    // Work out the exponent.
	    if (numberOfIntegerDigits < 0) numberOfIntegerDigits = i;
	    numberOfIntegerDigits += +numStr.slice(i + 1);
	    numStr = numStr.substring(0, i);
	  } else if (numberOfIntegerDigits < 0) {
	    // There was no decimal point or exponent so it is an integer.
	    numberOfIntegerDigits = numStr.length;
	  }
	
	  // Count the number of leading zeros.
	  for (i = 0; numStr.charAt(i) == ZERO_CHAR; i++) {/* jshint noempty: false */}
	
	  if (i == (zeros = numStr.length)) {
	    // The digits are all zero.
	    digits = [0];
	    numberOfIntegerDigits = 1;
	  } else {
	    // Count the number of trailing zeros
	    zeros--;
	    while (numStr.charAt(zeros) == ZERO_CHAR) zeros--;
	
	    // Trailing zeros are insignificant so ignore them
	    numberOfIntegerDigits -= i;
	    digits = [];
	    // Convert string to array of digits without leading/trailing zeros.
	    for (j = 0; i <= zeros; i++, j++) {
	      digits[j] = +numStr.charAt(i);
	    }
	  }
	
	  // If the number overflows the maximum allowed digits then use an exponent.
	  if (numberOfIntegerDigits > MAX_DIGITS) {
	    digits = digits.splice(0, MAX_DIGITS - 1);
	    exponent = numberOfIntegerDigits - 1;
	    numberOfIntegerDigits = 1;
	  }
	
	  return { d: digits, e: exponent, i: numberOfIntegerDigits };
	}
	
	/**
	 * Round the parsed number to the specified number of decimal places
	 * This function changed the parsedNumber in-place
	 */
	function roundNumber(parsedNumber, fractionSize, minFrac, maxFrac) {
	    var digits = parsedNumber.d;
	    var fractionLen = digits.length - parsedNumber.i;
	
	    // determine fractionSize if it is not specified; `+fractionSize` converts it to a number
	    fractionSize = (isUndefined(fractionSize)) ? Math.min(Math.max(minFrac, fractionLen), maxFrac) : +fractionSize;
	
	    // The index of the digit to where rounding is to occur
	    var roundAt = fractionSize + parsedNumber.i;
	    var digit = digits[roundAt];
	
	    if (roundAt > 0) {
	      // Drop fractional digits beyond `roundAt`
	      digits.splice(Math.max(parsedNumber.i, roundAt));
	
	      // Set non-fractional digits beyond `roundAt` to 0
	      for (var j = roundAt; j < digits.length; j++) {
	        digits[j] = 0;
	      }
	    } else {
	      // We rounded to zero so reset the parsedNumber
	      fractionLen = Math.max(0, fractionLen);
	      parsedNumber.i = 1;
	      digits.length = Math.max(1, roundAt = fractionSize + 1);
	      digits[0] = 0;
	      for (var i = 1; i < roundAt; i++) digits[i] = 0;
	    }
	
	    if (digit >= 5) {
	      if (roundAt - 1 < 0) {
	        for (var k = 0; k > roundAt; k--) {
	          digits.unshift(0);
	          parsedNumber.i++;
	        }
	        digits.unshift(1);
	        parsedNumber.i++;
	      } else {
	        digits[roundAt - 1]++;
	      }
	    }
	
	    // Pad out with zeros to get the required fraction length
	    for (; fractionLen < Math.max(0, fractionSize); fractionLen++) digits.push(0);
	
	
	    // Do any carrying, e.g. a digit was rounded up to 10
	    var carry = digits.reduceRight(function(carry, d, i, digits) {
	      d = d + carry;
	      digits[i] = d % 10;
	      return Math.floor(d / 10);
	    }, 0);
	    if (carry) {
	      digits.unshift(carry);
	      parsedNumber.i++;
	    }
	}
	
	/**
	 * Format a number into a string
	 * @param  {number} number       The number to format
	 * @param  {{
	 *           minFrac, // the minimum number of digits required in the fraction part of the number
	 *           maxFrac, // the maximum number of digits required in the fraction part of the number
	 *           gSize,   // number of digits in each group of separated digits
	 *           lgSize,  // number of digits in the last group of digits before the decimal separator
	 *           negPre,  // the string to go in front of a negative number (e.g. `-` or `(`))
	 *           posPre,  // the string to go in front of a positive number
	 *           negSuf,  // the string to go after a negative number (e.g. `)`)
	 *           posSuf   // the string to go after a positive number
	 *         }} pattern
	 * @param  {string} groupSep     The string to separate groups of number (e.g. `,`)
	 * @param  {string} decimalSep   The string to act as the decimal separator (e.g. `.`)
	 * @param  {[type]} fractionSize The size of the fractional part of the number
	 * @return {string}              The number formatted as a string
	 */
	function formatNumber(number, pattern, groupSep, decimalSep, fractionSize) {
	
	  if (!(isString(number) || isNumber(number)) || isNaN(number)) return '';
	
	  var isInfinity = !isFinite(number);
	  var isZero = false;
	  var numStr = Math.abs(number) + '',
	      formattedText = '',
	      parsedNumber;
	
	  if (isInfinity) {
	    formattedText = '\u221e';
	  } else {
	    parsedNumber = parse(numStr);
	
	    roundNumber(parsedNumber, fractionSize, pattern.minFrac, pattern.maxFrac);
	
	    var digits = parsedNumber.d;
	    var integerLen = parsedNumber.i;
	    var exponent = parsedNumber.e;
	    var decimals = [];
	    isZero = digits.reduce(function(isZero, d) { return isZero && !d; }, true);
	
	    // pad zeros for small numbers
	    while (integerLen < 0) {
	      digits.unshift(0);
	      integerLen++;
	    }
	
	    // extract decimals digits
	    if (integerLen > 0) {
	      decimals = digits.splice(integerLen);
	    } else {
	      decimals = digits;
	      digits = [0];
	    }
	
	    // format the integer digits with grouping separators
	    var groups = [];
	    if (digits.length >= pattern.lgSize) {
	      groups.unshift(digits.splice(-pattern.lgSize).join(''));
	    }
	    while (digits.length > pattern.gSize) {
	      groups.unshift(digits.splice(-pattern.gSize).join(''));
	    }
	    if (digits.length) {
	      groups.unshift(digits.join(''));
	    }
	    formattedText = groups.join(groupSep);
	
	    // append the decimal digits
	    if (decimals.length) {
	      formattedText += decimalSep + decimals.join('');
	    }
	
	    if (exponent) {
	      formattedText += 'e+' + exponent;
	    }
	  }
	  if (number < 0 && !isZero) {
	    return pattern.negPre + formattedText + pattern.negSuf;
	  } else {
	    return pattern.posPre + formattedText + pattern.posSuf;
	  }
	}
	
	function padNumber(num, digits, trim, negWrap) {
	  var neg = '';
	  if (num < 0 || (negWrap && num <= 0)) {
	    if (negWrap) {
	      num = -num + 1;
	    } else {
	      num = -num;
	      neg = '-';
	    }
	  }
	  num = '' + num;
	  while (num.length < digits) num = ZERO_CHAR + num;
	  if (trim) {
	    num = num.substr(num.length - digits);
	  }
	  return neg + num;
	}
	
	
	function dateGetter(name, size, offset, trim, negWrap) {
	  offset = offset || 0;
	  return function(date) {
	    var value = date['get' + name]();
	    if (offset > 0 || value > -offset) {
	      value += offset;
	    }
	    if (value === 0 && offset == -12) value = 12;
	    return padNumber(value, size, trim, negWrap);
	  };
	}
	
	function dateStrGetter(name, shortForm, standAlone) {
	  return function(date, formats) {
	    var value = date['get' + name]();
	    var propPrefix = (standAlone ? 'STANDALONE' : '') + (shortForm ? 'SHORT' : '');
	    var get = uppercase(propPrefix + name);
	
	    return formats[get][value];
	  };
	}
	
	function timeZoneGetter(date, formats, offset) {
	  var zone = -1 * offset;
	  var paddedZone = (zone >= 0) ? "+" : "";
	
	  paddedZone += padNumber(Math[zone > 0 ? 'floor' : 'ceil'](zone / 60), 2) +
	                padNumber(Math.abs(zone % 60), 2);
	
	  return paddedZone;
	}
	
	function getFirstThursdayOfYear(year) {
	    // 0 = index of January
	    var dayOfWeekOnFirst = (new Date(year, 0, 1)).getDay();
	    // 4 = index of Thursday (+1 to account for 1st = 5)
	    // 11 = index of *next* Thursday (+1 account for 1st = 12)
	    return new Date(year, 0, ((dayOfWeekOnFirst <= 4) ? 5 : 12) - dayOfWeekOnFirst);
	}
	
	function getThursdayThisWeek(datetime) {
	    return new Date(datetime.getFullYear(), datetime.getMonth(),
	      // 4 = index of Thursday
	      datetime.getDate() + (4 - datetime.getDay()));
	}
	
	function weekGetter(size) {
	   return function(date) {
	      var firstThurs = getFirstThursdayOfYear(date.getFullYear()),
	         thisThurs = getThursdayThisWeek(date);
	
	      var diff = +thisThurs - +firstThurs,
	         result = 1 + Math.round(diff / 6.048e8); // 6.048e8 ms per week
	
	      return padNumber(result, size);
	   };
	}
	
	function ampmGetter(date, formats) {
	  return date.getHours() < 12 ? formats.AMPMS[0] : formats.AMPMS[1];
	}
	
	function eraGetter(date, formats) {
	  return date.getFullYear() <= 0 ? formats.ERAS[0] : formats.ERAS[1];
	}
	
	function longEraGetter(date, formats) {
	  return date.getFullYear() <= 0 ? formats.ERANAMES[0] : formats.ERANAMES[1];
	}
	
	var DATE_FORMATS = {
	  yyyy: dateGetter('FullYear', 4, 0, false, true),
	    yy: dateGetter('FullYear', 2, 0, true, true),
	     y: dateGetter('FullYear', 1, 0, false, true),
	  MMMM: dateStrGetter('Month'),
	   MMM: dateStrGetter('Month', true),
	    MM: dateGetter('Month', 2, 1),
	     M: dateGetter('Month', 1, 1),
	  LLLL: dateStrGetter('Month', false, true),
	    dd: dateGetter('Date', 2),
	     d: dateGetter('Date', 1),
	    HH: dateGetter('Hours', 2),
	     H: dateGetter('Hours', 1),
	    hh: dateGetter('Hours', 2, -12),
	     h: dateGetter('Hours', 1, -12),
	    mm: dateGetter('Minutes', 2),
	     m: dateGetter('Minutes', 1),
	    ss: dateGetter('Seconds', 2),
	     s: dateGetter('Seconds', 1),
	     // while ISO 8601 requires fractions to be prefixed with `.` or `,`
	     // we can be just safely rely on using `sss` since we currently don't support single or two digit fractions
	   sss: dateGetter('Milliseconds', 3),
	  EEEE: dateStrGetter('Day'),
	   EEE: dateStrGetter('Day', true),
	     a: ampmGetter,
	     Z: timeZoneGetter,
	    ww: weekGetter(2),
	     w: weekGetter(1),
	     G: eraGetter,
	     GG: eraGetter,
	     GGG: eraGetter,
	     GGGG: longEraGetter
	};
	
	var DATE_FORMATS_SPLIT = /((?:[^yMLdHhmsaZEwG']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|L+|d+|H+|h+|m+|s+|a|Z|G+|w+))(.*)/,
	    NUMBER_STRING = /^\-?\d+$/;
	
	/**
	 * @ngdoc filter
	 * @name date
	 * @kind function
	 *
	 * @description
	 *   Formats `date` to a string based on the requested `format`.
	 *
	 *   `format` string can be composed of the following elements:
	 *
	 *   * `'yyyy'`: 4 digit representation of year (e.g. AD 1 => 0001, AD 2010 => 2010)
	 *   * `'yy'`: 2 digit representation of year, padded (00-99). (e.g. AD 2001 => 01, AD 2010 => 10)
	 *   * `'y'`: 1 digit representation of year, e.g. (AD 1 => 1, AD 199 => 199)
	 *   * `'MMMM'`: Month in year (January-December)
	 *   * `'MMM'`: Month in year (Jan-Dec)
	 *   * `'MM'`: Month in year, padded (01-12)
	 *   * `'M'`: Month in year (1-12)
	 *   * `'LLLL'`: Stand-alone month in year (January-December)
	 *   * `'dd'`: Day in month, padded (01-31)
	 *   * `'d'`: Day in month (1-31)
	 *   * `'EEEE'`: Day in Week,(Sunday-Saturday)
	 *   * `'EEE'`: Day in Week, (Sun-Sat)
	 *   * `'HH'`: Hour in day, padded (00-23)
	 *   * `'H'`: Hour in day (0-23)
	 *   * `'hh'`: Hour in AM/PM, padded (01-12)
	 *   * `'h'`: Hour in AM/PM, (1-12)
	 *   * `'mm'`: Minute in hour, padded (00-59)
	 *   * `'m'`: Minute in hour (0-59)
	 *   * `'ss'`: Second in minute, padded (00-59)
	 *   * `'s'`: Second in minute (0-59)
	 *   * `'sss'`: Millisecond in second, padded (000-999)
	 *   * `'a'`: AM/PM marker
	 *   * `'Z'`: 4 digit (+sign) representation of the timezone offset (-1200-+1200)
	 *   * `'ww'`: Week of year, padded (00-53). Week 01 is the week with the first Thursday of the year
	 *   * `'w'`: Week of year (0-53). Week 1 is the week with the first Thursday of the year
	 *   * `'G'`, `'GG'`, `'GGG'`: The abbreviated form of the era string (e.g. 'AD')
	 *   * `'GGGG'`: The long form of the era string (e.g. 'Anno Domini')
	 *
	 *   `format` string can also be one of the following predefined
	 *   {@link guide/i18n localizable formats}:
	 *
	 *   * `'medium'`: equivalent to `'MMM d, y h:mm:ss a'` for en_US locale
	 *     (e.g. Sep 3, 2010 12:05:08 PM)
	 *   * `'short'`: equivalent to `'M/d/yy h:mm a'` for en_US  locale (e.g. 9/3/10 12:05 PM)
	 *   * `'fullDate'`: equivalent to `'EEEE, MMMM d, y'` for en_US  locale
	 *     (e.g. Friday, September 3, 2010)
	 *   * `'longDate'`: equivalent to `'MMMM d, y'` for en_US  locale (e.g. September 3, 2010)
	 *   * `'mediumDate'`: equivalent to `'MMM d, y'` for en_US  locale (e.g. Sep 3, 2010)
	 *   * `'shortDate'`: equivalent to `'M/d/yy'` for en_US locale (e.g. 9/3/10)
	 *   * `'mediumTime'`: equivalent to `'h:mm:ss a'` for en_US locale (e.g. 12:05:08 PM)
	 *   * `'shortTime'`: equivalent to `'h:mm a'` for en_US locale (e.g. 12:05 PM)
	 *
	 *   `format` string can contain literal values. These need to be escaped by surrounding with single quotes (e.g.
	 *   `"h 'in the morning'"`). In order to output a single quote, escape it - i.e., two single quotes in a sequence
	 *   (e.g. `"h 'o''clock'"`).
	 *
	 * @param {(Date|number|string)} date Date to format either as Date object, milliseconds (string or
	 *    number) or various ISO 8601 datetime string formats (e.g. yyyy-MM-ddTHH:mm:ss.sssZ and its
	 *    shorter versions like yyyy-MM-ddTHH:mmZ, yyyy-MM-dd or yyyyMMddTHHmmssZ). If no timezone is
	 *    specified in the string input, the time is considered to be in the local timezone.
	 * @param {string=} format Formatting rules (see Description). If not specified,
	 *    `mediumDate` is used.
	 * @param {string=} timezone Timezone to be used for formatting. It understands UTC/GMT and the
	 *    continental US time zone abbreviations, but for general use, use a time zone offset, for
	 *    example, `'+0430'` (4 hours, 30 minutes east of the Greenwich meridian)
	 *    If not specified, the timezone of the browser will be used.
	 * @returns {string} Formatted string or the input if input is not recognized as date/millis.
	 *
	 * @example
	   <example>
	     <file name="index.html">
	       <span ng-non-bindable>{{1288323623006 | date:'medium'}}</span>:
	           <span>{{1288323623006 | date:'medium'}}</span><br>
	       <span ng-non-bindable>{{1288323623006 | date:'yyyy-MM-dd HH:mm:ss Z'}}</span>:
	          <span>{{1288323623006 | date:'yyyy-MM-dd HH:mm:ss Z'}}</span><br>
	       <span ng-non-bindable>{{1288323623006 | date:'MM/dd/yyyy @ h:mma'}}</span>:
	          <span>{{'1288323623006' | date:'MM/dd/yyyy @ h:mma'}}</span><br>
	       <span ng-non-bindable>{{1288323623006 | date:"MM/dd/yyyy 'at' h:mma"}}</span>:
	          <span>{{'1288323623006' | date:"MM/dd/yyyy 'at' h:mma"}}</span><br>
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should format date', function() {
	         expect(element(by.binding("1288323623006 | date:'medium'")).getText()).
	            toMatch(/Oct 2\d, 2010 \d{1,2}:\d{2}:\d{2} (AM|PM)/);
	         expect(element(by.binding("1288323623006 | date:'yyyy-MM-dd HH:mm:ss Z'")).getText()).
	            toMatch(/2010\-10\-2\d \d{2}:\d{2}:\d{2} (\-|\+)?\d{4}/);
	         expect(element(by.binding("'1288323623006' | date:'MM/dd/yyyy @ h:mma'")).getText()).
	            toMatch(/10\/2\d\/2010 @ \d{1,2}:\d{2}(AM|PM)/);
	         expect(element(by.binding("'1288323623006' | date:\"MM/dd/yyyy 'at' h:mma\"")).getText()).
	            toMatch(/10\/2\d\/2010 at \d{1,2}:\d{2}(AM|PM)/);
	       });
	     </file>
	   </example>
	 */
	dateFilter.$inject = ['$locale'];
	function dateFilter($locale) {
	
	
	  var R_ISO8601_STR = /^(\d{4})-?(\d\d)-?(\d\d)(?:T(\d\d)(?::?(\d\d)(?::?(\d\d)(?:\.(\d+))?)?)?(Z|([+-])(\d\d):?(\d\d))?)?$/;
	                     // 1        2       3         4          5          6          7          8  9     10      11
	  function jsonStringToDate(string) {
	    var match;
	    if (match = string.match(R_ISO8601_STR)) {
	      var date = new Date(0),
	          tzHour = 0,
	          tzMin  = 0,
	          dateSetter = match[8] ? date.setUTCFullYear : date.setFullYear,
	          timeSetter = match[8] ? date.setUTCHours : date.setHours;
	
	      if (match[9]) {
	        tzHour = toInt(match[9] + match[10]);
	        tzMin = toInt(match[9] + match[11]);
	      }
	      dateSetter.call(date, toInt(match[1]), toInt(match[2]) - 1, toInt(match[3]));
	      var h = toInt(match[4] || 0) - tzHour;
	      var m = toInt(match[5] || 0) - tzMin;
	      var s = toInt(match[6] || 0);
	      var ms = Math.round(parseFloat('0.' + (match[7] || 0)) * 1000);
	      timeSetter.call(date, h, m, s, ms);
	      return date;
	    }
	    return string;
	  }
	
	
	  return function(date, format, timezone) {
	    var text = '',
	        parts = [],
	        fn, match;
	
	    format = format || 'mediumDate';
	    format = $locale.DATETIME_FORMATS[format] || format;
	    if (isString(date)) {
	      date = NUMBER_STRING.test(date) ? toInt(date) : jsonStringToDate(date);
	    }
	
	    if (isNumber(date)) {
	      date = new Date(date);
	    }
	
	    if (!isDate(date) || !isFinite(date.getTime())) {
	      return date;
	    }
	
	    while (format) {
	      match = DATE_FORMATS_SPLIT.exec(format);
	      if (match) {
	        parts = concat(parts, match, 1);
	        format = parts.pop();
	      } else {
	        parts.push(format);
	        format = null;
	      }
	    }
	
	    var dateTimezoneOffset = date.getTimezoneOffset();
	    if (timezone) {
	      dateTimezoneOffset = timezoneToOffset(timezone, dateTimezoneOffset);
	      date = convertTimezoneToLocal(date, timezone, true);
	    }
	    forEach(parts, function(value) {
	      fn = DATE_FORMATS[value];
	      text += fn ? fn(date, $locale.DATETIME_FORMATS, dateTimezoneOffset)
	                 : value === "''" ? "'" : value.replace(/(^'|'$)/g, '').replace(/''/g, "'");
	    });
	
	    return text;
	  };
	}
	
	
	/**
	 * @ngdoc filter
	 * @name json
	 * @kind function
	 *
	 * @description
	 *   Allows you to convert a JavaScript object into JSON string.
	 *
	 *   This filter is mostly useful for debugging. When using the double curly {{value}} notation
	 *   the binding is automatically converted to JSON.
	 *
	 * @param {*} object Any JavaScript object (including arrays and primitive types) to filter.
	 * @param {number=} spacing The number of spaces to use per indentation, defaults to 2.
	 * @returns {string} JSON string.
	 *
	 *
	 * @example
	   <example>
	     <file name="index.html">
	       <pre id="default-spacing">{{ {'name':'value'} | json }}</pre>
	       <pre id="custom-spacing">{{ {'name':'value'} | json:4 }}</pre>
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should jsonify filtered objects', function() {
	         expect(element(by.id('default-spacing')).getText()).toMatch(/\{\n  "name": ?"value"\n}/);
	         expect(element(by.id('custom-spacing')).getText()).toMatch(/\{\n    "name": ?"value"\n}/);
	       });
	     </file>
	   </example>
	 *
	 */
	function jsonFilter() {
	  return function(object, spacing) {
	    if (isUndefined(spacing)) {
	        spacing = 2;
	    }
	    return toJson(object, spacing);
	  };
	}
	
	
	/**
	 * @ngdoc filter
	 * @name lowercase
	 * @kind function
	 * @description
	 * Converts string to lowercase.
	 * @see angular.lowercase
	 */
	var lowercaseFilter = valueFn(lowercase);
	
	
	/**
	 * @ngdoc filter
	 * @name uppercase
	 * @kind function
	 * @description
	 * Converts string to uppercase.
	 * @see angular.uppercase
	 */
	var uppercaseFilter = valueFn(uppercase);
	
	/**
	 * @ngdoc filter
	 * @name limitTo
	 * @kind function
	 *
	 * @description
	 * Creates a new array or string containing only a specified number of elements. The elements
	 * are taken from either the beginning or the end of the source array, string or number, as specified by
	 * the value and sign (positive or negative) of `limit`. If a number is used as input, it is
	 * converted to a string.
	 *
	 * @param {Array|string|number} input Source array, string or number to be limited.
	 * @param {string|number} limit The length of the returned array or string. If the `limit` number
	 *     is positive, `limit` number of items from the beginning of the source array/string are copied.
	 *     If the number is negative, `limit` number  of items from the end of the source array/string
	 *     are copied. The `limit` will be trimmed if it exceeds `array.length`. If `limit` is undefined,
	 *     the input will be returned unchanged.
	 * @param {(string|number)=} begin Index at which to begin limitation. As a negative index, `begin`
	 *     indicates an offset from the end of `input`. Defaults to `0`.
	 * @returns {Array|string} A new sub-array or substring of length `limit` or less if input array
	 *     had less than `limit` elements.
	 *
	 * @example
	   <example module="limitToExample">
	     <file name="index.html">
	       <script>
	         angular.module('limitToExample', [])
	           .controller('ExampleController', ['$scope', function($scope) {
	             $scope.numbers = [1,2,3,4,5,6,7,8,9];
	             $scope.letters = "abcdefghi";
	             $scope.longNumber = 2345432342;
	             $scope.numLimit = 3;
	             $scope.letterLimit = 3;
	             $scope.longNumberLimit = 3;
	           }]);
	       </script>
	       <div ng-controller="ExampleController">
	         <label>
	            Limit {{numbers}} to:
	            <input type="number" step="1" ng-model="numLimit">
	         </label>
	         <p>Output numbers: {{ numbers | limitTo:numLimit }}</p>
	         <label>
	            Limit {{letters}} to:
	            <input type="number" step="1" ng-model="letterLimit">
	         </label>
	         <p>Output letters: {{ letters | limitTo:letterLimit }}</p>
	         <label>
	            Limit {{longNumber}} to:
	            <input type="number" step="1" ng-model="longNumberLimit">
	         </label>
	         <p>Output long number: {{ longNumber | limitTo:longNumberLimit }}</p>
	       </div>
	     </file>
	     <file name="protractor.js" type="protractor">
	       var numLimitInput = element(by.model('numLimit'));
	       var letterLimitInput = element(by.model('letterLimit'));
	       var longNumberLimitInput = element(by.model('longNumberLimit'));
	       var limitedNumbers = element(by.binding('numbers | limitTo:numLimit'));
	       var limitedLetters = element(by.binding('letters | limitTo:letterLimit'));
	       var limitedLongNumber = element(by.binding('longNumber | limitTo:longNumberLimit'));
	
	       it('should limit the number array to first three items', function() {
	         expect(numLimitInput.getAttribute('value')).toBe('3');
	         expect(letterLimitInput.getAttribute('value')).toBe('3');
	         expect(longNumberLimitInput.getAttribute('value')).toBe('3');
	         expect(limitedNumbers.getText()).toEqual('Output numbers: [1,2,3]');
	         expect(limitedLetters.getText()).toEqual('Output letters: abc');
	         expect(limitedLongNumber.getText()).toEqual('Output long number: 234');
	       });
	
	       // There is a bug in safari and protractor that doesn't like the minus key
	       // it('should update the output when -3 is entered', function() {
	       //   numLimitInput.clear();
	       //   numLimitInput.sendKeys('-3');
	       //   letterLimitInput.clear();
	       //   letterLimitInput.sendKeys('-3');
	       //   longNumberLimitInput.clear();
	       //   longNumberLimitInput.sendKeys('-3');
	       //   expect(limitedNumbers.getText()).toEqual('Output numbers: [7,8,9]');
	       //   expect(limitedLetters.getText()).toEqual('Output letters: ghi');
	       //   expect(limitedLongNumber.getText()).toEqual('Output long number: 342');
	       // });
	
	       it('should not exceed the maximum size of input array', function() {
	         numLimitInput.clear();
	         numLimitInput.sendKeys('100');
	         letterLimitInput.clear();
	         letterLimitInput.sendKeys('100');
	         longNumberLimitInput.clear();
	         longNumberLimitInput.sendKeys('100');
	         expect(limitedNumbers.getText()).toEqual('Output numbers: [1,2,3,4,5,6,7,8,9]');
	         expect(limitedLetters.getText()).toEqual('Output letters: abcdefghi');
	         expect(limitedLongNumber.getText()).toEqual('Output long number: 2345432342');
	       });
	     </file>
	   </example>
	*/
	function limitToFilter() {
	  return function(input, limit, begin) {
	    if (Math.abs(Number(limit)) === Infinity) {
	      limit = Number(limit);
	    } else {
	      limit = toInt(limit);
	    }
	    if (isNaN(limit)) return input;
	
	    if (isNumber(input)) input = input.toString();
	    if (!isArray(input) && !isString(input)) return input;
	
	    begin = (!begin || isNaN(begin)) ? 0 : toInt(begin);
	    begin = (begin < 0) ? Math.max(0, input.length + begin) : begin;
	
	    if (limit >= 0) {
	      return input.slice(begin, begin + limit);
	    } else {
	      if (begin === 0) {
	        return input.slice(limit, input.length);
	      } else {
	        return input.slice(Math.max(0, begin + limit), begin);
	      }
	    }
	  };
	}
	
	/**
	 * @ngdoc filter
	 * @name orderBy
	 * @kind function
	 *
	 * @description
	 * Orders a specified `array` by the `expression` predicate. It is ordered alphabetically
	 * for strings and numerically for numbers. Note: if you notice numbers are not being sorted
	 * as expected, make sure they are actually being saved as numbers and not strings.
	 * Array-like values (e.g. NodeLists, jQuery objects, TypedArrays, Strings, etc) are also supported.
	 *
	 * @param {Array} array The array (or array-like object) to sort.
	 * @param {function(*)|string|Array.<(function(*)|string)>=} expression A predicate to be
	 *    used by the comparator to determine the order of elements.
	 *
	 *    Can be one of:
	 *
	 *    - `function`: Getter function. The result of this function will be sorted using the
	 *      `<`, `===`, `>` operator.
	 *    - `string`: An Angular expression. The result of this expression is used to compare elements
	 *      (for example `name` to sort by a property called `name` or `name.substr(0, 3)` to sort by
	 *      3 first characters of a property called `name`). The result of a constant expression
	 *      is interpreted as a property name to be used in comparisons (for example `"special name"`
	 *      to sort object by the value of their `special name` property). An expression can be
	 *      optionally prefixed with `+` or `-` to control ascending or descending sort order
	 *      (for example, `+name` or `-name`). If no property is provided, (e.g. `'+'`) then the array
	 *      element itself is used to compare where sorting.
	 *    - `Array`: An array of function or string predicates. The first predicate in the array
	 *      is used for sorting, but when two items are equivalent, the next predicate is used.
	 *
	 *    If the predicate is missing or empty then it defaults to `'+'`.
	 *
	 * @param {boolean=} reverse Reverse the order of the array.
	 * @returns {Array} Sorted copy of the source array.
	 *
	 *
	 * @example
	 * The example below demonstrates a simple ngRepeat, where the data is sorted
	 * by age in descending order (predicate is set to `'-age'`).
	 * `reverse` is not set, which means it defaults to `false`.
	   <example module="orderByExample">
	     <file name="index.html">
	       <div ng-controller="ExampleController">
	         <table class="friend">
	           <tr>
	             <th>Name</th>
	             <th>Phone Number</th>
	             <th>Age</th>
	           </tr>
	           <tr ng-repeat="friend in friends | orderBy:'-age'">
	             <td>{{friend.name}}</td>
	             <td>{{friend.phone}}</td>
	             <td>{{friend.age}}</td>
	           </tr>
	         </table>
	       </div>
	     </file>
	     <file name="script.js">
	       angular.module('orderByExample', [])
	         .controller('ExampleController', ['$scope', function($scope) {
	           $scope.friends =
	               [{name:'John', phone:'555-1212', age:10},
	                {name:'Mary', phone:'555-9876', age:19},
	                {name:'Mike', phone:'555-4321', age:21},
	                {name:'Adam', phone:'555-5678', age:35},
	                {name:'Julie', phone:'555-8765', age:29}];
	         }]);
	     </file>
	   </example>
	 *
	 * The predicate and reverse parameters can be controlled dynamically through scope properties,
	 * as shown in the next example.
	 * @example
	   <example module="orderByExample">
	     <file name="index.html">
	       <div ng-controller="ExampleController">
	         <pre>Sorting predicate = {{predicate}}; reverse = {{reverse}}</pre>
	         <hr/>
	         <button ng-click="predicate=''">Set to unsorted</button>
	         <table class="friend">
	           <tr>
	            <th>
	                <button ng-click="order('name')">Name</button>
	                <span class="sortorder" ng-show="predicate === 'name'" ng-class="{reverse:reverse}"></span>
	            </th>
	            <th>
	                <button ng-click="order('phone')">Phone Number</button>
	                <span class="sortorder" ng-show="predicate === 'phone'" ng-class="{reverse:reverse}"></span>
	            </th>
	            <th>
	                <button ng-click="order('age')">Age</button>
	                <span class="sortorder" ng-show="predicate === 'age'" ng-class="{reverse:reverse}"></span>
	            </th>
	           </tr>
	           <tr ng-repeat="friend in friends | orderBy:predicate:reverse">
	             <td>{{friend.name}}</td>
	             <td>{{friend.phone}}</td>
	             <td>{{friend.age}}</td>
	           </tr>
	         </table>
	       </div>
	     </file>
	     <file name="script.js">
	       angular.module('orderByExample', [])
	         .controller('ExampleController', ['$scope', function($scope) {
	           $scope.friends =
	               [{name:'John', phone:'555-1212', age:10},
	                {name:'Mary', phone:'555-9876', age:19},
	                {name:'Mike', phone:'555-4321', age:21},
	                {name:'Adam', phone:'555-5678', age:35},
	                {name:'Julie', phone:'555-8765', age:29}];
	           $scope.predicate = 'age';
	           $scope.reverse = true;
	           $scope.order = function(predicate) {
	             $scope.reverse = ($scope.predicate === predicate) ? !$scope.reverse : false;
	             $scope.predicate = predicate;
	           };
	         }]);
	      </file>
	     <file name="style.css">
	       .sortorder:after {
	         content: '\25b2';
	       }
	       .sortorder.reverse:after {
	         content: '\25bc';
	       }
	     </file>
	   </example>
	 *
	 * It's also possible to call the orderBy filter manually, by injecting `$filter`, retrieving the
	 * filter routine with `$filter('orderBy')`, and calling the returned filter routine with the
	 * desired parameters.
	 *
	 * Example:
	 *
	 * @example
	  <example module="orderByExample">
	    <file name="index.html">
	    <div ng-controller="ExampleController">
	      <pre>Sorting predicate = {{predicate}}; reverse = {{reverse}}</pre>
	      <table class="friend">
	        <tr>
	          <th>
	              <button ng-click="order('name')">Name</button>
	              <span class="sortorder" ng-show="predicate === 'name'" ng-class="{reverse:reverse}"></span>
	          </th>
	          <th>
	              <button ng-click="order('phone')">Phone Number</button>
	              <span class="sortorder" ng-show="predicate === 'phone'" ng-class="{reverse:reverse}"></span>
	          </th>
	          <th>
	              <button ng-click="order('age')">Age</button>
	              <span class="sortorder" ng-show="predicate === 'age'" ng-class="{reverse:reverse}"></span>
	          </th>
	        </tr>
	        <tr ng-repeat="friend in friends">
	          <td>{{friend.name}}</td>
	          <td>{{friend.phone}}</td>
	          <td>{{friend.age}}</td>
	        </tr>
	      </table>
	    </div>
	    </file>
	
	    <file name="script.js">
	      angular.module('orderByExample', [])
	        .controller('ExampleController', ['$scope', '$filter', function($scope, $filter) {
	          var orderBy = $filter('orderBy');
	          $scope.friends = [
	            { name: 'John',    phone: '555-1212',    age: 10 },
	            { name: 'Mary',    phone: '555-9876',    age: 19 },
	            { name: 'Mike',    phone: '555-4321',    age: 21 },
	            { name: 'Adam',    phone: '555-5678',    age: 35 },
	            { name: 'Julie',   phone: '555-8765',    age: 29 }
	          ];
	          $scope.order = function(predicate) {
	            $scope.predicate = predicate;
	            $scope.reverse = ($scope.predicate === predicate) ? !$scope.reverse : false;
	            $scope.friends = orderBy($scope.friends, predicate, $scope.reverse);
	          };
	          $scope.order('age', true);
	        }]);
	    </file>
	
	    <file name="style.css">
	       .sortorder:after {
	         content: '\25b2';
	       }
	       .sortorder.reverse:after {
	         content: '\25bc';
	       }
	    </file>
	</example>
	 */
	orderByFilter.$inject = ['$parse'];
	function orderByFilter($parse) {
	  return function(array, sortPredicate, reverseOrder) {
	
	    if (array == null) return array;
	    if (!isArrayLike(array)) {
	      throw minErr('orderBy')('notarray', 'Expected array but received: {0}', array);
	    }
	
	    if (!isArray(sortPredicate)) { sortPredicate = [sortPredicate]; }
	    if (sortPredicate.length === 0) { sortPredicate = ['+']; }
	
	    var predicates = processPredicates(sortPredicate, reverseOrder);
	    // Add a predicate at the end that evaluates to the element index. This makes the
	    // sort stable as it works as a tie-breaker when all the input predicates cannot
	    // distinguish between two elements.
	    predicates.push({ get: function() { return {}; }, descending: reverseOrder ? -1 : 1});
	
	    // The next three lines are a version of a Swartzian Transform idiom from Perl
	    // (sometimes called the Decorate-Sort-Undecorate idiom)
	    // See https://en.wikipedia.org/wiki/Schwartzian_transform
	    var compareValues = Array.prototype.map.call(array, getComparisonObject);
	    compareValues.sort(doComparison);
	    array = compareValues.map(function(item) { return item.value; });
	
	    return array;
	
	    function getComparisonObject(value, index) {
	      return {
	        value: value,
	        predicateValues: predicates.map(function(predicate) {
	          return getPredicateValue(predicate.get(value), index);
	        })
	      };
	    }
	
	    function doComparison(v1, v2) {
	      var result = 0;
	      for (var index=0, length = predicates.length; index < length; ++index) {
	        result = compare(v1.predicateValues[index], v2.predicateValues[index]) * predicates[index].descending;
	        if (result) break;
	      }
	      return result;
	    }
	  };
	
	  function processPredicates(sortPredicate, reverseOrder) {
	    reverseOrder = reverseOrder ? -1 : 1;
	    return sortPredicate.map(function(predicate) {
	      var descending = 1, get = identity;
	
	      if (isFunction(predicate)) {
	        get = predicate;
	      } else if (isString(predicate)) {
	        if ((predicate.charAt(0) == '+' || predicate.charAt(0) == '-')) {
	          descending = predicate.charAt(0) == '-' ? -1 : 1;
	          predicate = predicate.substring(1);
	        }
	        if (predicate !== '') {
	          get = $parse(predicate);
	          if (get.constant) {
	            var key = get();
	            get = function(value) { return value[key]; };
	          }
	        }
	      }
	      return { get: get, descending: descending * reverseOrder };
	    });
	  }
	
	  function isPrimitive(value) {
	    switch (typeof value) {
	      case 'number': /* falls through */
	      case 'boolean': /* falls through */
	      case 'string':
	        return true;
	      default:
	        return false;
	    }
	  }
	
	  function objectValue(value, index) {
	    // If `valueOf` is a valid function use that
	    if (typeof value.valueOf === 'function') {
	      value = value.valueOf();
	      if (isPrimitive(value)) return value;
	    }
	    // If `toString` is a valid function and not the one from `Object.prototype` use that
	    if (hasCustomToString(value)) {
	      value = value.toString();
	      if (isPrimitive(value)) return value;
	    }
	    // We have a basic object so we use the position of the object in the collection
	    return index;
	  }
	
	  function getPredicateValue(value, index) {
	    var type = typeof value;
	    if (value === null) {
	      type = 'string';
	      value = 'null';
	    } else if (type === 'string') {
	      value = value.toLowerCase();
	    } else if (type === 'object') {
	      value = objectValue(value, index);
	    }
	    return { value: value, type: type };
	  }
	
	  function compare(v1, v2) {
	    var result = 0;
	    if (v1.type === v2.type) {
	      if (v1.value !== v2.value) {
	        result = v1.value < v2.value ? -1 : 1;
	      }
	    } else {
	      result = v1.type < v2.type ? -1 : 1;
	    }
	    return result;
	  }
	}
	
	function ngDirective(directive) {
	  if (isFunction(directive)) {
	    directive = {
	      link: directive
	    };
	  }
	  directive.restrict = directive.restrict || 'AC';
	  return valueFn(directive);
	}
	
	/**
	 * @ngdoc directive
	 * @name a
	 * @restrict E
	 *
	 * @description
	 * Modifies the default behavior of the html A tag so that the default action is prevented when
	 * the href attribute is empty.
	 *
	 * This change permits the easy creation of action links with the `ngClick` directive
	 * without changing the location or causing page reloads, e.g.:
	 * `<a href="" ng-click="list.addItem()">Add Item</a>`
	 */
	var htmlAnchorDirective = valueFn({
	  restrict: 'E',
	  compile: function(element, attr) {
	    if (!attr.href && !attr.xlinkHref) {
	      return function(scope, element) {
	        // If the linked element is not an anchor tag anymore, do nothing
	        if (element[0].nodeName.toLowerCase() !== 'a') return;
	
	        // SVGAElement does not use the href attribute, but rather the 'xlinkHref' attribute.
	        var href = toString.call(element.prop('href')) === '[object SVGAnimatedString]' ?
	                   'xlink:href' : 'href';
	        element.on('click', function(event) {
	          // if we have no href url, then don't navigate anywhere.
	          if (!element.attr(href)) {
	            event.preventDefault();
	          }
	        });
	      };
	    }
	  }
	});
	
	/**
	 * @ngdoc directive
	 * @name ngHref
	 * @restrict A
	 * @priority 99
	 *
	 * @description
	 * Using Angular markup like `{{hash}}` in an href attribute will
	 * make the link go to the wrong URL if the user clicks it before
	 * Angular has a chance to replace the `{{hash}}` markup with its
	 * value. Until Angular replaces the markup the link will be broken
	 * and will most likely return a 404 error. The `ngHref` directive
	 * solves this problem.
	 *
	 * The wrong way to write it:
	 * ```html
	 * <a href="http://www.gravatar.com/avatar/{{hash}}">link1</a>
	 * ```
	 *
	 * The correct way to write it:
	 * ```html
	 * <a ng-href="http://www.gravatar.com/avatar/{{hash}}">link1</a>
	 * ```
	 *
	 * @element A
	 * @param {template} ngHref any string which can contain `{{}}` markup.
	 *
	 * @example
	 * This example shows various combinations of `href`, `ng-href` and `ng-click` attributes
	 * in links and their different behaviors:
	    <example>
	      <file name="index.html">
	        <input ng-model="value" /><br />
	        <a id="link-1" href ng-click="value = 1">link 1</a> (link, don't reload)<br />
	        <a id="link-2" href="" ng-click="value = 2">link 2</a> (link, don't reload)<br />
	        <a id="link-3" ng-href="/{{'123'}}">link 3</a> (link, reload!)<br />
	        <a id="link-4" href="" name="xx" ng-click="value = 4">anchor</a> (link, don't reload)<br />
	        <a id="link-5" name="xxx" ng-click="value = 5">anchor</a> (no link)<br />
	        <a id="link-6" ng-href="{{value}}">link</a> (link, change location)
	      </file>
	      <file name="protractor.js" type="protractor">
	        it('should execute ng-click but not reload when href without value', function() {
	          element(by.id('link-1')).click();
	          expect(element(by.model('value')).getAttribute('value')).toEqual('1');
	          expect(element(by.id('link-1')).getAttribute('href')).toBe('');
	        });
	
	        it('should execute ng-click but not reload when href empty string', function() {
	          element(by.id('link-2')).click();
	          expect(element(by.model('value')).getAttribute('value')).toEqual('2');
	          expect(element(by.id('link-2')).getAttribute('href')).toBe('');
	        });
	
	        it('should execute ng-click and change url when ng-href specified', function() {
	          expect(element(by.id('link-3')).getAttribute('href')).toMatch(/\/123$/);
	
	          element(by.id('link-3')).click();
	
	          // At this point, we navigate away from an Angular page, so we need
	          // to use browser.driver to get the base webdriver.
	
	          browser.wait(function() {
	            return browser.driver.getCurrentUrl().then(function(url) {
	              return url.match(/\/123$/);
	            });
	          }, 5000, 'page should navigate to /123');
	        });
	
	        it('should execute ng-click but not reload when href empty string and name specified', function() {
	          element(by.id('link-4')).click();
	          expect(element(by.model('value')).getAttribute('value')).toEqual('4');
	          expect(element(by.id('link-4')).getAttribute('href')).toBe('');
	        });
	
	        it('should execute ng-click but not reload when no href but name specified', function() {
	          element(by.id('link-5')).click();
	          expect(element(by.model('value')).getAttribute('value')).toEqual('5');
	          expect(element(by.id('link-5')).getAttribute('href')).toBe(null);
	        });
	
	        it('should only change url when only ng-href', function() {
	          element(by.model('value')).clear();
	          element(by.model('value')).sendKeys('6');
	          expect(element(by.id('link-6')).getAttribute('href')).toMatch(/\/6$/);
	
	          element(by.id('link-6')).click();
	
	          // At this point, we navigate away from an Angular page, so we need
	          // to use browser.driver to get the base webdriver.
	          browser.wait(function() {
	            return browser.driver.getCurrentUrl().then(function(url) {
	              return url.match(/\/6$/);
	            });
	          }, 5000, 'page should navigate to /6');
	        });
	      </file>
	    </example>
	 */
	
	/**
	 * @ngdoc directive
	 * @name ngSrc
	 * @restrict A
	 * @priority 99
	 *
	 * @description
	 * Using Angular markup like `{{hash}}` in a `src` attribute doesn't
	 * work right: The browser will fetch from the URL with the literal
	 * text `{{hash}}` until Angular replaces the expression inside
	 * `{{hash}}`. The `ngSrc` directive solves this problem.
	 *
	 * The buggy way to write it:
	 * ```html
	 * <img src="http://www.gravatar.com/avatar/{{hash}}" alt="Description"/>
	 * ```
	 *
	 * The correct way to write it:
	 * ```html
	 * <img ng-src="http://www.gravatar.com/avatar/{{hash}}" alt="Description" />
	 * ```
	 *
	 * @element IMG
	 * @param {template} ngSrc any string which can contain `{{}}` markup.
	 */
	
	/**
	 * @ngdoc directive
	 * @name ngSrcset
	 * @restrict A
	 * @priority 99
	 *
	 * @description
	 * Using Angular markup like `{{hash}}` in a `srcset` attribute doesn't
	 * work right: The browser will fetch from the URL with the literal
	 * text `{{hash}}` until Angular replaces the expression inside
	 * `{{hash}}`. The `ngSrcset` directive solves this problem.
	 *
	 * The buggy way to write it:
	 * ```html
	 * <img srcset="http://www.gravatar.com/avatar/{{hash}} 2x" alt="Description"/>
	 * ```
	 *
	 * The correct way to write it:
	 * ```html
	 * <img ng-srcset="http://www.gravatar.com/avatar/{{hash}} 2x" alt="Description" />
	 * ```
	 *
	 * @element IMG
	 * @param {template} ngSrcset any string which can contain `{{}}` markup.
	 */
	
	/**
	 * @ngdoc directive
	 * @name ngDisabled
	 * @restrict A
	 * @priority 100
	 *
	 * @description
	 *
	 * This directive sets the `disabled` attribute on the element if the
	 * {@link guide/expression expression} inside `ngDisabled` evaluates to truthy.
	 *
	 * A special directive is necessary because we cannot use interpolation inside the `disabled`
	 * attribute. See the {@link guide/interpolation interpolation guide} for more info.
	 *
	 * @example
	    <example>
	      <file name="index.html">
	        <label>Click me to toggle: <input type="checkbox" ng-model="checked"></label><br/>
	        <button ng-model="button" ng-disabled="checked">Button</button>
	      </file>
	      <file name="protractor.js" type="protractor">
	        it('should toggle button', function() {
	          expect(element(by.css('button')).getAttribute('disabled')).toBeFalsy();
	          element(by.model('checked')).click();
	          expect(element(by.css('button')).getAttribute('disabled')).toBeTruthy();
	        });
	      </file>
	    </example>
	 *
	 * @element INPUT
	 * @param {expression} ngDisabled If the {@link guide/expression expression} is truthy,
	 *     then the `disabled` attribute will be set on the element
	 */
	
	
	/**
	 * @ngdoc directive
	 * @name ngChecked
	 * @restrict A
	 * @priority 100
	 *
	 * @description
	 * Sets the `checked` attribute on the element, if the expression inside `ngChecked` is truthy.
	 *
	 * Note that this directive should not be used together with {@link ngModel `ngModel`},
	 * as this can lead to unexpected behavior.
	 *
	 * A special directive is necessary because we cannot use interpolation inside the `checked`
	 * attribute. See the {@link guide/interpolation interpolation guide} for more info.
	 *
	 * @example
	    <example>
	      <file name="index.html">
	        <label>Check me to check both: <input type="checkbox" ng-model="master"></label><br/>
	        <input id="checkSlave" type="checkbox" ng-checked="master" aria-label="Slave input">
	      </file>
	      <file name="protractor.js" type="protractor">
	        it('should check both checkBoxes', function() {
	          expect(element(by.id('checkSlave')).getAttribute('checked')).toBeFalsy();
	          element(by.model('master')).click();
	          expect(element(by.id('checkSlave')).getAttribute('checked')).toBeTruthy();
	        });
	      </file>
	    </example>
	 *
	 * @element INPUT
	 * @param {expression} ngChecked If the {@link guide/expression expression} is truthy,
	 *     then the `checked` attribute will be set on the element
	 */
	
	
	/**
	 * @ngdoc directive
	 * @name ngReadonly
	 * @restrict A
	 * @priority 100
	 *
	 * @description
	 *
	 * Sets the `readOnly` attribute on the element, if the expression inside `ngReadonly` is truthy.
	 *
	 * A special directive is necessary because we cannot use interpolation inside the `readOnly`
	 * attribute. See the {@link guide/interpolation interpolation guide} for more info.
	 *
	 * @example
	    <example>
	      <file name="index.html">
	        <label>Check me to make text readonly: <input type="checkbox" ng-model="checked"></label><br/>
	        <input type="text" ng-readonly="checked" value="I'm Angular" aria-label="Readonly field" />
	      </file>
	      <file name="protractor.js" type="protractor">
	        it('should toggle readonly attr', function() {
	          expect(element(by.css('[type="text"]')).getAttribute('readonly')).toBeFalsy();
	          element(by.model('checked')).click();
	          expect(element(by.css('[type="text"]')).getAttribute('readonly')).toBeTruthy();
	        });
	      </file>
	    </example>
	 *
	 * @element INPUT
	 * @param {expression} ngReadonly If the {@link guide/expression expression} is truthy,
	 *     then special attribute "readonly" will be set on the element
	 */
	
	
	/**
	 * @ngdoc directive
	 * @name ngSelected
	 * @restrict A
	 * @priority 100
	 *
	 * @description
	 *
	 * Sets the `selected` attribute on the element, if the expression inside `ngSelected` is truthy.
	 *
	 * A special directive is necessary because we cannot use interpolation inside the `selected`
	 * attribute. See the {@link guide/interpolation interpolation guide} for more info.
	 *
	 * @example
	    <example>
	      <file name="index.html">
	        <label>Check me to select: <input type="checkbox" ng-model="selected"></label><br/>
	        <select aria-label="ngSelected demo">
	          <option>Hello!</option>
	          <option id="greet" ng-selected="selected">Greetings!</option>
	        </select>
	      </file>
	      <file name="protractor.js" type="protractor">
	        it('should select Greetings!', function() {
	          expect(element(by.id('greet')).getAttribute('selected')).toBeFalsy();
	          element(by.model('selected')).click();
	          expect(element(by.id('greet')).getAttribute('selected')).toBeTruthy();
	        });
	      </file>
	    </example>
	 *
	 * @element OPTION
	 * @param {expression} ngSelected If the {@link guide/expression expression} is truthy,
	 *     then special attribute "selected" will be set on the element
	 */
	
	/**
	 * @ngdoc directive
	 * @name ngOpen
	 * @restrict A
	 * @priority 100
	 *
	 * @description
	 *
	 * Sets the `open` attribute on the element, if the expression inside `ngOpen` is truthy.
	 *
	 * A special directive is necessary because we cannot use interpolation inside the `open`
	 * attribute. See the {@link guide/interpolation interpolation guide} for more info.
	 *
	 * @example
	     <example>
	       <file name="index.html">
	         <label>Check me check multiple: <input type="checkbox" ng-model="open"></label><br/>
	         <details id="details" ng-open="open">
	            <summary>Show/Hide me</summary>
	         </details>
	       </file>
	       <file name="protractor.js" type="protractor">
	         it('should toggle open', function() {
	           expect(element(by.id('details')).getAttribute('open')).toBeFalsy();
	           element(by.model('open')).click();
	           expect(element(by.id('details')).getAttribute('open')).toBeTruthy();
	         });
	       </file>
	     </example>
	 *
	 * @element DETAILS
	 * @param {expression} ngOpen If the {@link guide/expression expression} is truthy,
	 *     then special attribute "open" will be set on the element
	 */
	
	var ngAttributeAliasDirectives = {};
	
	// boolean attrs are evaluated
	forEach(BOOLEAN_ATTR, function(propName, attrName) {
	  // binding to multiple is not supported
	  if (propName == "multiple") return;
	
	  function defaultLinkFn(scope, element, attr) {
	    scope.$watch(attr[normalized], function ngBooleanAttrWatchAction(value) {
	      attr.$set(attrName, !!value);
	    });
	  }
	
	  var normalized = directiveNormalize('ng-' + attrName);
	  var linkFn = defaultLinkFn;
	
	  if (propName === 'checked') {
	    linkFn = function(scope, element, attr) {
	      // ensuring ngChecked doesn't interfere with ngModel when both are set on the same input
	      if (attr.ngModel !== attr[normalized]) {
	        defaultLinkFn(scope, element, attr);
	      }
	    };
	  }
	
	  ngAttributeAliasDirectives[normalized] = function() {
	    return {
	      restrict: 'A',
	      priority: 100,
	      link: linkFn
	    };
	  };
	});
	
	// aliased input attrs are evaluated
	forEach(ALIASED_ATTR, function(htmlAttr, ngAttr) {
	  ngAttributeAliasDirectives[ngAttr] = function() {
	    return {
	      priority: 100,
	      link: function(scope, element, attr) {
	        //special case ngPattern when a literal regular expression value
	        //is used as the expression (this way we don't have to watch anything).
	        if (ngAttr === "ngPattern" && attr.ngPattern.charAt(0) == "/") {
	          var match = attr.ngPattern.match(REGEX_STRING_REGEXP);
	          if (match) {
	            attr.$set("ngPattern", new RegExp(match[1], match[2]));
	            return;
	          }
	        }
	
	        scope.$watch(attr[ngAttr], function ngAttrAliasWatchAction(value) {
	          attr.$set(ngAttr, value);
	        });
	      }
	    };
	  };
	});
	
	// ng-src, ng-srcset, ng-href are interpolated
	forEach(['src', 'srcset', 'href'], function(attrName) {
	  var normalized = directiveNormalize('ng-' + attrName);
	  ngAttributeAliasDirectives[normalized] = function() {
	    return {
	      priority: 99, // it needs to run after the attributes are interpolated
	      link: function(scope, element, attr) {
	        var propName = attrName,
	            name = attrName;
	
	        if (attrName === 'href' &&
	            toString.call(element.prop('href')) === '[object SVGAnimatedString]') {
	          name = 'xlinkHref';
	          attr.$attr[name] = 'xlink:href';
	          propName = null;
	        }
	
	        attr.$observe(normalized, function(value) {
	          if (!value) {
	            if (attrName === 'href') {
	              attr.$set(name, null);
	            }
	            return;
	          }
	
	          attr.$set(name, value);
	
	          // on IE, if "ng:src" directive declaration is used and "src" attribute doesn't exist
	          // then calling element.setAttribute('src', 'foo') doesn't do anything, so we need
	          // to set the property as well to achieve the desired effect.
	          // we use attr[attrName] value since $set can sanitize the url.
	          if (msie && propName) element.prop(propName, attr[name]);
	        });
	      }
	    };
	  };
	});
	
	/* global -nullFormCtrl, -SUBMITTED_CLASS, addSetValidityMethod: true
	 */
	var nullFormCtrl = {
	  $addControl: noop,
	  $$renameControl: nullFormRenameControl,
	  $removeControl: noop,
	  $setValidity: noop,
	  $setDirty: noop,
	  $setPristine: noop,
	  $setSubmitted: noop
	},
	SUBMITTED_CLASS = 'ng-submitted';
	
	function nullFormRenameControl(control, name) {
	  control.$name = name;
	}
	
	/**
	 * @ngdoc type
	 * @name form.FormController
	 *
	 * @property {boolean} $pristine True if user has not interacted with the form yet.
	 * @property {boolean} $dirty True if user has already interacted with the form.
	 * @property {boolean} $valid True if all of the containing forms and controls are valid.
	 * @property {boolean} $invalid True if at least one containing control or form is invalid.
	 * @property {boolean} $pending True if at least one containing control or form is pending.
	 * @property {boolean} $submitted True if user has submitted the form even if its invalid.
	 *
	 * @property {Object} $error Is an object hash, containing references to controls or
	 *  forms with failing validators, where:
	 *
	 *  - keys are validation tokens (error names),
	 *  - values are arrays of controls or forms that have a failing validator for given error name.
	 *
	 *  Built-in validation tokens:
	 *
	 *  - `email`
	 *  - `max`
	 *  - `maxlength`
	 *  - `min`
	 *  - `minlength`
	 *  - `number`
	 *  - `pattern`
	 *  - `required`
	 *  - `url`
	 *  - `date`
	 *  - `datetimelocal`
	 *  - `time`
	 *  - `week`
	 *  - `month`
	 *
	 * @description
	 * `FormController` keeps track of all its controls and nested forms as well as the state of them,
	 * such as being valid/invalid or dirty/pristine.
	 *
	 * Each {@link ng.directive:form form} directive creates an instance
	 * of `FormController`.
	 *
	 */
	//asks for $scope to fool the BC controller module
	FormController.$inject = ['$element', '$attrs', '$scope', '$animate', '$interpolate'];
	function FormController(element, attrs, $scope, $animate, $interpolate) {
	  var form = this,
	      controls = [];
	
	  // init state
	  form.$error = {};
	  form.$$success = {};
	  form.$pending = undefined;
	  form.$name = $interpolate(attrs.name || attrs.ngForm || '')($scope);
	  form.$dirty = false;
	  form.$pristine = true;
	  form.$valid = true;
	  form.$invalid = false;
	  form.$submitted = false;
	  form.$$parentForm = nullFormCtrl;
	
	  /**
	   * @ngdoc method
	   * @name form.FormController#$rollbackViewValue
	   *
	   * @description
	   * Rollback all form controls pending updates to the `$modelValue`.
	   *
	   * Updates may be pending by a debounced event or because the input is waiting for a some future
	   * event defined in `ng-model-options`. This method is typically needed by the reset button of
	   * a form that uses `ng-model-options` to pend updates.
	   */
	  form.$rollbackViewValue = function() {
	    forEach(controls, function(control) {
	      control.$rollbackViewValue();
	    });
	  };
	
	  /**
	   * @ngdoc method
	   * @name form.FormController#$commitViewValue
	   *
	   * @description
	   * Commit all form controls pending updates to the `$modelValue`.
	   *
	   * Updates may be pending by a debounced event or because the input is waiting for a some future
	   * event defined in `ng-model-options`. This method is rarely needed as `NgModelController`
	   * usually handles calling this in response to input events.
	   */
	  form.$commitViewValue = function() {
	    forEach(controls, function(control) {
	      control.$commitViewValue();
	    });
	  };
	
	  /**
	   * @ngdoc method
	   * @name form.FormController#$addControl
	   * @param {object} control control object, either a {@link form.FormController} or an
	   * {@link ngModel.NgModelController}
	   *
	   * @description
	   * Register a control with the form. Input elements using ngModelController do this automatically
	   * when they are linked.
	   *
	   * Note that the current state of the control will not be reflected on the new parent form. This
	   * is not an issue with normal use, as freshly compiled and linked controls are in a `$pristine`
	   * state.
	   *
	   * However, if the method is used programmatically, for example by adding dynamically created controls,
	   * or controls that have been previously removed without destroying their corresponding DOM element,
	   * it's the developers responsibility to make sure the current state propagates to the parent form.
	   *
	   * For example, if an input control is added that is already `$dirty` and has `$error` properties,
	   * calling `$setDirty()` and `$validate()` afterwards will propagate the state to the parent form.
	   */
	  form.$addControl = function(control) {
	    // Breaking change - before, inputs whose name was "hasOwnProperty" were quietly ignored
	    // and not added to the scope.  Now we throw an error.
	    assertNotHasOwnProperty(control.$name, 'input');
	    controls.push(control);
	
	    if (control.$name) {
	      form[control.$name] = control;
	    }
	
	    control.$$parentForm = form;
	  };
	
	  // Private API: rename a form control
	  form.$$renameControl = function(control, newName) {
	    var oldName = control.$name;
	
	    if (form[oldName] === control) {
	      delete form[oldName];
	    }
	    form[newName] = control;
	    control.$name = newName;
	  };
	
	  /**
	   * @ngdoc method
	   * @name form.FormController#$removeControl
	   * @param {object} control control object, either a {@link form.FormController} or an
	   * {@link ngModel.NgModelController}
	   *
	   * @description
	   * Deregister a control from the form.
	   *
	   * Input elements using ngModelController do this automatically when they are destroyed.
	   *
	   * Note that only the removed control's validation state (`$errors`etc.) will be removed from the
	   * form. `$dirty`, `$submitted` states will not be changed, because the expected behavior can be
	   * different from case to case. For example, removing the only `$dirty` control from a form may or
	   * may not mean that the form is still `$dirty`.
	   */
	  form.$removeControl = function(control) {
	    if (control.$name && form[control.$name] === control) {
	      delete form[control.$name];
	    }
	    forEach(form.$pending, function(value, name) {
	      form.$setValidity(name, null, control);
	    });
	    forEach(form.$error, function(value, name) {
	      form.$setValidity(name, null, control);
	    });
	    forEach(form.$$success, function(value, name) {
	      form.$setValidity(name, null, control);
	    });
	
	    arrayRemove(controls, control);
	    control.$$parentForm = nullFormCtrl;
	  };
	
	
	  /**
	   * @ngdoc method
	   * @name form.FormController#$setValidity
	   *
	   * @description
	   * Sets the validity of a form control.
	   *
	   * This method will also propagate to parent forms.
	   */
	  addSetValidityMethod({
	    ctrl: this,
	    $element: element,
	    set: function(object, property, controller) {
	      var list = object[property];
	      if (!list) {
	        object[property] = [controller];
	      } else {
	        var index = list.indexOf(controller);
	        if (index === -1) {
	          list.push(controller);
	        }
	      }
	    },
	    unset: function(object, property, controller) {
	      var list = object[property];
	      if (!list) {
	        return;
	      }
	      arrayRemove(list, controller);
	      if (list.length === 0) {
	        delete object[property];
	      }
	    },
	    $animate: $animate
	  });
	
	  /**
	   * @ngdoc method
	   * @name form.FormController#$setDirty
	   *
	   * @description
	   * Sets the form to a dirty state.
	   *
	   * This method can be called to add the 'ng-dirty' class and set the form to a dirty
	   * state (ng-dirty class). This method will also propagate to parent forms.
	   */
	  form.$setDirty = function() {
	    $animate.removeClass(element, PRISTINE_CLASS);
	    $animate.addClass(element, DIRTY_CLASS);
	    form.$dirty = true;
	    form.$pristine = false;
	    form.$$parentForm.$setDirty();
	  };
	
	  /**
	   * @ngdoc method
	   * @name form.FormController#$setPristine
	   *
	   * @description
	   * Sets the form to its pristine state.
	   *
	   * This method can be called to remove the 'ng-dirty' class and set the form to its pristine
	   * state (ng-pristine class). This method will also propagate to all the controls contained
	   * in this form.
	   *
	   * Setting a form back to a pristine state is often useful when we want to 'reuse' a form after
	   * saving or resetting it.
	   */
	  form.$setPristine = function() {
	    $animate.setClass(element, PRISTINE_CLASS, DIRTY_CLASS + ' ' + SUBMITTED_CLASS);
	    form.$dirty = false;
	    form.$pristine = true;
	    form.$submitted = false;
	    forEach(controls, function(control) {
	      control.$setPristine();
	    });
	  };
	
	  /**
	   * @ngdoc method
	   * @name form.FormController#$setUntouched
	   *
	   * @description
	   * Sets the form to its untouched state.
	   *
	   * This method can be called to remove the 'ng-touched' class and set the form controls to their
	   * untouched state (ng-untouched class).
	   *
	   * Setting a form controls back to their untouched state is often useful when setting the form
	   * back to its pristine state.
	   */
	  form.$setUntouched = function() {
	    forEach(controls, function(control) {
	      control.$setUntouched();
	    });
	  };
	
	  /**
	   * @ngdoc method
	   * @name form.FormController#$setSubmitted
	   *
	   * @description
	   * Sets the form to its submitted state.
	   */
	  form.$setSubmitted = function() {
	    $animate.addClass(element, SUBMITTED_CLASS);
	    form.$submitted = true;
	    form.$$parentForm.$setSubmitted();
	  };
	}
	
	/**
	 * @ngdoc directive
	 * @name ngForm
	 * @restrict EAC
	 *
	 * @description
	 * Nestable alias of {@link ng.directive:form `form`} directive. HTML
	 * does not allow nesting of form elements. It is useful to nest forms, for example if the validity of a
	 * sub-group of controls needs to be determined.
	 *
	 * Note: the purpose of `ngForm` is to group controls,
	 * but not to be a replacement for the `<form>` tag with all of its capabilities
	 * (e.g. posting to the server, ...).
	 *
	 * @param {string=} ngForm|name Name of the form. If specified, the form controller will be published into
	 *                       related scope, under this name.
	 *
	 */
	
	 /**
	 * @ngdoc directive
	 * @name form
	 * @restrict E
	 *
	 * @description
	 * Directive that instantiates
	 * {@link form.FormController FormController}.
	 *
	 * If the `name` attribute is specified, the form controller is published onto the current scope under
	 * this name.
	 *
	 * # Alias: {@link ng.directive:ngForm `ngForm`}
	 *
	 * In Angular, forms can be nested. This means that the outer form is valid when all of the child
	 * forms are valid as well. However, browsers do not allow nesting of `<form>` elements, so
	 * Angular provides the {@link ng.directive:ngForm `ngForm`} directive, which behaves identically to
	 * `form` but can be nested. Nested forms can be useful, for example, if the validity of a sub-group
	 * of controls needs to be determined.
	 *
	 * # CSS classes
	 *  - `ng-valid` is set if the form is valid.
	 *  - `ng-invalid` is set if the form is invalid.
	 *  - `ng-pending` is set if the form is pending.
	 *  - `ng-pristine` is set if the form is pristine.
	 *  - `ng-dirty` is set if the form is dirty.
	 *  - `ng-submitted` is set if the form was submitted.
	 *
	 * Keep in mind that ngAnimate can detect each of these classes when added and removed.
	 *
	 *
	 * # Submitting a form and preventing the default action
	 *
	 * Since the role of forms in client-side Angular applications is different than in classical
	 * roundtrip apps, it is desirable for the browser not to translate the form submission into a full
	 * page reload that sends the data to the server. Instead some javascript logic should be triggered
	 * to handle the form submission in an application-specific way.
	 *
	 * For this reason, Angular prevents the default action (form submission to the server) unless the
	 * `<form>` element has an `action` attribute specified.
	 *
	 * You can use one of the following two ways to specify what javascript method should be called when
	 * a form is submitted:
	 *
	 * - {@link ng.directive:ngSubmit ngSubmit} directive on the form element
	 * - {@link ng.directive:ngClick ngClick} directive on the first
	  *  button or input field of type submit (input[type=submit])
	 *
	 * To prevent double execution of the handler, use only one of the {@link ng.directive:ngSubmit ngSubmit}
	 * or {@link ng.directive:ngClick ngClick} directives.
	 * This is because of the following form submission rules in the HTML specification:
	 *
	 * - If a form has only one input field then hitting enter in this field triggers form submit
	 * (`ngSubmit`)
	 * - if a form has 2+ input fields and no buttons or input[type=submit] then hitting enter
	 * doesn't trigger submit
	 * - if a form has one or more input fields and one or more buttons or input[type=submit] then
	 * hitting enter in any of the input fields will trigger the click handler on the *first* button or
	 * input[type=submit] (`ngClick`) *and* a submit handler on the enclosing form (`ngSubmit`)
	 *
	 * Any pending `ngModelOptions` changes will take place immediately when an enclosing form is
	 * submitted. Note that `ngClick` events will occur before the model is updated. Use `ngSubmit`
	 * to have access to the updated model.
	 *
	 * ## Animation Hooks
	 *
	 * Animations in ngForm are triggered when any of the associated CSS classes are added and removed.
	 * These classes are: `.ng-pristine`, `.ng-dirty`, `.ng-invalid` and `.ng-valid` as well as any
	 * other validations that are performed within the form. Animations in ngForm are similar to how
	 * they work in ngClass and animations can be hooked into using CSS transitions, keyframes as well
	 * as JS animations.
	 *
	 * The following example shows a simple way to utilize CSS transitions to style a form element
	 * that has been rendered as invalid after it has been validated:
	 *
	 * <pre>
	 * //be sure to include ngAnimate as a module to hook into more
	 * //advanced animations
	 * .my-form {
	 *   transition:0.5s linear all;
	 *   background: white;
	 * }
	 * .my-form.ng-invalid {
	 *   background: red;
	 *   color:white;
	 * }
	 * </pre>
	 *
	 * @example
	    <example deps="angular-animate.js" animations="true" fixBase="true" module="formExample">
	      <file name="index.html">
	       <script>
	         angular.module('formExample', [])
	           .controller('FormController', ['$scope', function($scope) {
	             $scope.userType = 'guest';
	           }]);
	       </script>
	       <style>
	        .my-form {
	          transition:all linear 0.5s;
	          background: transparent;
	        }
	        .my-form.ng-invalid {
	          background: red;
	        }
	       </style>
	       <form name="myForm" ng-controller="FormController" class="my-form">
	         userType: <input name="input" ng-model="userType" required>
	         <span class="error" ng-show="myForm.input.$error.required">Required!</span><br>
	         <code>userType = {{userType}}</code><br>
	         <code>myForm.input.$valid = {{myForm.input.$valid}}</code><br>
	         <code>myForm.input.$error = {{myForm.input.$error}}</code><br>
	         <code>myForm.$valid = {{myForm.$valid}}</code><br>
	         <code>myForm.$error.required = {{!!myForm.$error.required}}</code><br>
	        </form>
	      </file>
	      <file name="protractor.js" type="protractor">
	        it('should initialize to model', function() {
	          var userType = element(by.binding('userType'));
	          var valid = element(by.binding('myForm.input.$valid'));
	
	          expect(userType.getText()).toContain('guest');
	          expect(valid.getText()).toContain('true');
	        });
	
	        it('should be invalid if empty', function() {
	          var userType = element(by.binding('userType'));
	          var valid = element(by.binding('myForm.input.$valid'));
	          var userInput = element(by.model('userType'));
	
	          userInput.clear();
	          userInput.sendKeys('');
	
	          expect(userType.getText()).toEqual('userType =');
	          expect(valid.getText()).toContain('false');
	        });
	      </file>
	    </example>
	 *
	 * @param {string=} name Name of the form. If specified, the form controller will be published into
	 *                       related scope, under this name.
	 */
	var formDirectiveFactory = function(isNgForm) {
	  return ['$timeout', '$parse', function($timeout, $parse) {
	    var formDirective = {
	      name: 'form',
	      restrict: isNgForm ? 'EAC' : 'E',
	      require: ['form', '^^?form'], //first is the form's own ctrl, second is an optional parent form
	      controller: FormController,
	      compile: function ngFormCompile(formElement, attr) {
	        // Setup initial state of the control
	        formElement.addClass(PRISTINE_CLASS).addClass(VALID_CLASS);
	
	        var nameAttr = attr.name ? 'name' : (isNgForm && attr.ngForm ? 'ngForm' : false);
	
	        return {
	          pre: function ngFormPreLink(scope, formElement, attr, ctrls) {
	            var controller = ctrls[0];
	
	            // if `action` attr is not present on the form, prevent the default action (submission)
	            if (!('action' in attr)) {
	              // we can't use jq events because if a form is destroyed during submission the default
	              // action is not prevented. see #1238
	              //
	              // IE 9 is not affected because it doesn't fire a submit event and try to do a full
	              // page reload if the form was destroyed by submission of the form via a click handler
	              // on a button in the form. Looks like an IE9 specific bug.
	              var handleFormSubmission = function(event) {
	                scope.$apply(function() {
	                  controller.$commitViewValue();
	                  controller.$setSubmitted();
	                });
	
	                event.preventDefault();
	              };
	
	              addEventListenerFn(formElement[0], 'submit', handleFormSubmission);
	
	              // unregister the preventDefault listener so that we don't not leak memory but in a
	              // way that will achieve the prevention of the default action.
	              formElement.on('$destroy', function() {
	                $timeout(function() {
	                  removeEventListenerFn(formElement[0], 'submit', handleFormSubmission);
	                }, 0, false);
	              });
	            }
	
	            var parentFormCtrl = ctrls[1] || controller.$$parentForm;
	            parentFormCtrl.$addControl(controller);
	
	            var setter = nameAttr ? getSetter(controller.$name) : noop;
	
	            if (nameAttr) {
	              setter(scope, controller);
	              attr.$observe(nameAttr, function(newValue) {
	                if (controller.$name === newValue) return;
	                setter(scope, undefined);
	                controller.$$parentForm.$$renameControl(controller, newValue);
	                setter = getSetter(controller.$name);
	                setter(scope, controller);
	              });
	            }
	            formElement.on('$destroy', function() {
	              controller.$$parentForm.$removeControl(controller);
	              setter(scope, undefined);
	              extend(controller, nullFormCtrl); //stop propagating child destruction handlers upwards
	            });
	          }
	        };
	      }
	    };
	
	    return formDirective;
	
	    function getSetter(expression) {
	      if (expression === '') {
	        //create an assignable expression, so forms with an empty name can be renamed later
	        return $parse('this[""]').assign;
	      }
	      return $parse(expression).assign || noop;
	    }
	  }];
	};
	
	var formDirective = formDirectiveFactory();
	var ngFormDirective = formDirectiveFactory(true);
	
	/* global VALID_CLASS: false,
	  INVALID_CLASS: false,
	  PRISTINE_CLASS: false,
	  DIRTY_CLASS: false,
	  UNTOUCHED_CLASS: false,
	  TOUCHED_CLASS: false,
	  ngModelMinErr: false,
	*/
	
	// Regex code was initially obtained from SO prior to modification: https://stackoverflow.com/questions/3143070/javascript-regex-iso-datetime#answer-3143231
	var ISO_DATE_REGEXP = /^\d{4,}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+(?:[+-][0-2]\d:[0-5]\d|Z)$/;
	// See valid URLs in RFC3987 (http://tools.ietf.org/html/rfc3987)
	// Note: We are being more lenient, because browsers are too.
	//   1. Scheme
	//   2. Slashes
	//   3. Username
	//   4. Password
	//   5. Hostname
	//   6. Port
	//   7. Path
	//   8. Query
	//   9. Fragment
	//                 1111111111111111 222   333333    44444        555555555555555555555555    666     77777777     8888888     999
	var URL_REGEXP = /^[a-z][a-z\d.+-]*:\/*(?:[^:@]+(?::[^@]+)?@)?(?:[^\s:/?#]+|\[[a-f\d:]+\])(?::\d+)?(?:\/[^?#]*)?(?:\?[^#]*)?(?:#.*)?$/i;
	var EMAIL_REGEXP = /^[a-z0-9!#$%&'*+\/=?^_`{|}~.-]+@[a-z0-9]([a-z0-9-]*[a-z0-9])?(\.[a-z0-9]([a-z0-9-]*[a-z0-9])?)*$/i;
	var NUMBER_REGEXP = /^\s*(\-|\+)?(\d+|(\d*(\.\d*)))([eE][+-]?\d+)?\s*$/;
	var DATE_REGEXP = /^(\d{4,})-(\d{2})-(\d{2})$/;
	var DATETIMELOCAL_REGEXP = /^(\d{4,})-(\d\d)-(\d\d)T(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/;
	var WEEK_REGEXP = /^(\d{4,})-W(\d\d)$/;
	var MONTH_REGEXP = /^(\d{4,})-(\d\d)$/;
	var TIME_REGEXP = /^(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/;
	
	var PARTIAL_VALIDATION_EVENTS = 'keydown wheel mousedown';
	var PARTIAL_VALIDATION_TYPES = createMap();
	forEach('date,datetime-local,month,time,week'.split(','), function(type) {
	  PARTIAL_VALIDATION_TYPES[type] = true;
	});
	
	var inputType = {
	
	  /**
	   * @ngdoc input
	   * @name input[text]
	   *
	   * @description
	   * Standard HTML text input with angular data binding, inherited by most of the `input` elements.
	   *
	   *
	   * @param {string} ngModel Assignable angular expression to data-bind to.
	   * @param {string=} name Property name of the form under which the control is published.
	   * @param {string=} required Adds `required` validation error key if the value is not entered.
	   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
	   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
	   *    `required` when you want to data-bind to the `required` attribute.
	   * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
	   *    minlength.
	   * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
	   *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of
	   *    any length.
	   * @param {string=} pattern Similar to `ngPattern` except that the attribute value is the actual string
	   *    that contains the regular expression body that will be converted to a regular expression
	   *    as in the ngPattern directive.
	   * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel {@link ngModel.NgModelController#$viewValue $viewValue}
	   *    does not match a RegExp found by evaluating the Angular expression given in the attribute value.
	   *    If the expression evaluates to a RegExp object, then this is used directly.
	   *    If the expression evaluates to a string, then it will be converted to a RegExp
	   *    after wrapping it in `^` and `$` characters. For instance, `"abc"` will be converted to
	   *    `new RegExp('^abc$')`.<br />
	   *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to
	   *    start at the index of the last search's match, thus not taking the whole input value into
	   *    account.
	   * @param {string=} ngChange Angular expression to be executed when input changes due to user
	   *    interaction with the input element.
	   * @param {boolean=} [ngTrim=true] If set to false Angular will not automatically trim the input.
	   *    This parameter is ignored for input[type=password] controls, which will never trim the
	   *    input.
	   *
	   * @example
	      <example name="text-input-directive" module="textInputExample">
	        <file name="index.html">
	         <script>
	           angular.module('textInputExample', [])
	             .controller('ExampleController', ['$scope', function($scope) {
	               $scope.example = {
	                 text: 'guest',
	                 word: /^\s*\w*\s*$/
	               };
	             }]);
	         </script>
	         <form name="myForm" ng-controller="ExampleController">
	           <label>Single word:
	             <input type="text" name="input" ng-model="example.text"
	                    ng-pattern="example.word" required ng-trim="false">
	           </label>
	           <div role="alert">
	             <span class="error" ng-show="myForm.input.$error.required">
	               Required!</span>
	             <span class="error" ng-show="myForm.input.$error.pattern">
	               Single word only!</span>
	           </div>
	           <tt>text = {{example.text}}</tt><br/>
	           <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
	           <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
	           <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
	           <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
	          </form>
	        </file>
	        <file name="protractor.js" type="protractor">
	          var text = element(by.binding('example.text'));
	          var valid = element(by.binding('myForm.input.$valid'));
	          var input = element(by.model('example.text'));
	
	          it('should initialize to model', function() {
	            expect(text.getText()).toContain('guest');
	            expect(valid.getText()).toContain('true');
	          });
	
	          it('should be invalid if empty', function() {
	            input.clear();
	            input.sendKeys('');
	
	            expect(text.getText()).toEqual('text =');
	            expect(valid.getText()).toContain('false');
	          });
	
	          it('should be invalid if multi word', function() {
	            input.clear();
	            input.sendKeys('hello world');
	
	            expect(valid.getText()).toContain('false');
	          });
	        </file>
	      </example>
	   */
	  'text': textInputType,
	
	    /**
	     * @ngdoc input
	     * @name input[date]
	     *
	     * @description
	     * Input with date validation and transformation. In browsers that do not yet support
	     * the HTML5 date input, a text element will be used. In that case, text must be entered in a valid ISO-8601
	     * date format (yyyy-MM-dd), for example: `2009-01-06`. Since many
	     * modern browsers do not yet support this input type, it is important to provide cues to users on the
	     * expected input format via a placeholder or label.
	     *
	     * The model must always be a Date object, otherwise Angular will throw an error.
	     * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.
	     *
	     * The timezone to be used to read/write the `Date` instance in the model can be defined using
	     * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.
	     *
	     * @param {string} ngModel Assignable angular expression to data-bind to.
	     * @param {string=} name Property name of the form under which the control is published.
	     * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`. This must be a
	     *   valid ISO date string (yyyy-MM-dd). You can also use interpolation inside this attribute
	     *   (e.g. `min="{{minDate | date:'yyyy-MM-dd'}}"`). Note that `min` will also add native HTML5
	     *   constraint validation.
	     * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`. This must be
	     *   a valid ISO date string (yyyy-MM-dd). You can also use interpolation inside this attribute
	     *   (e.g. `max="{{maxDate | date:'yyyy-MM-dd'}}"`). Note that `max` will also add native HTML5
	     *   constraint validation.
	     * @param {(date|string)=} ngMin Sets the `min` validation constraint to the Date / ISO date string
	     *   the `ngMin` expression evaluates to. Note that it does not set the `min` attribute.
	     * @param {(date|string)=} ngMax Sets the `max` validation constraint to the Date / ISO date string
	     *   the `ngMax` expression evaluates to. Note that it does not set the `max` attribute.
	     * @param {string=} required Sets `required` validation error key if the value is not entered.
	     * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
	     *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
	     *    `required` when you want to data-bind to the `required` attribute.
	     * @param {string=} ngChange Angular expression to be executed when input changes due to user
	     *    interaction with the input element.
	     *
	     * @example
	     <example name="date-input-directive" module="dateInputExample">
	     <file name="index.html">
	       <script>
	          angular.module('dateInputExample', [])
	            .controller('DateController', ['$scope', function($scope) {
	              $scope.example = {
	                value: new Date(2013, 9, 22)
	              };
	            }]);
	       </script>
	       <form name="myForm" ng-controller="DateController as dateCtrl">
	          <label for="exampleInput">Pick a date in 2013:</label>
	          <input type="date" id="exampleInput" name="input" ng-model="example.value"
	              placeholder="yyyy-MM-dd" min="2013-01-01" max="2013-12-31" required />
	          <div role="alert">
	            <span class="error" ng-show="myForm.input.$error.required">
	                Required!</span>
	            <span class="error" ng-show="myForm.input.$error.date">
	                Not a valid date!</span>
	           </div>
	           <tt>value = {{example.value | date: "yyyy-MM-dd"}}</tt><br/>
	           <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
	           <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
	           <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
	           <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
	       </form>
	     </file>
	     <file name="protractor.js" type="protractor">
	        var value = element(by.binding('example.value | date: "yyyy-MM-dd"'));
	        var valid = element(by.binding('myForm.input.$valid'));
	        var input = element(by.model('example.value'));
	
	        // currently protractor/webdriver does not support
	        // sending keys to all known HTML5 input controls
	        // for various browsers (see https://github.com/angular/protractor/issues/562).
	        function setInput(val) {
	          // set the value of the element and force validation.
	          var scr = "var ipt = document.getElementById('exampleInput'); " +
	          "ipt.value = '" + val + "';" +
	          "angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('" + val + "'); });";
	          browser.executeScript(scr);
	        }
	
	        it('should initialize to model', function() {
	          expect(value.getText()).toContain('2013-10-22');
	          expect(valid.getText()).toContain('myForm.input.$valid = true');
	        });
	
	        it('should be invalid if empty', function() {
	          setInput('');
	          expect(value.getText()).toEqual('value =');
	          expect(valid.getText()).toContain('myForm.input.$valid = false');
	        });
	
	        it('should be invalid if over max', function() {
	          setInput('2015-01-01');
	          expect(value.getText()).toContain('');
	          expect(valid.getText()).toContain('myForm.input.$valid = false');
	        });
	     </file>
	     </example>
	     */
	  'date': createDateInputType('date', DATE_REGEXP,
	         createDateParser(DATE_REGEXP, ['yyyy', 'MM', 'dd']),
	         'yyyy-MM-dd'),
	
	   /**
	    * @ngdoc input
	    * @name input[datetime-local]
	    *
	    * @description
	    * Input with datetime validation and transformation. In browsers that do not yet support
	    * the HTML5 date input, a text element will be used. In that case, the text must be entered in a valid ISO-8601
	    * local datetime format (yyyy-MM-ddTHH:mm:ss), for example: `2010-12-28T14:57:00`.
	    *
	    * The model must always be a Date object, otherwise Angular will throw an error.
	    * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.
	    *
	    * The timezone to be used to read/write the `Date` instance in the model can be defined using
	    * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.
	    *
	    * @param {string} ngModel Assignable angular expression to data-bind to.
	    * @param {string=} name Property name of the form under which the control is published.
	    * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`.
	    *   This must be a valid ISO datetime format (yyyy-MM-ddTHH:mm:ss). You can also use interpolation
	    *   inside this attribute (e.g. `min="{{minDatetimeLocal | date:'yyyy-MM-ddTHH:mm:ss'}}"`).
	    *   Note that `min` will also add native HTML5 constraint validation.
	    * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`.
	    *   This must be a valid ISO datetime format (yyyy-MM-ddTHH:mm:ss). You can also use interpolation
	    *   inside this attribute (e.g. `max="{{maxDatetimeLocal | date:'yyyy-MM-ddTHH:mm:ss'}}"`).
	    *   Note that `max` will also add native HTML5 constraint validation.
	    * @param {(date|string)=} ngMin Sets the `min` validation error key to the Date / ISO datetime string
	    *   the `ngMin` expression evaluates to. Note that it does not set the `min` attribute.
	    * @param {(date|string)=} ngMax Sets the `max` validation error key to the Date / ISO datetime string
	    *   the `ngMax` expression evaluates to. Note that it does not set the `max` attribute.
	    * @param {string=} required Sets `required` validation error key if the value is not entered.
	    * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
	    *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
	    *    `required` when you want to data-bind to the `required` attribute.
	    * @param {string=} ngChange Angular expression to be executed when input changes due to user
	    *    interaction with the input element.
	    *
	    * @example
	    <example name="datetimelocal-input-directive" module="dateExample">
	    <file name="index.html">
	      <script>
	        angular.module('dateExample', [])
	          .controller('DateController', ['$scope', function($scope) {
	            $scope.example = {
	              value: new Date(2010, 11, 28, 14, 57)
	            };
	          }]);
	      </script>
	      <form name="myForm" ng-controller="DateController as dateCtrl">
	        <label for="exampleInput">Pick a date between in 2013:</label>
	        <input type="datetime-local" id="exampleInput" name="input" ng-model="example.value"
	            placeholder="yyyy-MM-ddTHH:mm:ss" min="2001-01-01T00:00:00" max="2013-12-31T00:00:00" required />
	        <div role="alert">
	          <span class="error" ng-show="myForm.input.$error.required">
	              Required!</span>
	          <span class="error" ng-show="myForm.input.$error.datetimelocal">
	              Not a valid date!</span>
	        </div>
	        <tt>value = {{example.value | date: "yyyy-MM-ddTHH:mm:ss"}}</tt><br/>
	        <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
	        <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
	        <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
	        <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
	      </form>
	    </file>
	    <file name="protractor.js" type="protractor">
	      var value = element(by.binding('example.value | date: "yyyy-MM-ddTHH:mm:ss"'));
	      var valid = element(by.binding('myForm.input.$valid'));
	      var input = element(by.model('example.value'));
	
	      // currently protractor/webdriver does not support
	      // sending keys to all known HTML5 input controls
	      // for various browsers (https://github.com/angular/protractor/issues/562).
	      function setInput(val) {
	        // set the value of the element and force validation.
	        var scr = "var ipt = document.getElementById('exampleInput'); " +
	        "ipt.value = '" + val + "';" +
	        "angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('" + val + "'); });";
	        browser.executeScript(scr);
	      }
	
	      it('should initialize to model', function() {
	        expect(value.getText()).toContain('2010-12-28T14:57:00');
	        expect(valid.getText()).toContain('myForm.input.$valid = true');
	      });
	
	      it('should be invalid if empty', function() {
	        setInput('');
	        expect(value.getText()).toEqual('value =');
	        expect(valid.getText()).toContain('myForm.input.$valid = false');
	      });
	
	      it('should be invalid if over max', function() {
	        setInput('2015-01-01T23:59:00');
	        expect(value.getText()).toContain('');
	        expect(valid.getText()).toContain('myForm.input.$valid = false');
	      });
	    </file>
	    </example>
	    */
	  'datetime-local': createDateInputType('datetimelocal', DATETIMELOCAL_REGEXP,
	      createDateParser(DATETIMELOCAL_REGEXP, ['yyyy', 'MM', 'dd', 'HH', 'mm', 'ss', 'sss']),
	      'yyyy-MM-ddTHH:mm:ss.sss'),
	
	  /**
	   * @ngdoc input
	   * @name input[time]
	   *
	   * @description
	   * Input with time validation and transformation. In browsers that do not yet support
	   * the HTML5 time input, a text element will be used. In that case, the text must be entered in a valid ISO-8601
	   * local time format (HH:mm:ss), for example: `14:57:00`. Model must be a Date object. This binding will always output a
	   * Date object to the model of January 1, 1970, or local date `new Date(1970, 0, 1, HH, mm, ss)`.
	   *
	   * The model must always be a Date object, otherwise Angular will throw an error.
	   * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.
	   *
	   * The timezone to be used to read/write the `Date` instance in the model can be defined using
	   * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.
	   *
	   * @param {string} ngModel Assignable angular expression to data-bind to.
	   * @param {string=} name Property name of the form under which the control is published.
	   * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`.
	   *   This must be a valid ISO time format (HH:mm:ss). You can also use interpolation inside this
	   *   attribute (e.g. `min="{{minTime | date:'HH:mm:ss'}}"`). Note that `min` will also add
	   *   native HTML5 constraint validation.
	   * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`.
	   *   This must be a valid ISO time format (HH:mm:ss). You can also use interpolation inside this
	   *   attribute (e.g. `max="{{maxTime | date:'HH:mm:ss'}}"`). Note that `max` will also add
	   *   native HTML5 constraint validation.
	   * @param {(date|string)=} ngMin Sets the `min` validation constraint to the Date / ISO time string the
	   *   `ngMin` expression evaluates to. Note that it does not set the `min` attribute.
	   * @param {(date|string)=} ngMax Sets the `max` validation constraint to the Date / ISO time string the
	   *   `ngMax` expression evaluates to. Note that it does not set the `max` attribute.
	   * @param {string=} required Sets `required` validation error key if the value is not entered.
	   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
	   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
	   *    `required` when you want to data-bind to the `required` attribute.
	   * @param {string=} ngChange Angular expression to be executed when input changes due to user
	   *    interaction with the input element.
	   *
	   * @example
	   <example name="time-input-directive" module="timeExample">
	   <file name="index.html">
	     <script>
	      angular.module('timeExample', [])
	        .controller('DateController', ['$scope', function($scope) {
	          $scope.example = {
	            value: new Date(1970, 0, 1, 14, 57, 0)
	          };
	        }]);
	     </script>
	     <form name="myForm" ng-controller="DateController as dateCtrl">
	        <label for="exampleInput">Pick a time between 8am and 5pm:</label>
	        <input type="time" id="exampleInput" name="input" ng-model="example.value"
	            placeholder="HH:mm:ss" min="08:00:00" max="17:00:00" required />
	        <div role="alert">
	          <span class="error" ng-show="myForm.input.$error.required">
	              Required!</span>
	          <span class="error" ng-show="myForm.input.$error.time">
	              Not a valid date!</span>
	        </div>
	        <tt>value = {{example.value | date: "HH:mm:ss"}}</tt><br/>
	        <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
	        <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
	        <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
	        <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
	     </form>
	   </file>
	   <file name="protractor.js" type="protractor">
	      var value = element(by.binding('example.value | date: "HH:mm:ss"'));
	      var valid = element(by.binding('myForm.input.$valid'));
	      var input = element(by.model('example.value'));
	
	      // currently protractor/webdriver does not support
	      // sending keys to all known HTML5 input controls
	      // for various browsers (https://github.com/angular/protractor/issues/562).
	      function setInput(val) {
	        // set the value of the element and force validation.
	        var scr = "var ipt = document.getElementById('exampleInput'); " +
	        "ipt.value = '" + val + "';" +
	        "angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('" + val + "'); });";
	        browser.executeScript(scr);
	      }
	
	      it('should initialize to model', function() {
	        expect(value.getText()).toContain('14:57:00');
	        expect(valid.getText()).toContain('myForm.input.$valid = true');
	      });
	
	      it('should be invalid if empty', function() {
	        setInput('');
	        expect(value.getText()).toEqual('value =');
	        expect(valid.getText()).toContain('myForm.input.$valid = false');
	      });
	
	      it('should be invalid if over max', function() {
	        setInput('23:59:00');
	        expect(value.getText()).toContain('');
	        expect(valid.getText()).toContain('myForm.input.$valid = false');
	      });
	   </file>
	   </example>
	   */
	  'time': createDateInputType('time', TIME_REGEXP,
	      createDateParser(TIME_REGEXP, ['HH', 'mm', 'ss', 'sss']),
	     'HH:mm:ss.sss'),
	
	   /**
	    * @ngdoc input
	    * @name input[week]
	    *
	    * @description
	    * Input with week-of-the-year validation and transformation to Date. In browsers that do not yet support
	    * the HTML5 week input, a text element will be used. In that case, the text must be entered in a valid ISO-8601
	    * week format (yyyy-W##), for example: `2013-W02`.
	    *
	    * The model must always be a Date object, otherwise Angular will throw an error.
	    * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.
	    *
	    * The timezone to be used to read/write the `Date` instance in the model can be defined using
	    * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.
	    *
	    * @param {string} ngModel Assignable angular expression to data-bind to.
	    * @param {string=} name Property name of the form under which the control is published.
	    * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`.
	    *   This must be a valid ISO week format (yyyy-W##). You can also use interpolation inside this
	    *   attribute (e.g. `min="{{minWeek | date:'yyyy-Www'}}"`). Note that `min` will also add
	    *   native HTML5 constraint validation.
	    * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`.
	    *   This must be a valid ISO week format (yyyy-W##). You can also use interpolation inside this
	    *   attribute (e.g. `max="{{maxWeek | date:'yyyy-Www'}}"`). Note that `max` will also add
	    *   native HTML5 constraint validation.
	    * @param {(date|string)=} ngMin Sets the `min` validation constraint to the Date / ISO week string
	    *   the `ngMin` expression evaluates to. Note that it does not set the `min` attribute.
	    * @param {(date|string)=} ngMax Sets the `max` validation constraint to the Date / ISO week string
	    *   the `ngMax` expression evaluates to. Note that it does not set the `max` attribute.
	    * @param {string=} required Sets `required` validation error key if the value is not entered.
	    * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
	    *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
	    *    `required` when you want to data-bind to the `required` attribute.
	    * @param {string=} ngChange Angular expression to be executed when input changes due to user
	    *    interaction with the input element.
	    *
	    * @example
	    <example name="week-input-directive" module="weekExample">
	    <file name="index.html">
	      <script>
	      angular.module('weekExample', [])
	        .controller('DateController', ['$scope', function($scope) {
	          $scope.example = {
	            value: new Date(2013, 0, 3)
	          };
	        }]);
	      </script>
	      <form name="myForm" ng-controller="DateController as dateCtrl">
	        <label>Pick a date between in 2013:
	          <input id="exampleInput" type="week" name="input" ng-model="example.value"
	                 placeholder="YYYY-W##" min="2012-W32"
	                 max="2013-W52" required />
	        </label>
	        <div role="alert">
	          <span class="error" ng-show="myForm.input.$error.required">
	              Required!</span>
	          <span class="error" ng-show="myForm.input.$error.week">
	              Not a valid date!</span>
	        </div>
	        <tt>value = {{example.value | date: "yyyy-Www"}}</tt><br/>
	        <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
	        <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
	        <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
	        <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
	      </form>
	    </file>
	    <file name="protractor.js" type="protractor">
	      var value = element(by.binding('example.value | date: "yyyy-Www"'));
	      var valid = element(by.binding('myForm.input.$valid'));
	      var input = element(by.model('example.value'));
	
	      // currently protractor/webdriver does not support
	      // sending keys to all known HTML5 input controls
	      // for various browsers (https://github.com/angular/protractor/issues/562).
	      function setInput(val) {
	        // set the value of the element and force validation.
	        var scr = "var ipt = document.getElementById('exampleInput'); " +
	        "ipt.value = '" + val + "';" +
	        "angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('" + val + "'); });";
	        browser.executeScript(scr);
	      }
	
	      it('should initialize to model', function() {
	        expect(value.getText()).toContain('2013-W01');
	        expect(valid.getText()).toContain('myForm.input.$valid = true');
	      });
	
	      it('should be invalid if empty', function() {
	        setInput('');
	        expect(value.getText()).toEqual('value =');
	        expect(valid.getText()).toContain('myForm.input.$valid = false');
	      });
	
	      it('should be invalid if over max', function() {
	        setInput('2015-W01');
	        expect(value.getText()).toContain('');
	        expect(valid.getText()).toContain('myForm.input.$valid = false');
	      });
	    </file>
	    </example>
	    */
	  'week': createDateInputType('week', WEEK_REGEXP, weekParser, 'yyyy-Www'),
	
	  /**
	   * @ngdoc input
	   * @name input[month]
	   *
	   * @description
	   * Input with month validation and transformation. In browsers that do not yet support
	   * the HTML5 month input, a text element will be used. In that case, the text must be entered in a valid ISO-8601
	   * month format (yyyy-MM), for example: `2009-01`.
	   *
	   * The model must always be a Date object, otherwise Angular will throw an error.
	   * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.
	   * If the model is not set to the first of the month, the next view to model update will set it
	   * to the first of the month.
	   *
	   * The timezone to be used to read/write the `Date` instance in the model can be defined using
	   * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.
	   *
	   * @param {string} ngModel Assignable angular expression to data-bind to.
	   * @param {string=} name Property name of the form under which the control is published.
	   * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`.
	   *   This must be a valid ISO month format (yyyy-MM). You can also use interpolation inside this
	   *   attribute (e.g. `min="{{minMonth | date:'yyyy-MM'}}"`). Note that `min` will also add
	   *   native HTML5 constraint validation.
	   * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`.
	   *   This must be a valid ISO month format (yyyy-MM). You can also use interpolation inside this
	   *   attribute (e.g. `max="{{maxMonth | date:'yyyy-MM'}}"`). Note that `max` will also add
	   *   native HTML5 constraint validation.
	   * @param {(date|string)=} ngMin Sets the `min` validation constraint to the Date / ISO week string
	   *   the `ngMin` expression evaluates to. Note that it does not set the `min` attribute.
	   * @param {(date|string)=} ngMax Sets the `max` validation constraint to the Date / ISO week string
	   *   the `ngMax` expression evaluates to. Note that it does not set the `max` attribute.
	
	   * @param {string=} required Sets `required` validation error key if the value is not entered.
	   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
	   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
	   *    `required` when you want to data-bind to the `required` attribute.
	   * @param {string=} ngChange Angular expression to be executed when input changes due to user
	   *    interaction with the input element.
	   *
	   * @example
	   <example name="month-input-directive" module="monthExample">
	   <file name="index.html">
	     <script>
	      angular.module('monthExample', [])
	        .controller('DateController', ['$scope', function($scope) {
	          $scope.example = {
	            value: new Date(2013, 9, 1)
	          };
	        }]);
	     </script>
	     <form name="myForm" ng-controller="DateController as dateCtrl">
	       <label for="exampleInput">Pick a month in 2013:</label>
	       <input id="exampleInput" type="month" name="input" ng-model="example.value"
	          placeholder="yyyy-MM" min="2013-01" max="2013-12" required />
	       <div role="alert">
	         <span class="error" ng-show="myForm.input.$error.required">
	            Required!</span>
	         <span class="error" ng-show="myForm.input.$error.month">
	            Not a valid month!</span>
	       </div>
	       <tt>value = {{example.value | date: "yyyy-MM"}}</tt><br/>
	       <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
	       <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
	       <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
	       <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
	     </form>
	   </file>
	   <file name="protractor.js" type="protractor">
	      var value = element(by.binding('example.value | date: "yyyy-MM"'));
	      var valid = element(by.binding('myForm.input.$valid'));
	      var input = element(by.model('example.value'));
	
	      // currently protractor/webdriver does not support
	      // sending keys to all known HTML5 input controls
	      // for various browsers (https://github.com/angular/protractor/issues/562).
	      function setInput(val) {
	        // set the value of the element and force validation.
	        var scr = "var ipt = document.getElementById('exampleInput'); " +
	        "ipt.value = '" + val + "';" +
	        "angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('" + val + "'); });";
	        browser.executeScript(scr);
	      }
	
	      it('should initialize to model', function() {
	        expect(value.getText()).toContain('2013-10');
	        expect(valid.getText()).toContain('myForm.input.$valid = true');
	      });
	
	      it('should be invalid if empty', function() {
	        setInput('');
	        expect(value.getText()).toEqual('value =');
	        expect(valid.getText()).toContain('myForm.input.$valid = false');
	      });
	
	      it('should be invalid if over max', function() {
	        setInput('2015-01');
	        expect(value.getText()).toContain('');
	        expect(valid.getText()).toContain('myForm.input.$valid = false');
	      });
	   </file>
	   </example>
	   */
	  'month': createDateInputType('month', MONTH_REGEXP,
	     createDateParser(MONTH_REGEXP, ['yyyy', 'MM']),
	     'yyyy-MM'),
	
	  /**
	   * @ngdoc input
	   * @name input[number]
	   *
	   * @description
	   * Text input with number validation and transformation. Sets the `number` validation
	   * error if not a valid number.
	   *
	   * <div class="alert alert-warning">
	   * The model must always be of type `number` otherwise Angular will throw an error.
	   * Be aware that a string containing a number is not enough. See the {@link ngModel:numfmt}
	   * error docs for more information and an example of how to convert your model if necessary.
	   * </div>
	   *
	   * ## Issues with HTML5 constraint validation
	   *
	   * In browsers that follow the
	   * [HTML5 specification](https://html.spec.whatwg.org/multipage/forms.html#number-state-%28type=number%29),
	   * `input[number]` does not work as expected with {@link ngModelOptions `ngModelOptions.allowInvalid`}.
	   * If a non-number is entered in the input, the browser will report the value as an empty string,
	   * which means the view / model values in `ngModel` and subsequently the scope value
	   * will also be an empty string.
	   *
	   *
	   * @param {string} ngModel Assignable angular expression to data-bind to.
	   * @param {string=} name Property name of the form under which the control is published.
	   * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`.
	   * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`.
	   * @param {string=} required Sets `required` validation error key if the value is not entered.
	   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
	   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
	   *    `required` when you want to data-bind to the `required` attribute.
	   * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
	   *    minlength.
	   * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
	   *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of
	   *    any length.
	   * @param {string=} pattern Similar to `ngPattern` except that the attribute value is the actual string
	   *    that contains the regular expression body that will be converted to a regular expression
	   *    as in the ngPattern directive.
	   * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel {@link ngModel.NgModelController#$viewValue $viewValue}
	   *    does not match a RegExp found by evaluating the Angular expression given in the attribute value.
	   *    If the expression evaluates to a RegExp object, then this is used directly.
	   *    If the expression evaluates to a string, then it will be converted to a RegExp
	   *    after wrapping it in `^` and `$` characters. For instance, `"abc"` will be converted to
	   *    `new RegExp('^abc$')`.<br />
	   *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to
	   *    start at the index of the last search's match, thus not taking the whole input value into
	   *    account.
	   * @param {string=} ngChange Angular expression to be executed when input changes due to user
	   *    interaction with the input element.
	   *
	   * @example
	      <example name="number-input-directive" module="numberExample">
	        <file name="index.html">
	         <script>
	           angular.module('numberExample', [])
	             .controller('ExampleController', ['$scope', function($scope) {
	               $scope.example = {
	                 value: 12
	               };
	             }]);
	         </script>
	         <form name="myForm" ng-controller="ExampleController">
	           <label>Number:
	             <input type="number" name="input" ng-model="example.value"
	                    min="0" max="99" required>
	          </label>
	           <div role="alert">
	             <span class="error" ng-show="myForm.input.$error.required">
	               Required!</span>
	             <span class="error" ng-show="myForm.input.$error.number">
	               Not valid number!</span>
	           </div>
	           <tt>value = {{example.value}}</tt><br/>
	           <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
	           <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
	           <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
	           <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
	          </form>
	        </file>
	        <file name="protractor.js" type="protractor">
	          var value = element(by.binding('example.value'));
	          var valid = element(by.binding('myForm.input.$valid'));
	          var input = element(by.model('example.value'));
	
	          it('should initialize to model', function() {
	            expect(value.getText()).toContain('12');
	            expect(valid.getText()).toContain('true');
	          });
	
	          it('should be invalid if empty', function() {
	            input.clear();
	            input.sendKeys('');
	            expect(value.getText()).toEqual('value =');
	            expect(valid.getText()).toContain('false');
	          });
	
	          it('should be invalid if over max', function() {
	            input.clear();
	            input.sendKeys('123');
	            expect(value.getText()).toEqual('value =');
	            expect(valid.getText()).toContain('false');
	          });
	        </file>
	      </example>
	   */
	  'number': numberInputType,
	
	
	  /**
	   * @ngdoc input
	   * @name input[url]
	   *
	   * @description
	   * Text input with URL validation. Sets the `url` validation error key if the content is not a
	   * valid URL.
	   *
	   * <div class="alert alert-warning">
	   * **Note:** `input[url]` uses a regex to validate urls that is derived from the regex
	   * used in Chromium. If you need stricter validation, you can use `ng-pattern` or modify
	   * the built-in validators (see the {@link guide/forms Forms guide})
	   * </div>
	   *
	   * @param {string} ngModel Assignable angular expression to data-bind to.
	   * @param {string=} name Property name of the form under which the control is published.
	   * @param {string=} required Sets `required` validation error key if the value is not entered.
	   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
	   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
	   *    `required` when you want to data-bind to the `required` attribute.
	   * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
	   *    minlength.
	   * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
	   *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of
	   *    any length.
	   * @param {string=} pattern Similar to `ngPattern` except that the attribute value is the actual string
	   *    that contains the regular expression body that will be converted to a regular expression
	   *    as in the ngPattern directive.
	   * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel {@link ngModel.NgModelController#$viewValue $viewValue}
	   *    does not match a RegExp found by evaluating the Angular expression given in the attribute value.
	   *    If the expression evaluates to a RegExp object, then this is used directly.
	   *    If the expression evaluates to a string, then it will be converted to a RegExp
	   *    after wrapping it in `^` and `$` characters. For instance, `"abc"` will be converted to
	   *    `new RegExp('^abc$')`.<br />
	   *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to
	   *    start at the index of the last search's match, thus not taking the whole input value into
	   *    account.
	   * @param {string=} ngChange Angular expression to be executed when input changes due to user
	   *    interaction with the input element.
	   *
	   * @example
	      <example name="url-input-directive" module="urlExample">
	        <file name="index.html">
	         <script>
	           angular.module('urlExample', [])
	             .controller('ExampleController', ['$scope', function($scope) {
	               $scope.url = {
	                 text: 'http://google.com'
	               };
	             }]);
	         </script>
	         <form name="myForm" ng-controller="ExampleController">
	           <label>URL:
	             <input type="url" name="input" ng-model="url.text" required>
	           <label>
	           <div role="alert">
	             <span class="error" ng-show="myForm.input.$error.required">
	               Required!</span>
	             <span class="error" ng-show="myForm.input.$error.url">
	               Not valid url!</span>
	           </div>
	           <tt>text = {{url.text}}</tt><br/>
	           <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
	           <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
	           <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
	           <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
	           <tt>myForm.$error.url = {{!!myForm.$error.url}}</tt><br/>
	          </form>
	        </file>
	        <file name="protractor.js" type="protractor">
	          var text = element(by.binding('url.text'));
	          var valid = element(by.binding('myForm.input.$valid'));
	          var input = element(by.model('url.text'));
	
	          it('should initialize to model', function() {
	            expect(text.getText()).toContain('http://google.com');
	            expect(valid.getText()).toContain('true');
	          });
	
	          it('should be invalid if empty', function() {
	            input.clear();
	            input.sendKeys('');
	
	            expect(text.getText()).toEqual('text =');
	            expect(valid.getText()).toContain('false');
	          });
	
	          it('should be invalid if not url', function() {
	            input.clear();
	            input.sendKeys('box');
	
	            expect(valid.getText()).toContain('false');
	          });
	        </file>
	      </example>
	   */
	  'url': urlInputType,
	
	
	  /**
	   * @ngdoc input
	   * @name input[email]
	   *
	   * @description
	   * Text input with email validation. Sets the `email` validation error key if not a valid email
	   * address.
	   *
	   * <div class="alert alert-warning">
	   * **Note:** `input[email]` uses a regex to validate email addresses that is derived from the regex
	   * used in Chromium. If you need stricter validation (e.g. requiring a top-level domain), you can
	   * use `ng-pattern` or modify the built-in validators (see the {@link guide/forms Forms guide})
	   * </div>
	   *
	   * @param {string} ngModel Assignable angular expression to data-bind to.
	   * @param {string=} name Property name of the form under which the control is published.
	   * @param {string=} required Sets `required` validation error key if the value is not entered.
	   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
	   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
	   *    `required` when you want to data-bind to the `required` attribute.
	   * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
	   *    minlength.
	   * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
	   *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of
	   *    any length.
	   * @param {string=} pattern Similar to `ngPattern` except that the attribute value is the actual string
	   *    that contains the regular expression body that will be converted to a regular expression
	   *    as in the ngPattern directive.
	   * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel {@link ngModel.NgModelController#$viewValue $viewValue}
	   *    does not match a RegExp found by evaluating the Angular expression given in the attribute value.
	   *    If the expression evaluates to a RegExp object, then this is used directly.
	   *    If the expression evaluates to a string, then it will be converted to a RegExp
	   *    after wrapping it in `^` and `$` characters. For instance, `"abc"` will be converted to
	   *    `new RegExp('^abc$')`.<br />
	   *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to
	   *    start at the index of the last search's match, thus not taking the whole input value into
	   *    account.
	   * @param {string=} ngChange Angular expression to be executed when input changes due to user
	   *    interaction with the input element.
	   *
	   * @example
	      <example name="email-input-directive" module="emailExample">
	        <file name="index.html">
	         <script>
	           angular.module('emailExample', [])
	             .controller('ExampleController', ['$scope', function($scope) {
	               $scope.email = {
	                 text: 'me@example.com'
	               };
	             }]);
	         </script>
	           <form name="myForm" ng-controller="ExampleController">
	             <label>Email:
	               <input type="email" name="input" ng-model="email.text" required>
	             </label>
	             <div role="alert">
	               <span class="error" ng-show="myForm.input.$error.required">
	                 Required!</span>
	               <span class="error" ng-show="myForm.input.$error.email">
	                 Not valid email!</span>
	             </div>
	             <tt>text = {{email.text}}</tt><br/>
	             <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
	             <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
	             <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
	             <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
	             <tt>myForm.$error.email = {{!!myForm.$error.email}}</tt><br/>
	           </form>
	         </file>
	        <file name="protractor.js" type="protractor">
	          var text = element(by.binding('email.text'));
	          var valid = element(by.binding('myForm.input.$valid'));
	          var input = element(by.model('email.text'));
	
	          it('should initialize to model', function() {
	            expect(text.getText()).toContain('me@example.com');
	            expect(valid.getText()).toContain('true');
	          });
	
	          it('should be invalid if empty', function() {
	            input.clear();
	            input.sendKeys('');
	            expect(text.getText()).toEqual('text =');
	            expect(valid.getText()).toContain('false');
	          });
	
	          it('should be invalid if not email', function() {
	            input.clear();
	            input.sendKeys('xxx');
	
	            expect(valid.getText()).toContain('false');
	          });
	        </file>
	      </example>
	   */
	  'email': emailInputType,
	
	
	  /**
	   * @ngdoc input
	   * @name input[radio]
	   *
	   * @description
	   * HTML radio button.
	   *
	   * @param {string} ngModel Assignable angular expression to data-bind to.
	   * @param {string} value The value to which the `ngModel` expression should be set when selected.
	   *    Note that `value` only supports `string` values, i.e. the scope model needs to be a string,
	   *    too. Use `ngValue` if you need complex models (`number`, `object`, ...).
	   * @param {string=} name Property name of the form under which the control is published.
	   * @param {string=} ngChange Angular expression to be executed when input changes due to user
	   *    interaction with the input element.
	   * @param {string} ngValue Angular expression to which `ngModel` will be be set when the radio
	   *    is selected. Should be used instead of the `value` attribute if you need
	   *    a non-string `ngModel` (`boolean`, `array`, ...).
	   *
	   * @example
	      <example name="radio-input-directive" module="radioExample">
	        <file name="index.html">
	         <script>
	           angular.module('radioExample', [])
	             .controller('ExampleController', ['$scope', function($scope) {
	               $scope.color = {
	                 name: 'blue'
	               };
	               $scope.specialValue = {
	                 "id": "12345",
	                 "value": "green"
	               };
	             }]);
	         </script>
	         <form name="myForm" ng-controller="ExampleController">
	           <label>
	             <input type="radio" ng-model="color.name" value="red">
	             Red
	           </label><br/>
	           <label>
	             <input type="radio" ng-model="color.name" ng-value="specialValue">
	             Green
	           </label><br/>
	           <label>
	             <input type="radio" ng-model="color.name" value="blue">
	             Blue
	           </label><br/>
	           <tt>color = {{color.name | json}}</tt><br/>
	          </form>
	          Note that `ng-value="specialValue"` sets radio item's value to be the value of `$scope.specialValue`.
	        </file>
	        <file name="protractor.js" type="protractor">
	          it('should change state', function() {
	            var color = element(by.binding('color.name'));
	
	            expect(color.getText()).toContain('blue');
	
	            element.all(by.model('color.name')).get(0).click();
	
	            expect(color.getText()).toContain('red');
	          });
	        </file>
	      </example>
	   */
	  'radio': radioInputType,
	
	
	  /**
	   * @ngdoc input
	   * @name input[checkbox]
	   *
	   * @description
	   * HTML checkbox.
	   *
	   * @param {string} ngModel Assignable angular expression to data-bind to.
	   * @param {string=} name Property name of the form under which the control is published.
	   * @param {expression=} ngTrueValue The value to which the expression should be set when selected.
	   * @param {expression=} ngFalseValue The value to which the expression should be set when not selected.
	   * @param {string=} ngChange Angular expression to be executed when input changes due to user
	   *    interaction with the input element.
	   *
	   * @example
	      <example name="checkbox-input-directive" module="checkboxExample">
	        <file name="index.html">
	         <script>
	           angular.module('checkboxExample', [])
	             .controller('ExampleController', ['$scope', function($scope) {
	               $scope.checkboxModel = {
	                value1 : true,
	                value2 : 'YES'
	              };
	             }]);
	         </script>
	         <form name="myForm" ng-controller="ExampleController">
	           <label>Value1:
	             <input type="checkbox" ng-model="checkboxModel.value1">
	           </label><br/>
	           <label>Value2:
	             <input type="checkbox" ng-model="checkboxModel.value2"
	                    ng-true-value="'YES'" ng-false-value="'NO'">
	            </label><br/>
	           <tt>value1 = {{checkboxModel.value1}}</tt><br/>
	           <tt>value2 = {{checkboxModel.value2}}</tt><br/>
	          </form>
	        </file>
	        <file name="protractor.js" type="protractor">
	          it('should change state', function() {
	            var value1 = element(by.binding('checkboxModel.value1'));
	            var value2 = element(by.binding('checkboxModel.value2'));
	
	            expect(value1.getText()).toContain('true');
	            expect(value2.getText()).toContain('YES');
	
	            element(by.model('checkboxModel.value1')).click();
	            element(by.model('checkboxModel.value2')).click();
	
	            expect(value1.getText()).toContain('false');
	            expect(value2.getText()).toContain('NO');
	          });
	        </file>
	      </example>
	   */
	  'checkbox': checkboxInputType,
	
	  'hidden': noop,
	  'button': noop,
	  'submit': noop,
	  'reset': noop,
	  'file': noop
	};
	
	function stringBasedInputType(ctrl) {
	  ctrl.$formatters.push(function(value) {
	    return ctrl.$isEmpty(value) ? value : value.toString();
	  });
	}
	
	function textInputType(scope, element, attr, ctrl, $sniffer, $browser) {
	  baseInputType(scope, element, attr, ctrl, $sniffer, $browser);
	  stringBasedInputType(ctrl);
	}
	
	function baseInputType(scope, element, attr, ctrl, $sniffer, $browser) {
	  var type = lowercase(element[0].type);
	
	  // In composition mode, users are still inputing intermediate text buffer,
	  // hold the listener until composition is done.
	  // More about composition events: https://developer.mozilla.org/en-US/docs/Web/API/CompositionEvent
	  if (!$sniffer.android) {
	    var composing = false;
	
	    element.on('compositionstart', function() {
	      composing = true;
	    });
	
	    element.on('compositionend', function() {
	      composing = false;
	      listener();
	    });
	  }
	
	  var timeout;
	
	  var listener = function(ev) {
	    if (timeout) {
	      $browser.defer.cancel(timeout);
	      timeout = null;
	    }
	    if (composing) return;
	    var value = element.val(),
	        event = ev && ev.type;
	
	    // By default we will trim the value
	    // If the attribute ng-trim exists we will avoid trimming
	    // If input type is 'password', the value is never trimmed
	    if (type !== 'password' && (!attr.ngTrim || attr.ngTrim !== 'false')) {
	      value = trim(value);
	    }
	
	    // If a control is suffering from bad input (due to native validators), browsers discard its
	    // value, so it may be necessary to revalidate (by calling $setViewValue again) even if the
	    // control's value is the same empty value twice in a row.
	    if (ctrl.$viewValue !== value || (value === '' && ctrl.$$hasNativeValidators)) {
	      ctrl.$setViewValue(value, event);
	    }
	  };
	
	  // if the browser does support "input" event, we are fine - except on IE9 which doesn't fire the
	  // input event on backspace, delete or cut
	  if ($sniffer.hasEvent('input')) {
	    element.on('input', listener);
	  } else {
	    var deferListener = function(ev, input, origValue) {
	      if (!timeout) {
	        timeout = $browser.defer(function() {
	          timeout = null;
	          if (!input || input.value !== origValue) {
	            listener(ev);
	          }
	        });
	      }
	    };
	
	    element.on('keydown', function(event) {
	      var key = event.keyCode;
	
	      // ignore
	      //    command            modifiers                   arrows
	      if (key === 91 || (15 < key && key < 19) || (37 <= key && key <= 40)) return;
	
	      deferListener(event, this, this.value);
	    });
	
	    // if user modifies input value using context menu in IE, we need "paste" and "cut" events to catch it
	    if ($sniffer.hasEvent('paste')) {
	      element.on('paste cut', deferListener);
	    }
	  }
	
	  // if user paste into input using mouse on older browser
	  // or form autocomplete on newer browser, we need "change" event to catch it
	  element.on('change', listener);
	
	  // Some native input types (date-family) have the ability to change validity without
	  // firing any input/change events.
	  // For these event types, when native validators are present and the browser supports the type,
	  // check for validity changes on various DOM events.
	  if (PARTIAL_VALIDATION_TYPES[type] && ctrl.$$hasNativeValidators && type === attr.type) {
	    element.on(PARTIAL_VALIDATION_EVENTS, function(ev) {
	      if (!timeout) {
	        var validity = this[VALIDITY_STATE_PROPERTY];
	        var origBadInput = validity.badInput;
	        var origTypeMismatch = validity.typeMismatch;
	        timeout = $browser.defer(function() {
	          timeout = null;
	          if (validity.badInput !== origBadInput || validity.typeMismatch !== origTypeMismatch) {
	            listener(ev);
	          }
	        });
	      }
	    });
	  }
	
	  ctrl.$render = function() {
	    // Workaround for Firefox validation #12102.
	    var value = ctrl.$isEmpty(ctrl.$viewValue) ? '' : ctrl.$viewValue;
	    if (element.val() !== value) {
	      element.val(value);
	    }
	  };
	}
	
	function weekParser(isoWeek, existingDate) {
	  if (isDate(isoWeek)) {
	    return isoWeek;
	  }
	
	  if (isString(isoWeek)) {
	    WEEK_REGEXP.lastIndex = 0;
	    var parts = WEEK_REGEXP.exec(isoWeek);
	    if (parts) {
	      var year = +parts[1],
	          week = +parts[2],
	          hours = 0,
	          minutes = 0,
	          seconds = 0,
	          milliseconds = 0,
	          firstThurs = getFirstThursdayOfYear(year),
	          addDays = (week - 1) * 7;
	
	      if (existingDate) {
	        hours = existingDate.getHours();
	        minutes = existingDate.getMinutes();
	        seconds = existingDate.getSeconds();
	        milliseconds = existingDate.getMilliseconds();
	      }
	
	      return new Date(year, 0, firstThurs.getDate() + addDays, hours, minutes, seconds, milliseconds);
	    }
	  }
	
	  return NaN;
	}
	
	function createDateParser(regexp, mapping) {
	  return function(iso, date) {
	    var parts, map;
	
	    if (isDate(iso)) {
	      return iso;
	    }
	
	    if (isString(iso)) {
	      // When a date is JSON'ified to wraps itself inside of an extra
	      // set of double quotes. This makes the date parsing code unable
	      // to match the date string and parse it as a date.
	      if (iso.charAt(0) == '"' && iso.charAt(iso.length - 1) == '"') {
	        iso = iso.substring(1, iso.length - 1);
	      }
	      if (ISO_DATE_REGEXP.test(iso)) {
	        return new Date(iso);
	      }
	      regexp.lastIndex = 0;
	      parts = regexp.exec(iso);
	
	      if (parts) {
	        parts.shift();
	        if (date) {
	          map = {
	            yyyy: date.getFullYear(),
	            MM: date.getMonth() + 1,
	            dd: date.getDate(),
	            HH: date.getHours(),
	            mm: date.getMinutes(),
	            ss: date.getSeconds(),
	            sss: date.getMilliseconds() / 1000
	          };
	        } else {
	          map = { yyyy: 1970, MM: 1, dd: 1, HH: 0, mm: 0, ss: 0, sss: 0 };
	        }
	
	        forEach(parts, function(part, index) {
	          if (index < mapping.length) {
	            map[mapping[index]] = +part;
	          }
	        });
	        return new Date(map.yyyy, map.MM - 1, map.dd, map.HH, map.mm, map.ss || 0, map.sss * 1000 || 0);
	      }
	    }
	
	    return NaN;
	  };
	}
	
	function createDateInputType(type, regexp, parseDate, format) {
	  return function dynamicDateInputType(scope, element, attr, ctrl, $sniffer, $browser, $filter) {
	    badInputChecker(scope, element, attr, ctrl);
	    baseInputType(scope, element, attr, ctrl, $sniffer, $browser);
	    var timezone = ctrl && ctrl.$options && ctrl.$options.timezone;
	    var previousDate;
	
	    ctrl.$$parserName = type;
	    ctrl.$parsers.push(function(value) {
	      if (ctrl.$isEmpty(value)) return null;
	      if (regexp.test(value)) {
	        // Note: We cannot read ctrl.$modelValue, as there might be a different
	        // parser/formatter in the processing chain so that the model
	        // contains some different data format!
	        var parsedDate = parseDate(value, previousDate);
	        if (timezone) {
	          parsedDate = convertTimezoneToLocal(parsedDate, timezone);
	        }
	        return parsedDate;
	      }
	      return undefined;
	    });
	
	    ctrl.$formatters.push(function(value) {
	      if (value && !isDate(value)) {
	        throw ngModelMinErr('datefmt', 'Expected `{0}` to be a date', value);
	      }
	      if (isValidDate(value)) {
	        previousDate = value;
	        if (previousDate && timezone) {
	          previousDate = convertTimezoneToLocal(previousDate, timezone, true);
	        }
	        return $filter('date')(value, format, timezone);
	      } else {
	        previousDate = null;
	        return '';
	      }
	    });
	
	    if (isDefined(attr.min) || attr.ngMin) {
	      var minVal;
	      ctrl.$validators.min = function(value) {
	        return !isValidDate(value) || isUndefined(minVal) || parseDate(value) >= minVal;
	      };
	      attr.$observe('min', function(val) {
	        minVal = parseObservedDateValue(val);
	        ctrl.$validate();
	      });
	    }
	
	    if (isDefined(attr.max) || attr.ngMax) {
	      var maxVal;
	      ctrl.$validators.max = function(value) {
	        return !isValidDate(value) || isUndefined(maxVal) || parseDate(value) <= maxVal;
	      };
	      attr.$observe('max', function(val) {
	        maxVal = parseObservedDateValue(val);
	        ctrl.$validate();
	      });
	    }
	
	    function isValidDate(value) {
	      // Invalid Date: getTime() returns NaN
	      return value && !(value.getTime && value.getTime() !== value.getTime());
	    }
	
	    function parseObservedDateValue(val) {
	      return isDefined(val) && !isDate(val) ? parseDate(val) || undefined : val;
	    }
	  };
	}
	
	function badInputChecker(scope, element, attr, ctrl) {
	  var node = element[0];
	  var nativeValidation = ctrl.$$hasNativeValidators = isObject(node.validity);
	  if (nativeValidation) {
	    ctrl.$parsers.push(function(value) {
	      var validity = element.prop(VALIDITY_STATE_PROPERTY) || {};
	      return validity.badInput || validity.typeMismatch ? undefined : value;
	    });
	  }
	}
	
	function numberInputType(scope, element, attr, ctrl, $sniffer, $browser) {
	  badInputChecker(scope, element, attr, ctrl);
	  baseInputType(scope, element, attr, ctrl, $sniffer, $browser);
	
	  ctrl.$$parserName = 'number';
	  ctrl.$parsers.push(function(value) {
	    if (ctrl.$isEmpty(value))      return null;
	    if (NUMBER_REGEXP.test(value)) return parseFloat(value);
	    return undefined;
	  });
	
	  ctrl.$formatters.push(function(value) {
	    if (!ctrl.$isEmpty(value)) {
	      if (!isNumber(value)) {
	        throw ngModelMinErr('numfmt', 'Expected `{0}` to be a number', value);
	      }
	      value = value.toString();
	    }
	    return value;
	  });
	
	  if (isDefined(attr.min) || attr.ngMin) {
	    var minVal;
	    ctrl.$validators.min = function(value) {
	      return ctrl.$isEmpty(value) || isUndefined(minVal) || value >= minVal;
	    };
	
	    attr.$observe('min', function(val) {
	      if (isDefined(val) && !isNumber(val)) {
	        val = parseFloat(val, 10);
	      }
	      minVal = isNumber(val) && !isNaN(val) ? val : undefined;
	      // TODO(matsko): implement validateLater to reduce number of validations
	      ctrl.$validate();
	    });
	  }
	
	  if (isDefined(attr.max) || attr.ngMax) {
	    var maxVal;
	    ctrl.$validators.max = function(value) {
	      return ctrl.$isEmpty(value) || isUndefined(maxVal) || value <= maxVal;
	    };
	
	    attr.$observe('max', function(val) {
	      if (isDefined(val) && !isNumber(val)) {
	        val = parseFloat(val, 10);
	      }
	      maxVal = isNumber(val) && !isNaN(val) ? val : undefined;
	      // TODO(matsko): implement validateLater to reduce number of validations
	      ctrl.$validate();
	    });
	  }
	}
	
	function urlInputType(scope, element, attr, ctrl, $sniffer, $browser) {
	  // Note: no badInputChecker here by purpose as `url` is only a validation
	  // in browsers, i.e. we can always read out input.value even if it is not valid!
	  baseInputType(scope, element, attr, ctrl, $sniffer, $browser);
	  stringBasedInputType(ctrl);
	
	  ctrl.$$parserName = 'url';
	  ctrl.$validators.url = function(modelValue, viewValue) {
	    var value = modelValue || viewValue;
	    return ctrl.$isEmpty(value) || URL_REGEXP.test(value);
	  };
	}
	
	function emailInputType(scope, element, attr, ctrl, $sniffer, $browser) {
	  // Note: no badInputChecker here by purpose as `url` is only a validation
	  // in browsers, i.e. we can always read out input.value even if it is not valid!
	  baseInputType(scope, element, attr, ctrl, $sniffer, $browser);
	  stringBasedInputType(ctrl);
	
	  ctrl.$$parserName = 'email';
	  ctrl.$validators.email = function(modelValue, viewValue) {
	    var value = modelValue || viewValue;
	    return ctrl.$isEmpty(value) || EMAIL_REGEXP.test(value);
	  };
	}
	
	function radioInputType(scope, element, attr, ctrl) {
	  // make the name unique, if not defined
	  if (isUndefined(attr.name)) {
	    element.attr('name', nextUid());
	  }
	
	  var listener = function(ev) {
	    if (element[0].checked) {
	      ctrl.$setViewValue(attr.value, ev && ev.type);
	    }
	  };
	
	  element.on('click', listener);
	
	  ctrl.$render = function() {
	    var value = attr.value;
	    element[0].checked = (value == ctrl.$viewValue);
	  };
	
	  attr.$observe('value', ctrl.$render);
	}
	
	function parseConstantExpr($parse, context, name, expression, fallback) {
	  var parseFn;
	  if (isDefined(expression)) {
	    parseFn = $parse(expression);
	    if (!parseFn.constant) {
	      throw ngModelMinErr('constexpr', 'Expected constant expression for `{0}`, but saw ' +
	                                   '`{1}`.', name, expression);
	    }
	    return parseFn(context);
	  }
	  return fallback;
	}
	
	function checkboxInputType(scope, element, attr, ctrl, $sniffer, $browser, $filter, $parse) {
	  var trueValue = parseConstantExpr($parse, scope, 'ngTrueValue', attr.ngTrueValue, true);
	  var falseValue = parseConstantExpr($parse, scope, 'ngFalseValue', attr.ngFalseValue, false);
	
	  var listener = function(ev) {
	    ctrl.$setViewValue(element[0].checked, ev && ev.type);
	  };
	
	  element.on('click', listener);
	
	  ctrl.$render = function() {
	    element[0].checked = ctrl.$viewValue;
	  };
	
	  // Override the standard `$isEmpty` because the $viewValue of an empty checkbox is always set to `false`
	  // This is because of the parser below, which compares the `$modelValue` with `trueValue` to convert
	  // it to a boolean.
	  ctrl.$isEmpty = function(value) {
	    return value === false;
	  };
	
	  ctrl.$formatters.push(function(value) {
	    return equals(value, trueValue);
	  });
	
	  ctrl.$parsers.push(function(value) {
	    return value ? trueValue : falseValue;
	  });
	}
	
	
	/**
	 * @ngdoc directive
	 * @name textarea
	 * @restrict E
	 *
	 * @description
	 * HTML textarea element control with angular data-binding. The data-binding and validation
	 * properties of this element are exactly the same as those of the
	 * {@link ng.directive:input input element}.
	 *
	 * @param {string} ngModel Assignable angular expression to data-bind to.
	 * @param {string=} name Property name of the form under which the control is published.
	 * @param {string=} required Sets `required` validation error key if the value is not entered.
	 * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
	 *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
	 *    `required` when you want to data-bind to the `required` attribute.
	 * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
	 *    minlength.
	 * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
	 *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of any
	 *    length.
	 * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel {@link ngModel.NgModelController#$viewValue $viewValue}
	 *    does not match a RegExp found by evaluating the Angular expression given in the attribute value.
	 *    If the expression evaluates to a RegExp object, then this is used directly.
	 *    If the expression evaluates to a string, then it will be converted to a RegExp
	 *    after wrapping it in `^` and `$` characters. For instance, `"abc"` will be converted to
	 *    `new RegExp('^abc$')`.<br />
	 *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to
	 *    start at the index of the last search's match, thus not taking the whole input value into
	 *    account.
	 * @param {string=} ngChange Angular expression to be executed when input changes due to user
	 *    interaction with the input element.
	 * @param {boolean=} [ngTrim=true] If set to false Angular will not automatically trim the input.
	 */
	
	
	/**
	 * @ngdoc directive
	 * @name input
	 * @restrict E
	 *
	 * @description
	 * HTML input element control. When used together with {@link ngModel `ngModel`}, it provides data-binding,
	 * input state control, and validation.
	 * Input control follows HTML5 input types and polyfills the HTML5 validation behavior for older browsers.
	 *
	 * <div class="alert alert-warning">
	 * **Note:** Not every feature offered is available for all input types.
	 * Specifically, data binding and event handling via `ng-model` is unsupported for `input[file]`.
	 * </div>
	 *
	 * @param {string} ngModel Assignable angular expression to data-bind to.
	 * @param {string=} name Property name of the form under which the control is published.
	 * @param {string=} required Sets `required` validation error key if the value is not entered.
	 * @param {boolean=} ngRequired Sets `required` attribute if set to true
	 * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
	 *    minlength.
	 * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
	 *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of any
	 *    length.
	 * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel {@link ngModel.NgModelController#$viewValue $viewValue}
	 *    value does not match a RegExp found by evaluating the Angular expression given in the attribute value.
	 *    If the expression evaluates to a RegExp object, then this is used directly.
	 *    If the expression evaluates to a string, then it will be converted to a RegExp
	 *    after wrapping it in `^` and `$` characters. For instance, `"abc"` will be converted to
	 *    `new RegExp('^abc$')`.<br />
	 *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to
	 *    start at the index of the last search's match, thus not taking the whole input value into
	 *    account.
	 * @param {string=} ngChange Angular expression to be executed when input changes due to user
	 *    interaction with the input element.
	 * @param {boolean=} [ngTrim=true] If set to false Angular will not automatically trim the input.
	 *    This parameter is ignored for input[type=password] controls, which will never trim the
	 *    input.
	 *
	 * @example
	    <example name="input-directive" module="inputExample">
	      <file name="index.html">
	       <script>
	          angular.module('inputExample', [])
	            .controller('ExampleController', ['$scope', function($scope) {
	              $scope.user = {name: 'guest', last: 'visitor'};
	            }]);
	       </script>
	       <div ng-controller="ExampleController">
	         <form name="myForm">
	           <label>
	              User name:
	              <input type="text" name="userName" ng-model="user.name" required>
	           </label>
	           <div role="alert">
	             <span class="error" ng-show="myForm.userName.$error.required">
	              Required!</span>
	           </div>
	           <label>
	              Last name:
	              <input type="text" name="lastName" ng-model="user.last"
	              ng-minlength="3" ng-maxlength="10">
	           </label>
	           <div role="alert">
	             <span class="error" ng-show="myForm.lastName.$error.minlength">
	               Too short!</span>
	             <span class="error" ng-show="myForm.lastName.$error.maxlength">
	               Too long!</span>
	           </div>
	         </form>
	         <hr>
	         <tt>user = {{user}}</tt><br/>
	         <tt>myForm.userName.$valid = {{myForm.userName.$valid}}</tt><br/>
	         <tt>myForm.userName.$error = {{myForm.userName.$error}}</tt><br/>
	         <tt>myForm.lastName.$valid = {{myForm.lastName.$valid}}</tt><br/>
	         <tt>myForm.lastName.$error = {{myForm.lastName.$error}}</tt><br/>
	         <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
	         <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
	         <tt>myForm.$error.minlength = {{!!myForm.$error.minlength}}</tt><br/>
	         <tt>myForm.$error.maxlength = {{!!myForm.$error.maxlength}}</tt><br/>
	       </div>
	      </file>
	      <file name="protractor.js" type="protractor">
	        var user = element(by.exactBinding('user'));
	        var userNameValid = element(by.binding('myForm.userName.$valid'));
	        var lastNameValid = element(by.binding('myForm.lastName.$valid'));
	        var lastNameError = element(by.binding('myForm.lastName.$error'));
	        var formValid = element(by.binding('myForm.$valid'));
	        var userNameInput = element(by.model('user.name'));
	        var userLastInput = element(by.model('user.last'));
	
	        it('should initialize to model', function() {
	          expect(user.getText()).toContain('{"name":"guest","last":"visitor"}');
	          expect(userNameValid.getText()).toContain('true');
	          expect(formValid.getText()).toContain('true');
	        });
	
	        it('should be invalid if empty when required', function() {
	          userNameInput.clear();
	          userNameInput.sendKeys('');
	
	          expect(user.getText()).toContain('{"last":"visitor"}');
	          expect(userNameValid.getText()).toContain('false');
	          expect(formValid.getText()).toContain('false');
	        });
	
	        it('should be valid if empty when min length is set', function() {
	          userLastInput.clear();
	          userLastInput.sendKeys('');
	
	          expect(user.getText()).toContain('{"name":"guest","last":""}');
	          expect(lastNameValid.getText()).toContain('true');
	          expect(formValid.getText()).toContain('true');
	        });
	
	        it('should be invalid if less than required min length', function() {
	          userLastInput.clear();
	          userLastInput.sendKeys('xx');
	
	          expect(user.getText()).toContain('{"name":"guest"}');
	          expect(lastNameValid.getText()).toContain('false');
	          expect(lastNameError.getText()).toContain('minlength');
	          expect(formValid.getText()).toContain('false');
	        });
	
	        it('should be invalid if longer than max length', function() {
	          userLastInput.clear();
	          userLastInput.sendKeys('some ridiculously long name');
	
	          expect(user.getText()).toContain('{"name":"guest"}');
	          expect(lastNameValid.getText()).toContain('false');
	          expect(lastNameError.getText()).toContain('maxlength');
	          expect(formValid.getText()).toContain('false');
	        });
	      </file>
	    </example>
	 */
	var inputDirective = ['$browser', '$sniffer', '$filter', '$parse',
	    function($browser, $sniffer, $filter, $parse) {
	  return {
	    restrict: 'E',
	    require: ['?ngModel'],
	    link: {
	      pre: function(scope, element, attr, ctrls) {
	        if (ctrls[0]) {
	          (inputType[lowercase(attr.type)] || inputType.text)(scope, element, attr, ctrls[0], $sniffer,
	                                                              $browser, $filter, $parse);
	        }
	      }
	    }
	  };
	}];
	
	
	
	var CONSTANT_VALUE_REGEXP = /^(true|false|\d+)$/;
	/**
	 * @ngdoc directive
	 * @name ngValue
	 *
	 * @description
	 * Binds the given expression to the value of `<option>` or {@link input[radio] `input[radio]`},
	 * so that when the element is selected, the {@link ngModel `ngModel`} of that element is set to
	 * the bound value.
	 *
	 * `ngValue` is useful when dynamically generating lists of radio buttons using
	 * {@link ngRepeat `ngRepeat`}, as shown below.
	 *
	 * Likewise, `ngValue` can be used to generate `<option>` elements for
	 * the {@link select `select`} element. In that case however, only strings are supported
	 * for the `value `attribute, so the resulting `ngModel` will always be a string.
	 * Support for `select` models with non-string values is available via `ngOptions`.
	 *
	 * @element input
	 * @param {string=} ngValue angular expression, whose value will be bound to the `value` attribute
	 *   of the `input` element
	 *
	 * @example
	    <example name="ngValue-directive" module="valueExample">
	      <file name="index.html">
	       <script>
	          angular.module('valueExample', [])
	            .controller('ExampleController', ['$scope', function($scope) {
	              $scope.names = ['pizza', 'unicorns', 'robots'];
	              $scope.my = { favorite: 'unicorns' };
	            }]);
	       </script>
	        <form ng-controller="ExampleController">
	          <h2>Which is your favorite?</h2>
	            <label ng-repeat="name in names" for="{{name}}">
	              {{name}}
	              <input type="radio"
	                     ng-model="my.favorite"
	                     ng-value="name"
	                     id="{{name}}"
	                     name="favorite">
	            </label>
	          <div>You chose {{my.favorite}}</div>
	        </form>
	      </file>
	      <file name="protractor.js" type="protractor">
	        var favorite = element(by.binding('my.favorite'));
	
	        it('should initialize to model', function() {
	          expect(favorite.getText()).toContain('unicorns');
	        });
	        it('should bind the values to the inputs', function() {
	          element.all(by.model('my.favorite')).get(0).click();
	          expect(favorite.getText()).toContain('pizza');
	        });
	      </file>
	    </example>
	 */
	var ngValueDirective = function() {
	  return {
	    restrict: 'A',
	    priority: 100,
	    compile: function(tpl, tplAttr) {
	      if (CONSTANT_VALUE_REGEXP.test(tplAttr.ngValue)) {
	        return function ngValueConstantLink(scope, elm, attr) {
	          attr.$set('value', scope.$eval(attr.ngValue));
	        };
	      } else {
	        return function ngValueLink(scope, elm, attr) {
	          scope.$watch(attr.ngValue, function valueWatchAction(value) {
	            attr.$set('value', value);
	          });
	        };
	      }
	    }
	  };
	};
	
	/**
	 * @ngdoc directive
	 * @name ngBind
	 * @restrict AC
	 *
	 * @description
	 * The `ngBind` attribute tells Angular to replace the text content of the specified HTML element
	 * with the value of a given expression, and to update the text content when the value of that
	 * expression changes.
	 *
	 * Typically, you don't use `ngBind` directly, but instead you use the double curly markup like
	 * `{{ expression }}` which is similar but less verbose.
	 *
	 * It is preferable to use `ngBind` instead of `{{ expression }}` if a template is momentarily
	 * displayed by the browser in its raw state before Angular compiles it. Since `ngBind` is an
	 * element attribute, it makes the bindings invisible to the user while the page is loading.
	 *
	 * An alternative solution to this problem would be using the
	 * {@link ng.directive:ngCloak ngCloak} directive.
	 *
	 *
	 * @element ANY
	 * @param {expression} ngBind {@link guide/expression Expression} to evaluate.
	 *
	 * @example
	 * Enter a name in the Live Preview text box; the greeting below the text box changes instantly.
	   <example module="bindExample">
	     <file name="index.html">
	       <script>
	         angular.module('bindExample', [])
	           .controller('ExampleController', ['$scope', function($scope) {
	             $scope.name = 'Whirled';
	           }]);
	       </script>
	       <div ng-controller="ExampleController">
	         <label>Enter name: <input type="text" ng-model="name"></label><br>
	         Hello <span ng-bind="name"></span>!
	       </div>
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should check ng-bind', function() {
	         var nameInput = element(by.model('name'));
	
	         expect(element(by.binding('name')).getText()).toBe('Whirled');
	         nameInput.clear();
	         nameInput.sendKeys('world');
	         expect(element(by.binding('name')).getText()).toBe('world');
	       });
	     </file>
	   </example>
	 */
	var ngBindDirective = ['$compile', function($compile) {
	  return {
	    restrict: 'AC',
	    compile: function ngBindCompile(templateElement) {
	      $compile.$$addBindingClass(templateElement);
	      return function ngBindLink(scope, element, attr) {
	        $compile.$$addBindingInfo(element, attr.ngBind);
	        element = element[0];
	        scope.$watch(attr.ngBind, function ngBindWatchAction(value) {
	          element.textContent = isUndefined(value) ? '' : value;
	        });
	      };
	    }
	  };
	}];
	
	
	/**
	 * @ngdoc directive
	 * @name ngBindTemplate
	 *
	 * @description
	 * The `ngBindTemplate` directive specifies that the element
	 * text content should be replaced with the interpolation of the template
	 * in the `ngBindTemplate` attribute.
	 * Unlike `ngBind`, the `ngBindTemplate` can contain multiple `{{` `}}`
	 * expressions. This directive is needed since some HTML elements
	 * (such as TITLE and OPTION) cannot contain SPAN elements.
	 *
	 * @element ANY
	 * @param {string} ngBindTemplate template of form
	 *   <tt>{{</tt> <tt>expression</tt> <tt>}}</tt> to eval.
	 *
	 * @example
	 * Try it here: enter text in text box and watch the greeting change.
	   <example module="bindExample">
	     <file name="index.html">
	       <script>
	         angular.module('bindExample', [])
	           .controller('ExampleController', ['$scope', function($scope) {
	             $scope.salutation = 'Hello';
	             $scope.name = 'World';
	           }]);
	       </script>
	       <div ng-controller="ExampleController">
	        <label>Salutation: <input type="text" ng-model="salutation"></label><br>
	        <label>Name: <input type="text" ng-model="name"></label><br>
	        <pre ng-bind-template="{{salutation}} {{name}}!"></pre>
	       </div>
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should check ng-bind', function() {
	         var salutationElem = element(by.binding('salutation'));
	         var salutationInput = element(by.model('salutation'));
	         var nameInput = element(by.model('name'));
	
	         expect(salutationElem.getText()).toBe('Hello World!');
	
	         salutationInput.clear();
	         salutationInput.sendKeys('Greetings');
	         nameInput.clear();
	         nameInput.sendKeys('user');
	
	         expect(salutationElem.getText()).toBe('Greetings user!');
	       });
	     </file>
	   </example>
	 */
	var ngBindTemplateDirective = ['$interpolate', '$compile', function($interpolate, $compile) {
	  return {
	    compile: function ngBindTemplateCompile(templateElement) {
	      $compile.$$addBindingClass(templateElement);
	      return function ngBindTemplateLink(scope, element, attr) {
	        var interpolateFn = $interpolate(element.attr(attr.$attr.ngBindTemplate));
	        $compile.$$addBindingInfo(element, interpolateFn.expressions);
	        element = element[0];
	        attr.$observe('ngBindTemplate', function(value) {
	          element.textContent = isUndefined(value) ? '' : value;
	        });
	      };
	    }
	  };
	}];
	
	
	/**
	 * @ngdoc directive
	 * @name ngBindHtml
	 *
	 * @description
	 * Evaluates the expression and inserts the resulting HTML into the element in a secure way. By default,
	 * the resulting HTML content will be sanitized using the {@link ngSanitize.$sanitize $sanitize} service.
	 * To utilize this functionality, ensure that `$sanitize` is available, for example, by including {@link
	 * ngSanitize} in your module's dependencies (not in core Angular). In order to use {@link ngSanitize}
	 * in your module's dependencies, you need to include "angular-sanitize.js" in your application.
	 *
	 * You may also bypass sanitization for values you know are safe. To do so, bind to
	 * an explicitly trusted value via {@link ng.$sce#trustAsHtml $sce.trustAsHtml}.  See the example
	 * under {@link ng.$sce#show-me-an-example-using-sce- Strict Contextual Escaping (SCE)}.
	 *
	 * Note: If a `$sanitize` service is unavailable and the bound value isn't explicitly trusted, you
	 * will have an exception (instead of an exploit.)
	 *
	 * @element ANY
	 * @param {expression} ngBindHtml {@link guide/expression Expression} to evaluate.
	 *
	 * @example
	
	   <example module="bindHtmlExample" deps="angular-sanitize.js">
	     <file name="index.html">
	       <div ng-controller="ExampleController">
	        <p ng-bind-html="myHTML"></p>
	       </div>
	     </file>
	
	     <file name="script.js">
	       angular.module('bindHtmlExample', ['ngSanitize'])
	         .controller('ExampleController', ['$scope', function($scope) {
	           $scope.myHTML =
	              'I am an <code>HTML</code>string with ' +
	              '<a href="#">links!</a> and other <em>stuff</em>';
	         }]);
	     </file>
	
	     <file name="protractor.js" type="protractor">
	       it('should check ng-bind-html', function() {
	         expect(element(by.binding('myHTML')).getText()).toBe(
	             'I am an HTMLstring with links! and other stuff');
	       });
	     </file>
	   </example>
	 */
	var ngBindHtmlDirective = ['$sce', '$parse', '$compile', function($sce, $parse, $compile) {
	  return {
	    restrict: 'A',
	    compile: function ngBindHtmlCompile(tElement, tAttrs) {
	      var ngBindHtmlGetter = $parse(tAttrs.ngBindHtml);
	      var ngBindHtmlWatch = $parse(tAttrs.ngBindHtml, function getStringValue(value) {
	        return (value || '').toString();
	      });
	      $compile.$$addBindingClass(tElement);
	
	      return function ngBindHtmlLink(scope, element, attr) {
	        $compile.$$addBindingInfo(element, attr.ngBindHtml);
	
	        scope.$watch(ngBindHtmlWatch, function ngBindHtmlWatchAction() {
	          // we re-evaluate the expr because we want a TrustedValueHolderType
	          // for $sce, not a string
	          element.html($sce.getTrustedHtml(ngBindHtmlGetter(scope)) || '');
	        });
	      };
	    }
	  };
	}];
	
	/**
	 * @ngdoc directive
	 * @name ngChange
	 *
	 * @description
	 * Evaluate the given expression when the user changes the input.
	 * The expression is evaluated immediately, unlike the JavaScript onchange event
	 * which only triggers at the end of a change (usually, when the user leaves the
	 * form element or presses the return key).
	 *
	 * The `ngChange` expression is only evaluated when a change in the input value causes
	 * a new value to be committed to the model.
	 *
	 * It will not be evaluated:
	 * * if the value returned from the `$parsers` transformation pipeline has not changed
	 * * if the input has continued to be invalid since the model will stay `null`
	 * * if the model is changed programmatically and not by a change to the input value
	 *
	 *
	 * Note, this directive requires `ngModel` to be present.
	 *
	 * @element input
	 * @param {expression} ngChange {@link guide/expression Expression} to evaluate upon change
	 * in input value.
	 *
	 * @example
	 * <example name="ngChange-directive" module="changeExample">
	 *   <file name="index.html">
	 *     <script>
	 *       angular.module('changeExample', [])
	 *         .controller('ExampleController', ['$scope', function($scope) {
	 *           $scope.counter = 0;
	 *           $scope.change = function() {
	 *             $scope.counter++;
	 *           };
	 *         }]);
	 *     </script>
	 *     <div ng-controller="ExampleController">
	 *       <input type="checkbox" ng-model="confirmed" ng-change="change()" id="ng-change-example1" />
	 *       <input type="checkbox" ng-model="confirmed" id="ng-change-example2" />
	 *       <label for="ng-change-example2">Confirmed</label><br />
	 *       <tt>debug = {{confirmed}}</tt><br/>
	 *       <tt>counter = {{counter}}</tt><br/>
	 *     </div>
	 *   </file>
	 *   <file name="protractor.js" type="protractor">
	 *     var counter = element(by.binding('counter'));
	 *     var debug = element(by.binding('confirmed'));
	 *
	 *     it('should evaluate the expression if changing from view', function() {
	 *       expect(counter.getText()).toContain('0');
	 *
	 *       element(by.id('ng-change-example1')).click();
	 *
	 *       expect(counter.getText()).toContain('1');
	 *       expect(debug.getText()).toContain('true');
	 *     });
	 *
	 *     it('should not evaluate the expression if changing from model', function() {
	 *       element(by.id('ng-change-example2')).click();
	
	 *       expect(counter.getText()).toContain('0');
	 *       expect(debug.getText()).toContain('true');
	 *     });
	 *   </file>
	 * </example>
	 */
	var ngChangeDirective = valueFn({
	  restrict: 'A',
	  require: 'ngModel',
	  link: function(scope, element, attr, ctrl) {
	    ctrl.$viewChangeListeners.push(function() {
	      scope.$eval(attr.ngChange);
	    });
	  }
	});
	
	function classDirective(name, selector) {
	  name = 'ngClass' + name;
	  return ['$animate', function($animate) {
	    return {
	      restrict: 'AC',
	      link: function(scope, element, attr) {
	        var oldVal;
	
	        scope.$watch(attr[name], ngClassWatchAction, true);
	
	        attr.$observe('class', function(value) {
	          ngClassWatchAction(scope.$eval(attr[name]));
	        });
	
	
	        if (name !== 'ngClass') {
	          scope.$watch('$index', function($index, old$index) {
	            // jshint bitwise: false
	            var mod = $index & 1;
	            if (mod !== (old$index & 1)) {
	              var classes = arrayClasses(scope.$eval(attr[name]));
	              mod === selector ?
	                addClasses(classes) :
	                removeClasses(classes);
	            }
	          });
	        }
	
	        function addClasses(classes) {
	          var newClasses = digestClassCounts(classes, 1);
	          attr.$addClass(newClasses);
	        }
	
	        function removeClasses(classes) {
	          var newClasses = digestClassCounts(classes, -1);
	          attr.$removeClass(newClasses);
	        }
	
	        function digestClassCounts(classes, count) {
	          // Use createMap() to prevent class assumptions involving property
	          // names in Object.prototype
	          var classCounts = element.data('$classCounts') || createMap();
	          var classesToUpdate = [];
	          forEach(classes, function(className) {
	            if (count > 0 || classCounts[className]) {
	              classCounts[className] = (classCounts[className] || 0) + count;
	              if (classCounts[className] === +(count > 0)) {
	                classesToUpdate.push(className);
	              }
	            }
	          });
	          element.data('$classCounts', classCounts);
	          return classesToUpdate.join(' ');
	        }
	
	        function updateClasses(oldClasses, newClasses) {
	          var toAdd = arrayDifference(newClasses, oldClasses);
	          var toRemove = arrayDifference(oldClasses, newClasses);
	          toAdd = digestClassCounts(toAdd, 1);
	          toRemove = digestClassCounts(toRemove, -1);
	          if (toAdd && toAdd.length) {
	            $animate.addClass(element, toAdd);
	          }
	          if (toRemove && toRemove.length) {
	            $animate.removeClass(element, toRemove);
	          }
	        }
	
	        function ngClassWatchAction(newVal) {
	          if (selector === true || scope.$index % 2 === selector) {
	            var newClasses = arrayClasses(newVal || []);
	            if (!oldVal) {
	              addClasses(newClasses);
	            } else if (!equals(newVal,oldVal)) {
	              var oldClasses = arrayClasses(oldVal);
	              updateClasses(oldClasses, newClasses);
	            }
	          }
	          if (isArray(newVal)) {
	            oldVal = newVal.map(function(v) { return shallowCopy(v); });
	          } else {
	            oldVal = shallowCopy(newVal);
	          }
	        }
	      }
	    };
	
	    function arrayDifference(tokens1, tokens2) {
	      var values = [];
	
	      outer:
	      for (var i = 0; i < tokens1.length; i++) {
	        var token = tokens1[i];
	        for (var j = 0; j < tokens2.length; j++) {
	          if (token == tokens2[j]) continue outer;
	        }
	        values.push(token);
	      }
	      return values;
	    }
	
	    function arrayClasses(classVal) {
	      var classes = [];
	      if (isArray(classVal)) {
	        forEach(classVal, function(v) {
	          classes = classes.concat(arrayClasses(v));
	        });
	        return classes;
	      } else if (isString(classVal)) {
	        return classVal.split(' ');
	      } else if (isObject(classVal)) {
	        forEach(classVal, function(v, k) {
	          if (v) {
	            classes = classes.concat(k.split(' '));
	          }
	        });
	        return classes;
	      }
	      return classVal;
	    }
	  }];
	}
	
	/**
	 * @ngdoc directive
	 * @name ngClass
	 * @restrict AC
	 *
	 * @description
	 * The `ngClass` directive allows you to dynamically set CSS classes on an HTML element by databinding
	 * an expression that represents all classes to be added.
	 *
	 * The directive operates in three different ways, depending on which of three types the expression
	 * evaluates to:
	 *
	 * 1. If the expression evaluates to a string, the string should be one or more space-delimited class
	 * names.
	 *
	 * 2. If the expression evaluates to an object, then for each key-value pair of the
	 * object with a truthy value the corresponding key is used as a class name.
	 *
	 * 3. If the expression evaluates to an array, each element of the array should either be a string as in
	 * type 1 or an object as in type 2. This means that you can mix strings and objects together in an array
	 * to give you more control over what CSS classes appear. See the code below for an example of this.
	 *
	 *
	 * The directive won't add duplicate classes if a particular class was already set.
	 *
	 * When the expression changes, the previously added classes are removed and only then are the
	 * new classes added.
	 *
	 * @animations
	 * | Animation                        | Occurs                              |
	 * |----------------------------------|-------------------------------------|
	 * | {@link ng.$animate#addClass addClass}       | just before the class is applied to the element   |
	 * | {@link ng.$animate#removeClass removeClass} | just before the class is removed from the element |
	 *
	 * @element ANY
	 * @param {expression} ngClass {@link guide/expression Expression} to eval. The result
	 *   of the evaluation can be a string representing space delimited class
	 *   names, an array, or a map of class names to boolean values. In the case of a map, the
	 *   names of the properties whose values are truthy will be added as css classes to the
	 *   element.
	 *
	 * @example Example that demonstrates basic bindings via ngClass directive.
	   <example>
	     <file name="index.html">
	       <p ng-class="{strike: deleted, bold: important, 'has-error': error}">Map Syntax Example</p>
	       <label>
	          <input type="checkbox" ng-model="deleted">
	          deleted (apply "strike" class)
	       </label><br>
	       <label>
	          <input type="checkbox" ng-model="important">
	          important (apply "bold" class)
	       </label><br>
	       <label>
	          <input type="checkbox" ng-model="error">
	          error (apply "has-error" class)
	       </label>
	       <hr>
	       <p ng-class="style">Using String Syntax</p>
	       <input type="text" ng-model="style"
	              placeholder="Type: bold strike red" aria-label="Type: bold strike red">
	       <hr>
	       <p ng-class="[style1, style2, style3]">Using Array Syntax</p>
	       <input ng-model="style1"
	              placeholder="Type: bold, strike or red" aria-label="Type: bold, strike or red"><br>
	       <input ng-model="style2"
	              placeholder="Type: bold, strike or red" aria-label="Type: bold, strike or red 2"><br>
	       <input ng-model="style3"
	              placeholder="Type: bold, strike or red" aria-label="Type: bold, strike or red 3"><br>
	       <hr>
	       <p ng-class="[style4, {orange: warning}]">Using Array and Map Syntax</p>
	       <input ng-model="style4" placeholder="Type: bold, strike" aria-label="Type: bold, strike"><br>
	       <label><input type="checkbox" ng-model="warning"> warning (apply "orange" class)</label>
	     </file>
	     <file name="style.css">
	       .strike {
	           text-decoration: line-through;
	       }
	       .bold {
	           font-weight: bold;
	       }
	       .red {
	           color: red;
	       }
	       .has-error {
	           color: red;
	           background-color: yellow;
	       }
	       .orange {
	           color: orange;
	       }
	     </file>
	     <file name="protractor.js" type="protractor">
	       var ps = element.all(by.css('p'));
	
	       it('should let you toggle the class', function() {
	
	         expect(ps.first().getAttribute('class')).not.toMatch(/bold/);
	         expect(ps.first().getAttribute('class')).not.toMatch(/has-error/);
	
	         element(by.model('important')).click();
	         expect(ps.first().getAttribute('class')).toMatch(/bold/);
	
	         element(by.model('error')).click();
	         expect(ps.first().getAttribute('class')).toMatch(/has-error/);
	       });
	
	       it('should let you toggle string example', function() {
	         expect(ps.get(1).getAttribute('class')).toBe('');
	         element(by.model('style')).clear();
	         element(by.model('style')).sendKeys('red');
	         expect(ps.get(1).getAttribute('class')).toBe('red');
	       });
	
	       it('array example should have 3 classes', function() {
	         expect(ps.get(2).getAttribute('class')).toBe('');
	         element(by.model('style1')).sendKeys('bold');
	         element(by.model('style2')).sendKeys('strike');
	         element(by.model('style3')).sendKeys('red');
	         expect(ps.get(2).getAttribute('class')).toBe('bold strike red');
	       });
	
	       it('array with map example should have 2 classes', function() {
	         expect(ps.last().getAttribute('class')).toBe('');
	         element(by.model('style4')).sendKeys('bold');
	         element(by.model('warning')).click();
	         expect(ps.last().getAttribute('class')).toBe('bold orange');
	       });
	     </file>
	   </example>
	
	   ## Animations
	
	   The example below demonstrates how to perform animations using ngClass.
	
	   <example module="ngAnimate" deps="angular-animate.js" animations="true">
	     <file name="index.html">
	      <input id="setbtn" type="button" value="set" ng-click="myVar='my-class'">
	      <input id="clearbtn" type="button" value="clear" ng-click="myVar=''">
	      <br>
	      <span class="base-class" ng-class="myVar">Sample Text</span>
	     </file>
	     <file name="style.css">
	       .base-class {
	         transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;
	       }
	
	       .base-class.my-class {
	         color: red;
	         font-size:3em;
	       }
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should check ng-class', function() {
	         expect(element(by.css('.base-class')).getAttribute('class')).not.
	           toMatch(/my-class/);
	
	         element(by.id('setbtn')).click();
	
	         expect(element(by.css('.base-class')).getAttribute('class')).
	           toMatch(/my-class/);
	
	         element(by.id('clearbtn')).click();
	
	         expect(element(by.css('.base-class')).getAttribute('class')).not.
	           toMatch(/my-class/);
	       });
	     </file>
	   </example>
	
	
	   ## ngClass and pre-existing CSS3 Transitions/Animations
	   The ngClass directive still supports CSS3 Transitions/Animations even if they do not follow the ngAnimate CSS naming structure.
	   Upon animation ngAnimate will apply supplementary CSS classes to track the start and end of an animation, but this will not hinder
	   any pre-existing CSS transitions already on the element. To get an idea of what happens during a class-based animation, be sure
	   to view the step by step details of {@link $animate#addClass $animate.addClass} and
	   {@link $animate#removeClass $animate.removeClass}.
	 */
	var ngClassDirective = classDirective('', true);
	
	/**
	 * @ngdoc directive
	 * @name ngClassOdd
	 * @restrict AC
	 *
	 * @description
	 * The `ngClassOdd` and `ngClassEven` directives work exactly as
	 * {@link ng.directive:ngClass ngClass}, except they work in
	 * conjunction with `ngRepeat` and take effect only on odd (even) rows.
	 *
	 * This directive can be applied only within the scope of an
	 * {@link ng.directive:ngRepeat ngRepeat}.
	 *
	 * @element ANY
	 * @param {expression} ngClassOdd {@link guide/expression Expression} to eval. The result
	 *   of the evaluation can be a string representing space delimited class names or an array.
	 *
	 * @example
	   <example>
	     <file name="index.html">
	        <ol ng-init="names=['John', 'Mary', 'Cate', 'Suz']">
	          <li ng-repeat="name in names">
	           <span ng-class-odd="'odd'" ng-class-even="'even'">
	             {{name}}
	           </span>
	          </li>
	        </ol>
	     </file>
	     <file name="style.css">
	       .odd {
	         color: red;
	       }
	       .even {
	         color: blue;
	       }
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should check ng-class-odd and ng-class-even', function() {
	         expect(element(by.repeater('name in names').row(0).column('name')).getAttribute('class')).
	           toMatch(/odd/);
	         expect(element(by.repeater('name in names').row(1).column('name')).getAttribute('class')).
	           toMatch(/even/);
	       });
	     </file>
	   </example>
	 */
	var ngClassOddDirective = classDirective('Odd', 0);
	
	/**
	 * @ngdoc directive
	 * @name ngClassEven
	 * @restrict AC
	 *
	 * @description
	 * The `ngClassOdd` and `ngClassEven` directives work exactly as
	 * {@link ng.directive:ngClass ngClass}, except they work in
	 * conjunction with `ngRepeat` and take effect only on odd (even) rows.
	 *
	 * This directive can be applied only within the scope of an
	 * {@link ng.directive:ngRepeat ngRepeat}.
	 *
	 * @element ANY
	 * @param {expression} ngClassEven {@link guide/expression Expression} to eval. The
	 *   result of the evaluation can be a string representing space delimited class names or an array.
	 *
	 * @example
	   <example>
	     <file name="index.html">
	        <ol ng-init="names=['John', 'Mary', 'Cate', 'Suz']">
	          <li ng-repeat="name in names">
	           <span ng-class-odd="'odd'" ng-class-even="'even'">
	             {{name}} &nbsp; &nbsp; &nbsp;
	           </span>
	          </li>
	        </ol>
	     </file>
	     <file name="style.css">
	       .odd {
	         color: red;
	       }
	       .even {
	         color: blue;
	       }
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should check ng-class-odd and ng-class-even', function() {
	         expect(element(by.repeater('name in names').row(0).column('name')).getAttribute('class')).
	           toMatch(/odd/);
	         expect(element(by.repeater('name in names').row(1).column('name')).getAttribute('class')).
	           toMatch(/even/);
	       });
	     </file>
	   </example>
	 */
	var ngClassEvenDirective = classDirective('Even', 1);
	
	/**
	 * @ngdoc directive
	 * @name ngCloak
	 * @restrict AC
	 *
	 * @description
	 * The `ngCloak` directive is used to prevent the Angular html template from being briefly
	 * displayed by the browser in its raw (uncompiled) form while your application is loading. Use this
	 * directive to avoid the undesirable flicker effect caused by the html template display.
	 *
	 * The directive can be applied to the `<body>` element, but the preferred usage is to apply
	 * multiple `ngCloak` directives to small portions of the page to permit progressive rendering
	 * of the browser view.
	 *
	 * `ngCloak` works in cooperation with the following css rule embedded within `angular.js` and
	 * `angular.min.js`.
	 * For CSP mode please add `angular-csp.css` to your html file (see {@link ng.directive:ngCsp ngCsp}).
	 *
	 * ```css
	 * [ng\:cloak], [ng-cloak], [data-ng-cloak], [x-ng-cloak], .ng-cloak, .x-ng-cloak {
	 *   display: none !important;
	 * }
	 * ```
	 *
	 * When this css rule is loaded by the browser, all html elements (including their children) that
	 * are tagged with the `ngCloak` directive are hidden. When Angular encounters this directive
	 * during the compilation of the template it deletes the `ngCloak` element attribute, making
	 * the compiled element visible.
	 *
	 * For the best result, the `angular.js` script must be loaded in the head section of the html
	 * document; alternatively, the css rule above must be included in the external stylesheet of the
	 * application.
	 *
	 * @element ANY
	 *
	 * @example
	   <example>
	     <file name="index.html">
	        <div id="template1" ng-cloak>{{ 'hello' }}</div>
	        <div id="template2" class="ng-cloak">{{ 'world' }}</div>
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should remove the template directive and css class', function() {
	         expect($('#template1').getAttribute('ng-cloak')).
	           toBeNull();
	         expect($('#template2').getAttribute('ng-cloak')).
	           toBeNull();
	       });
	     </file>
	   </example>
	 *
	 */
	var ngCloakDirective = ngDirective({
	  compile: function(element, attr) {
	    attr.$set('ngCloak', undefined);
	    element.removeClass('ng-cloak');
	  }
	});
	
	/**
	 * @ngdoc directive
	 * @name ngController
	 *
	 * @description
	 * The `ngController` directive attaches a controller class to the view. This is a key aspect of how angular
	 * supports the principles behind the Model-View-Controller design pattern.
	 *
	 * MVC components in angular:
	 *
	 * * Model — Models are the properties of a scope; scopes are attached to the DOM where scope properties
	 *   are accessed through bindings.
	 * * View — The template (HTML with data bindings) that is rendered into the View.
	 * * Controller — The `ngController` directive specifies a Controller class; the class contains business
	 *   logic behind the application to decorate the scope with functions and values
	 *
	 * Note that you can also attach controllers to the DOM by declaring it in a route definition
	 * via the {@link ngRoute.$route $route} service. A common mistake is to declare the controller
	 * again using `ng-controller` in the template itself.  This will cause the controller to be attached
	 * and executed twice.
	 *
	 * @element ANY
	 * @scope
	 * @priority 500
	 * @param {expression} ngController Name of a constructor function registered with the current
	 * {@link ng.$controllerProvider $controllerProvider} or an {@link guide/expression expression}
	 * that on the current scope evaluates to a constructor function.
	 *
	 * The controller instance can be published into a scope property by specifying
	 * `ng-controller="as propertyName"`.
	 *
	 * If the current `$controllerProvider` is configured to use globals (via
	 * {@link ng.$controllerProvider#allowGlobals `$controllerProvider.allowGlobals()` }), this may
	 * also be the name of a globally accessible constructor function (not recommended).
	 *
	 * @example
	 * Here is a simple form for editing user contact information. Adding, removing, clearing, and
	 * greeting are methods declared on the controller (see source tab). These methods can
	 * easily be called from the angular markup. Any changes to the data are automatically reflected
	 * in the View without the need for a manual update.
	 *
	 * Two different declaration styles are included below:
	 *
	 * * one binds methods and properties directly onto the controller using `this`:
	 * `ng-controller="SettingsController1 as settings"`
	 * * one injects `$scope` into the controller:
	 * `ng-controller="SettingsController2"`
	 *
	 * The second option is more common in the Angular community, and is generally used in boilerplates
	 * and in this guide. However, there are advantages to binding properties directly to the controller
	 * and avoiding scope.
	 *
	 * * Using `controller as` makes it obvious which controller you are accessing in the template when
	 * multiple controllers apply to an element.
	 * * If you are writing your controllers as classes you have easier access to the properties and
	 * methods, which will appear on the scope, from inside the controller code.
	 * * Since there is always a `.` in the bindings, you don't have to worry about prototypal
	 * inheritance masking primitives.
	 *
	 * This example demonstrates the `controller as` syntax.
	 *
	 * <example name="ngControllerAs" module="controllerAsExample">
	 *   <file name="index.html">
	 *    <div id="ctrl-as-exmpl" ng-controller="SettingsController1 as settings">
	 *      <label>Name: <input type="text" ng-model="settings.name"/></label>
	 *      <button ng-click="settings.greet()">greet</button><br/>
	 *      Contact:
	 *      <ul>
	 *        <li ng-repeat="contact in settings.contacts">
	 *          <select ng-model="contact.type" aria-label="Contact method" id="select_{{$index}}">
	 *             <option>phone</option>
	 *             <option>email</option>
	 *          </select>
	 *          <input type="text" ng-model="contact.value" aria-labelledby="select_{{$index}}" />
	 *          <button ng-click="settings.clearContact(contact)">clear</button>
	 *          <button ng-click="settings.removeContact(contact)" aria-label="Remove">X</button>
	 *        </li>
	 *        <li><button ng-click="settings.addContact()">add</button></li>
	 *     </ul>
	 *    </div>
	 *   </file>
	 *   <file name="app.js">
	 *    angular.module('controllerAsExample', [])
	 *      .controller('SettingsController1', SettingsController1);
	 *
	 *    function SettingsController1() {
	 *      this.name = "John Smith";
	 *      this.contacts = [
	 *        {type: 'phone', value: '408 555 1212'},
	 *        {type: 'email', value: 'john.smith@example.org'} ];
	 *    }
	 *
	 *    SettingsController1.prototype.greet = function() {
	 *      alert(this.name);
	 *    };
	 *
	 *    SettingsController1.prototype.addContact = function() {
	 *      this.contacts.push({type: 'email', value: 'yourname@example.org'});
	 *    };
	 *
	 *    SettingsController1.prototype.removeContact = function(contactToRemove) {
	 *     var index = this.contacts.indexOf(contactToRemove);
	 *      this.contacts.splice(index, 1);
	 *    };
	 *
	 *    SettingsController1.prototype.clearContact = function(contact) {
	 *      contact.type = 'phone';
	 *      contact.value = '';
	 *    };
	 *   </file>
	 *   <file name="protractor.js" type="protractor">
	 *     it('should check controller as', function() {
	 *       var container = element(by.id('ctrl-as-exmpl'));
	 *         expect(container.element(by.model('settings.name'))
	 *           .getAttribute('value')).toBe('John Smith');
	 *
	 *       var firstRepeat =
	 *           container.element(by.repeater('contact in settings.contacts').row(0));
	 *       var secondRepeat =
	 *           container.element(by.repeater('contact in settings.contacts').row(1));
	 *
	 *       expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))
	 *           .toBe('408 555 1212');
	 *
	 *       expect(secondRepeat.element(by.model('contact.value')).getAttribute('value'))
	 *           .toBe('john.smith@example.org');
	 *
	 *       firstRepeat.element(by.buttonText('clear')).click();
	 *
	 *       expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))
	 *           .toBe('');
	 *
	 *       container.element(by.buttonText('add')).click();
	 *
	 *       expect(container.element(by.repeater('contact in settings.contacts').row(2))
	 *           .element(by.model('contact.value'))
	 *           .getAttribute('value'))
	 *           .toBe('yourname@example.org');
	 *     });
	 *   </file>
	 * </example>
	 *
	 * This example demonstrates the "attach to `$scope`" style of controller.
	 *
	 * <example name="ngController" module="controllerExample">
	 *  <file name="index.html">
	 *   <div id="ctrl-exmpl" ng-controller="SettingsController2">
	 *     <label>Name: <input type="text" ng-model="name"/></label>
	 *     <button ng-click="greet()">greet</button><br/>
	 *     Contact:
	 *     <ul>
	 *       <li ng-repeat="contact in contacts">
	 *         <select ng-model="contact.type" id="select_{{$index}}">
	 *            <option>phone</option>
	 *            <option>email</option>
	 *         </select>
	 *         <input type="text" ng-model="contact.value" aria-labelledby="select_{{$index}}" />
	 *         <button ng-click="clearContact(contact)">clear</button>
	 *         <button ng-click="removeContact(contact)">X</button>
	 *       </li>
	 *       <li>[ <button ng-click="addContact()">add</button> ]</li>
	 *    </ul>
	 *   </div>
	 *  </file>
	 *  <file name="app.js">
	 *   angular.module('controllerExample', [])
	 *     .controller('SettingsController2', ['$scope', SettingsController2]);
	 *
	 *   function SettingsController2($scope) {
	 *     $scope.name = "John Smith";
	 *     $scope.contacts = [
	 *       {type:'phone', value:'408 555 1212'},
	 *       {type:'email', value:'john.smith@example.org'} ];
	 *
	 *     $scope.greet = function() {
	 *       alert($scope.name);
	 *     };
	 *
	 *     $scope.addContact = function() {
	 *       $scope.contacts.push({type:'email', value:'yourname@example.org'});
	 *     };
	 *
	 *     $scope.removeContact = function(contactToRemove) {
	 *       var index = $scope.contacts.indexOf(contactToRemove);
	 *       $scope.contacts.splice(index, 1);
	 *     };
	 *
	 *     $scope.clearContact = function(contact) {
	 *       contact.type = 'phone';
	 *       contact.value = '';
	 *     };
	 *   }
	 *  </file>
	 *  <file name="protractor.js" type="protractor">
	 *    it('should check controller', function() {
	 *      var container = element(by.id('ctrl-exmpl'));
	 *
	 *      expect(container.element(by.model('name'))
	 *          .getAttribute('value')).toBe('John Smith');
	 *
	 *      var firstRepeat =
	 *          container.element(by.repeater('contact in contacts').row(0));
	 *      var secondRepeat =
	 *          container.element(by.repeater('contact in contacts').row(1));
	 *
	 *      expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))
	 *          .toBe('408 555 1212');
	 *      expect(secondRepeat.element(by.model('contact.value')).getAttribute('value'))
	 *          .toBe('john.smith@example.org');
	 *
	 *      firstRepeat.element(by.buttonText('clear')).click();
	 *
	 *      expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))
	 *          .toBe('');
	 *
	 *      container.element(by.buttonText('add')).click();
	 *
	 *      expect(container.element(by.repeater('contact in contacts').row(2))
	 *          .element(by.model('contact.value'))
	 *          .getAttribute('value'))
	 *          .toBe('yourname@example.org');
	 *    });
	 *  </file>
	 *</example>
	
	 */
	var ngControllerDirective = [function() {
	  return {
	    restrict: 'A',
	    scope: true,
	    controller: '@',
	    priority: 500
	  };
	}];
	
	/**
	 * @ngdoc directive
	 * @name ngCsp
	 *
	 * @element html
	 * @description
	 *
	 * Angular has some features that can break certain
	 * [CSP (Content Security Policy)](https://developer.mozilla.org/en/Security/CSP) rules.
	 *
	 * If you intend to implement these rules then you must tell Angular not to use these features.
	 *
	 * This is necessary when developing things like Google Chrome Extensions or Universal Windows Apps.
	 *
	 *
	 * The following rules affect Angular:
	 *
	 * * `unsafe-eval`: this rule forbids apps to use `eval` or `Function(string)` generated functions
	 * (among other things). Angular makes use of this in the {@link $parse} service to provide a 30%
	 * increase in the speed of evaluating Angular expressions.
	 *
	 * * `unsafe-inline`: this rule forbids apps from inject custom styles into the document. Angular
	 * makes use of this to include some CSS rules (e.g. {@link ngCloak} and {@link ngHide}).
	 * To make these directives work when a CSP rule is blocking inline styles, you must link to the
	 * `angular-csp.css` in your HTML manually.
	 *
	 * If you do not provide `ngCsp` then Angular tries to autodetect if CSP is blocking unsafe-eval
	 * and automatically deactivates this feature in the {@link $parse} service. This autodetection,
	 * however, triggers a CSP error to be logged in the console:
	 *
	 * ```
	 * Refused to evaluate a string as JavaScript because 'unsafe-eval' is not an allowed source of
	 * script in the following Content Security Policy directive: "default-src 'self'". Note that
	 * 'script-src' was not explicitly set, so 'default-src' is used as a fallback.
	 * ```
	 *
	 * This error is harmless but annoying. To prevent the error from showing up, put the `ngCsp`
	 * directive on an element of the HTML document that appears before the `<script>` tag that loads
	 * the `angular.js` file.
	 *
	 * *Note: This directive is only available in the `ng-csp` and `data-ng-csp` attribute form.*
	 *
	 * You can specify which of the CSP related Angular features should be deactivated by providing
	 * a value for the `ng-csp` attribute. The options are as follows:
	 *
	 * * no-inline-style: this stops Angular from injecting CSS styles into the DOM
	 *
	 * * no-unsafe-eval: this stops Angular from optimizing $parse with unsafe eval of strings
	 *
	 * You can use these values in the following combinations:
	 *
	 *
	 * * No declaration means that Angular will assume that you can do inline styles, but it will do
	 * a runtime check for unsafe-eval. E.g. `<body>`. This is backwardly compatible with previous versions
	 * of Angular.
	 *
	 * * A simple `ng-csp` (or `data-ng-csp`) attribute will tell Angular to deactivate both inline
	 * styles and unsafe eval. E.g. `<body ng-csp>`. This is backwardly compatible with previous versions
	 * of Angular.
	 *
	 * * Specifying only `no-unsafe-eval` tells Angular that we must not use eval, but that we can inject
	 * inline styles. E.g. `<body ng-csp="no-unsafe-eval">`.
	 *
	 * * Specifying only `no-inline-style` tells Angular that we must not inject styles, but that we can
	 * run eval - no automatic check for unsafe eval will occur. E.g. `<body ng-csp="no-inline-style">`
	 *
	 * * Specifying both `no-unsafe-eval` and `no-inline-style` tells Angular that we must not inject
	 * styles nor use eval, which is the same as an empty: ng-csp.
	 * E.g.`<body ng-csp="no-inline-style;no-unsafe-eval">`
	 *
	 * @example
	 * This example shows how to apply the `ngCsp` directive to the `html` tag.
	   ```html
	     <!doctype html>
	     <html ng-app ng-csp>
	     ...
	     ...
	     </html>
	   ```
	  * @example
	      // Note: the suffix `.csp` in the example name triggers
	      // csp mode in our http server!
	      <example name="example.csp" module="cspExample" ng-csp="true">
	        <file name="index.html">
	          <div ng-controller="MainController as ctrl">
	            <div>
	              <button ng-click="ctrl.inc()" id="inc">Increment</button>
	              <span id="counter">
	                {{ctrl.counter}}
	              </span>
	            </div>
	
	            <div>
	              <button ng-click="ctrl.evil()" id="evil">Evil</button>
	              <span id="evilError">
	                {{ctrl.evilError}}
	              </span>
	            </div>
	          </div>
	        </file>
	        <file name="script.js">
	           angular.module('cspExample', [])
	             .controller('MainController', function() {
	                this.counter = 0;
	                this.inc = function() {
	                  this.counter++;
	                };
	                this.evil = function() {
	                  // jshint evil:true
	                  try {
	                    eval('1+2');
	                  } catch (e) {
	                    this.evilError = e.message;
	                  }
	                };
	              });
	        </file>
	        <file name="protractor.js" type="protractor">
	          var util, webdriver;
	
	          var incBtn = element(by.id('inc'));
	          var counter = element(by.id('counter'));
	          var evilBtn = element(by.id('evil'));
	          var evilError = element(by.id('evilError'));
	
	          function getAndClearSevereErrors() {
	            return browser.manage().logs().get('browser').then(function(browserLog) {
	              return browserLog.filter(function(logEntry) {
	                return logEntry.level.value > webdriver.logging.Level.WARNING.value;
	              });
	            });
	          }
	
	          function clearErrors() {
	            getAndClearSevereErrors();
	          }
	
	          function expectNoErrors() {
	            getAndClearSevereErrors().then(function(filteredLog) {
	              expect(filteredLog.length).toEqual(0);
	              if (filteredLog.length) {
	                console.log('browser console errors: ' + util.inspect(filteredLog));
	              }
	            });
	          }
	
	          function expectError(regex) {
	            getAndClearSevereErrors().then(function(filteredLog) {
	              var found = false;
	              filteredLog.forEach(function(log) {
	                if (log.message.match(regex)) {
	                  found = true;
	                }
	              });
	              if (!found) {
	                throw new Error('expected an error that matches ' + regex);
	              }
	            });
	          }
	
	          beforeEach(function() {
	            util = require('util');
	            webdriver = require('protractor/node_modules/selenium-webdriver');
	          });
	
	          // For now, we only test on Chrome,
	          // as Safari does not load the page with Protractor's injected scripts,
	          // and Firefox webdriver always disables content security policy (#6358)
	          if (browser.params.browser !== 'chrome') {
	            return;
	          }
	
	          it('should not report errors when the page is loaded', function() {
	            // clear errors so we are not dependent on previous tests
	            clearErrors();
	            // Need to reload the page as the page is already loaded when
	            // we come here
	            browser.driver.getCurrentUrl().then(function(url) {
	              browser.get(url);
	            });
	            expectNoErrors();
	          });
	
	          it('should evaluate expressions', function() {
	            expect(counter.getText()).toEqual('0');
	            incBtn.click();
	            expect(counter.getText()).toEqual('1');
	            expectNoErrors();
	          });
	
	          it('should throw and report an error when using "eval"', function() {
	            evilBtn.click();
	            expect(evilError.getText()).toMatch(/Content Security Policy/);
	            expectError(/Content Security Policy/);
	          });
	        </file>
	      </example>
	  */
	
	// ngCsp is not implemented as a proper directive any more, because we need it be processed while we
	// bootstrap the system (before $parse is instantiated), for this reason we just have
	// the csp() fn that looks for the `ng-csp` attribute anywhere in the current doc
	
	/**
	 * @ngdoc directive
	 * @name ngClick
	 *
	 * @description
	 * The ngClick directive allows you to specify custom behavior when
	 * an element is clicked.
	 *
	 * @element ANY
	 * @priority 0
	 * @param {expression} ngClick {@link guide/expression Expression} to evaluate upon
	 * click. ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	   <example>
	     <file name="index.html">
	      <button ng-click="count = count + 1" ng-init="count=0">
	        Increment
	      </button>
	      <span>
	        count: {{count}}
	      </span>
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should check ng-click', function() {
	         expect(element(by.binding('count')).getText()).toMatch('0');
	         element(by.css('button')).click();
	         expect(element(by.binding('count')).getText()).toMatch('1');
	       });
	     </file>
	   </example>
	 */
	/*
	 * A collection of directives that allows creation of custom event handlers that are defined as
	 * angular expressions and are compiled and executed within the current scope.
	 */
	var ngEventDirectives = {};
	
	// For events that might fire synchronously during DOM manipulation
	// we need to execute their event handlers asynchronously using $evalAsync,
	// so that they are not executed in an inconsistent state.
	var forceAsyncEvents = {
	  'blur': true,
	  'focus': true
	};
	forEach(
	  'click dblclick mousedown mouseup mouseover mouseout mousemove mouseenter mouseleave keydown keyup keypress submit focus blur copy cut paste'.split(' '),
	  function(eventName) {
	    var directiveName = directiveNormalize('ng-' + eventName);
	    ngEventDirectives[directiveName] = ['$parse', '$rootScope', function($parse, $rootScope) {
	      return {
	        restrict: 'A',
	        compile: function($element, attr) {
	          // We expose the powerful $event object on the scope that provides access to the Window,
	          // etc. that isn't protected by the fast paths in $parse.  We explicitly request better
	          // checks at the cost of speed since event handler expressions are not executed as
	          // frequently as regular change detection.
	          var fn = $parse(attr[directiveName], /* interceptorFn */ null, /* expensiveChecks */ true);
	          return function ngEventHandler(scope, element) {
	            element.on(eventName, function(event) {
	              var callback = function() {
	                fn(scope, {$event:event});
	              };
	              if (forceAsyncEvents[eventName] && $rootScope.$$phase) {
	                scope.$evalAsync(callback);
	              } else {
	                scope.$apply(callback);
	              }
	            });
	          };
	        }
	      };
	    }];
	  }
	);
	
	/**
	 * @ngdoc directive
	 * @name ngDblclick
	 *
	 * @description
	 * The `ngDblclick` directive allows you to specify custom behavior on a dblclick event.
	 *
	 * @element ANY
	 * @priority 0
	 * @param {expression} ngDblclick {@link guide/expression Expression} to evaluate upon
	 * a dblclick. (The Event object is available as `$event`)
	 *
	 * @example
	   <example>
	     <file name="index.html">
	      <button ng-dblclick="count = count + 1" ng-init="count=0">
	        Increment (on double click)
	      </button>
	      count: {{count}}
	     </file>
	   </example>
	 */
	
	
	/**
	 * @ngdoc directive
	 * @name ngMousedown
	 *
	 * @description
	 * The ngMousedown directive allows you to specify custom behavior on mousedown event.
	 *
	 * @element ANY
	 * @priority 0
	 * @param {expression} ngMousedown {@link guide/expression Expression} to evaluate upon
	 * mousedown. ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	   <example>
	     <file name="index.html">
	      <button ng-mousedown="count = count + 1" ng-init="count=0">
	        Increment (on mouse down)
	      </button>
	      count: {{count}}
	     </file>
	   </example>
	 */
	
	
	/**
	 * @ngdoc directive
	 * @name ngMouseup
	 *
	 * @description
	 * Specify custom behavior on mouseup event.
	 *
	 * @element ANY
	 * @priority 0
	 * @param {expression} ngMouseup {@link guide/expression Expression} to evaluate upon
	 * mouseup. ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	   <example>
	     <file name="index.html">
	      <button ng-mouseup="count = count + 1" ng-init="count=0">
	        Increment (on mouse up)
	      </button>
	      count: {{count}}
	     </file>
	   </example>
	 */
	
	/**
	 * @ngdoc directive
	 * @name ngMouseover
	 *
	 * @description
	 * Specify custom behavior on mouseover event.
	 *
	 * @element ANY
	 * @priority 0
	 * @param {expression} ngMouseover {@link guide/expression Expression} to evaluate upon
	 * mouseover. ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	   <example>
	     <file name="index.html">
	      <button ng-mouseover="count = count + 1" ng-init="count=0">
	        Increment (when mouse is over)
	      </button>
	      count: {{count}}
	     </file>
	   </example>
	 */
	
	
	/**
	 * @ngdoc directive
	 * @name ngMouseenter
	 *
	 * @description
	 * Specify custom behavior on mouseenter event.
	 *
	 * @element ANY
	 * @priority 0
	 * @param {expression} ngMouseenter {@link guide/expression Expression} to evaluate upon
	 * mouseenter. ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	   <example>
	     <file name="index.html">
	      <button ng-mouseenter="count = count + 1" ng-init="count=0">
	        Increment (when mouse enters)
	      </button>
	      count: {{count}}
	     </file>
	   </example>
	 */
	
	
	/**
	 * @ngdoc directive
	 * @name ngMouseleave
	 *
	 * @description
	 * Specify custom behavior on mouseleave event.
	 *
	 * @element ANY
	 * @priority 0
	 * @param {expression} ngMouseleave {@link guide/expression Expression} to evaluate upon
	 * mouseleave. ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	   <example>
	     <file name="index.html">
	      <button ng-mouseleave="count = count + 1" ng-init="count=0">
	        Increment (when mouse leaves)
	      </button>
	      count: {{count}}
	     </file>
	   </example>
	 */
	
	
	/**
	 * @ngdoc directive
	 * @name ngMousemove
	 *
	 * @description
	 * Specify custom behavior on mousemove event.
	 *
	 * @element ANY
	 * @priority 0
	 * @param {expression} ngMousemove {@link guide/expression Expression} to evaluate upon
	 * mousemove. ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	   <example>
	     <file name="index.html">
	      <button ng-mousemove="count = count + 1" ng-init="count=0">
	        Increment (when mouse moves)
	      </button>
	      count: {{count}}
	     </file>
	   </example>
	 */
	
	
	/**
	 * @ngdoc directive
	 * @name ngKeydown
	 *
	 * @description
	 * Specify custom behavior on keydown event.
	 *
	 * @element ANY
	 * @priority 0
	 * @param {expression} ngKeydown {@link guide/expression Expression} to evaluate upon
	 * keydown. (Event object is available as `$event` and can be interrogated for keyCode, altKey, etc.)
	 *
	 * @example
	   <example>
	     <file name="index.html">
	      <input ng-keydown="count = count + 1" ng-init="count=0">
	      key down count: {{count}}
	     </file>
	   </example>
	 */
	
	
	/**
	 * @ngdoc directive
	 * @name ngKeyup
	 *
	 * @description
	 * Specify custom behavior on keyup event.
	 *
	 * @element ANY
	 * @priority 0
	 * @param {expression} ngKeyup {@link guide/expression Expression} to evaluate upon
	 * keyup. (Event object is available as `$event` and can be interrogated for keyCode, altKey, etc.)
	 *
	 * @example
	   <example>
	     <file name="index.html">
	       <p>Typing in the input box below updates the key count</p>
	       <input ng-keyup="count = count + 1" ng-init="count=0"> key up count: {{count}}
	
	       <p>Typing in the input box below updates the keycode</p>
	       <input ng-keyup="event=$event">
	       <p>event keyCode: {{ event.keyCode }}</p>
	       <p>event altKey: {{ event.altKey }}</p>
	     </file>
	   </example>
	 */
	
	
	/**
	 * @ngdoc directive
	 * @name ngKeypress
	 *
	 * @description
	 * Specify custom behavior on keypress event.
	 *
	 * @element ANY
	 * @param {expression} ngKeypress {@link guide/expression Expression} to evaluate upon
	 * keypress. ({@link guide/expression#-event- Event object is available as `$event`}
	 * and can be interrogated for keyCode, altKey, etc.)
	 *
	 * @example
	   <example>
	     <file name="index.html">
	      <input ng-keypress="count = count + 1" ng-init="count=0">
	      key press count: {{count}}
	     </file>
	   </example>
	 */
	
	
	/**
	 * @ngdoc directive
	 * @name ngSubmit
	 *
	 * @description
	 * Enables binding angular expressions to onsubmit events.
	 *
	 * Additionally it prevents the default action (which for form means sending the request to the
	 * server and reloading the current page), but only if the form does not contain `action`,
	 * `data-action`, or `x-action` attributes.
	 *
	 * <div class="alert alert-warning">
	 * **Warning:** Be careful not to cause "double-submission" by using both the `ngClick` and
	 * `ngSubmit` handlers together. See the
	 * {@link form#submitting-a-form-and-preventing-the-default-action `form` directive documentation}
	 * for a detailed discussion of when `ngSubmit` may be triggered.
	 * </div>
	 *
	 * @element form
	 * @priority 0
	 * @param {expression} ngSubmit {@link guide/expression Expression} to eval.
	 * ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	   <example module="submitExample">
	     <file name="index.html">
	      <script>
	        angular.module('submitExample', [])
	          .controller('ExampleController', ['$scope', function($scope) {
	            $scope.list = [];
	            $scope.text = 'hello';
	            $scope.submit = function() {
	              if ($scope.text) {
	                $scope.list.push(this.text);
	                $scope.text = '';
	              }
	            };
	          }]);
	      </script>
	      <form ng-submit="submit()" ng-controller="ExampleController">
	        Enter text and hit enter:
	        <input type="text" ng-model="text" name="text" />
	        <input type="submit" id="submit" value="Submit" />
	        <pre>list={{list}}</pre>
	      </form>
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should check ng-submit', function() {
	         expect(element(by.binding('list')).getText()).toBe('list=[]');
	         element(by.css('#submit')).click();
	         expect(element(by.binding('list')).getText()).toContain('hello');
	         expect(element(by.model('text')).getAttribute('value')).toBe('');
	       });
	       it('should ignore empty strings', function() {
	         expect(element(by.binding('list')).getText()).toBe('list=[]');
	         element(by.css('#submit')).click();
	         element(by.css('#submit')).click();
	         expect(element(by.binding('list')).getText()).toContain('hello');
	        });
	     </file>
	   </example>
	 */
	
	/**
	 * @ngdoc directive
	 * @name ngFocus
	 *
	 * @description
	 * Specify custom behavior on focus event.
	 *
	 * Note: As the `focus` event is executed synchronously when calling `input.focus()`
	 * AngularJS executes the expression using `scope.$evalAsync` if the event is fired
	 * during an `$apply` to ensure a consistent state.
	 *
	 * @element window, input, select, textarea, a
	 * @priority 0
	 * @param {expression} ngFocus {@link guide/expression Expression} to evaluate upon
	 * focus. ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	 * See {@link ng.directive:ngClick ngClick}
	 */
	
	/**
	 * @ngdoc directive
	 * @name ngBlur
	 *
	 * @description
	 * Specify custom behavior on blur event.
	 *
	 * A [blur event](https://developer.mozilla.org/en-US/docs/Web/Events/blur) fires when
	 * an element has lost focus.
	 *
	 * Note: As the `blur` event is executed synchronously also during DOM manipulations
	 * (e.g. removing a focussed input),
	 * AngularJS executes the expression using `scope.$evalAsync` if the event is fired
	 * during an `$apply` to ensure a consistent state.
	 *
	 * @element window, input, select, textarea, a
	 * @priority 0
	 * @param {expression} ngBlur {@link guide/expression Expression} to evaluate upon
	 * blur. ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	 * See {@link ng.directive:ngClick ngClick}
	 */
	
	/**
	 * @ngdoc directive
	 * @name ngCopy
	 *
	 * @description
	 * Specify custom behavior on copy event.
	 *
	 * @element window, input, select, textarea, a
	 * @priority 0
	 * @param {expression} ngCopy {@link guide/expression Expression} to evaluate upon
	 * copy. ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	   <example>
	     <file name="index.html">
	      <input ng-copy="copied=true" ng-init="copied=false; value='copy me'" ng-model="value">
	      copied: {{copied}}
	     </file>
	   </example>
	 */
	
	/**
	 * @ngdoc directive
	 * @name ngCut
	 *
	 * @description
	 * Specify custom behavior on cut event.
	 *
	 * @element window, input, select, textarea, a
	 * @priority 0
	 * @param {expression} ngCut {@link guide/expression Expression} to evaluate upon
	 * cut. ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	   <example>
	     <file name="index.html">
	      <input ng-cut="cut=true" ng-init="cut=false; value='cut me'" ng-model="value">
	      cut: {{cut}}
	     </file>
	   </example>
	 */
	
	/**
	 * @ngdoc directive
	 * @name ngPaste
	 *
	 * @description
	 * Specify custom behavior on paste event.
	 *
	 * @element window, input, select, textarea, a
	 * @priority 0
	 * @param {expression} ngPaste {@link guide/expression Expression} to evaluate upon
	 * paste. ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	   <example>
	     <file name="index.html">
	      <input ng-paste="paste=true" ng-init="paste=false" placeholder='paste here'>
	      pasted: {{paste}}
	     </file>
	   </example>
	 */
	
	/**
	 * @ngdoc directive
	 * @name ngIf
	 * @restrict A
	 * @multiElement
	 *
	 * @description
	 * The `ngIf` directive removes or recreates a portion of the DOM tree based on an
	 * {expression}. If the expression assigned to `ngIf` evaluates to a false
	 * value then the element is removed from the DOM, otherwise a clone of the
	 * element is reinserted into the DOM.
	 *
	 * `ngIf` differs from `ngShow` and `ngHide` in that `ngIf` completely removes and recreates the
	 * element in the DOM rather than changing its visibility via the `display` css property.  A common
	 * case when this difference is significant is when using css selectors that rely on an element's
	 * position within the DOM, such as the `:first-child` or `:last-child` pseudo-classes.
	 *
	 * Note that when an element is removed using `ngIf` its scope is destroyed and a new scope
	 * is created when the element is restored.  The scope created within `ngIf` inherits from
	 * its parent scope using
	 * [prototypal inheritance](https://github.com/angular/angular.js/wiki/Understanding-Scopes#javascript-prototypal-inheritance).
	 * An important implication of this is if `ngModel` is used within `ngIf` to bind to
	 * a javascript primitive defined in the parent scope. In this case any modifications made to the
	 * variable within the child scope will override (hide) the value in the parent scope.
	 *
	 * Also, `ngIf` recreates elements using their compiled state. An example of this behavior
	 * is if an element's class attribute is directly modified after it's compiled, using something like
	 * jQuery's `.addClass()` method, and the element is later removed. When `ngIf` recreates the element
	 * the added class will be lost because the original compiled state is used to regenerate the element.
	 *
	 * Additionally, you can provide animations via the `ngAnimate` module to animate the `enter`
	 * and `leave` effects.
	 *
	 * @animations
	 * | Animation                        | Occurs                               |
	 * |----------------------------------|-------------------------------------|
	 * | {@link ng.$animate#enter enter}  | just after the `ngIf` contents change and a new DOM element is created and injected into the `ngIf` container |
	 * | {@link ng.$animate#leave leave}  | just before the `ngIf` contents are removed from the DOM |
	 *
	 * @element ANY
	 * @scope
	 * @priority 600
	 * @param {expression} ngIf If the {@link guide/expression expression} is falsy then
	 *     the element is removed from the DOM tree. If it is truthy a copy of the compiled
	 *     element is added to the DOM tree.
	 *
	 * @example
	  <example module="ngAnimate" deps="angular-animate.js" animations="true">
	    <file name="index.html">
	      <label>Click me: <input type="checkbox" ng-model="checked" ng-init="checked=true" /></label><br/>
	      Show when checked:
	      <span ng-if="checked" class="animate-if">
	        This is removed when the checkbox is unchecked.
	      </span>
	    </file>
	    <file name="animations.css">
	      .animate-if {
	        background:white;
	        border:1px solid black;
	        padding:10px;
	      }
	
	      .animate-if.ng-enter, .animate-if.ng-leave {
	        transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;
	      }
	
	      .animate-if.ng-enter,
	      .animate-if.ng-leave.ng-leave-active {
	        opacity:0;
	      }
	
	      .animate-if.ng-leave,
	      .animate-if.ng-enter.ng-enter-active {
	        opacity:1;
	      }
	    </file>
	  </example>
	 */
	var ngIfDirective = ['$animate', '$compile', function($animate, $compile) {
	  return {
	    multiElement: true,
	    transclude: 'element',
	    priority: 600,
	    terminal: true,
	    restrict: 'A',
	    $$tlb: true,
	    link: function($scope, $element, $attr, ctrl, $transclude) {
	        var block, childScope, previousElements;
	        $scope.$watch($attr.ngIf, function ngIfWatchAction(value) {
	
	          if (value) {
	            if (!childScope) {
	              $transclude(function(clone, newScope) {
	                childScope = newScope;
	                clone[clone.length++] = $compile.$$createComment('end ngIf', $attr.ngIf);
	                // Note: We only need the first/last node of the cloned nodes.
	                // However, we need to keep the reference to the jqlite wrapper as it might be changed later
	                // by a directive with templateUrl when its template arrives.
	                block = {
	                  clone: clone
	                };
	                $animate.enter(clone, $element.parent(), $element);
	              });
	            }
	          } else {
	            if (previousElements) {
	              previousElements.remove();
	              previousElements = null;
	            }
	            if (childScope) {
	              childScope.$destroy();
	              childScope = null;
	            }
	            if (block) {
	              previousElements = getBlockNodes(block.clone);
	              $animate.leave(previousElements).then(function() {
	                previousElements = null;
	              });
	              block = null;
	            }
	          }
	        });
	    }
	  };
	}];
	
	/**
	 * @ngdoc directive
	 * @name ngInclude
	 * @restrict ECA
	 *
	 * @description
	 * Fetches, compiles and includes an external HTML fragment.
	 *
	 * By default, the template URL is restricted to the same domain and protocol as the
	 * application document. This is done by calling {@link $sce#getTrustedResourceUrl
	 * $sce.getTrustedResourceUrl} on it. To load templates from other domains or protocols
	 * you may either {@link ng.$sceDelegateProvider#resourceUrlWhitelist whitelist them} or
	 * {@link $sce#trustAsResourceUrl wrap them} as trusted values. Refer to Angular's {@link
	 * ng.$sce Strict Contextual Escaping}.
	 *
	 * In addition, the browser's
	 * [Same Origin Policy](https://code.google.com/p/browsersec/wiki/Part2#Same-origin_policy_for_XMLHttpRequest)
	 * and [Cross-Origin Resource Sharing (CORS)](http://www.w3.org/TR/cors/)
	 * policy may further restrict whether the template is successfully loaded.
	 * For example, `ngInclude` won't work for cross-domain requests on all browsers and for `file://`
	 * access on some browsers.
	 *
	 * @animations
	 * | Animation                        | Occurs                              |
	 * |----------------------------------|-------------------------------------|
	 * | {@link ng.$animate#enter enter}  | when the expression changes, on the new include |
	 * | {@link ng.$animate#leave leave}  | when the expression changes, on the old include |
	 *
	 * The enter and leave animation occur concurrently.
	 *
	 * @scope
	 * @priority 400
	 *
	 * @param {string} ngInclude|src angular expression evaluating to URL. If the source is a string constant,
	 *                 make sure you wrap it in **single** quotes, e.g. `src="'myPartialTemplate.html'"`.
	 * @param {string=} onload Expression to evaluate when a new partial is loaded.
	 *                  <div class="alert alert-warning">
	 *                  **Note:** When using onload on SVG elements in IE11, the browser will try to call
	 *                  a function with the name on the window element, which will usually throw a
	 *                  "function is undefined" error. To fix this, you can instead use `data-onload` or a
	 *                  different form that {@link guide/directive#normalization matches} `onload`.
	 *                  </div>
	   *
	 * @param {string=} autoscroll Whether `ngInclude` should call {@link ng.$anchorScroll
	 *                  $anchorScroll} to scroll the viewport after the content is loaded.
	 *
	 *                  - If the attribute is not set, disable scrolling.
	 *                  - If the attribute is set without value, enable scrolling.
	 *                  - Otherwise enable scrolling only if the expression evaluates to truthy value.
	 *
	 * @example
	  <example module="includeExample" deps="angular-animate.js" animations="true">
	    <file name="index.html">
	     <div ng-controller="ExampleController">
	       <select ng-model="template" ng-options="t.name for t in templates">
	        <option value="">(blank)</option>
	       </select>
	       url of the template: <code>{{template.url}}</code>
	       <hr/>
	       <div class="slide-animate-container">
	         <div class="slide-animate" ng-include="template.url"></div>
	       </div>
	     </div>
	    </file>
	    <file name="script.js">
	      angular.module('includeExample', ['ngAnimate'])
	        .controller('ExampleController', ['$scope', function($scope) {
	          $scope.templates =
	            [ { name: 'template1.html', url: 'template1.html'},
	              { name: 'template2.html', url: 'template2.html'} ];
	          $scope.template = $scope.templates[0];
	        }]);
	     </file>
	    <file name="template1.html">
	      Content of template1.html
	    </file>
	    <file name="template2.html">
	      Content of template2.html
	    </file>
	    <file name="animations.css">
	      .slide-animate-container {
	        position:relative;
	        background:white;
	        border:1px solid black;
	        height:40px;
	        overflow:hidden;
	      }
	
	      .slide-animate {
	        padding:10px;
	      }
	
	      .slide-animate.ng-enter, .slide-animate.ng-leave {
	        transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;
	
	        position:absolute;
	        top:0;
	        left:0;
	        right:0;
	        bottom:0;
	        display:block;
	        padding:10px;
	      }
	
	      .slide-animate.ng-enter {
	        top:-50px;
	      }
	      .slide-animate.ng-enter.ng-enter-active {
	        top:0;
	      }
	
	      .slide-animate.ng-leave {
	        top:0;
	      }
	      .slide-animate.ng-leave.ng-leave-active {
	        top:50px;
	      }
	    </file>
	    <file name="protractor.js" type="protractor">
	      var templateSelect = element(by.model('template'));
	      var includeElem = element(by.css('[ng-include]'));
	
	      it('should load template1.html', function() {
	        expect(includeElem.getText()).toMatch(/Content of template1.html/);
	      });
	
	      it('should load template2.html', function() {
	        if (browser.params.browser == 'firefox') {
	          // Firefox can't handle using selects
	          // See https://github.com/angular/protractor/issues/480
	          return;
	        }
	        templateSelect.click();
	        templateSelect.all(by.css('option')).get(2).click();
	        expect(includeElem.getText()).toMatch(/Content of template2.html/);
	      });
	
	      it('should change to blank', function() {
	        if (browser.params.browser == 'firefox') {
	          // Firefox can't handle using selects
	          return;
	        }
	        templateSelect.click();
	        templateSelect.all(by.css('option')).get(0).click();
	        expect(includeElem.isPresent()).toBe(false);
	      });
	    </file>
	  </example>
	 */
	
	
	/**
	 * @ngdoc event
	 * @name ngInclude#$includeContentRequested
	 * @eventType emit on the scope ngInclude was declared in
	 * @description
	 * Emitted every time the ngInclude content is requested.
	 *
	 * @param {Object} angularEvent Synthetic event object.
	 * @param {String} src URL of content to load.
	 */
	
	
	/**
	 * @ngdoc event
	 * @name ngInclude#$includeContentLoaded
	 * @eventType emit on the current ngInclude scope
	 * @description
	 * Emitted every time the ngInclude content is reloaded.
	 *
	 * @param {Object} angularEvent Synthetic event object.
	 * @param {String} src URL of content to load.
	 */
	
	
	/**
	 * @ngdoc event
	 * @name ngInclude#$includeContentError
	 * @eventType emit on the scope ngInclude was declared in
	 * @description
	 * Emitted when a template HTTP request yields an erroneous response (status < 200 || status > 299)
	 *
	 * @param {Object} angularEvent Synthetic event object.
	 * @param {String} src URL of content to load.
	 */
	var ngIncludeDirective = ['$templateRequest', '$anchorScroll', '$animate',
	                  function($templateRequest,   $anchorScroll,   $animate) {
	  return {
	    restrict: 'ECA',
	    priority: 400,
	    terminal: true,
	    transclude: 'element',
	    controller: angular.noop,
	    compile: function(element, attr) {
	      var srcExp = attr.ngInclude || attr.src,
	          onloadExp = attr.onload || '',
	          autoScrollExp = attr.autoscroll;
	
	      return function(scope, $element, $attr, ctrl, $transclude) {
	        var changeCounter = 0,
	            currentScope,
	            previousElement,
	            currentElement;
	
	        var cleanupLastIncludeContent = function() {
	          if (previousElement) {
	            previousElement.remove();
	            previousElement = null;
	          }
	          if (currentScope) {
	            currentScope.$destroy();
	            currentScope = null;
	          }
	          if (currentElement) {
	            $animate.leave(currentElement).then(function() {
	              previousElement = null;
	            });
	            previousElement = currentElement;
	            currentElement = null;
	          }
	        };
	
	        scope.$watch(srcExp, function ngIncludeWatchAction(src) {
	          var afterAnimation = function() {
	            if (isDefined(autoScrollExp) && (!autoScrollExp || scope.$eval(autoScrollExp))) {
	              $anchorScroll();
	            }
	          };
	          var thisChangeId = ++changeCounter;
	
	          if (src) {
	            //set the 2nd param to true to ignore the template request error so that the inner
	            //contents and scope can be cleaned up.
	            $templateRequest(src, true).then(function(response) {
	              if (scope.$$destroyed) return;
	
	              if (thisChangeId !== changeCounter) return;
	              var newScope = scope.$new();
	              ctrl.template = response;
	
	              // Note: This will also link all children of ng-include that were contained in the original
	              // html. If that content contains controllers, ... they could pollute/change the scope.
	              // However, using ng-include on an element with additional content does not make sense...
	              // Note: We can't remove them in the cloneAttchFn of $transclude as that
	              // function is called before linking the content, which would apply child
	              // directives to non existing elements.
	              var clone = $transclude(newScope, function(clone) {
	                cleanupLastIncludeContent();
	                $animate.enter(clone, null, $element).then(afterAnimation);
	              });
	
	              currentScope = newScope;
	              currentElement = clone;
	
	              currentScope.$emit('$includeContentLoaded', src);
	              scope.$eval(onloadExp);
	            }, function() {
	              if (scope.$$destroyed) return;
	
	              if (thisChangeId === changeCounter) {
	                cleanupLastIncludeContent();
	                scope.$emit('$includeContentError', src);
	              }
	            });
	            scope.$emit('$includeContentRequested', src);
	          } else {
	            cleanupLastIncludeContent();
	            ctrl.template = null;
	          }
	        });
	      };
	    }
	  };
	}];
	
	// This directive is called during the $transclude call of the first `ngInclude` directive.
	// It will replace and compile the content of the element with the loaded template.
	// We need this directive so that the element content is already filled when
	// the link function of another directive on the same element as ngInclude
	// is called.
	var ngIncludeFillContentDirective = ['$compile',
	  function($compile) {
	    return {
	      restrict: 'ECA',
	      priority: -400,
	      require: 'ngInclude',
	      link: function(scope, $element, $attr, ctrl) {
	        if (toString.call($element[0]).match(/SVG/)) {
	          // WebKit: https://bugs.webkit.org/show_bug.cgi?id=135698 --- SVG elements do not
	          // support innerHTML, so detect this here and try to generate the contents
	          // specially.
	          $element.empty();
	          $compile(jqLiteBuildFragment(ctrl.template, window.document).childNodes)(scope,
	              function namespaceAdaptedClone(clone) {
	            $element.append(clone);
	          }, {futureParentElement: $element});
	          return;
	        }
	
	        $element.html(ctrl.template);
	        $compile($element.contents())(scope);
	      }
	    };
	  }];
	
	/**
	 * @ngdoc directive
	 * @name ngInit
	 * @restrict AC
	 *
	 * @description
	 * The `ngInit` directive allows you to evaluate an expression in the
	 * current scope.
	 *
	 * <div class="alert alert-danger">
	 * This directive can be abused to add unnecessary amounts of logic into your templates.
	 * There are only a few appropriate uses of `ngInit`, such as for aliasing special properties of
	 * {@link ng.directive:ngRepeat `ngRepeat`}, as seen in the demo below; and for injecting data via
	 * server side scripting. Besides these few cases, you should use {@link guide/controller controllers}
	 * rather than `ngInit` to initialize values on a scope.
	 * </div>
	 *
	 * <div class="alert alert-warning">
	 * **Note**: If you have assignment in `ngInit` along with a {@link ng.$filter `filter`}, make
	 * sure you have parentheses to ensure correct operator precedence:
	 * <pre class="prettyprint">
	 * `<div ng-init="test1 = ($index | toString)"></div>`
	 * </pre>
	 * </div>
	 *
	 * @priority 450
	 *
	 * @element ANY
	 * @param {expression} ngInit {@link guide/expression Expression} to eval.
	 *
	 * @example
	   <example module="initExample">
	     <file name="index.html">
	   <script>
	     angular.module('initExample', [])
	       .controller('ExampleController', ['$scope', function($scope) {
	         $scope.list = [['a', 'b'], ['c', 'd']];
	       }]);
	   </script>
	   <div ng-controller="ExampleController">
	     <div ng-repeat="innerList in list" ng-init="outerIndex = $index">
	       <div ng-repeat="value in innerList" ng-init="innerIndex = $index">
	          <span class="example-init">list[ {{outerIndex}} ][ {{innerIndex}} ] = {{value}};</span>
	       </div>
	     </div>
	   </div>
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should alias index positions', function() {
	         var elements = element.all(by.css('.example-init'));
	         expect(elements.get(0).getText()).toBe('list[ 0 ][ 0 ] = a;');
	         expect(elements.get(1).getText()).toBe('list[ 0 ][ 1 ] = b;');
	         expect(elements.get(2).getText()).toBe('list[ 1 ][ 0 ] = c;');
	         expect(elements.get(3).getText()).toBe('list[ 1 ][ 1 ] = d;');
	       });
	     </file>
	   </example>
	 */
	var ngInitDirective = ngDirective({
	  priority: 450,
	  compile: function() {
	    return {
	      pre: function(scope, element, attrs) {
	        scope.$eval(attrs.ngInit);
	      }
	    };
	  }
	});
	
	/**
	 * @ngdoc directive
	 * @name ngList
	 *
	 * @description
	 * Text input that converts between a delimited string and an array of strings. The default
	 * delimiter is a comma followed by a space - equivalent to `ng-list=", "`. You can specify a custom
	 * delimiter as the value of the `ngList` attribute - for example, `ng-list=" | "`.
	 *
	 * The behaviour of the directive is affected by the use of the `ngTrim` attribute.
	 * * If `ngTrim` is set to `"false"` then whitespace around both the separator and each
	 *   list item is respected. This implies that the user of the directive is responsible for
	 *   dealing with whitespace but also allows you to use whitespace as a delimiter, such as a
	 *   tab or newline character.
	 * * Otherwise whitespace around the delimiter is ignored when splitting (although it is respected
	 *   when joining the list items back together) and whitespace around each list item is stripped
	 *   before it is added to the model.
	 *
	 * ### Example with Validation
	 *
	 * <example name="ngList-directive" module="listExample">
	 *   <file name="app.js">
	 *      angular.module('listExample', [])
	 *        .controller('ExampleController', ['$scope', function($scope) {
	 *          $scope.names = ['morpheus', 'neo', 'trinity'];
	 *        }]);
	 *   </file>
	 *   <file name="index.html">
	 *    <form name="myForm" ng-controller="ExampleController">
	 *      <label>List: <input name="namesInput" ng-model="names" ng-list required></label>
	 *      <span role="alert">
	 *        <span class="error" ng-show="myForm.namesInput.$error.required">
	 *        Required!</span>
	 *      </span>
	 *      <br>
	 *      <tt>names = {{names}}</tt><br/>
	 *      <tt>myForm.namesInput.$valid = {{myForm.namesInput.$valid}}</tt><br/>
	 *      <tt>myForm.namesInput.$error = {{myForm.namesInput.$error}}</tt><br/>
	 *      <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
	 *      <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
	 *     </form>
	 *   </file>
	 *   <file name="protractor.js" type="protractor">
	 *     var listInput = element(by.model('names'));
	 *     var names = element(by.exactBinding('names'));
	 *     var valid = element(by.binding('myForm.namesInput.$valid'));
	 *     var error = element(by.css('span.error'));
	 *
	 *     it('should initialize to model', function() {
	 *       expect(names.getText()).toContain('["morpheus","neo","trinity"]');
	 *       expect(valid.getText()).toContain('true');
	 *       expect(error.getCssValue('display')).toBe('none');
	 *     });
	 *
	 *     it('should be invalid if empty', function() {
	 *       listInput.clear();
	 *       listInput.sendKeys('');
	 *
	 *       expect(names.getText()).toContain('');
	 *       expect(valid.getText()).toContain('false');
	 *       expect(error.getCssValue('display')).not.toBe('none');
	 *     });
	 *   </file>
	 * </example>
	 *
	 * ### Example - splitting on newline
	 * <example name="ngList-directive-newlines">
	 *   <file name="index.html">
	 *    <textarea ng-model="list" ng-list="&#10;" ng-trim="false"></textarea>
	 *    <pre>{{ list | json }}</pre>
	 *   </file>
	 *   <file name="protractor.js" type="protractor">
	 *     it("should split the text by newlines", function() {
	 *       var listInput = element(by.model('list'));
	 *       var output = element(by.binding('list | json'));
	 *       listInput.sendKeys('abc\ndef\nghi');
	 *       expect(output.getText()).toContain('[\n  "abc",\n  "def",\n  "ghi"\n]');
	 *     });
	 *   </file>
	 * </example>
	 *
	 * @element input
	 * @param {string=} ngList optional delimiter that should be used to split the value.
	 */
	var ngListDirective = function() {
	  return {
	    restrict: 'A',
	    priority: 100,
	    require: 'ngModel',
	    link: function(scope, element, attr, ctrl) {
	      // We want to control whitespace trimming so we use this convoluted approach
	      // to access the ngList attribute, which doesn't pre-trim the attribute
	      var ngList = element.attr(attr.$attr.ngList) || ', ';
	      var trimValues = attr.ngTrim !== 'false';
	      var separator = trimValues ? trim(ngList) : ngList;
	
	      var parse = function(viewValue) {
	        // If the viewValue is invalid (say required but empty) it will be `undefined`
	        if (isUndefined(viewValue)) return;
	
	        var list = [];
	
	        if (viewValue) {
	          forEach(viewValue.split(separator), function(value) {
	            if (value) list.push(trimValues ? trim(value) : value);
	          });
	        }
	
	        return list;
	      };
	
	      ctrl.$parsers.push(parse);
	      ctrl.$formatters.push(function(value) {
	        if (isArray(value)) {
	          return value.join(ngList);
	        }
	
	        return undefined;
	      });
	
	      // Override the standard $isEmpty because an empty array means the input is empty.
	      ctrl.$isEmpty = function(value) {
	        return !value || !value.length;
	      };
	    }
	  };
	};
	
	/* global VALID_CLASS: true,
	  INVALID_CLASS: true,
	  PRISTINE_CLASS: true,
	  DIRTY_CLASS: true,
	  UNTOUCHED_CLASS: true,
	  TOUCHED_CLASS: true,
	*/
	
	var VALID_CLASS = 'ng-valid',
	    INVALID_CLASS = 'ng-invalid',
	    PRISTINE_CLASS = 'ng-pristine',
	    DIRTY_CLASS = 'ng-dirty',
	    UNTOUCHED_CLASS = 'ng-untouched',
	    TOUCHED_CLASS = 'ng-touched',
	    PENDING_CLASS = 'ng-pending',
	    EMPTY_CLASS = 'ng-empty',
	    NOT_EMPTY_CLASS = 'ng-not-empty';
	
	var ngModelMinErr = minErr('ngModel');
	
	/**
	 * @ngdoc type
	 * @name ngModel.NgModelController
	 *
	 * @property {*} $viewValue The actual value from the control's view. For `input` elements, this is a
	 * String. See {@link ngModel.NgModelController#$setViewValue} for information about when the $viewValue
	 * is set.
	 * @property {*} $modelValue The value in the model that the control is bound to.
	 * @property {Array.<Function>} $parsers Array of functions to execute, as a pipeline, whenever
	       the control reads value from the DOM. The functions are called in array order, each passing
	       its return value through to the next. The last return value is forwarded to the
	       {@link ngModel.NgModelController#$validators `$validators`} collection.
	
	Parsers are used to sanitize / convert the {@link ngModel.NgModelController#$viewValue
	`$viewValue`}.
	
	Returning `undefined` from a parser means a parse error occurred. In that case,
	no {@link ngModel.NgModelController#$validators `$validators`} will run and the `ngModel`
	will be set to `undefined` unless {@link ngModelOptions `ngModelOptions.allowInvalid`}
	is set to `true`. The parse error is stored in `ngModel.$error.parse`.
	
	 *
	 * @property {Array.<Function>} $formatters Array of functions to execute, as a pipeline, whenever
	       the model value changes. The functions are called in reverse array order, each passing the value through to the
	       next. The last return value is used as the actual DOM value.
	       Used to format / convert values for display in the control.
	 * ```js
	 * function formatter(value) {
	 *   if (value) {
	 *     return value.toUpperCase();
	 *   }
	 * }
	 * ngModel.$formatters.push(formatter);
	 * ```
	 *
	 * @property {Object.<string, function>} $validators A collection of validators that are applied
	 *      whenever the model value changes. The key value within the object refers to the name of the
	 *      validator while the function refers to the validation operation. The validation operation is
	 *      provided with the model value as an argument and must return a true or false value depending
	 *      on the response of that validation.
	 *
	 * ```js
	 * ngModel.$validators.validCharacters = function(modelValue, viewValue) {
	 *   var value = modelValue || viewValue;
	 *   return /[0-9]+/.test(value) &&
	 *          /[a-z]+/.test(value) &&
	 *          /[A-Z]+/.test(value) &&
	 *          /\W+/.test(value);
	 * };
	 * ```
	 *
	 * @property {Object.<string, function>} $asyncValidators A collection of validations that are expected to
	 *      perform an asynchronous validation (e.g. a HTTP request). The validation function that is provided
	 *      is expected to return a promise when it is run during the model validation process. Once the promise
	 *      is delivered then the validation status will be set to true when fulfilled and false when rejected.
	 *      When the asynchronous validators are triggered, each of the validators will run in parallel and the model
	 *      value will only be updated once all validators have been fulfilled. As long as an asynchronous validator
	 *      is unfulfilled, its key will be added to the controllers `$pending` property. Also, all asynchronous validators
	 *      will only run once all synchronous validators have passed.
	 *
	 * Please note that if $http is used then it is important that the server returns a success HTTP response code
	 * in order to fulfill the validation and a status level of `4xx` in order to reject the validation.
	 *
	 * ```js
	 * ngModel.$asyncValidators.uniqueUsername = function(modelValue, viewValue) {
	 *   var value = modelValue || viewValue;
	 *
	 *   // Lookup user by username
	 *   return $http.get('/api/users/' + value).
	 *      then(function resolved() {
	 *        //username exists, this means validation fails
	 *        return $q.reject('exists');
	 *      }, function rejected() {
	 *        //username does not exist, therefore this validation passes
	 *        return true;
	 *      });
	 * };
	 * ```
	 *
	 * @property {Array.<Function>} $viewChangeListeners Array of functions to execute whenever the
	 *     view value has changed. It is called with no arguments, and its return value is ignored.
	 *     This can be used in place of additional $watches against the model value.
	 *
	 * @property {Object} $error An object hash with all failing validator ids as keys.
	 * @property {Object} $pending An object hash with all pending validator ids as keys.
	 *
	 * @property {boolean} $untouched True if control has not lost focus yet.
	 * @property {boolean} $touched True if control has lost focus.
	 * @property {boolean} $pristine True if user has not interacted with the control yet.
	 * @property {boolean} $dirty True if user has already interacted with the control.
	 * @property {boolean} $valid True if there is no error.
	 * @property {boolean} $invalid True if at least one error on the control.
	 * @property {string} $name The name attribute of the control.
	 *
	 * @description
	 *
	 * `NgModelController` provides API for the {@link ngModel `ngModel`} directive.
	 * The controller contains services for data-binding, validation, CSS updates, and value formatting
	 * and parsing. It purposefully does not contain any logic which deals with DOM rendering or
	 * listening to DOM events.
	 * Such DOM related logic should be provided by other directives which make use of
	 * `NgModelController` for data-binding to control elements.
	 * Angular provides this DOM logic for most {@link input `input`} elements.
	 * At the end of this page you can find a {@link ngModel.NgModelController#custom-control-example
	 * custom control example} that uses `ngModelController` to bind to `contenteditable` elements.
	 *
	 * @example
	 * ### Custom Control Example
	 * This example shows how to use `NgModelController` with a custom control to achieve
	 * data-binding. Notice how different directives (`contenteditable`, `ng-model`, and `required`)
	 * collaborate together to achieve the desired result.
	 *
	 * `contenteditable` is an HTML5 attribute, which tells the browser to let the element
	 * contents be edited in place by the user.
	 *
	 * We are using the {@link ng.service:$sce $sce} service here and include the {@link ngSanitize $sanitize}
	 * module to automatically remove "bad" content like inline event listener (e.g. `<span onclick="...">`).
	 * However, as we are using `$sce` the model can still decide to provide unsafe content if it marks
	 * that content using the `$sce` service.
	 *
	 * <example name="NgModelController" module="customControl" deps="angular-sanitize.js">
	    <file name="style.css">
	      [contenteditable] {
	        border: 1px solid black;
	        background-color: white;
	        min-height: 20px;
	      }
	
	      .ng-invalid {
	        border: 1px solid red;
	      }
	
	    </file>
	    <file name="script.js">
	      angular.module('customControl', ['ngSanitize']).
	        directive('contenteditable', ['$sce', function($sce) {
	          return {
	            restrict: 'A', // only activate on element attribute
	            require: '?ngModel', // get a hold of NgModelController
	            link: function(scope, element, attrs, ngModel) {
	              if (!ngModel) return; // do nothing if no ng-model
	
	              // Specify how UI should be updated
	              ngModel.$render = function() {
	                element.html($sce.getTrustedHtml(ngModel.$viewValue || ''));
	              };
	
	              // Listen for change events to enable binding
	              element.on('blur keyup change', function() {
	                scope.$evalAsync(read);
	              });
	              read(); // initialize
	
	              // Write data to the model
	              function read() {
	                var html = element.html();
	                // When we clear the content editable the browser leaves a <br> behind
	                // If strip-br attribute is provided then we strip this out
	                if ( attrs.stripBr && html == '<br>' ) {
	                  html = '';
	                }
	                ngModel.$setViewValue(html);
	              }
	            }
	          };
	        }]);
	    </file>
	    <file name="index.html">
	      <form name="myForm">
	       <div contenteditable
	            name="myWidget" ng-model="userContent"
	            strip-br="true"
	            required>Change me!</div>
	        <span ng-show="myForm.myWidget.$error.required">Required!</span>
	       <hr>
	       <textarea ng-model="userContent" aria-label="Dynamic textarea"></textarea>
	      </form>
	    </file>
	    <file name="protractor.js" type="protractor">
	    it('should data-bind and become invalid', function() {
	      if (browser.params.browser == 'safari' || browser.params.browser == 'firefox') {
	        // SafariDriver can't handle contenteditable
	        // and Firefox driver can't clear contenteditables very well
	        return;
	      }
	      var contentEditable = element(by.css('[contenteditable]'));
	      var content = 'Change me!';
	
	      expect(contentEditable.getText()).toEqual(content);
	
	      contentEditable.clear();
	      contentEditable.sendKeys(protractor.Key.BACK_SPACE);
	      expect(contentEditable.getText()).toEqual('');
	      expect(contentEditable.getAttribute('class')).toMatch(/ng-invalid-required/);
	    });
	    </file>
	 * </example>
	 *
	 *
	 */
	var NgModelController = ['$scope', '$exceptionHandler', '$attrs', '$element', '$parse', '$animate', '$timeout', '$rootScope', '$q', '$interpolate',
	    function($scope, $exceptionHandler, $attr, $element, $parse, $animate, $timeout, $rootScope, $q, $interpolate) {
	  this.$viewValue = Number.NaN;
	  this.$modelValue = Number.NaN;
	  this.$$rawModelValue = undefined; // stores the parsed modelValue / model set from scope regardless of validity.
	  this.$validators = {};
	  this.$asyncValidators = {};
	  this.$parsers = [];
	  this.$formatters = [];
	  this.$viewChangeListeners = [];
	  this.$untouched = true;
	  this.$touched = false;
	  this.$pristine = true;
	  this.$dirty = false;
	  this.$valid = true;
	  this.$invalid = false;
	  this.$error = {}; // keep invalid keys here
	  this.$$success = {}; // keep valid keys here
	  this.$pending = undefined; // keep pending keys here
	  this.$name = $interpolate($attr.name || '', false)($scope);
	  this.$$parentForm = nullFormCtrl;
	
	  var parsedNgModel = $parse($attr.ngModel),
	      parsedNgModelAssign = parsedNgModel.assign,
	      ngModelGet = parsedNgModel,
	      ngModelSet = parsedNgModelAssign,
	      pendingDebounce = null,
	      parserValid,
	      ctrl = this;
	
	  this.$$setOptions = function(options) {
	    ctrl.$options = options;
	    if (options && options.getterSetter) {
	      var invokeModelGetter = $parse($attr.ngModel + '()'),
	          invokeModelSetter = $parse($attr.ngModel + '($$$p)');
	
	      ngModelGet = function($scope) {
	        var modelValue = parsedNgModel($scope);
	        if (isFunction(modelValue)) {
	          modelValue = invokeModelGetter($scope);
	        }
	        return modelValue;
	      };
	      ngModelSet = function($scope, newValue) {
	        if (isFunction(parsedNgModel($scope))) {
	          invokeModelSetter($scope, {$$$p: newValue});
	        } else {
	          parsedNgModelAssign($scope, newValue);
	        }
	      };
	    } else if (!parsedNgModel.assign) {
	      throw ngModelMinErr('nonassign', "Expression '{0}' is non-assignable. Element: {1}",
	          $attr.ngModel, startingTag($element));
	    }
	  };
	
	  /**
	   * @ngdoc method
	   * @name ngModel.NgModelController#$render
	   *
	   * @description
	   * Called when the view needs to be updated. It is expected that the user of the ng-model
	   * directive will implement this method.
	   *
	   * The `$render()` method is invoked in the following situations:
	   *
	   * * `$rollbackViewValue()` is called.  If we are rolling back the view value to the last
	   *   committed value then `$render()` is called to update the input control.
	   * * The value referenced by `ng-model` is changed programmatically and both the `$modelValue` and
	   *   the `$viewValue` are different from last time.
	   *
	   * Since `ng-model` does not do a deep watch, `$render()` is only invoked if the values of
	   * `$modelValue` and `$viewValue` are actually different from their previous values. If `$modelValue`
	   * or `$viewValue` are objects (rather than a string or number) then `$render()` will not be
	   * invoked if you only change a property on the objects.
	   */
	  this.$render = noop;
	
	  /**
	   * @ngdoc method
	   * @name ngModel.NgModelController#$isEmpty
	   *
	   * @description
	   * This is called when we need to determine if the value of an input is empty.
	   *
	   * For instance, the required directive does this to work out if the input has data or not.
	   *
	   * The default `$isEmpty` function checks whether the value is `undefined`, `''`, `null` or `NaN`.
	   *
	   * You can override this for input directives whose concept of being empty is different from the
	   * default. The `checkboxInputType` directive does this because in its case a value of `false`
	   * implies empty.
	   *
	   * @param {*} value The value of the input to check for emptiness.
	   * @returns {boolean} True if `value` is "empty".
	   */
	  this.$isEmpty = function(value) {
	    return isUndefined(value) || value === '' || value === null || value !== value;
	  };
	
	  this.$$updateEmptyClasses = function(value) {
	    if (ctrl.$isEmpty(value)) {
	      $animate.removeClass($element, NOT_EMPTY_CLASS);
	      $animate.addClass($element, EMPTY_CLASS);
	    } else {
	      $animate.removeClass($element, EMPTY_CLASS);
	      $animate.addClass($element, NOT_EMPTY_CLASS);
	    }
	  };
	
	
	  var currentValidationRunId = 0;
	
	  /**
	   * @ngdoc method
	   * @name ngModel.NgModelController#$setValidity
	   *
	   * @description
	   * Change the validity state, and notify the form.
	   *
	   * This method can be called within $parsers/$formatters or a custom validation implementation.
	   * However, in most cases it should be sufficient to use the `ngModel.$validators` and
	   * `ngModel.$asyncValidators` collections which will call `$setValidity` automatically.
	   *
	   * @param {string} validationErrorKey Name of the validator. The `validationErrorKey` will be assigned
	   *        to either `$error[validationErrorKey]` or `$pending[validationErrorKey]`
	   *        (for unfulfilled `$asyncValidators`), so that it is available for data-binding.
	   *        The `validationErrorKey` should be in camelCase and will get converted into dash-case
	   *        for class name. Example: `myError` will result in `ng-valid-my-error` and `ng-invalid-my-error`
	   *        class and can be bound to as  `{{someForm.someControl.$error.myError}}` .
	   * @param {boolean} isValid Whether the current state is valid (true), invalid (false), pending (undefined),
	   *                          or skipped (null). Pending is used for unfulfilled `$asyncValidators`.
	   *                          Skipped is used by Angular when validators do not run because of parse errors and
	   *                          when `$asyncValidators` do not run because any of the `$validators` failed.
	   */
	  addSetValidityMethod({
	    ctrl: this,
	    $element: $element,
	    set: function(object, property) {
	      object[property] = true;
	    },
	    unset: function(object, property) {
	      delete object[property];
	    },
	    $animate: $animate
	  });
	
	  /**
	   * @ngdoc method
	   * @name ngModel.NgModelController#$setPristine
	   *
	   * @description
	   * Sets the control to its pristine state.
	   *
	   * This method can be called to remove the `ng-dirty` class and set the control to its pristine
	   * state (`ng-pristine` class). A model is considered to be pristine when the control
	   * has not been changed from when first compiled.
	   */
	  this.$setPristine = function() {
	    ctrl.$dirty = false;
	    ctrl.$pristine = true;
	    $animate.removeClass($element, DIRTY_CLASS);
	    $animate.addClass($element, PRISTINE_CLASS);
	  };
	
	  /**
	   * @ngdoc method
	   * @name ngModel.NgModelController#$setDirty
	   *
	   * @description
	   * Sets the control to its dirty state.
	   *
	   * This method can be called to remove the `ng-pristine` class and set the control to its dirty
	   * state (`ng-dirty` class). A model is considered to be dirty when the control has been changed
	   * from when first compiled.
	   */
	  this.$setDirty = function() {
	    ctrl.$dirty = true;
	    ctrl.$pristine = false;
	    $animate.removeClass($element, PRISTINE_CLASS);
	    $animate.addClass($element, DIRTY_CLASS);
	    ctrl.$$parentForm.$setDirty();
	  };
	
	  /**
	   * @ngdoc method
	   * @name ngModel.NgModelController#$setUntouched
	   *
	   * @description
	   * Sets the control to its untouched state.
	   *
	   * This method can be called to remove the `ng-touched` class and set the control to its
	   * untouched state (`ng-untouched` class). Upon compilation, a model is set as untouched
	   * by default, however this function can be used to restore that state if the model has
	   * already been touched by the user.
	   */
	  this.$setUntouched = function() {
	    ctrl.$touched = false;
	    ctrl.$untouched = true;
	    $animate.setClass($element, UNTOUCHED_CLASS, TOUCHED_CLASS);
	  };
	
	  /**
	   * @ngdoc method
	   * @name ngModel.NgModelController#$setTouched
	   *
	   * @description
	   * Sets the control to its touched state.
	   *
	   * This method can be called to remove the `ng-untouched` class and set the control to its
	   * touched state (`ng-touched` class). A model is considered to be touched when the user has
	   * first focused the control element and then shifted focus away from the control (blur event).
	   */
	  this.$setTouched = function() {
	    ctrl.$touched = true;
	    ctrl.$untouched = false;
	    $animate.setClass($element, TOUCHED_CLASS, UNTOUCHED_CLASS);
	  };
	
	  /**
	   * @ngdoc method
	   * @name ngModel.NgModelController#$rollbackViewValue
	   *
	   * @description
	   * Cancel an update and reset the input element's value to prevent an update to the `$modelValue`,
	   * which may be caused by a pending debounced event or because the input is waiting for a some
	   * future event.
	   *
	   * If you have an input that uses `ng-model-options` to set up debounced updates or updates that
	   * depend on special events such as blur, you can have a situation where there is a period when
	   * the `$viewValue` is out of sync with the ngModel's `$modelValue`.
	   *
	   * In this case, you can use `$rollbackViewValue()` to manually cancel the debounced / future update
	   * and reset the input to the last committed view value.
	   *
	   * It is also possible that you run into difficulties if you try to update the ngModel's `$modelValue`
	   * programmatically before these debounced/future events have resolved/occurred, because Angular's
	   * dirty checking mechanism is not able to tell whether the model has actually changed or not.
	   *
	   * The `$rollbackViewValue()` method should be called before programmatically changing the model of an
	   * input which may have such events pending. This is important in order to make sure that the
	   * input field will be updated with the new model value and any pending operations are cancelled.
	   *
	   * <example name="ng-model-cancel-update" module="cancel-update-example">
	   *   <file name="app.js">
	   *     angular.module('cancel-update-example', [])
	   *
	   *     .controller('CancelUpdateController', ['$scope', function($scope) {
	   *       $scope.model = {};
	   *
	   *       $scope.setEmpty = function(e, value, rollback) {
	   *         if (e.keyCode == 27) {
	   *           e.preventDefault();
	   *           if (rollback) {
	   *             $scope.myForm[value].$rollbackViewValue();
	   *           }
	   *           $scope.model[value] = '';
	   *         }
	   *       };
	   *     }]);
	   *   </file>
	   *   <file name="index.html">
	   *     <div ng-controller="CancelUpdateController">
	   *        <p>Both of these inputs are only updated if they are blurred. Hitting escape should
	   *        empty them. Follow these steps and observe the difference:</p>
	   *       <ol>
	   *         <li>Type something in the input. You will see that the model is not yet updated</li>
	   *         <li>Press the Escape key.
	   *           <ol>
	   *             <li> In the first example, nothing happens, because the model is already '', and no
	   *             update is detected. If you blur the input, the model will be set to the current view.
	   *             </li>
	   *             <li> In the second example, the pending update is cancelled, and the input is set back
	   *             to the last committed view value (''). Blurring the input does nothing.
	   *             </li>
	   *           </ol>
	   *         </li>
	   *       </ol>
	   *
	   *       <form name="myForm" ng-model-options="{ updateOn: 'blur' }">
	   *         <div>
	   *        <p id="inputDescription1">Without $rollbackViewValue():</p>
	   *         <input name="value1" aria-describedby="inputDescription1" ng-model="model.value1"
	   *                ng-keydown="setEmpty($event, 'value1')">
	   *         value1: "{{ model.value1 }}"
	   *         </div>
	   *
	   *         <div>
	   *        <p id="inputDescription2">With $rollbackViewValue():</p>
	   *         <input name="value2" aria-describedby="inputDescription2" ng-model="model.value2"
	   *                ng-keydown="setEmpty($event, 'value2', true)">
	   *         value2: "{{ model.value2 }}"
	   *         </div>
	   *       </form>
	   *     </div>
	   *   </file>
	       <file name="style.css">
	          div {
	            display: table-cell;
	          }
	          div:nth-child(1) {
	            padding-right: 30px;
	          }
	
	        </file>
	   * </example>
	   */
	  this.$rollbackViewValue = function() {
	    $timeout.cancel(pendingDebounce);
	    ctrl.$viewValue = ctrl.$$lastCommittedViewValue;
	    ctrl.$render();
	  };
	
	  /**
	   * @ngdoc method
	   * @name ngModel.NgModelController#$validate
	   *
	   * @description
	   * Runs each of the registered validators (first synchronous validators and then
	   * asynchronous validators).
	   * If the validity changes to invalid, the model will be set to `undefined`,
	   * unless {@link ngModelOptions `ngModelOptions.allowInvalid`} is `true`.
	   * If the validity changes to valid, it will set the model to the last available valid
	   * `$modelValue`, i.e. either the last parsed value or the last value set from the scope.
	   */
	  this.$validate = function() {
	    // ignore $validate before model is initialized
	    if (isNumber(ctrl.$modelValue) && isNaN(ctrl.$modelValue)) {
	      return;
	    }
	
	    var viewValue = ctrl.$$lastCommittedViewValue;
	    // Note: we use the $$rawModelValue as $modelValue might have been
	    // set to undefined during a view -> model update that found validation
	    // errors. We can't parse the view here, since that could change
	    // the model although neither viewValue nor the model on the scope changed
	    var modelValue = ctrl.$$rawModelValue;
	
	    var prevValid = ctrl.$valid;
	    var prevModelValue = ctrl.$modelValue;
	
	    var allowInvalid = ctrl.$options && ctrl.$options.allowInvalid;
	
	    ctrl.$$runValidators(modelValue, viewValue, function(allValid) {
	      // If there was no change in validity, don't update the model
	      // This prevents changing an invalid modelValue to undefined
	      if (!allowInvalid && prevValid !== allValid) {
	        // Note: Don't check ctrl.$valid here, as we could have
	        // external validators (e.g. calculated on the server),
	        // that just call $setValidity and need the model value
	        // to calculate their validity.
	        ctrl.$modelValue = allValid ? modelValue : undefined;
	
	        if (ctrl.$modelValue !== prevModelValue) {
	          ctrl.$$writeModelToScope();
	        }
	      }
	    });
	
	  };
	
	  this.$$runValidators = function(modelValue, viewValue, doneCallback) {
	    currentValidationRunId++;
	    var localValidationRunId = currentValidationRunId;
	
	    // check parser error
	    if (!processParseErrors()) {
	      validationDone(false);
	      return;
	    }
	    if (!processSyncValidators()) {
	      validationDone(false);
	      return;
	    }
	    processAsyncValidators();
	
	    function processParseErrors() {
	      var errorKey = ctrl.$$parserName || 'parse';
	      if (isUndefined(parserValid)) {
	        setValidity(errorKey, null);
	      } else {
	        if (!parserValid) {
	          forEach(ctrl.$validators, function(v, name) {
	            setValidity(name, null);
	          });
	          forEach(ctrl.$asyncValidators, function(v, name) {
	            setValidity(name, null);
	          });
	        }
	        // Set the parse error last, to prevent unsetting it, should a $validators key == parserName
	        setValidity(errorKey, parserValid);
	        return parserValid;
	      }
	      return true;
	    }
	
	    function processSyncValidators() {
	      var syncValidatorsValid = true;
	      forEach(ctrl.$validators, function(validator, name) {
	        var result = validator(modelValue, viewValue);
	        syncValidatorsValid = syncValidatorsValid && result;
	        setValidity(name, result);
	      });
	      if (!syncValidatorsValid) {
	        forEach(ctrl.$asyncValidators, function(v, name) {
	          setValidity(name, null);
	        });
	        return false;
	      }
	      return true;
	    }
	
	    function processAsyncValidators() {
	      var validatorPromises = [];
	      var allValid = true;
	      forEach(ctrl.$asyncValidators, function(validator, name) {
	        var promise = validator(modelValue, viewValue);
	        if (!isPromiseLike(promise)) {
	          throw ngModelMinErr('nopromise',
	            "Expected asynchronous validator to return a promise but got '{0}' instead.", promise);
	        }
	        setValidity(name, undefined);
	        validatorPromises.push(promise.then(function() {
	          setValidity(name, true);
	        }, function() {
	          allValid = false;
	          setValidity(name, false);
	        }));
	      });
	      if (!validatorPromises.length) {
	        validationDone(true);
	      } else {
	        $q.all(validatorPromises).then(function() {
	          validationDone(allValid);
	        }, noop);
	      }
	    }
	
	    function setValidity(name, isValid) {
	      if (localValidationRunId === currentValidationRunId) {
	        ctrl.$setValidity(name, isValid);
	      }
	    }
	
	    function validationDone(allValid) {
	      if (localValidationRunId === currentValidationRunId) {
	
	        doneCallback(allValid);
	      }
	    }
	  };
	
	  /**
	   * @ngdoc method
	   * @name ngModel.NgModelController#$commitViewValue
	   *
	   * @description
	   * Commit a pending update to the `$modelValue`.
	   *
	   * Updates may be pending by a debounced event or because the input is waiting for a some future
	   * event defined in `ng-model-options`. this method is rarely needed as `NgModelController`
	   * usually handles calling this in response to input events.
	   */
	  this.$commitViewValue = function() {
	    var viewValue = ctrl.$viewValue;
	
	    $timeout.cancel(pendingDebounce);
	
	    // If the view value has not changed then we should just exit, except in the case where there is
	    // a native validator on the element. In this case the validation state may have changed even though
	    // the viewValue has stayed empty.
	    if (ctrl.$$lastCommittedViewValue === viewValue && (viewValue !== '' || !ctrl.$$hasNativeValidators)) {
	      return;
	    }
	    ctrl.$$updateEmptyClasses(viewValue);
	    ctrl.$$lastCommittedViewValue = viewValue;
	
	    // change to dirty
	    if (ctrl.$pristine) {
	      this.$setDirty();
	    }
	    this.$$parseAndValidate();
	  };
	
	  this.$$parseAndValidate = function() {
	    var viewValue = ctrl.$$lastCommittedViewValue;
	    var modelValue = viewValue;
	    parserValid = isUndefined(modelValue) ? undefined : true;
	
	    if (parserValid) {
	      for (var i = 0; i < ctrl.$parsers.length; i++) {
	        modelValue = ctrl.$parsers[i](modelValue);
	        if (isUndefined(modelValue)) {
	          parserValid = false;
	          break;
	        }
	      }
	    }
	    if (isNumber(ctrl.$modelValue) && isNaN(ctrl.$modelValue)) {
	      // ctrl.$modelValue has not been touched yet...
	      ctrl.$modelValue = ngModelGet($scope);
	    }
	    var prevModelValue = ctrl.$modelValue;
	    var allowInvalid = ctrl.$options && ctrl.$options.allowInvalid;
	    ctrl.$$rawModelValue = modelValue;
	
	    if (allowInvalid) {
	      ctrl.$modelValue = modelValue;
	      writeToModelIfNeeded();
	    }
	
	    // Pass the $$lastCommittedViewValue here, because the cached viewValue might be out of date.
	    // This can happen if e.g. $setViewValue is called from inside a parser
	    ctrl.$$runValidators(modelValue, ctrl.$$lastCommittedViewValue, function(allValid) {
	      if (!allowInvalid) {
	        // Note: Don't check ctrl.$valid here, as we could have
	        // external validators (e.g. calculated on the server),
	        // that just call $setValidity and need the model value
	        // to calculate their validity.
	        ctrl.$modelValue = allValid ? modelValue : undefined;
	        writeToModelIfNeeded();
	      }
	    });
	
	    function writeToModelIfNeeded() {
	      if (ctrl.$modelValue !== prevModelValue) {
	        ctrl.$$writeModelToScope();
	      }
	    }
	  };
	
	  this.$$writeModelToScope = function() {
	    ngModelSet($scope, ctrl.$modelValue);
	    forEach(ctrl.$viewChangeListeners, function(listener) {
	      try {
	        listener();
	      } catch (e) {
	        $exceptionHandler(e);
	      }
	    });
	  };
	
	  /**
	   * @ngdoc method
	   * @name ngModel.NgModelController#$setViewValue
	   *
	   * @description
	   * Update the view value.
	   *
	   * This method should be called when a control wants to change the view value; typically,
	   * this is done from within a DOM event handler. For example, the {@link ng.directive:input input}
	   * directive calls it when the value of the input changes and {@link ng.directive:select select}
	   * calls it when an option is selected.
	   *
	   * When `$setViewValue` is called, the new `value` will be staged for committing through the `$parsers`
	   * and `$validators` pipelines. If there are no special {@link ngModelOptions} specified then the staged
	   * value sent directly for processing, finally to be applied to `$modelValue` and then the
	   * **expression** specified in the `ng-model` attribute. Lastly, all the registered change listeners,
	   * in the `$viewChangeListeners` list, are called.
	   *
	   * In case the {@link ng.directive:ngModelOptions ngModelOptions} directive is used with `updateOn`
	   * and the `default` trigger is not listed, all those actions will remain pending until one of the
	   * `updateOn` events is triggered on the DOM element.
	   * All these actions will be debounced if the {@link ng.directive:ngModelOptions ngModelOptions}
	   * directive is used with a custom debounce for this particular event.
	   * Note that a `$digest` is only triggered once the `updateOn` events are fired, or if `debounce`
	   * is specified, once the timer runs out.
	   *
	   * When used with standard inputs, the view value will always be a string (which is in some cases
	   * parsed into another type, such as a `Date` object for `input[date]`.)
	   * However, custom controls might also pass objects to this method. In this case, we should make
	   * a copy of the object before passing it to `$setViewValue`. This is because `ngModel` does not
	   * perform a deep watch of objects, it only looks for a change of identity. If you only change
	   * the property of the object then ngModel will not realize that the object has changed and
	   * will not invoke the `$parsers` and `$validators` pipelines. For this reason, you should
	   * not change properties of the copy once it has been passed to `$setViewValue`.
	   * Otherwise you may cause the model value on the scope to change incorrectly.
	   *
	   * <div class="alert alert-info">
	   * In any case, the value passed to the method should always reflect the current value
	   * of the control. For example, if you are calling `$setViewValue` for an input element,
	   * you should pass the input DOM value. Otherwise, the control and the scope model become
	   * out of sync. It's also important to note that `$setViewValue` does not call `$render` or change
	   * the control's DOM value in any way. If we want to change the control's DOM value
	   * programmatically, we should update the `ngModel` scope expression. Its new value will be
	   * picked up by the model controller, which will run it through the `$formatters`, `$render` it
	   * to update the DOM, and finally call `$validate` on it.
	   * </div>
	   *
	   * @param {*} value value from the view.
	   * @param {string} trigger Event that triggered the update.
	   */
	  this.$setViewValue = function(value, trigger) {
	    ctrl.$viewValue = value;
	    if (!ctrl.$options || ctrl.$options.updateOnDefault) {
	      ctrl.$$debounceViewValueCommit(trigger);
	    }
	  };
	
	  this.$$debounceViewValueCommit = function(trigger) {
	    var debounceDelay = 0,
	        options = ctrl.$options,
	        debounce;
	
	    if (options && isDefined(options.debounce)) {
	      debounce = options.debounce;
	      if (isNumber(debounce)) {
	        debounceDelay = debounce;
	      } else if (isNumber(debounce[trigger])) {
	        debounceDelay = debounce[trigger];
	      } else if (isNumber(debounce['default'])) {
	        debounceDelay = debounce['default'];
	      }
	    }
	
	    $timeout.cancel(pendingDebounce);
	    if (debounceDelay) {
	      pendingDebounce = $timeout(function() {
	        ctrl.$commitViewValue();
	      }, debounceDelay);
	    } else if ($rootScope.$$phase) {
	      ctrl.$commitViewValue();
	    } else {
	      $scope.$apply(function() {
	        ctrl.$commitViewValue();
	      });
	    }
	  };
	
	  // model -> value
	  // Note: we cannot use a normal scope.$watch as we want to detect the following:
	  // 1. scope value is 'a'
	  // 2. user enters 'b'
	  // 3. ng-change kicks in and reverts scope value to 'a'
	  //    -> scope value did not change since the last digest as
	  //       ng-change executes in apply phase
	  // 4. view should be changed back to 'a'
	  $scope.$watch(function ngModelWatch() {
	    var modelValue = ngModelGet($scope);
	
	    // if scope model value and ngModel value are out of sync
	    // TODO(perf): why not move this to the action fn?
	    if (modelValue !== ctrl.$modelValue &&
	       // checks for NaN is needed to allow setting the model to NaN when there's an asyncValidator
	       (ctrl.$modelValue === ctrl.$modelValue || modelValue === modelValue)
	    ) {
	      ctrl.$modelValue = ctrl.$$rawModelValue = modelValue;
	      parserValid = undefined;
	
	      var formatters = ctrl.$formatters,
	          idx = formatters.length;
	
	      var viewValue = modelValue;
	      while (idx--) {
	        viewValue = formatters[idx](viewValue);
	      }
	      if (ctrl.$viewValue !== viewValue) {
	        ctrl.$$updateEmptyClasses(viewValue);
	        ctrl.$viewValue = ctrl.$$lastCommittedViewValue = viewValue;
	        ctrl.$render();
	
	        ctrl.$$runValidators(modelValue, viewValue, noop);
	      }
	    }
	
	    return modelValue;
	  });
	}];
	
	
	/**
	 * @ngdoc directive
	 * @name ngModel
	 *
	 * @element input
	 * @priority 1
	 *
	 * @description
	 * The `ngModel` directive binds an `input`,`select`, `textarea` (or custom form control) to a
	 * property on the scope using {@link ngModel.NgModelController NgModelController},
	 * which is created and exposed by this directive.
	 *
	 * `ngModel` is responsible for:
	 *
	 * - Binding the view into the model, which other directives such as `input`, `textarea` or `select`
	 *   require.
	 * - Providing validation behavior (i.e. required, number, email, url).
	 * - Keeping the state of the control (valid/invalid, dirty/pristine, touched/untouched, validation errors).
	 * - Setting related css classes on the element (`ng-valid`, `ng-invalid`, `ng-dirty`, `ng-pristine`, `ng-touched`,
	 *   `ng-untouched`, `ng-empty`, `ng-not-empty`) including animations.
	 * - Registering the control with its parent {@link ng.directive:form form}.
	 *
	 * Note: `ngModel` will try to bind to the property given by evaluating the expression on the
	 * current scope. If the property doesn't already exist on this scope, it will be created
	 * implicitly and added to the scope.
	 *
	 * For best practices on using `ngModel`, see:
	 *
	 *  - [Understanding Scopes](https://github.com/angular/angular.js/wiki/Understanding-Scopes)
	 *
	 * For basic examples, how to use `ngModel`, see:
	 *
	 *  - {@link ng.directive:input input}
	 *    - {@link input[text] text}
	 *    - {@link input[checkbox] checkbox}
	 *    - {@link input[radio] radio}
	 *    - {@link input[number] number}
	 *    - {@link input[email] email}
	 *    - {@link input[url] url}
	 *    - {@link input[date] date}
	 *    - {@link input[datetime-local] datetime-local}
	 *    - {@link input[time] time}
	 *    - {@link input[month] month}
	 *    - {@link input[week] week}
	 *  - {@link ng.directive:select select}
	 *  - {@link ng.directive:textarea textarea}
	 *
	 * # Complex Models (objects or collections)
	 *
	 * By default, `ngModel` watches the model by reference, not value. This is important to know when
	 * binding inputs to models that are objects (e.g. `Date`) or collections (e.g. arrays). If only properties of the
	 * object or collection change, `ngModel` will not be notified and so the input will not be  re-rendered.
	 *
	 * The model must be assigned an entirely new object or collection before a re-rendering will occur.
	 *
	 * Some directives have options that will cause them to use a custom `$watchCollection` on the model expression
	 * - for example, `ngOptions` will do so when a `track by` clause is included in the comprehension expression or
	 * if the select is given the `multiple` attribute.
	 *
	 * The `$watchCollection()` method only does a shallow comparison, meaning that changing properties deeper than the
	 * first level of the object (or only changing the properties of an item in the collection if it's an array) will still
	 * not trigger a re-rendering of the model.
	 *
	 * # CSS classes
	 * The following CSS classes are added and removed on the associated input/select/textarea element
	 * depending on the validity of the model.
	 *
	 *  - `ng-valid`: the model is valid
	 *  - `ng-invalid`: the model is invalid
	 *  - `ng-valid-[key]`: for each valid key added by `$setValidity`
	 *  - `ng-invalid-[key]`: for each invalid key added by `$setValidity`
	 *  - `ng-pristine`: the control hasn't been interacted with yet
	 *  - `ng-dirty`: the control has been interacted with
	 *  - `ng-touched`: the control has been blurred
	 *  - `ng-untouched`: the control hasn't been blurred
	 *  - `ng-pending`: any `$asyncValidators` are unfulfilled
	 *  - `ng-empty`: the view does not contain a value or the value is deemed "empty", as defined
	 *     by the {@link ngModel.NgModelController#$isEmpty} method
	 *  - `ng-not-empty`: the view contains a non-empty value
	 *
	 * Keep in mind that ngAnimate can detect each of these classes when added and removed.
	 *
	 * ## Animation Hooks
	 *
	 * Animations within models are triggered when any of the associated CSS classes are added and removed
	 * on the input element which is attached to the model. These classes include: `.ng-pristine`, `.ng-dirty`,
	 * `.ng-invalid` and `.ng-valid` as well as any other validations that are performed on the model itself.
	 * The animations that are triggered within ngModel are similar to how they work in ngClass and
	 * animations can be hooked into using CSS transitions, keyframes as well as JS animations.
	 *
	 * The following example shows a simple way to utilize CSS transitions to style an input element
	 * that has been rendered as invalid after it has been validated:
	 *
	 * <pre>
	 * //be sure to include ngAnimate as a module to hook into more
	 * //advanced animations
	 * .my-input {
	 *   transition:0.5s linear all;
	 *   background: white;
	 * }
	 * .my-input.ng-invalid {
	 *   background: red;
	 *   color:white;
	 * }
	 * </pre>
	 *
	 * @example
	 * <example deps="angular-animate.js" animations="true" fixBase="true" module="inputExample">
	     <file name="index.html">
	       <script>
	        angular.module('inputExample', [])
	          .controller('ExampleController', ['$scope', function($scope) {
	            $scope.val = '1';
	          }]);
	       </script>
	       <style>
	         .my-input {
	           transition:all linear 0.5s;
	           background: transparent;
	         }
	         .my-input.ng-invalid {
	           color:white;
	           background: red;
	         }
	       </style>
	       <p id="inputDescription">
	        Update input to see transitions when valid/invalid.
	        Integer is a valid value.
	       </p>
	       <form name="testForm" ng-controller="ExampleController">
	         <input ng-model="val" ng-pattern="/^\d+$/" name="anim" class="my-input"
	                aria-describedby="inputDescription" />
	       </form>
	     </file>
	 * </example>
	 *
	 * ## Binding to a getter/setter
	 *
	 * Sometimes it's helpful to bind `ngModel` to a getter/setter function.  A getter/setter is a
	 * function that returns a representation of the model when called with zero arguments, and sets
	 * the internal state of a model when called with an argument. It's sometimes useful to use this
	 * for models that have an internal representation that's different from what the model exposes
	 * to the view.
	 *
	 * <div class="alert alert-success">
	 * **Best Practice:** It's best to keep getters fast because Angular is likely to call them more
	 * frequently than other parts of your code.
	 * </div>
	 *
	 * You use this behavior by adding `ng-model-options="{ getterSetter: true }"` to an element that
	 * has `ng-model` attached to it. You can also add `ng-model-options="{ getterSetter: true }"` to
	 * a `<form>`, which will enable this behavior for all `<input>`s within it. See
	 * {@link ng.directive:ngModelOptions `ngModelOptions`} for more.
	 *
	 * The following example shows how to use `ngModel` with a getter/setter:
	 *
	 * @example
	 * <example name="ngModel-getter-setter" module="getterSetterExample">
	     <file name="index.html">
	       <div ng-controller="ExampleController">
	         <form name="userForm">
	           <label>Name:
	             <input type="text" name="userName"
	                    ng-model="user.name"
	                    ng-model-options="{ getterSetter: true }" />
	           </label>
	         </form>
	         <pre>user.name = <span ng-bind="user.name()"></span></pre>
	       </div>
	     </file>
	     <file name="app.js">
	       angular.module('getterSetterExample', [])
	         .controller('ExampleController', ['$scope', function($scope) {
	           var _name = 'Brian';
	           $scope.user = {
	             name: function(newName) {
	              // Note that newName can be undefined for two reasons:
	              // 1. Because it is called as a getter and thus called with no arguments
	              // 2. Because the property should actually be set to undefined. This happens e.g. if the
	              //    input is invalid
	              return arguments.length ? (_name = newName) : _name;
	             }
	           };
	         }]);
	     </file>
	 * </example>
	 */
	var ngModelDirective = ['$rootScope', function($rootScope) {
	  return {
	    restrict: 'A',
	    require: ['ngModel', '^?form', '^?ngModelOptions'],
	    controller: NgModelController,
	    // Prelink needs to run before any input directive
	    // so that we can set the NgModelOptions in NgModelController
	    // before anyone else uses it.
	    priority: 1,
	    compile: function ngModelCompile(element) {
	      // Setup initial state of the control
	      element.addClass(PRISTINE_CLASS).addClass(UNTOUCHED_CLASS).addClass(VALID_CLASS);
	
	      return {
	        pre: function ngModelPreLink(scope, element, attr, ctrls) {
	          var modelCtrl = ctrls[0],
	              formCtrl = ctrls[1] || modelCtrl.$$parentForm;
	
	          modelCtrl.$$setOptions(ctrls[2] && ctrls[2].$options);
	
	          // notify others, especially parent forms
	          formCtrl.$addControl(modelCtrl);
	
	          attr.$observe('name', function(newValue) {
	            if (modelCtrl.$name !== newValue) {
	              modelCtrl.$$parentForm.$$renameControl(modelCtrl, newValue);
	            }
	          });
	
	          scope.$on('$destroy', function() {
	            modelCtrl.$$parentForm.$removeControl(modelCtrl);
	          });
	        },
	        post: function ngModelPostLink(scope, element, attr, ctrls) {
	          var modelCtrl = ctrls[0];
	          if (modelCtrl.$options && modelCtrl.$options.updateOn) {
	            element.on(modelCtrl.$options.updateOn, function(ev) {
	              modelCtrl.$$debounceViewValueCommit(ev && ev.type);
	            });
	          }
	
	          element.on('blur', function() {
	            if (modelCtrl.$touched) return;
	
	            if ($rootScope.$$phase) {
	              scope.$evalAsync(modelCtrl.$setTouched);
	            } else {
	              scope.$apply(modelCtrl.$setTouched);
	            }
	          });
	        }
	      };
	    }
	  };
	}];
	
	var DEFAULT_REGEXP = /(\s+|^)default(\s+|$)/;
	
	/**
	 * @ngdoc directive
	 * @name ngModelOptions
	 *
	 * @description
	 * Allows tuning how model updates are done. Using `ngModelOptions` you can specify a custom list of
	 * events that will trigger a model update and/or a debouncing delay so that the actual update only
	 * takes place when a timer expires; this timer will be reset after another change takes place.
	 *
	 * Given the nature of `ngModelOptions`, the value displayed inside input fields in the view might
	 * be different from the value in the actual model. This means that if you update the model you
	 * should also invoke {@link ngModel.NgModelController `$rollbackViewValue`} on the relevant input field in
	 * order to make sure it is synchronized with the model and that any debounced action is canceled.
	 *
	 * The easiest way to reference the control's {@link ngModel.NgModelController `$rollbackViewValue`}
	 * method is by making sure the input is placed inside a form that has a `name` attribute. This is
	 * important because `form` controllers are published to the related scope under the name in their
	 * `name` attribute.
	 *
	 * Any pending changes will take place immediately when an enclosing form is submitted via the
	 * `submit` event. Note that `ngClick` events will occur before the model is updated. Use `ngSubmit`
	 * to have access to the updated model.
	 *
	 * `ngModelOptions` has an effect on the element it's declared on and its descendants.
	 *
	 * @param {Object} ngModelOptions options to apply to the current model. Valid keys are:
	 *   - `updateOn`: string specifying which event should the input be bound to. You can set several
	 *     events using an space delimited list. There is a special event called `default` that
	 *     matches the default events belonging of the control.
	 *   - `debounce`: integer value which contains the debounce model update value in milliseconds. A
	 *     value of 0 triggers an immediate update. If an object is supplied instead, you can specify a
	 *     custom value for each event. For example:
	 *     `ng-model-options="{ updateOn: 'default blur', debounce: { 'default': 500, 'blur': 0 } }"`
	 *   - `allowInvalid`: boolean value which indicates that the model can be set with values that did
	 *     not validate correctly instead of the default behavior of setting the model to undefined.
	 *   - `getterSetter`: boolean value which determines whether or not to treat functions bound to
	       `ngModel` as getters/setters.
	 *   - `timezone`: Defines the timezone to be used to read/write the `Date` instance in the model for
	 *     `<input type="date">`, `<input type="time">`, ... . It understands UTC/GMT and the
	 *     continental US time zone abbreviations, but for general use, use a time zone offset, for
	 *     example, `'+0430'` (4 hours, 30 minutes east of the Greenwich meridian)
	 *     If not specified, the timezone of the browser will be used.
	 *
	 * @example
	
	  The following example shows how to override immediate updates. Changes on the inputs within the
	  form will update the model only when the control loses focus (blur event). If `escape` key is
	  pressed while the input field is focused, the value is reset to the value in the current model.
	
	  <example name="ngModelOptions-directive-blur" module="optionsExample">
	    <file name="index.html">
	      <div ng-controller="ExampleController">
	        <form name="userForm">
	          <label>Name:
	            <input type="text" name="userName"
	                   ng-model="user.name"
	                   ng-model-options="{ updateOn: 'blur' }"
	                   ng-keyup="cancel($event)" />
	          </label><br />
	          <label>Other data:
	            <input type="text" ng-model="user.data" />
	          </label><br />
	        </form>
	        <pre>user.name = <span ng-bind="user.name"></span></pre>
	        <pre>user.data = <span ng-bind="user.data"></span></pre>
	      </div>
	    </file>
	    <file name="app.js">
	      angular.module('optionsExample', [])
	        .controller('ExampleController', ['$scope', function($scope) {
	          $scope.user = { name: 'John', data: '' };
	
	          $scope.cancel = function(e) {
	            if (e.keyCode == 27) {
	              $scope.userForm.userName.$rollbackViewValue();
	            }
	          };
	        }]);
	    </file>
	    <file name="protractor.js" type="protractor">
	      var model = element(by.binding('user.name'));
	      var input = element(by.model('user.name'));
	      var other = element(by.model('user.data'));
	
	      it('should allow custom events', function() {
	        input.sendKeys(' Doe');
	        input.click();
	        expect(model.getText()).toEqual('John');
	        other.click();
	        expect(model.getText()).toEqual('John Doe');
	      });
	
	      it('should $rollbackViewValue when model changes', function() {
	        input.sendKeys(' Doe');
	        expect(input.getAttribute('value')).toEqual('John Doe');
	        input.sendKeys(protractor.Key.ESCAPE);
	        expect(input.getAttribute('value')).toEqual('John');
	        other.click();
	        expect(model.getText()).toEqual('John');
	      });
	    </file>
	  </example>
	
	  This one shows how to debounce model changes. Model will be updated only 1 sec after last change.
	  If the `Clear` button is pressed, any debounced action is canceled and the value becomes empty.
	
	  <example name="ngModelOptions-directive-debounce" module="optionsExample">
	    <file name="index.html">
	      <div ng-controller="ExampleController">
	        <form name="userForm">
	          <label>Name:
	            <input type="text" name="userName"
	                   ng-model="user.name"
	                   ng-model-options="{ debounce: 1000 }" />
	          </label>
	          <button ng-click="userForm.userName.$rollbackViewValue(); user.name=''">Clear</button>
	          <br />
	        </form>
	        <pre>user.name = <span ng-bind="user.name"></span></pre>
	      </div>
	    </file>
	    <file name="app.js">
	      angular.module('optionsExample', [])
	        .controller('ExampleController', ['$scope', function($scope) {
	          $scope.user = { name: 'Igor' };
	        }]);
	    </file>
	  </example>
	
	  This one shows how to bind to getter/setters:
	
	  <example name="ngModelOptions-directive-getter-setter" module="getterSetterExample">
	    <file name="index.html">
	      <div ng-controller="ExampleController">
	        <form name="userForm">
	          <label>Name:
	            <input type="text" name="userName"
	                   ng-model="user.name"
	                   ng-model-options="{ getterSetter: true }" />
	          </label>
	        </form>
	        <pre>user.name = <span ng-bind="user.name()"></span></pre>
	      </div>
	    </file>
	    <file name="app.js">
	      angular.module('getterSetterExample', [])
	        .controller('ExampleController', ['$scope', function($scope) {
	          var _name = 'Brian';
	          $scope.user = {
	            name: function(newName) {
	              // Note that newName can be undefined for two reasons:
	              // 1. Because it is called as a getter and thus called with no arguments
	              // 2. Because the property should actually be set to undefined. This happens e.g. if the
	              //    input is invalid
	              return arguments.length ? (_name = newName) : _name;
	            }
	          };
	        }]);
	    </file>
	  </example>
	 */
	var ngModelOptionsDirective = function() {
	  return {
	    restrict: 'A',
	    controller: ['$scope', '$attrs', function($scope, $attrs) {
	      var that = this;
	      this.$options = copy($scope.$eval($attrs.ngModelOptions));
	      // Allow adding/overriding bound events
	      if (isDefined(this.$options.updateOn)) {
	        this.$options.updateOnDefault = false;
	        // extract "default" pseudo-event from list of events that can trigger a model update
	        this.$options.updateOn = trim(this.$options.updateOn.replace(DEFAULT_REGEXP, function() {
	          that.$options.updateOnDefault = true;
	          return ' ';
	        }));
	      } else {
	        this.$options.updateOnDefault = true;
	      }
	    }]
	  };
	};
	
	
	
	// helper methods
	function addSetValidityMethod(context) {
	  var ctrl = context.ctrl,
	      $element = context.$element,
	      classCache = {},
	      set = context.set,
	      unset = context.unset,
	      $animate = context.$animate;
	
	  classCache[INVALID_CLASS] = !(classCache[VALID_CLASS] = $element.hasClass(VALID_CLASS));
	
	  ctrl.$setValidity = setValidity;
	
	  function setValidity(validationErrorKey, state, controller) {
	    if (isUndefined(state)) {
	      createAndSet('$pending', validationErrorKey, controller);
	    } else {
	      unsetAndCleanup('$pending', validationErrorKey, controller);
	    }
	    if (!isBoolean(state)) {
	      unset(ctrl.$error, validationErrorKey, controller);
	      unset(ctrl.$$success, validationErrorKey, controller);
	    } else {
	      if (state) {
	        unset(ctrl.$error, validationErrorKey, controller);
	        set(ctrl.$$success, validationErrorKey, controller);
	      } else {
	        set(ctrl.$error, validationErrorKey, controller);
	        unset(ctrl.$$success, validationErrorKey, controller);
	      }
	    }
	    if (ctrl.$pending) {
	      cachedToggleClass(PENDING_CLASS, true);
	      ctrl.$valid = ctrl.$invalid = undefined;
	      toggleValidationCss('', null);
	    } else {
	      cachedToggleClass(PENDING_CLASS, false);
	      ctrl.$valid = isObjectEmpty(ctrl.$error);
	      ctrl.$invalid = !ctrl.$valid;
	      toggleValidationCss('', ctrl.$valid);
	    }
	
	    // re-read the state as the set/unset methods could have
	    // combined state in ctrl.$error[validationError] (used for forms),
	    // where setting/unsetting only increments/decrements the value,
	    // and does not replace it.
	    var combinedState;
	    if (ctrl.$pending && ctrl.$pending[validationErrorKey]) {
	      combinedState = undefined;
	    } else if (ctrl.$error[validationErrorKey]) {
	      combinedState = false;
	    } else if (ctrl.$$success[validationErrorKey]) {
	      combinedState = true;
	    } else {
	      combinedState = null;
	    }
	
	    toggleValidationCss(validationErrorKey, combinedState);
	    ctrl.$$parentForm.$setValidity(validationErrorKey, combinedState, ctrl);
	  }
	
	  function createAndSet(name, value, controller) {
	    if (!ctrl[name]) {
	      ctrl[name] = {};
	    }
	    set(ctrl[name], value, controller);
	  }
	
	  function unsetAndCleanup(name, value, controller) {
	    if (ctrl[name]) {
	      unset(ctrl[name], value, controller);
	    }
	    if (isObjectEmpty(ctrl[name])) {
	      ctrl[name] = undefined;
	    }
	  }
	
	  function cachedToggleClass(className, switchValue) {
	    if (switchValue && !classCache[className]) {
	      $animate.addClass($element, className);
	      classCache[className] = true;
	    } else if (!switchValue && classCache[className]) {
	      $animate.removeClass($element, className);
	      classCache[className] = false;
	    }
	  }
	
	  function toggleValidationCss(validationErrorKey, isValid) {
	    validationErrorKey = validationErrorKey ? '-' + snake_case(validationErrorKey, '-') : '';
	
	    cachedToggleClass(VALID_CLASS + validationErrorKey, isValid === true);
	    cachedToggleClass(INVALID_CLASS + validationErrorKey, isValid === false);
	  }
	}
	
	function isObjectEmpty(obj) {
	  if (obj) {
	    for (var prop in obj) {
	      if (obj.hasOwnProperty(prop)) {
	        return false;
	      }
	    }
	  }
	  return true;
	}
	
	/**
	 * @ngdoc directive
	 * @name ngNonBindable
	 * @restrict AC
	 * @priority 1000
	 *
	 * @description
	 * The `ngNonBindable` directive tells Angular not to compile or bind the contents of the current
	 * DOM element. This is useful if the element contains what appears to be Angular directives and
	 * bindings but which should be ignored by Angular. This could be the case if you have a site that
	 * displays snippets of code, for instance.
	 *
	 * @element ANY
	 *
	 * @example
	 * In this example there are two locations where a simple interpolation binding (`{{}}`) is present,
	 * but the one wrapped in `ngNonBindable` is left alone.
	 *
	 * @example
	    <example>
	      <file name="index.html">
	        <div>Normal: {{1 + 2}}</div>
	        <div ng-non-bindable>Ignored: {{1 + 2}}</div>
	      </file>
	      <file name="protractor.js" type="protractor">
	       it('should check ng-non-bindable', function() {
	         expect(element(by.binding('1 + 2')).getText()).toContain('3');
	         expect(element.all(by.css('div')).last().getText()).toMatch(/1 \+ 2/);
	       });
	      </file>
	    </example>
	 */
	var ngNonBindableDirective = ngDirective({ terminal: true, priority: 1000 });
	
	/* global jqLiteRemove */
	
	var ngOptionsMinErr = minErr('ngOptions');
	
	/**
	 * @ngdoc directive
	 * @name ngOptions
	 * @restrict A
	 *
	 * @description
	 *
	 * The `ngOptions` attribute can be used to dynamically generate a list of `<option>`
	 * elements for the `<select>` element using the array or object obtained by evaluating the
	 * `ngOptions` comprehension expression.
	 *
	 * In many cases, `ngRepeat` can be used on `<option>` elements instead of `ngOptions` to achieve a
	 * similar result. However, `ngOptions` provides some benefits such as reducing memory and
	 * increasing speed by not creating a new scope for each repeated instance, as well as providing
	 * more flexibility in how the `<select>`'s model is assigned via the `select` **`as`** part of the
	 * comprehension expression. `ngOptions` should be used when the `<select>` model needs to be bound
	 *  to a non-string value. This is because an option element can only be bound to string values at
	 * present.
	 *
	 * When an item in the `<select>` menu is selected, the array element or object property
	 * represented by the selected option will be bound to the model identified by the `ngModel`
	 * directive.
	 *
	 * Optionally, a single hard-coded `<option>` element, with the value set to an empty string, can
	 * be nested into the `<select>` element. This element will then represent the `null` or "not selected"
	 * option. See example below for demonstration.
	 *
	 * ## Complex Models (objects or collections)
	 *
	 * By default, `ngModel` watches the model by reference, not value. This is important to know when
	 * binding the select to a model that is an object or a collection.
	 *
	 * One issue occurs if you want to preselect an option. For example, if you set
	 * the model to an object that is equal to an object in your collection, `ngOptions` won't be able to set the selection,
	 * because the objects are not identical. So by default, you should always reference the item in your collection
	 * for preselections, e.g.: `$scope.selected = $scope.collection[3]`.
	 *
	 * Another solution is to use a `track by` clause, because then `ngOptions` will track the identity
	 * of the item not by reference, but by the result of the `track by` expression. For example, if your
	 * collection items have an id property, you would `track by item.id`.
	 *
	 * A different issue with objects or collections is that ngModel won't detect if an object property or
	 * a collection item changes. For that reason, `ngOptions` additionally watches the model using
	 * `$watchCollection`, when the expression contains a `track by` clause or the the select has the `multiple` attribute.
	 * This allows ngOptions to trigger a re-rendering of the options even if the actual object/collection
	 * has not changed identity, but only a property on the object or an item in the collection changes.
	 *
	 * Note that `$watchCollection` does a shallow comparison of the properties of the object (or the items in the collection
	 * if the model is an array). This means that changing a property deeper than the first level inside the
	 * object/collection will not trigger a re-rendering.
	 *
	 * ## `select` **`as`**
	 *
	 * Using `select` **`as`** will bind the result of the `select` expression to the model, but
	 * the value of the `<select>` and `<option>` html elements will be either the index (for array data sources)
	 * or property name (for object data sources) of the value within the collection. If a **`track by`** expression
	 * is used, the result of that expression will be set as the value of the `option` and `select` elements.
	 *
	 *
	 * ### `select` **`as`** and **`track by`**
	 *
	 * <div class="alert alert-warning">
	 * Be careful when using `select` **`as`** and **`track by`** in the same expression.
	 * </div>
	 *
	 * Given this array of items on the $scope:
	 *
	 * ```js
	 * $scope.items = [{
	 *   id: 1,
	 *   label: 'aLabel',
	 *   subItem: { name: 'aSubItem' }
	 * }, {
	 *   id: 2,
	 *   label: 'bLabel',
	 *   subItem: { name: 'bSubItem' }
	 * }];
	 * ```
	 *
	 * This will work:
	 *
	 * ```html
	 * <select ng-options="item as item.label for item in items track by item.id" ng-model="selected"></select>
	 * ```
	 * ```js
	 * $scope.selected = $scope.items[0];
	 * ```
	 *
	 * but this will not work:
	 *
	 * ```html
	 * <select ng-options="item.subItem as item.label for item in items track by item.id" ng-model="selected"></select>
	 * ```
	 * ```js
	 * $scope.selected = $scope.items[0].subItem;
	 * ```
	 *
	 * In both examples, the **`track by`** expression is applied successfully to each `item` in the
	 * `items` array. Because the selected option has been set programmatically in the controller, the
	 * **`track by`** expression is also applied to the `ngModel` value. In the first example, the
	 * `ngModel` value is `items[0]` and the **`track by`** expression evaluates to `items[0].id` with
	 * no issue. In the second example, the `ngModel` value is `items[0].subItem` and the **`track by`**
	 * expression evaluates to `items[0].subItem.id` (which is undefined). As a result, the model value
	 * is not matched against any `<option>` and the `<select>` appears as having no selected value.
	 *
	 *
	 * @param {string} ngModel Assignable angular expression to data-bind to.
	 * @param {string=} name Property name of the form under which the control is published.
	 * @param {string=} required The control is considered valid only if value is entered.
	 * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
	 *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
	 *    `required` when you want to data-bind to the `required` attribute.
	 * @param {comprehension_expression=} ngOptions in one of the following forms:
	 *
	 *   * for array data sources:
	 *     * `label` **`for`** `value` **`in`** `array`
	 *     * `select` **`as`** `label` **`for`** `value` **`in`** `array`
	 *     * `label` **`group by`** `group` **`for`** `value` **`in`** `array`
	 *     * `label` **`disable when`** `disable` **`for`** `value` **`in`** `array`
	 *     * `label` **`group by`** `group` **`for`** `value` **`in`** `array` **`track by`** `trackexpr`
	 *     * `label` **`disable when`** `disable` **`for`** `value` **`in`** `array` **`track by`** `trackexpr`
	 *     * `label` **`for`** `value` **`in`** `array` | orderBy:`orderexpr` **`track by`** `trackexpr`
	 *        (for including a filter with `track by`)
	 *   * for object data sources:
	 *     * `label` **`for (`**`key` **`,`** `value`**`) in`** `object`
	 *     * `select` **`as`** `label` **`for (`**`key` **`,`** `value`**`) in`** `object`
	 *     * `label` **`group by`** `group` **`for (`**`key`**`,`** `value`**`) in`** `object`
	 *     * `label` **`disable when`** `disable` **`for (`**`key`**`,`** `value`**`) in`** `object`
	 *     * `select` **`as`** `label` **`group by`** `group`
	 *         **`for` `(`**`key`**`,`** `value`**`) in`** `object`
	 *     * `select` **`as`** `label` **`disable when`** `disable`
	 *         **`for` `(`**`key`**`,`** `value`**`) in`** `object`
	 *
	 * Where:
	 *
	 *   * `array` / `object`: an expression which evaluates to an array / object to iterate over.
	 *   * `value`: local variable which will refer to each item in the `array` or each property value
	 *      of `object` during iteration.
	 *   * `key`: local variable which will refer to a property name in `object` during iteration.
	 *   * `label`: The result of this expression will be the label for `<option>` element. The
	 *     `expression` will most likely refer to the `value` variable (e.g. `value.propertyName`).
	 *   * `select`: The result of this expression will be bound to the model of the parent `<select>`
	 *      element. If not specified, `select` expression will default to `value`.
	 *   * `group`: The result of this expression will be used to group options using the `<optgroup>`
	 *      DOM element.
	 *   * `disable`: The result of this expression will be used to disable the rendered `<option>`
	 *      element. Return `true` to disable.
	 *   * `trackexpr`: Used when working with an array of objects. The result of this expression will be
	 *      used to identify the objects in the array. The `trackexpr` will most likely refer to the
	 *     `value` variable (e.g. `value.propertyName`). With this the selection is preserved
	 *      even when the options are recreated (e.g. reloaded from the server).
	 *
	 * @example
	    <example module="selectExample">
	      <file name="index.html">
	        <script>
	        angular.module('selectExample', [])
	          .controller('ExampleController', ['$scope', function($scope) {
	            $scope.colors = [
	              {name:'black', shade:'dark'},
	              {name:'white', shade:'light', notAnOption: true},
	              {name:'red', shade:'dark'},
	              {name:'blue', shade:'dark', notAnOption: true},
	              {name:'yellow', shade:'light', notAnOption: false}
	            ];
	            $scope.myColor = $scope.colors[2]; // red
	          }]);
	        </script>
	        <div ng-controller="ExampleController">
	          <ul>
	            <li ng-repeat="color in colors">
	              <label>Name: <input ng-model="color.name"></label>
	              <label><input type="checkbox" ng-model="color.notAnOption"> Disabled?</label>
	              <button ng-click="colors.splice($index, 1)" aria-label="Remove">X</button>
	            </li>
	            <li>
	              <button ng-click="colors.push({})">add</button>
	            </li>
	          </ul>
	          <hr/>
	          <label>Color (null not allowed):
	            <select ng-model="myColor" ng-options="color.name for color in colors"></select>
	          </label><br/>
	          <label>Color (null allowed):
	          <span  class="nullable">
	            <select ng-model="myColor" ng-options="color.name for color in colors">
	              <option value="">-- choose color --</option>
	            </select>
	          </span></label><br/>
	
	          <label>Color grouped by shade:
	            <select ng-model="myColor" ng-options="color.name group by color.shade for color in colors">
	            </select>
	          </label><br/>
	
	          <label>Color grouped by shade, with some disabled:
	            <select ng-model="myColor"
	                  ng-options="color.name group by color.shade disable when color.notAnOption for color in colors">
	            </select>
	          </label><br/>
	
	
	
	          Select <button ng-click="myColor = { name:'not in list', shade: 'other' }">bogus</button>.
	          <br/>
	          <hr/>
	          Currently selected: {{ {selected_color:myColor} }}
	          <div style="border:solid 1px black; height:20px"
	               ng-style="{'background-color':myColor.name}">
	          </div>
	        </div>
	      </file>
	      <file name="protractor.js" type="protractor">
	         it('should check ng-options', function() {
	           expect(element(by.binding('{selected_color:myColor}')).getText()).toMatch('red');
	           element.all(by.model('myColor')).first().click();
	           element.all(by.css('select[ng-model="myColor"] option')).first().click();
	           expect(element(by.binding('{selected_color:myColor}')).getText()).toMatch('black');
	           element(by.css('.nullable select[ng-model="myColor"]')).click();
	           element.all(by.css('.nullable select[ng-model="myColor"] option')).first().click();
	           expect(element(by.binding('{selected_color:myColor}')).getText()).toMatch('null');
	         });
	      </file>
	    </example>
	 */
	
	// jshint maxlen: false
	//                     //00001111111111000000000002222222222000000000000000000000333333333300000000000000000000000004444444444400000000000005555555555555550000000006666666666666660000000777777777777777000000000000000888888888800000000000000000009999999999
	var NG_OPTIONS_REGEXP = /^\s*([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+group\s+by\s+([\s\S]+?))?(?:\s+disable\s+when\s+([\s\S]+?))?\s+for\s+(?:([\$\w][\$\w]*)|(?:\(\s*([\$\w][\$\w]*)\s*,\s*([\$\w][\$\w]*)\s*\)))\s+in\s+([\s\S]+?)(?:\s+track\s+by\s+([\s\S]+?))?$/;
	                        // 1: value expression (valueFn)
	                        // 2: label expression (displayFn)
	                        // 3: group by expression (groupByFn)
	                        // 4: disable when expression (disableWhenFn)
	                        // 5: array item variable name
	                        // 6: object item key variable name
	                        // 7: object item value variable name
	                        // 8: collection expression
	                        // 9: track by expression
	// jshint maxlen: 100
	
	
	var ngOptionsDirective = ['$compile', '$document', '$parse', function($compile, $document, $parse) {
	
	  function parseOptionsExpression(optionsExp, selectElement, scope) {
	
	    var match = optionsExp.match(NG_OPTIONS_REGEXP);
	    if (!(match)) {
	      throw ngOptionsMinErr('iexp',
	        "Expected expression in form of " +
	        "'_select_ (as _label_)? for (_key_,)?_value_ in _collection_'" +
	        " but got '{0}'. Element: {1}",
	        optionsExp, startingTag(selectElement));
	    }
	
	    // Extract the parts from the ngOptions expression
	
	    // The variable name for the value of the item in the collection
	    var valueName = match[5] || match[7];
	    // The variable name for the key of the item in the collection
	    var keyName = match[6];
	
	    // An expression that generates the viewValue for an option if there is a label expression
	    var selectAs = / as /.test(match[0]) && match[1];
	    // An expression that is used to track the id of each object in the options collection
	    var trackBy = match[9];
	    // An expression that generates the viewValue for an option if there is no label expression
	    var valueFn = $parse(match[2] ? match[1] : valueName);
	    var selectAsFn = selectAs && $parse(selectAs);
	    var viewValueFn = selectAsFn || valueFn;
	    var trackByFn = trackBy && $parse(trackBy);
	
	    // Get the value by which we are going to track the option
	    // if we have a trackFn then use that (passing scope and locals)
	    // otherwise just hash the given viewValue
	    var getTrackByValueFn = trackBy ?
	                              function(value, locals) { return trackByFn(scope, locals); } :
	                              function getHashOfValue(value) { return hashKey(value); };
	    var getTrackByValue = function(value, key) {
	      return getTrackByValueFn(value, getLocals(value, key));
	    };
	
	    var displayFn = $parse(match[2] || match[1]);
	    var groupByFn = $parse(match[3] || '');
	    var disableWhenFn = $parse(match[4] || '');
	    var valuesFn = $parse(match[8]);
	
	    var locals = {};
	    var getLocals = keyName ? function(value, key) {
	      locals[keyName] = key;
	      locals[valueName] = value;
	      return locals;
	    } : function(value) {
	      locals[valueName] = value;
	      return locals;
	    };
	
	
	    function Option(selectValue, viewValue, label, group, disabled) {
	      this.selectValue = selectValue;
	      this.viewValue = viewValue;
	      this.label = label;
	      this.group = group;
	      this.disabled = disabled;
	    }
	
	    function getOptionValuesKeys(optionValues) {
	      var optionValuesKeys;
	
	      if (!keyName && isArrayLike(optionValues)) {
	        optionValuesKeys = optionValues;
	      } else {
	        // if object, extract keys, in enumeration order, unsorted
	        optionValuesKeys = [];
	        for (var itemKey in optionValues) {
	          if (optionValues.hasOwnProperty(itemKey) && itemKey.charAt(0) !== '$') {
	            optionValuesKeys.push(itemKey);
	          }
	        }
	      }
	      return optionValuesKeys;
	    }
	
	    return {
	      trackBy: trackBy,
	      getTrackByValue: getTrackByValue,
	      getWatchables: $parse(valuesFn, function(optionValues) {
	        // Create a collection of things that we would like to watch (watchedArray)
	        // so that they can all be watched using a single $watchCollection
	        // that only runs the handler once if anything changes
	        var watchedArray = [];
	        optionValues = optionValues || [];
	
	        var optionValuesKeys = getOptionValuesKeys(optionValues);
	        var optionValuesLength = optionValuesKeys.length;
	        for (var index = 0; index < optionValuesLength; index++) {
	          var key = (optionValues === optionValuesKeys) ? index : optionValuesKeys[index];
	          var value = optionValues[key];
	
	          var locals = getLocals(value, key);
	          var selectValue = getTrackByValueFn(value, locals);
	          watchedArray.push(selectValue);
	
	          // Only need to watch the displayFn if there is a specific label expression
	          if (match[2] || match[1]) {
	            var label = displayFn(scope, locals);
	            watchedArray.push(label);
	          }
	
	          // Only need to watch the disableWhenFn if there is a specific disable expression
	          if (match[4]) {
	            var disableWhen = disableWhenFn(scope, locals);
	            watchedArray.push(disableWhen);
	          }
	        }
	        return watchedArray;
	      }),
	
	      getOptions: function() {
	
	        var optionItems = [];
	        var selectValueMap = {};
	
	        // The option values were already computed in the `getWatchables` fn,
	        // which must have been called to trigger `getOptions`
	        var optionValues = valuesFn(scope) || [];
	        var optionValuesKeys = getOptionValuesKeys(optionValues);
	        var optionValuesLength = optionValuesKeys.length;
	
	        for (var index = 0; index < optionValuesLength; index++) {
	          var key = (optionValues === optionValuesKeys) ? index : optionValuesKeys[index];
	          var value = optionValues[key];
	          var locals = getLocals(value, key);
	          var viewValue = viewValueFn(scope, locals);
	          var selectValue = getTrackByValueFn(viewValue, locals);
	          var label = displayFn(scope, locals);
	          var group = groupByFn(scope, locals);
	          var disabled = disableWhenFn(scope, locals);
	          var optionItem = new Option(selectValue, viewValue, label, group, disabled);
	
	          optionItems.push(optionItem);
	          selectValueMap[selectValue] = optionItem;
	        }
	
	        return {
	          items: optionItems,
	          selectValueMap: selectValueMap,
	          getOptionFromViewValue: function(value) {
	            return selectValueMap[getTrackByValue(value)];
	          },
	          getViewValueFromOption: function(option) {
	            // If the viewValue could be an object that may be mutated by the application,
	            // we need to make a copy and not return the reference to the value on the option.
	            return trackBy ? angular.copy(option.viewValue) : option.viewValue;
	          }
	        };
	      }
	    };
	  }
	
	
	  // we can't just jqLite('<option>') since jqLite is not smart enough
	  // to create it in <select> and IE barfs otherwise.
	  var optionTemplate = window.document.createElement('option'),
	      optGroupTemplate = window.document.createElement('optgroup');
	
	    function ngOptionsPostLink(scope, selectElement, attr, ctrls) {
	
	      var selectCtrl = ctrls[0];
	      var ngModelCtrl = ctrls[1];
	      var multiple = attr.multiple;
	
	      // The emptyOption allows the application developer to provide their own custom "empty"
	      // option when the viewValue does not match any of the option values.
	      var emptyOption;
	      for (var i = 0, children = selectElement.children(), ii = children.length; i < ii; i++) {
	        if (children[i].value === '') {
	          emptyOption = children.eq(i);
	          break;
	        }
	      }
	
	      var providedEmptyOption = !!emptyOption;
	
	      var unknownOption = jqLite(optionTemplate.cloneNode(false));
	      unknownOption.val('?');
	
	      var options;
	      var ngOptions = parseOptionsExpression(attr.ngOptions, selectElement, scope);
	      // This stores the newly created options before they are appended to the select.
	      // Since the contents are removed from the fragment when it is appended,
	      // we only need to create it once.
	      var listFragment = $document[0].createDocumentFragment();
	
	      var renderEmptyOption = function() {
	        if (!providedEmptyOption) {
	          selectElement.prepend(emptyOption);
	        }
	        selectElement.val('');
	        emptyOption.prop('selected', true); // needed for IE
	        emptyOption.attr('selected', true);
	      };
	
	      var removeEmptyOption = function() {
	        if (!providedEmptyOption) {
	          emptyOption.remove();
	        }
	      };
	
	
	      var renderUnknownOption = function() {
	        selectElement.prepend(unknownOption);
	        selectElement.val('?');
	        unknownOption.prop('selected', true); // needed for IE
	        unknownOption.attr('selected', true);
	      };
	
	      var removeUnknownOption = function() {
	        unknownOption.remove();
	      };
	
	      // Update the controller methods for multiple selectable options
	      if (!multiple) {
	
	        selectCtrl.writeValue = function writeNgOptionsValue(value) {
	          var option = options.getOptionFromViewValue(value);
	
	          if (option) {
	            // Don't update the option when it is already selected.
	            // For example, the browser will select the first option by default. In that case,
	            // most properties are set automatically - except the `selected` attribute, which we
	            // set always
	
	            if (selectElement[0].value !== option.selectValue) {
	              removeUnknownOption();
	              removeEmptyOption();
	
	              selectElement[0].value = option.selectValue;
	              option.element.selected = true;
	            }
	
	            option.element.setAttribute('selected', 'selected');
	          } else {
	            if (value === null || providedEmptyOption) {
	              removeUnknownOption();
	              renderEmptyOption();
	            } else {
	              removeEmptyOption();
	              renderUnknownOption();
	            }
	          }
	        };
	
	        selectCtrl.readValue = function readNgOptionsValue() {
	
	          var selectedOption = options.selectValueMap[selectElement.val()];
	
	          if (selectedOption && !selectedOption.disabled) {
	            removeEmptyOption();
	            removeUnknownOption();
	            return options.getViewValueFromOption(selectedOption);
	          }
	          return null;
	        };
	
	        // If we are using `track by` then we must watch the tracked value on the model
	        // since ngModel only watches for object identity change
	        if (ngOptions.trackBy) {
	          scope.$watch(
	            function() { return ngOptions.getTrackByValue(ngModelCtrl.$viewValue); },
	            function() { ngModelCtrl.$render(); }
	          );
	        }
	
	      } else {
	
	        ngModelCtrl.$isEmpty = function(value) {
	          return !value || value.length === 0;
	        };
	
	
	        selectCtrl.writeValue = function writeNgOptionsMultiple(value) {
	          options.items.forEach(function(option) {
	            option.element.selected = false;
	          });
	
	          if (value) {
	            value.forEach(function(item) {
	              var option = options.getOptionFromViewValue(item);
	              if (option) option.element.selected = true;
	            });
	          }
	        };
	
	
	        selectCtrl.readValue = function readNgOptionsMultiple() {
	          var selectedValues = selectElement.val() || [],
	              selections = [];
	
	          forEach(selectedValues, function(value) {
	            var option = options.selectValueMap[value];
	            if (option && !option.disabled) selections.push(options.getViewValueFromOption(option));
	          });
	
	          return selections;
	        };
	
	        // If we are using `track by` then we must watch these tracked values on the model
	        // since ngModel only watches for object identity change
	        if (ngOptions.trackBy) {
	
	          scope.$watchCollection(function() {
	            if (isArray(ngModelCtrl.$viewValue)) {
	              return ngModelCtrl.$viewValue.map(function(value) {
	                return ngOptions.getTrackByValue(value);
	              });
	            }
	          }, function() {
	            ngModelCtrl.$render();
	          });
	
	        }
	      }
	
	
	      if (providedEmptyOption) {
	
	        // we need to remove it before calling selectElement.empty() because otherwise IE will
	        // remove the label from the element. wtf?
	        emptyOption.remove();
	
	        // compile the element since there might be bindings in it
	        $compile(emptyOption)(scope);
	
	        // remove the class, which is added automatically because we recompile the element and it
	        // becomes the compilation root
	        emptyOption.removeClass('ng-scope');
	      } else {
	        emptyOption = jqLite(optionTemplate.cloneNode(false));
	      }
	
	      selectElement.empty();
	
	      // We need to do this here to ensure that the options object is defined
	      // when we first hit it in writeNgOptionsValue
	      updateOptions();
	
	      // We will re-render the option elements if the option values or labels change
	      scope.$watchCollection(ngOptions.getWatchables, updateOptions);
	
	      // ------------------------------------------------------------------ //
	
	      function addOptionElement(option, parent) {
	        var optionElement = optionTemplate.cloneNode(false);
	        parent.appendChild(optionElement);
	        updateOptionElement(option, optionElement);
	      }
	
	
	      function updateOptionElement(option, element) {
	        option.element = element;
	        element.disabled = option.disabled;
	        // NOTE: The label must be set before the value, otherwise IE10/11/EDGE create unresponsive
	        // selects in certain circumstances when multiple selects are next to each other and display
	        // the option list in listbox style, i.e. the select is [multiple], or specifies a [size].
	        // See https://github.com/angular/angular.js/issues/11314 for more info.
	        // This is unfortunately untestable with unit / e2e tests
	        if (option.label !== element.label) {
	          element.label = option.label;
	          element.textContent = option.label;
	        }
	        if (option.value !== element.value) element.value = option.selectValue;
	      }
	
	      function updateOptions() {
	        var previousValue = options && selectCtrl.readValue();
	
	        // We must remove all current options, but cannot simply set innerHTML = null
	        // since the providedEmptyOption might have an ngIf on it that inserts comments which we
	        // must preserve.
	        // Instead, iterate over the current option elements and remove them or their optgroup
	        // parents
	        if (options) {
	
	          for (var i = options.items.length - 1; i >= 0; i--) {
	            var option = options.items[i];
	            if (option.group) {
	              jqLiteRemove(option.element.parentNode);
	            } else {
	              jqLiteRemove(option.element);
	            }
	          }
	        }
	
	        options = ngOptions.getOptions();
	
	        var groupElementMap = {};
	
	        // Ensure that the empty option is always there if it was explicitly provided
	        if (providedEmptyOption) {
	          selectElement.prepend(emptyOption);
	        }
	
	        options.items.forEach(function addOption(option) {
	          var groupElement;
	
	          if (isDefined(option.group)) {
	
	            // This option is to live in a group
	            // See if we have already created this group
	            groupElement = groupElementMap[option.group];
	
	            if (!groupElement) {
	
	              groupElement = optGroupTemplate.cloneNode(false);
	              listFragment.appendChild(groupElement);
	
	              // Update the label on the group element
	              groupElement.label = option.group;
	
	              // Store it for use later
	              groupElementMap[option.group] = groupElement;
	            }
	
	            addOptionElement(option, groupElement);
	
	          } else {
	
	            // This option is not in a group
	            addOptionElement(option, listFragment);
	          }
	        });
	
	        selectElement[0].appendChild(listFragment);
	
	        ngModelCtrl.$render();
	
	        // Check to see if the value has changed due to the update to the options
	        if (!ngModelCtrl.$isEmpty(previousValue)) {
	          var nextValue = selectCtrl.readValue();
	          var isNotPrimitive = ngOptions.trackBy || multiple;
	          if (isNotPrimitive ? !equals(previousValue, nextValue) : previousValue !== nextValue) {
	            ngModelCtrl.$setViewValue(nextValue);
	            ngModelCtrl.$render();
	          }
	        }
	
	      }
	  }
	
	  return {
	    restrict: 'A',
	    terminal: true,
	    require: ['select', 'ngModel'],
	    link: {
	      pre: function ngOptionsPreLink(scope, selectElement, attr, ctrls) {
	        // Deactivate the SelectController.register method to prevent
	        // option directives from accidentally registering themselves
	        // (and unwanted $destroy handlers etc.)
	        ctrls[0].registerOption = noop;
	      },
	      post: ngOptionsPostLink
	    }
	  };
	}];
	
	/**
	 * @ngdoc directive
	 * @name ngPluralize
	 * @restrict EA
	 *
	 * @description
	 * `ngPluralize` is a directive that displays messages according to en-US localization rules.
	 * These rules are bundled with angular.js, but can be overridden
	 * (see {@link guide/i18n Angular i18n} dev guide). You configure ngPluralize directive
	 * by specifying the mappings between
	 * [plural categories](http://unicode.org/repos/cldr-tmp/trunk/diff/supplemental/language_plural_rules.html)
	 * and the strings to be displayed.
	 *
	 * # Plural categories and explicit number rules
	 * There are two
	 * [plural categories](http://unicode.org/repos/cldr-tmp/trunk/diff/supplemental/language_plural_rules.html)
	 * in Angular's default en-US locale: "one" and "other".
	 *
	 * While a plural category may match many numbers (for example, in en-US locale, "other" can match
	 * any number that is not 1), an explicit number rule can only match one number. For example, the
	 * explicit number rule for "3" matches the number 3. There are examples of plural categories
	 * and explicit number rules throughout the rest of this documentation.
	 *
	 * # Configuring ngPluralize
	 * You configure ngPluralize by providing 2 attributes: `count` and `when`.
	 * You can also provide an optional attribute, `offset`.
	 *
	 * The value of the `count` attribute can be either a string or an {@link guide/expression
	 * Angular expression}; these are evaluated on the current scope for its bound value.
	 *
	 * The `when` attribute specifies the mappings between plural categories and the actual
	 * string to be displayed. The value of the attribute should be a JSON object.
	 *
	 * The following example shows how to configure ngPluralize:
	 *
	 * ```html
	 * <ng-pluralize count="personCount"
	                 when="{'0': 'Nobody is viewing.',
	 *                      'one': '1 person is viewing.',
	 *                      'other': '{} people are viewing.'}">
	 * </ng-pluralize>
	 *```
	 *
	 * In the example, `"0: Nobody is viewing."` is an explicit number rule. If you did not
	 * specify this rule, 0 would be matched to the "other" category and "0 people are viewing"
	 * would be shown instead of "Nobody is viewing". You can specify an explicit number rule for
	 * other numbers, for example 12, so that instead of showing "12 people are viewing", you can
	 * show "a dozen people are viewing".
	 *
	 * You can use a set of closed braces (`{}`) as a placeholder for the number that you want substituted
	 * into pluralized strings. In the previous example, Angular will replace `{}` with
	 * <span ng-non-bindable>`{{personCount}}`</span>. The closed braces `{}` is a placeholder
	 * for <span ng-non-bindable>{{numberExpression}}</span>.
	 *
	 * If no rule is defined for a category, then an empty string is displayed and a warning is generated.
	 * Note that some locales define more categories than `one` and `other`. For example, fr-fr defines `few` and `many`.
	 *
	 * # Configuring ngPluralize with offset
	 * The `offset` attribute allows further customization of pluralized text, which can result in
	 * a better user experience. For example, instead of the message "4 people are viewing this document",
	 * you might display "John, Kate and 2 others are viewing this document".
	 * The offset attribute allows you to offset a number by any desired value.
	 * Let's take a look at an example:
	 *
	 * ```html
	 * <ng-pluralize count="personCount" offset=2
	 *               when="{'0': 'Nobody is viewing.',
	 *                      '1': '{{person1}} is viewing.',
	 *                      '2': '{{person1}} and {{person2}} are viewing.',
	 *                      'one': '{{person1}}, {{person2}} and one other person are viewing.',
	 *                      'other': '{{person1}}, {{person2}} and {} other people are viewing.'}">
	 * </ng-pluralize>
	 * ```
	 *
	 * Notice that we are still using two plural categories(one, other), but we added
	 * three explicit number rules 0, 1 and 2.
	 * When one person, perhaps John, views the document, "John is viewing" will be shown.
	 * When three people view the document, no explicit number rule is found, so
	 * an offset of 2 is taken off 3, and Angular uses 1 to decide the plural category.
	 * In this case, plural category 'one' is matched and "John, Mary and one other person are viewing"
	 * is shown.
	 *
	 * Note that when you specify offsets, you must provide explicit number rules for
	 * numbers from 0 up to and including the offset. If you use an offset of 3, for example,
	 * you must provide explicit number rules for 0, 1, 2 and 3. You must also provide plural strings for
	 * plural categories "one" and "other".
	 *
	 * @param {string|expression} count The variable to be bound to.
	 * @param {string} when The mapping between plural category to its corresponding strings.
	 * @param {number=} offset Offset to deduct from the total number.
	 *
	 * @example
	    <example module="pluralizeExample">
	      <file name="index.html">
	        <script>
	          angular.module('pluralizeExample', [])
	            .controller('ExampleController', ['$scope', function($scope) {
	              $scope.person1 = 'Igor';
	              $scope.person2 = 'Misko';
	              $scope.personCount = 1;
	            }]);
	        </script>
	        <div ng-controller="ExampleController">
	          <label>Person 1:<input type="text" ng-model="person1" value="Igor" /></label><br/>
	          <label>Person 2:<input type="text" ng-model="person2" value="Misko" /></label><br/>
	          <label>Number of People:<input type="text" ng-model="personCount" value="1" /></label><br/>
	
	          <!--- Example with simple pluralization rules for en locale --->
	          Without Offset:
	          <ng-pluralize count="personCount"
	                        when="{'0': 'Nobody is viewing.',
	                               'one': '1 person is viewing.',
	                               'other': '{} people are viewing.'}">
	          </ng-pluralize><br>
	
	          <!--- Example with offset --->
	          With Offset(2):
	          <ng-pluralize count="personCount" offset=2
	                        when="{'0': 'Nobody is viewing.',
	                               '1': '{{person1}} is viewing.',
	                               '2': '{{person1}} and {{person2}} are viewing.',
	                               'one': '{{person1}}, {{person2}} and one other person are viewing.',
	                               'other': '{{person1}}, {{person2}} and {} other people are viewing.'}">
	          </ng-pluralize>
	        </div>
	      </file>
	      <file name="protractor.js" type="protractor">
	        it('should show correct pluralized string', function() {
	          var withoutOffset = element.all(by.css('ng-pluralize')).get(0);
	          var withOffset = element.all(by.css('ng-pluralize')).get(1);
	          var countInput = element(by.model('personCount'));
	
	          expect(withoutOffset.getText()).toEqual('1 person is viewing.');
	          expect(withOffset.getText()).toEqual('Igor is viewing.');
	
	          countInput.clear();
	          countInput.sendKeys('0');
	
	          expect(withoutOffset.getText()).toEqual('Nobody is viewing.');
	          expect(withOffset.getText()).toEqual('Nobody is viewing.');
	
	          countInput.clear();
	          countInput.sendKeys('2');
	
	          expect(withoutOffset.getText()).toEqual('2 people are viewing.');
	          expect(withOffset.getText()).toEqual('Igor and Misko are viewing.');
	
	          countInput.clear();
	          countInput.sendKeys('3');
	
	          expect(withoutOffset.getText()).toEqual('3 people are viewing.');
	          expect(withOffset.getText()).toEqual('Igor, Misko and one other person are viewing.');
	
	          countInput.clear();
	          countInput.sendKeys('4');
	
	          expect(withoutOffset.getText()).toEqual('4 people are viewing.');
	          expect(withOffset.getText()).toEqual('Igor, Misko and 2 other people are viewing.');
	        });
	        it('should show data-bound names', function() {
	          var withOffset = element.all(by.css('ng-pluralize')).get(1);
	          var personCount = element(by.model('personCount'));
	          var person1 = element(by.model('person1'));
	          var person2 = element(by.model('person2'));
	          personCount.clear();
	          personCount.sendKeys('4');
	          person1.clear();
	          person1.sendKeys('Di');
	          person2.clear();
	          person2.sendKeys('Vojta');
	          expect(withOffset.getText()).toEqual('Di, Vojta and 2 other people are viewing.');
	        });
	      </file>
	    </example>
	 */
	var ngPluralizeDirective = ['$locale', '$interpolate', '$log', function($locale, $interpolate, $log) {
	  var BRACE = /{}/g,
	      IS_WHEN = /^when(Minus)?(.+)$/;
	
	  return {
	    link: function(scope, element, attr) {
	      var numberExp = attr.count,
	          whenExp = attr.$attr.when && element.attr(attr.$attr.when), // we have {{}} in attrs
	          offset = attr.offset || 0,
	          whens = scope.$eval(whenExp) || {},
	          whensExpFns = {},
	          startSymbol = $interpolate.startSymbol(),
	          endSymbol = $interpolate.endSymbol(),
	          braceReplacement = startSymbol + numberExp + '-' + offset + endSymbol,
	          watchRemover = angular.noop,
	          lastCount;
	
	      forEach(attr, function(expression, attributeName) {
	        var tmpMatch = IS_WHEN.exec(attributeName);
	        if (tmpMatch) {
	          var whenKey = (tmpMatch[1] ? '-' : '') + lowercase(tmpMatch[2]);
	          whens[whenKey] = element.attr(attr.$attr[attributeName]);
	        }
	      });
	      forEach(whens, function(expression, key) {
	        whensExpFns[key] = $interpolate(expression.replace(BRACE, braceReplacement));
	
	      });
	
	      scope.$watch(numberExp, function ngPluralizeWatchAction(newVal) {
	        var count = parseFloat(newVal);
	        var countIsNaN = isNaN(count);
	
	        if (!countIsNaN && !(count in whens)) {
	          // If an explicit number rule such as 1, 2, 3... is defined, just use it.
	          // Otherwise, check it against pluralization rules in $locale service.
	          count = $locale.pluralCat(count - offset);
	        }
	
	        // If both `count` and `lastCount` are NaN, we don't need to re-register a watch.
	        // In JS `NaN !== NaN`, so we have to explicitly check.
	        if ((count !== lastCount) && !(countIsNaN && isNumber(lastCount) && isNaN(lastCount))) {
	          watchRemover();
	          var whenExpFn = whensExpFns[count];
	          if (isUndefined(whenExpFn)) {
	            if (newVal != null) {
	              $log.debug("ngPluralize: no rule defined for '" + count + "' in " + whenExp);
	            }
	            watchRemover = noop;
	            updateElementText();
	          } else {
	            watchRemover = scope.$watch(whenExpFn, updateElementText);
	          }
	          lastCount = count;
	        }
	      });
	
	      function updateElementText(newText) {
	        element.text(newText || '');
	      }
	    }
	  };
	}];
	
	/**
	 * @ngdoc directive
	 * @name ngRepeat
	 * @multiElement
	 *
	 * @description
	 * The `ngRepeat` directive instantiates a template once per item from a collection. Each template
	 * instance gets its own scope, where the given loop variable is set to the current collection item,
	 * and `$index` is set to the item index or key.
	 *
	 * Special properties are exposed on the local scope of each template instance, including:
	 *
	 * | Variable  | Type            | Details                                                                     |
	 * |-----------|-----------------|-----------------------------------------------------------------------------|
	 * | `$index`  | {@type number}  | iterator offset of the repeated element (0..length-1)                       |
	 * | `$first`  | {@type boolean} | true if the repeated element is first in the iterator.                      |
	 * | `$middle` | {@type boolean} | true if the repeated element is between the first and last in the iterator. |
	 * | `$last`   | {@type boolean} | true if the repeated element is last in the iterator.                       |
	 * | `$even`   | {@type boolean} | true if the iterator position `$index` is even (otherwise false).           |
	 * | `$odd`    | {@type boolean} | true if the iterator position `$index` is odd (otherwise false).            |
	 *
	 * <div class="alert alert-info">
	 *   Creating aliases for these properties is possible with {@link ng.directive:ngInit `ngInit`}.
	 *   This may be useful when, for instance, nesting ngRepeats.
	 * </div>
	 *
	 *
	 * # Iterating over object properties
	 *
	 * It is possible to get `ngRepeat` to iterate over the properties of an object using the following
	 * syntax:
	 *
	 * ```js
	 * <div ng-repeat="(key, value) in myObj"> ... </div>
	 * ```
	 *
	 * However, there are a limitations compared to array iteration:
	 *
	 * - The JavaScript specification does not define the order of keys
	 *   returned for an object, so Angular relies on the order returned by the browser
	 *   when running `for key in myObj`. Browsers generally follow the strategy of providing
	 *   keys in the order in which they were defined, although there are exceptions when keys are deleted
	 *   and reinstated. See the
	 *   [MDN page on `delete` for more info](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete#Cross-browser_notes).
	 *
	 * - `ngRepeat` will silently *ignore* object keys starting with `$`, because
	 *   it's a prefix used by Angular for public (`$`) and private (`$$`) properties.
	 *
	 * - The built-in filters {@link ng.orderBy orderBy} and {@link ng.filter filter} do not work with
	 *   objects, and will throw if used with one.
	 *
	 * If you are hitting any of these limitations, the recommended workaround is to convert your object into an array
	 * that is sorted into the order that you prefer before providing it to `ngRepeat`. You could
	 * do this with a filter such as [toArrayFilter](http://ngmodules.org/modules/angular-toArrayFilter)
	 * or implement a `$watch` on the object yourself.
	 *
	 *
	 * # Tracking and Duplicates
	 *
	 * `ngRepeat` uses {@link $rootScope.Scope#$watchCollection $watchCollection} to detect changes in
	 * the collection. When a change happens, ngRepeat then makes the corresponding changes to the DOM:
	 *
	 * * When an item is added, a new instance of the template is added to the DOM.
	 * * When an item is removed, its template instance is removed from the DOM.
	 * * When items are reordered, their respective templates are reordered in the DOM.
	 *
	 * To minimize creation of DOM elements, `ngRepeat` uses a function
	 * to "keep track" of all items in the collection and their corresponding DOM elements.
	 * For example, if an item is added to the collection, ngRepeat will know that all other items
	 * already have DOM elements, and will not re-render them.
	 *
	 * The default tracking function (which tracks items by their identity) does not allow
	 * duplicate items in arrays. This is because when there are duplicates, it is not possible
	 * to maintain a one-to-one mapping between collection items and DOM elements.
	 *
	 * If you do need to repeat duplicate items, you can substitute the default tracking behavior
	 * with your own using the `track by` expression.
	 *
	 * For example, you may track items by the index of each item in the collection, using the
	 * special scope property `$index`:
	 * ```html
	 *    <div ng-repeat="n in [42, 42, 43, 43] track by $index">
	 *      {{n}}
	 *    </div>
	 * ```
	 *
	 * You may also use arbitrary expressions in `track by`, including references to custom functions
	 * on the scope:
	 * ```html
	 *    <div ng-repeat="n in [42, 42, 43, 43] track by myTrackingFunction(n)">
	 *      {{n}}
	 *    </div>
	 * ```
	 *
	 * <div class="alert alert-success">
	 * If you are working with objects that have an identifier property, you should track
	 * by the identifier instead of the whole object. Should you reload your data later, `ngRepeat`
	 * will not have to rebuild the DOM elements for items it has already rendered, even if the
	 * JavaScript objects in the collection have been substituted for new ones. For large collections,
	 * this significantly improves rendering performance. If you don't have a unique identifier,
	 * `track by $index` can also provide a performance boost.
	 * </div>
	 * ```html
	 *    <div ng-repeat="model in collection track by model.id">
	 *      {{model.name}}
	 *    </div>
	 * ```
	 *
	 * When no `track by` expression is provided, it is equivalent to tracking by the built-in
	 * `$id` function, which tracks items by their identity:
	 * ```html
	 *    <div ng-repeat="obj in collection track by $id(obj)">
	 *      {{obj.prop}}
	 *    </div>
	 * ```
	 *
	 * <div class="alert alert-warning">
	 * **Note:** `track by` must always be the last expression:
	 * </div>
	 * ```
	 * <div ng-repeat="model in collection | orderBy: 'id' as filtered_result track by model.id">
	 *     {{model.name}}
	 * </div>
	 * ```
	 *
	 * # Special repeat start and end points
	 * To repeat a series of elements instead of just one parent element, ngRepeat (as well as other ng directives) supports extending
	 * the range of the repeater by defining explicit start and end points by using **ng-repeat-start** and **ng-repeat-end** respectively.
	 * The **ng-repeat-start** directive works the same as **ng-repeat**, but will repeat all the HTML code (including the tag it's defined on)
	 * up to and including the ending HTML tag where **ng-repeat-end** is placed.
	 *
	 * The example below makes use of this feature:
	 * ```html
	 *   <header ng-repeat-start="item in items">
	 *     Header {{ item }}
	 *   </header>
	 *   <div class="body">
	 *     Body {{ item }}
	 *   </div>
	 *   <footer ng-repeat-end>
	 *     Footer {{ item }}
	 *   </footer>
	 * ```
	 *
	 * And with an input of {@type ['A','B']} for the items variable in the example above, the output will evaluate to:
	 * ```html
	 *   <header>
	 *     Header A
	 *   </header>
	 *   <div class="body">
	 *     Body A
	 *   </div>
	 *   <footer>
	 *     Footer A
	 *   </footer>
	 *   <header>
	 *     Header B
	 *   </header>
	 *   <div class="body">
	 *     Body B
	 *   </div>
	 *   <footer>
	 *     Footer B
	 *   </footer>
	 * ```
	 *
	 * The custom start and end points for ngRepeat also support all other HTML directive syntax flavors provided in AngularJS (such
	 * as **data-ng-repeat-start**, **x-ng-repeat-start** and **ng:repeat-start**).
	 *
	 * @animations
	 * | Animation                        | Occurs                              |
	 * |----------------------------------|-------------------------------------|
	 * | {@link ng.$animate#enter enter} | when a new item is added to the list or when an item is revealed after a filter |
	 * | {@link ng.$animate#leave leave} | when an item is removed from the list or when an item is filtered out |
	 * | {@link ng.$animate#move move } | when an adjacent item is filtered out causing a reorder or when the item contents are reordered |
	 *
	 * See the example below for defining CSS animations with ngRepeat.
	 *
	 * @element ANY
	 * @scope
	 * @priority 1000
	 * @param {repeat_expression} ngRepeat The expression indicating how to enumerate a collection. These
	 *   formats are currently supported:
	 *
	 *   * `variable in expression` – where variable is the user defined loop variable and `expression`
	 *     is a scope expression giving the collection to enumerate.
	 *
	 *     For example: `album in artist.albums`.
	 *
	 *   * `(key, value) in expression` – where `key` and `value` can be any user defined identifiers,
	 *     and `expression` is the scope expression giving the collection to enumerate.
	 *
	 *     For example: `(name, age) in {'adam':10, 'amalie':12}`.
	 *
	 *   * `variable in expression track by tracking_expression` – You can also provide an optional tracking expression
	 *     which can be used to associate the objects in the collection with the DOM elements. If no tracking expression
	 *     is specified, ng-repeat associates elements by identity. It is an error to have
	 *     more than one tracking expression value resolve to the same key. (This would mean that two distinct objects are
	 *     mapped to the same DOM element, which is not possible.)
	 *
	 *     Note that the tracking expression must come last, after any filters, and the alias expression.
	 *
	 *     For example: `item in items` is equivalent to `item in items track by $id(item)`. This implies that the DOM elements
	 *     will be associated by item identity in the array.
	 *
	 *     For example: `item in items track by $id(item)`. A built in `$id()` function can be used to assign a unique
	 *     `$$hashKey` property to each item in the array. This property is then used as a key to associated DOM elements
	 *     with the corresponding item in the array by identity. Moving the same object in array would move the DOM
	 *     element in the same way in the DOM.
	 *
	 *     For example: `item in items track by item.id` is a typical pattern when the items come from the database. In this
	 *     case the object identity does not matter. Two objects are considered equivalent as long as their `id`
	 *     property is same.
	 *
	 *     For example: `item in items | filter:searchText track by item.id` is a pattern that might be used to apply a filter
	 *     to items in conjunction with a tracking expression.
	 *
	 *   * `variable in expression as alias_expression` – You can also provide an optional alias expression which will then store the
	 *     intermediate results of the repeater after the filters have been applied. Typically this is used to render a special message
	 *     when a filter is active on the repeater, but the filtered result set is empty.
	 *
	 *     For example: `item in items | filter:x as results` will store the fragment of the repeated items as `results`, but only after
	 *     the items have been processed through the filter.
	 *
	 *     Please note that `as [variable name] is not an operator but rather a part of ngRepeat micro-syntax so it can be used only at the end
	 *     (and not as operator, inside an expression).
	 *
	 *     For example: `item in items | filter : x | orderBy : order | limitTo : limit as results` .
	 *
	 * @example
	 * This example uses `ngRepeat` to display a list of people. A filter is used to restrict the displayed
	 * results by name. New (entering) and removed (leaving) items are animated.
	  <example module="ngRepeat" name="ngRepeat" deps="angular-animate.js" animations="true">
	    <file name="index.html">
	      <div ng-controller="repeatController">
	        I have {{friends.length}} friends. They are:
	        <input type="search" ng-model="q" placeholder="filter friends..." aria-label="filter friends" />
	        <ul class="example-animate-container">
	          <li class="animate-repeat" ng-repeat="friend in friends | filter:q as results">
	            [{{$index + 1}}] {{friend.name}} who is {{friend.age}} years old.
	          </li>
	          <li class="animate-repeat" ng-if="results.length == 0">
	            <strong>No results found...</strong>
	          </li>
	        </ul>
	      </div>
	    </file>
	    <file name="script.js">
	      angular.module('ngRepeat', ['ngAnimate']).controller('repeatController', function($scope) {
	        $scope.friends = [
	          {name:'John', age:25, gender:'boy'},
	          {name:'Jessie', age:30, gender:'girl'},
	          {name:'Johanna', age:28, gender:'girl'},
	          {name:'Joy', age:15, gender:'girl'},
	          {name:'Mary', age:28, gender:'girl'},
	          {name:'Peter', age:95, gender:'boy'},
	          {name:'Sebastian', age:50, gender:'boy'},
	          {name:'Erika', age:27, gender:'girl'},
	          {name:'Patrick', age:40, gender:'boy'},
	          {name:'Samantha', age:60, gender:'girl'}
	        ];
	      });
	    </file>
	    <file name="animations.css">
	      .example-animate-container {
	        background:white;
	        border:1px solid black;
	        list-style:none;
	        margin:0;
	        padding:0 10px;
	      }
	
	      .animate-repeat {
	        line-height:30px;
	        list-style:none;
	        box-sizing:border-box;
	      }
	
	      .animate-repeat.ng-move,
	      .animate-repeat.ng-enter,
	      .animate-repeat.ng-leave {
	        transition:all linear 0.5s;
	      }
	
	      .animate-repeat.ng-leave.ng-leave-active,
	      .animate-repeat.ng-move,
	      .animate-repeat.ng-enter {
	        opacity:0;
	        max-height:0;
	      }
	
	      .animate-repeat.ng-leave,
	      .animate-repeat.ng-move.ng-move-active,
	      .animate-repeat.ng-enter.ng-enter-active {
	        opacity:1;
	        max-height:30px;
	      }
	    </file>
	    <file name="protractor.js" type="protractor">
	      var friends = element.all(by.repeater('friend in friends'));
	
	      it('should render initial data set', function() {
	        expect(friends.count()).toBe(10);
	        expect(friends.get(0).getText()).toEqual('[1] John who is 25 years old.');
	        expect(friends.get(1).getText()).toEqual('[2] Jessie who is 30 years old.');
	        expect(friends.last().getText()).toEqual('[10] Samantha who is 60 years old.');
	        expect(element(by.binding('friends.length')).getText())
	            .toMatch("I have 10 friends. They are:");
	      });
	
	       it('should update repeater when filter predicate changes', function() {
	         expect(friends.count()).toBe(10);
	
	         element(by.model('q')).sendKeys('ma');
	
	         expect(friends.count()).toBe(2);
	         expect(friends.get(0).getText()).toEqual('[1] Mary who is 28 years old.');
	         expect(friends.last().getText()).toEqual('[2] Samantha who is 60 years old.');
	       });
	      </file>
	    </example>
	 */
	var ngRepeatDirective = ['$parse', '$animate', '$compile', function($parse, $animate, $compile) {
	  var NG_REMOVED = '$$NG_REMOVED';
	  var ngRepeatMinErr = minErr('ngRepeat');
	
	  var updateScope = function(scope, index, valueIdentifier, value, keyIdentifier, key, arrayLength) {
	    // TODO(perf): generate setters to shave off ~40ms or 1-1.5%
	    scope[valueIdentifier] = value;
	    if (keyIdentifier) scope[keyIdentifier] = key;
	    scope.$index = index;
	    scope.$first = (index === 0);
	    scope.$last = (index === (arrayLength - 1));
	    scope.$middle = !(scope.$first || scope.$last);
	    // jshint bitwise: false
	    scope.$odd = !(scope.$even = (index&1) === 0);
	    // jshint bitwise: true
	  };
	
	  var getBlockStart = function(block) {
	    return block.clone[0];
	  };
	
	  var getBlockEnd = function(block) {
	    return block.clone[block.clone.length - 1];
	  };
	
	
	  return {
	    restrict: 'A',
	    multiElement: true,
	    transclude: 'element',
	    priority: 1000,
	    terminal: true,
	    $$tlb: true,
	    compile: function ngRepeatCompile($element, $attr) {
	      var expression = $attr.ngRepeat;
	      var ngRepeatEndComment = $compile.$$createComment('end ngRepeat', expression);
	
	      var match = expression.match(/^\s*([\s\S]+?)\s+in\s+([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+track\s+by\s+([\s\S]+?))?\s*$/);
	
	      if (!match) {
	        throw ngRepeatMinErr('iexp', "Expected expression in form of '_item_ in _collection_[ track by _id_]' but got '{0}'.",
	            expression);
	      }
	
	      var lhs = match[1];
	      var rhs = match[2];
	      var aliasAs = match[3];
	      var trackByExp = match[4];
	
	      match = lhs.match(/^(?:(\s*[\$\w]+)|\(\s*([\$\w]+)\s*,\s*([\$\w]+)\s*\))$/);
	
	      if (!match) {
	        throw ngRepeatMinErr('iidexp', "'_item_' in '_item_ in _collection_' should be an identifier or '(_key_, _value_)' expression, but got '{0}'.",
	            lhs);
	      }
	      var valueIdentifier = match[3] || match[1];
	      var keyIdentifier = match[2];
	
	      if (aliasAs && (!/^[$a-zA-Z_][$a-zA-Z0-9_]*$/.test(aliasAs) ||
	          /^(null|undefined|this|\$index|\$first|\$middle|\$last|\$even|\$odd|\$parent|\$root|\$id)$/.test(aliasAs))) {
	        throw ngRepeatMinErr('badident', "alias '{0}' is invalid --- must be a valid JS identifier which is not a reserved name.",
	          aliasAs);
	      }
	
	      var trackByExpGetter, trackByIdExpFn, trackByIdArrayFn, trackByIdObjFn;
	      var hashFnLocals = {$id: hashKey};
	
	      if (trackByExp) {
	        trackByExpGetter = $parse(trackByExp);
	      } else {
	        trackByIdArrayFn = function(key, value) {
	          return hashKey(value);
	        };
	        trackByIdObjFn = function(key) {
	          return key;
	        };
	      }
	
	      return function ngRepeatLink($scope, $element, $attr, ctrl, $transclude) {
	
	        if (trackByExpGetter) {
	          trackByIdExpFn = function(key, value, index) {
	            // assign key, value, and $index to the locals so that they can be used in hash functions
	            if (keyIdentifier) hashFnLocals[keyIdentifier] = key;
	            hashFnLocals[valueIdentifier] = value;
	            hashFnLocals.$index = index;
	            return trackByExpGetter($scope, hashFnLocals);
	          };
	        }
	
	        // Store a list of elements from previous run. This is a hash where key is the item from the
	        // iterator, and the value is objects with following properties.
	        //   - scope: bound scope
	        //   - element: previous element.
	        //   - index: position
	        //
	        // We are using no-proto object so that we don't need to guard against inherited props via
	        // hasOwnProperty.
	        var lastBlockMap = createMap();
	
	        //watch props
	        $scope.$watchCollection(rhs, function ngRepeatAction(collection) {
	          var index, length,
	              previousNode = $element[0],     // node that cloned nodes should be inserted after
	                                              // initialized to the comment node anchor
	              nextNode,
	              // Same as lastBlockMap but it has the current state. It will become the
	              // lastBlockMap on the next iteration.
	              nextBlockMap = createMap(),
	              collectionLength,
	              key, value, // key/value of iteration
	              trackById,
	              trackByIdFn,
	              collectionKeys,
	              block,       // last object information {scope, element, id}
	              nextBlockOrder,
	              elementsToRemove;
	
	          if (aliasAs) {
	            $scope[aliasAs] = collection;
	          }
	
	          if (isArrayLike(collection)) {
	            collectionKeys = collection;
	            trackByIdFn = trackByIdExpFn || trackByIdArrayFn;
	          } else {
	            trackByIdFn = trackByIdExpFn || trackByIdObjFn;
	            // if object, extract keys, in enumeration order, unsorted
	            collectionKeys = [];
	            for (var itemKey in collection) {
	              if (hasOwnProperty.call(collection, itemKey) && itemKey.charAt(0) !== '$') {
	                collectionKeys.push(itemKey);
	              }
	            }
	          }
	
	          collectionLength = collectionKeys.length;
	          nextBlockOrder = new Array(collectionLength);
	
	          // locate existing items
	          for (index = 0; index < collectionLength; index++) {
	            key = (collection === collectionKeys) ? index : collectionKeys[index];
	            value = collection[key];
	            trackById = trackByIdFn(key, value, index);
	            if (lastBlockMap[trackById]) {
	              // found previously seen block
	              block = lastBlockMap[trackById];
	              delete lastBlockMap[trackById];
	              nextBlockMap[trackById] = block;
	              nextBlockOrder[index] = block;
	            } else if (nextBlockMap[trackById]) {
	              // if collision detected. restore lastBlockMap and throw an error
	              forEach(nextBlockOrder, function(block) {
	                if (block && block.scope) lastBlockMap[block.id] = block;
	              });
	              throw ngRepeatMinErr('dupes',
	                  "Duplicates in a repeater are not allowed. Use 'track by' expression to specify unique keys. Repeater: {0}, Duplicate key: {1}, Duplicate value: {2}",
	                  expression, trackById, value);
	            } else {
	              // new never before seen block
	              nextBlockOrder[index] = {id: trackById, scope: undefined, clone: undefined};
	              nextBlockMap[trackById] = true;
	            }
	          }
	
	          // remove leftover items
	          for (var blockKey in lastBlockMap) {
	            block = lastBlockMap[blockKey];
	            elementsToRemove = getBlockNodes(block.clone);
	            $animate.leave(elementsToRemove);
	            if (elementsToRemove[0].parentNode) {
	              // if the element was not removed yet because of pending animation, mark it as deleted
	              // so that we can ignore it later
	              for (index = 0, length = elementsToRemove.length; index < length; index++) {
	                elementsToRemove[index][NG_REMOVED] = true;
	              }
	            }
	            block.scope.$destroy();
	          }
	
	          // we are not using forEach for perf reasons (trying to avoid #call)
	          for (index = 0; index < collectionLength; index++) {
	            key = (collection === collectionKeys) ? index : collectionKeys[index];
	            value = collection[key];
	            block = nextBlockOrder[index];
	
	            if (block.scope) {
	              // if we have already seen this object, then we need to reuse the
	              // associated scope/element
	
	              nextNode = previousNode;
	
	              // skip nodes that are already pending removal via leave animation
	              do {
	                nextNode = nextNode.nextSibling;
	              } while (nextNode && nextNode[NG_REMOVED]);
	
	              if (getBlockStart(block) != nextNode) {
	                // existing item which got moved
	                $animate.move(getBlockNodes(block.clone), null, previousNode);
	              }
	              previousNode = getBlockEnd(block);
	              updateScope(block.scope, index, valueIdentifier, value, keyIdentifier, key, collectionLength);
	            } else {
	              // new item which we don't know about
	              $transclude(function ngRepeatTransclude(clone, scope) {
	                block.scope = scope;
	                // http://jsperf.com/clone-vs-createcomment
	                var endNode = ngRepeatEndComment.cloneNode(false);
	                clone[clone.length++] = endNode;
	
	                $animate.enter(clone, null, previousNode);
	                previousNode = endNode;
	                // Note: We only need the first/last node of the cloned nodes.
	                // However, we need to keep the reference to the jqlite wrapper as it might be changed later
	                // by a directive with templateUrl when its template arrives.
	                block.clone = clone;
	                nextBlockMap[block.id] = block;
	                updateScope(block.scope, index, valueIdentifier, value, keyIdentifier, key, collectionLength);
	              });
	            }
	          }
	          lastBlockMap = nextBlockMap;
	        });
	      };
	    }
	  };
	}];
	
	var NG_HIDE_CLASS = 'ng-hide';
	var NG_HIDE_IN_PROGRESS_CLASS = 'ng-hide-animate';
	/**
	 * @ngdoc directive
	 * @name ngShow
	 * @multiElement
	 *
	 * @description
	 * The `ngShow` directive shows or hides the given HTML element based on the expression
	 * provided to the `ngShow` attribute. The element is shown or hidden by removing or adding
	 * the `.ng-hide` CSS class onto the element. The `.ng-hide` CSS class is predefined
	 * in AngularJS and sets the display style to none (using an !important flag).
	 * For CSP mode please add `angular-csp.css` to your html file (see {@link ng.directive:ngCsp ngCsp}).
	 *
	 * ```html
	 * <!-- when $scope.myValue is truthy (element is visible) -->
	 * <div ng-show="myValue"></div>
	 *
	 * <!-- when $scope.myValue is falsy (element is hidden) -->
	 * <div ng-show="myValue" class="ng-hide"></div>
	 * ```
	 *
	 * When the `ngShow` expression evaluates to a falsy value then the `.ng-hide` CSS class is added to the class
	 * attribute on the element causing it to become hidden. When truthy, the `.ng-hide` CSS class is removed
	 * from the element causing the element not to appear hidden.
	 *
	 * ## Why is !important used?
	 *
	 * You may be wondering why !important is used for the `.ng-hide` CSS class. This is because the `.ng-hide` selector
	 * can be easily overridden by heavier selectors. For example, something as simple
	 * as changing the display style on a HTML list item would make hidden elements appear visible.
	 * This also becomes a bigger issue when dealing with CSS frameworks.
	 *
	 * By using !important, the show and hide behavior will work as expected despite any clash between CSS selector
	 * specificity (when !important isn't used with any conflicting styles). If a developer chooses to override the
	 * styling to change how to hide an element then it is just a matter of using !important in their own CSS code.
	 *
	 * ### Overriding `.ng-hide`
	 *
	 * By default, the `.ng-hide` class will style the element with `display: none!important`. If you wish to change
	 * the hide behavior with ngShow/ngHide then this can be achieved by restating the styles for the `.ng-hide`
	 * class CSS. Note that the selector that needs to be used is actually `.ng-hide:not(.ng-hide-animate)` to cope
	 * with extra animation classes that can be added.
	 *
	 * ```css
	 * .ng-hide:not(.ng-hide-animate) {
	 *   /&#42; this is just another form of hiding an element &#42;/
	 *   display: block!important;
	 *   position: absolute;
	 *   top: -9999px;
	 *   left: -9999px;
	 * }
	 * ```
	 *
	 * By default you don't need to override in CSS anything and the animations will work around the display style.
	 *
	 * ## A note about animations with `ngShow`
	 *
	 * Animations in ngShow/ngHide work with the show and hide events that are triggered when the directive expression
	 * is true and false. This system works like the animation system present with ngClass except that
	 * you must also include the !important flag to override the display property
	 * so that you can perform an animation when the element is hidden during the time of the animation.
	 *
	 * ```css
	 * //
	 * //a working example can be found at the bottom of this page
	 * //
	 * .my-element.ng-hide-add, .my-element.ng-hide-remove {
	 *   /&#42; this is required as of 1.3x to properly
	 *      apply all styling in a show/hide animation &#42;/
	 *   transition: 0s linear all;
	 * }
	 *
	 * .my-element.ng-hide-add-active,
	 * .my-element.ng-hide-remove-active {
	 *   /&#42; the transition is defined in the active class &#42;/
	 *   transition: 1s linear all;
	 * }
	 *
	 * .my-element.ng-hide-add { ... }
	 * .my-element.ng-hide-add.ng-hide-add-active { ... }
	 * .my-element.ng-hide-remove { ... }
	 * .my-element.ng-hide-remove.ng-hide-remove-active { ... }
	 * ```
	 *
	 * Keep in mind that, as of AngularJS version 1.3, there is no need to change the display
	 * property to block during animation states--ngAnimate will handle the style toggling automatically for you.
	 *
	 * @animations
	 * | Animation                        | Occurs                              |
	 * |----------------------------------|-------------------------------------|
	 * | {@link $animate#addClass addClass} `.ng-hide`  | after the `ngShow` expression evaluates to a non truthy value and just before the contents are set to hidden |
	 * | {@link $animate#removeClass removeClass}  `.ng-hide`  | after the `ngShow` expression evaluates to a truthy value and just before contents are set to visible |
	 *
	 * @element ANY
	 * @param {expression} ngShow If the {@link guide/expression expression} is truthy
	 *     then the element is shown or hidden respectively.
	 *
	 * @example
	  <example module="ngAnimate" deps="angular-animate.js" animations="true">
	    <file name="index.html">
	      Click me: <input type="checkbox" ng-model="checked" aria-label="Toggle ngHide"><br/>
	      <div>
	        Show:
	        <div class="check-element animate-show" ng-show="checked">
	          <span class="glyphicon glyphicon-thumbs-up"></span> I show up when your checkbox is checked.
	        </div>
	      </div>
	      <div>
	        Hide:
	        <div class="check-element animate-show" ng-hide="checked">
	          <span class="glyphicon glyphicon-thumbs-down"></span> I hide when your checkbox is checked.
	        </div>
	      </div>
	    </file>
	    <file name="glyphicons.css">
	      @import url(../../components/bootstrap-3.1.1/css/bootstrap.css);
	    </file>
	    <file name="animations.css">
	      .animate-show {
	        line-height: 20px;
	        opacity: 1;
	        padding: 10px;
	        border: 1px solid black;
	        background: white;
	      }
	
	      .animate-show.ng-hide-add, .animate-show.ng-hide-remove {
	        transition: all linear 0.5s;
	      }
	
	      .animate-show.ng-hide {
	        line-height: 0;
	        opacity: 0;
	        padding: 0 10px;
	      }
	
	      .check-element {
	        padding: 10px;
	        border: 1px solid black;
	        background: white;
	      }
	    </file>
	    <file name="protractor.js" type="protractor">
	      var thumbsUp = element(by.css('span.glyphicon-thumbs-up'));
	      var thumbsDown = element(by.css('span.glyphicon-thumbs-down'));
	
	      it('should check ng-show / ng-hide', function() {
	        expect(thumbsUp.isDisplayed()).toBeFalsy();
	        expect(thumbsDown.isDisplayed()).toBeTruthy();
	
	        element(by.model('checked')).click();
	
	        expect(thumbsUp.isDisplayed()).toBeTruthy();
	        expect(thumbsDown.isDisplayed()).toBeFalsy();
	      });
	    </file>
	  </example>
	 */
	var ngShowDirective = ['$animate', function($animate) {
	  return {
	    restrict: 'A',
	    multiElement: true,
	    link: function(scope, element, attr) {
	      scope.$watch(attr.ngShow, function ngShowWatchAction(value) {
	        // we're adding a temporary, animation-specific class for ng-hide since this way
	        // we can control when the element is actually displayed on screen without having
	        // to have a global/greedy CSS selector that breaks when other animations are run.
	        // Read: https://github.com/angular/angular.js/issues/9103#issuecomment-58335845
	        $animate[value ? 'removeClass' : 'addClass'](element, NG_HIDE_CLASS, {
	          tempClasses: NG_HIDE_IN_PROGRESS_CLASS
	        });
	      });
	    }
	  };
	}];
	
	
	/**
	 * @ngdoc directive
	 * @name ngHide
	 * @multiElement
	 *
	 * @description
	 * The `ngHide` directive shows or hides the given HTML element based on the expression
	 * provided to the `ngHide` attribute. The element is shown or hidden by removing or adding
	 * the `ng-hide` CSS class onto the element. The `.ng-hide` CSS class is predefined
	 * in AngularJS and sets the display style to none (using an !important flag).
	 * For CSP mode please add `angular-csp.css` to your html file (see {@link ng.directive:ngCsp ngCsp}).
	 *
	 * ```html
	 * <!-- when $scope.myValue is truthy (element is hidden) -->
	 * <div ng-hide="myValue" class="ng-hide"></div>
	 *
	 * <!-- when $scope.myValue is falsy (element is visible) -->
	 * <div ng-hide="myValue"></div>
	 * ```
	 *
	 * When the `ngHide` expression evaluates to a truthy value then the `.ng-hide` CSS class is added to the class
	 * attribute on the element causing it to become hidden. When falsy, the `.ng-hide` CSS class is removed
	 * from the element causing the element not to appear hidden.
	 *
	 * ## Why is !important used?
	 *
	 * You may be wondering why !important is used for the `.ng-hide` CSS class. This is because the `.ng-hide` selector
	 * can be easily overridden by heavier selectors. For example, something as simple
	 * as changing the display style on a HTML list item would make hidden elements appear visible.
	 * This also becomes a bigger issue when dealing with CSS frameworks.
	 *
	 * By using !important, the show and hide behavior will work as expected despite any clash between CSS selector
	 * specificity (when !important isn't used with any conflicting styles). If a developer chooses to override the
	 * styling to change how to hide an element then it is just a matter of using !important in their own CSS code.
	 *
	 * ### Overriding `.ng-hide`
	 *
	 * By default, the `.ng-hide` class will style the element with `display: none!important`. If you wish to change
	 * the hide behavior with ngShow/ngHide then this can be achieved by restating the styles for the `.ng-hide`
	 * class in CSS:
	 *
	 * ```css
	 * .ng-hide {
	 *   /&#42; this is just another form of hiding an element &#42;/
	 *   display: block!important;
	 *   position: absolute;
	 *   top: -9999px;
	 *   left: -9999px;
	 * }
	 * ```
	 *
	 * By default you don't need to override in CSS anything and the animations will work around the display style.
	 *
	 * ## A note about animations with `ngHide`
	 *
	 * Animations in ngShow/ngHide work with the show and hide events that are triggered when the directive expression
	 * is true and false. This system works like the animation system present with ngClass, except that the `.ng-hide`
	 * CSS class is added and removed for you instead of your own CSS class.
	 *
	 * ```css
	 * //
	 * //a working example can be found at the bottom of this page
	 * //
	 * .my-element.ng-hide-add, .my-element.ng-hide-remove {
	 *   transition: 0.5s linear all;
	 * }
	 *
	 * .my-element.ng-hide-add { ... }
	 * .my-element.ng-hide-add.ng-hide-add-active { ... }
	 * .my-element.ng-hide-remove { ... }
	 * .my-element.ng-hide-remove.ng-hide-remove-active { ... }
	 * ```
	 *
	 * Keep in mind that, as of AngularJS version 1.3, there is no need to change the display
	 * property to block during animation states--ngAnimate will handle the style toggling automatically for you.
	 *
	 * @animations
	 * | Animation                        | Occurs                              |
	 * |----------------------------------|-------------------------------------|
	 * | {@link $animate#addClass addClass} `.ng-hide`  | after the `ngHide` expression evaluates to a truthy value and just before the contents are set to hidden |
	 * | {@link $animate#removeClass removeClass}  `.ng-hide`  | after the `ngHide` expression evaluates to a non truthy value and just before contents are set to visible |
	 *
	 *
	 * @element ANY
	 * @param {expression} ngHide If the {@link guide/expression expression} is truthy then
	 *     the element is shown or hidden respectively.
	 *
	 * @example
	  <example module="ngAnimate" deps="angular-animate.js" animations="true">
	    <file name="index.html">
	      Click me: <input type="checkbox" ng-model="checked" aria-label="Toggle ngShow"><br/>
	      <div>
	        Show:
	        <div class="check-element animate-hide" ng-show="checked">
	          <span class="glyphicon glyphicon-thumbs-up"></span> I show up when your checkbox is checked.
	        </div>
	      </div>
	      <div>
	        Hide:
	        <div class="check-element animate-hide" ng-hide="checked">
	          <span class="glyphicon glyphicon-thumbs-down"></span> I hide when your checkbox is checked.
	        </div>
	      </div>
	    </file>
	    <file name="glyphicons.css">
	      @import url(../../components/bootstrap-3.1.1/css/bootstrap.css);
	    </file>
	    <file name="animations.css">
	      .animate-hide {
	        transition: all linear 0.5s;
	        line-height: 20px;
	        opacity: 1;
	        padding: 10px;
	        border: 1px solid black;
	        background: white;
	      }
	
	      .animate-hide.ng-hide {
	        line-height: 0;
	        opacity: 0;
	        padding: 0 10px;
	      }
	
	      .check-element {
	        padding: 10px;
	        border: 1px solid black;
	        background: white;
	      }
	    </file>
	    <file name="protractor.js" type="protractor">
	      var thumbsUp = element(by.css('span.glyphicon-thumbs-up'));
	      var thumbsDown = element(by.css('span.glyphicon-thumbs-down'));
	
	      it('should check ng-show / ng-hide', function() {
	        expect(thumbsUp.isDisplayed()).toBeFalsy();
	        expect(thumbsDown.isDisplayed()).toBeTruthy();
	
	        element(by.model('checked')).click();
	
	        expect(thumbsUp.isDisplayed()).toBeTruthy();
	        expect(thumbsDown.isDisplayed()).toBeFalsy();
	      });
	    </file>
	  </example>
	 */
	var ngHideDirective = ['$animate', function($animate) {
	  return {
	    restrict: 'A',
	    multiElement: true,
	    link: function(scope, element, attr) {
	      scope.$watch(attr.ngHide, function ngHideWatchAction(value) {
	        // The comment inside of the ngShowDirective explains why we add and
	        // remove a temporary class for the show/hide animation
	        $animate[value ? 'addClass' : 'removeClass'](element,NG_HIDE_CLASS, {
	          tempClasses: NG_HIDE_IN_PROGRESS_CLASS
	        });
	      });
	    }
	  };
	}];
	
	/**
	 * @ngdoc directive
	 * @name ngStyle
	 * @restrict AC
	 *
	 * @description
	 * The `ngStyle` directive allows you to set CSS style on an HTML element conditionally.
	 *
	 * @element ANY
	 * @param {expression} ngStyle
	 *
	 * {@link guide/expression Expression} which evals to an
	 * object whose keys are CSS style names and values are corresponding values for those CSS
	 * keys.
	 *
	 * Since some CSS style names are not valid keys for an object, they must be quoted.
	 * See the 'background-color' style in the example below.
	 *
	 * @example
	   <example>
	     <file name="index.html">
	        <input type="button" value="set color" ng-click="myStyle={color:'red'}">
	        <input type="button" value="set background" ng-click="myStyle={'background-color':'blue'}">
	        <input type="button" value="clear" ng-click="myStyle={}">
	        <br/>
	        <span ng-style="myStyle">Sample Text</span>
	        <pre>myStyle={{myStyle}}</pre>
	     </file>
	     <file name="style.css">
	       span {
	         color: black;
	       }
	     </file>
	     <file name="protractor.js" type="protractor">
	       var colorSpan = element(by.css('span'));
	
	       it('should check ng-style', function() {
	         expect(colorSpan.getCssValue('color')).toBe('rgba(0, 0, 0, 1)');
	         element(by.css('input[value=\'set color\']')).click();
	         expect(colorSpan.getCssValue('color')).toBe('rgba(255, 0, 0, 1)');
	         element(by.css('input[value=clear]')).click();
	         expect(colorSpan.getCssValue('color')).toBe('rgba(0, 0, 0, 1)');
	       });
	     </file>
	   </example>
	 */
	var ngStyleDirective = ngDirective(function(scope, element, attr) {
	  scope.$watch(attr.ngStyle, function ngStyleWatchAction(newStyles, oldStyles) {
	    if (oldStyles && (newStyles !== oldStyles)) {
	      forEach(oldStyles, function(val, style) { element.css(style, '');});
	    }
	    if (newStyles) element.css(newStyles);
	  }, true);
	});
	
	/**
	 * @ngdoc directive
	 * @name ngSwitch
	 * @restrict EA
	 *
	 * @description
	 * The `ngSwitch` directive is used to conditionally swap DOM structure on your template based on a scope expression.
	 * Elements within `ngSwitch` but without `ngSwitchWhen` or `ngSwitchDefault` directives will be preserved at the location
	 * as specified in the template.
	 *
	 * The directive itself works similar to ngInclude, however, instead of downloading template code (or loading it
	 * from the template cache), `ngSwitch` simply chooses one of the nested elements and makes it visible based on which element
	 * matches the value obtained from the evaluated expression. In other words, you define a container element
	 * (where you place the directive), place an expression on the **`on="..."` attribute**
	 * (or the **`ng-switch="..."` attribute**), define any inner elements inside of the directive and place
	 * a when attribute per element. The when attribute is used to inform ngSwitch which element to display when the on
	 * expression is evaluated. If a matching expression is not found via a when attribute then an element with the default
	 * attribute is displayed.
	 *
	 * <div class="alert alert-info">
	 * Be aware that the attribute values to match against cannot be expressions. They are interpreted
	 * as literal string values to match against.
	 * For example, **`ng-switch-when="someVal"`** will match against the string `"someVal"` not against the
	 * value of the expression `$scope.someVal`.
	 * </div>
	
	 * @animations
	 * | Animation                        | Occurs                              |
	 * |----------------------------------|-------------------------------------|
	 * | {@link ng.$animate#enter enter}  | after the ngSwitch contents change and the matched child element is placed inside the container |
	 * | {@link ng.$animate#leave leave}  | after the ngSwitch contents change and just before the former contents are removed from the DOM |
	 *
	 * @usage
	 *
	 * ```
	 * <ANY ng-switch="expression">
	 *   <ANY ng-switch-when="matchValue1">...</ANY>
	 *   <ANY ng-switch-when="matchValue2">...</ANY>
	 *   <ANY ng-switch-default>...</ANY>
	 * </ANY>
	 * ```
	 *
	 *
	 * @scope
	 * @priority 1200
	 * @param {*} ngSwitch|on expression to match against <code>ng-switch-when</code>.
	 * On child elements add:
	 *
	 * * `ngSwitchWhen`: the case statement to match against. If match then this
	 *   case will be displayed. If the same match appears multiple times, all the
	 *   elements will be displayed.
	 * * `ngSwitchDefault`: the default case when no other case match. If there
	 *   are multiple default cases, all of them will be displayed when no other
	 *   case match.
	 *
	 *
	 * @example
	  <example module="switchExample" deps="angular-animate.js" animations="true">
	    <file name="index.html">
	      <div ng-controller="ExampleController">
	        <select ng-model="selection" ng-options="item for item in items">
	        </select>
	        <code>selection={{selection}}</code>
	        <hr/>
	        <div class="animate-switch-container"
	          ng-switch on="selection">
	            <div class="animate-switch" ng-switch-when="settings">Settings Div</div>
	            <div class="animate-switch" ng-switch-when="home">Home Span</div>
	            <div class="animate-switch" ng-switch-default>default</div>
	        </div>
	      </div>
	    </file>
	    <file name="script.js">
	      angular.module('switchExample', ['ngAnimate'])
	        .controller('ExampleController', ['$scope', function($scope) {
	          $scope.items = ['settings', 'home', 'other'];
	          $scope.selection = $scope.items[0];
	        }]);
	    </file>
	    <file name="animations.css">
	      .animate-switch-container {
	        position:relative;
	        background:white;
	        border:1px solid black;
	        height:40px;
	        overflow:hidden;
	      }
	
	      .animate-switch {
	        padding:10px;
	      }
	
	      .animate-switch.ng-animate {
	        transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;
	
	        position:absolute;
	        top:0;
	        left:0;
	        right:0;
	        bottom:0;
	      }
	
	      .animate-switch.ng-leave.ng-leave-active,
	      .animate-switch.ng-enter {
	        top:-50px;
	      }
	      .animate-switch.ng-leave,
	      .animate-switch.ng-enter.ng-enter-active {
	        top:0;
	      }
	    </file>
	    <file name="protractor.js" type="protractor">
	      var switchElem = element(by.css('[ng-switch]'));
	      var select = element(by.model('selection'));
	
	      it('should start in settings', function() {
	        expect(switchElem.getText()).toMatch(/Settings Div/);
	      });
	      it('should change to home', function() {
	        select.all(by.css('option')).get(1).click();
	        expect(switchElem.getText()).toMatch(/Home Span/);
	      });
	      it('should select default', function() {
	        select.all(by.css('option')).get(2).click();
	        expect(switchElem.getText()).toMatch(/default/);
	      });
	    </file>
	  </example>
	 */
	var ngSwitchDirective = ['$animate', '$compile', function($animate, $compile) {
	  return {
	    require: 'ngSwitch',
	
	    // asks for $scope to fool the BC controller module
	    controller: ['$scope', function ngSwitchController() {
	     this.cases = {};
	    }],
	    link: function(scope, element, attr, ngSwitchController) {
	      var watchExpr = attr.ngSwitch || attr.on,
	          selectedTranscludes = [],
	          selectedElements = [],
	          previousLeaveAnimations = [],
	          selectedScopes = [];
	
	      var spliceFactory = function(array, index) {
	          return function() { array.splice(index, 1); };
	      };
	
	      scope.$watch(watchExpr, function ngSwitchWatchAction(value) {
	        var i, ii;
	        for (i = 0, ii = previousLeaveAnimations.length; i < ii; ++i) {
	          $animate.cancel(previousLeaveAnimations[i]);
	        }
	        previousLeaveAnimations.length = 0;
	
	        for (i = 0, ii = selectedScopes.length; i < ii; ++i) {
	          var selected = getBlockNodes(selectedElements[i].clone);
	          selectedScopes[i].$destroy();
	          var promise = previousLeaveAnimations[i] = $animate.leave(selected);
	          promise.then(spliceFactory(previousLeaveAnimations, i));
	        }
	
	        selectedElements.length = 0;
	        selectedScopes.length = 0;
	
	        if ((selectedTranscludes = ngSwitchController.cases['!' + value] || ngSwitchController.cases['?'])) {
	          forEach(selectedTranscludes, function(selectedTransclude) {
	            selectedTransclude.transclude(function(caseElement, selectedScope) {
	              selectedScopes.push(selectedScope);
	              var anchor = selectedTransclude.element;
	              caseElement[caseElement.length++] = $compile.$$createComment('end ngSwitchWhen');
	              var block = { clone: caseElement };
	
	              selectedElements.push(block);
	              $animate.enter(caseElement, anchor.parent(), anchor);
	            });
	          });
	        }
	      });
	    }
	  };
	}];
	
	var ngSwitchWhenDirective = ngDirective({
	  transclude: 'element',
	  priority: 1200,
	  require: '^ngSwitch',
	  multiElement: true,
	  link: function(scope, element, attrs, ctrl, $transclude) {
	    ctrl.cases['!' + attrs.ngSwitchWhen] = (ctrl.cases['!' + attrs.ngSwitchWhen] || []);
	    ctrl.cases['!' + attrs.ngSwitchWhen].push({ transclude: $transclude, element: element });
	  }
	});
	
	var ngSwitchDefaultDirective = ngDirective({
	  transclude: 'element',
	  priority: 1200,
	  require: '^ngSwitch',
	  multiElement: true,
	  link: function(scope, element, attr, ctrl, $transclude) {
	    ctrl.cases['?'] = (ctrl.cases['?'] || []);
	    ctrl.cases['?'].push({ transclude: $transclude, element: element });
	   }
	});
	
	/**
	 * @ngdoc directive
	 * @name ngTransclude
	 * @restrict EAC
	 *
	 * @description
	 * Directive that marks the insertion point for the transcluded DOM of the nearest parent directive that uses transclusion.
	 *
	 * You can specify that you want to insert a named transclusion slot, instead of the default slot, by providing the slot name
	 * as the value of the `ng-transclude` or `ng-transclude-slot` attribute.
	 *
	 * If the transcluded content is not empty (i.e. contains one or more DOM nodes, including whitespace text nodes), any existing
	 * content of this element will be removed before the transcluded content is inserted.
	 * If the transcluded content is empty, the existing content is left intact. This lets you provide fallback content in the case
	 * that no transcluded content is provided.
	 *
	 * @element ANY
	 *
	 * @param {string} ngTransclude|ngTranscludeSlot the name of the slot to insert at this point. If this is not provided, is empty
	 *                                               or its value is the same as the name of the attribute then the default slot is used.
	 *
	 * @example
	 * ### Basic transclusion
	 * This example demonstrates basic transclusion of content into a component directive.
	 * <example name="simpleTranscludeExample" module="transcludeExample">
	 *   <file name="index.html">
	 *     <script>
	 *       angular.module('transcludeExample', [])
	 *        .directive('pane', function(){
	 *           return {
	 *             restrict: 'E',
	 *             transclude: true,
	 *             scope: { title:'@' },
	 *             template: '<div style="border: 1px solid black;">' +
	 *                         '<div style="background-color: gray">{{title}}</div>' +
	 *                         '<ng-transclude></ng-transclude>' +
	 *                       '</div>'
	 *           };
	 *       })
	 *       .controller('ExampleController', ['$scope', function($scope) {
	 *         $scope.title = 'Lorem Ipsum';
	 *         $scope.text = 'Neque porro quisquam est qui dolorem ipsum quia dolor...';
	 *       }]);
	 *     </script>
	 *     <div ng-controller="ExampleController">
	 *       <input ng-model="title" aria-label="title"> <br/>
	 *       <textarea ng-model="text" aria-label="text"></textarea> <br/>
	 *       <pane title="{{title}}">{{text}}</pane>
	 *     </div>
	 *   </file>
	 *   <file name="protractor.js" type="protractor">
	 *      it('should have transcluded', function() {
	 *        var titleElement = element(by.model('title'));
	 *        titleElement.clear();
	 *        titleElement.sendKeys('TITLE');
	 *        var textElement = element(by.model('text'));
	 *        textElement.clear();
	 *        textElement.sendKeys('TEXT');
	 *        expect(element(by.binding('title')).getText()).toEqual('TITLE');
	 *        expect(element(by.binding('text')).getText()).toEqual('TEXT');
	 *      });
	 *   </file>
	 * </example>
	 *
	 * @example
	 * ### Transclude fallback content
	 * This example shows how to use `NgTransclude` with fallback content, that
	 * is displayed if no transcluded content is provided.
	 *
	 * <example module="transcludeFallbackContentExample">
	 * <file name="index.html">
	 * <script>
	 * angular.module('transcludeFallbackContentExample', [])
	 * .directive('myButton', function(){
	 *             return {
	 *               restrict: 'E',
	 *               transclude: true,
	 *               scope: true,
	 *               template: '<button style="cursor: pointer;">' +
	 *                           '<ng-transclude>' +
	 *                             '<b style="color: red;">Button1</b>' +
	 *                           '</ng-transclude>' +
	 *                         '</button>'
	 *             };
	 *         });
	 * </script>
	 * <!-- fallback button content -->
	 * <my-button id="fallback"></my-button>
	 * <!-- modified button content -->
	 * <my-button id="modified">
	 *   <i style="color: green;">Button2</i>
	 * </my-button>
	 * </file>
	 * <file name="protractor.js" type="protractor">
	 * it('should have different transclude element content', function() {
	 *          expect(element(by.id('fallback')).getText()).toBe('Button1');
	 *          expect(element(by.id('modified')).getText()).toBe('Button2');
	 *        });
	 * </file>
	 * </example>
	 *
	 * @example
	 * ### Multi-slot transclusion
	 * This example demonstrates using multi-slot transclusion in a component directive.
	 * <example name="multiSlotTranscludeExample" module="multiSlotTranscludeExample">
	 *   <file name="index.html">
	 *    <style>
	 *      .title, .footer {
	 *        background-color: gray
	 *      }
	 *    </style>
	 *    <div ng-controller="ExampleController">
	 *      <input ng-model="title" aria-label="title"> <br/>
	 *      <textarea ng-model="text" aria-label="text"></textarea> <br/>
	 *      <pane>
	 *        <pane-title><a ng-href="{{link}}">{{title}}</a></pane-title>
	 *        <pane-body><p>{{text}}</p></pane-body>
	 *      </pane>
	 *    </div>
	 *   </file>
	 *   <file name="app.js">
	 *    angular.module('multiSlotTranscludeExample', [])
	 *     .directive('pane', function(){
	 *        return {
	 *          restrict: 'E',
	 *          transclude: {
	 *            'title': '?paneTitle',
	 *            'body': 'paneBody',
	 *            'footer': '?paneFooter'
	 *          },
	 *          template: '<div style="border: 1px solid black;">' +
	 *                      '<div class="title" ng-transclude="title">Fallback Title</div>' +
	 *                      '<div ng-transclude="body"></div>' +
	 *                      '<div class="footer" ng-transclude="footer">Fallback Footer</div>' +
	 *                    '</div>'
	 *        };
	 *    })
	 *    .controller('ExampleController', ['$scope', function($scope) {
	 *      $scope.title = 'Lorem Ipsum';
	 *      $scope.link = "https://google.com";
	 *      $scope.text = 'Neque porro quisquam est qui dolorem ipsum quia dolor...';
	 *    }]);
	 *   </file>
	 *   <file name="protractor.js" type="protractor">
	 *      it('should have transcluded the title and the body', function() {
	 *        var titleElement = element(by.model('title'));
	 *        titleElement.clear();
	 *        titleElement.sendKeys('TITLE');
	 *        var textElement = element(by.model('text'));
	 *        textElement.clear();
	 *        textElement.sendKeys('TEXT');
	 *        expect(element(by.css('.title')).getText()).toEqual('TITLE');
	 *        expect(element(by.binding('text')).getText()).toEqual('TEXT');
	 *        expect(element(by.css('.footer')).getText()).toEqual('Fallback Footer');
	 *      });
	 *   </file>
	 * </example>
	 */
	var ngTranscludeMinErr = minErr('ngTransclude');
	var ngTranscludeDirective = ngDirective({
	  restrict: 'EAC',
	  link: function($scope, $element, $attrs, controller, $transclude) {
	
	    if ($attrs.ngTransclude === $attrs.$attr.ngTransclude) {
	      // If the attribute is of the form: `ng-transclude="ng-transclude"`
	      // then treat it like the default
	      $attrs.ngTransclude = '';
	    }
	
	    function ngTranscludeCloneAttachFn(clone) {
	      if (clone.length) {
	        $element.empty();
	        $element.append(clone);
	      }
	    }
	
	    if (!$transclude) {
	      throw ngTranscludeMinErr('orphan',
	       'Illegal use of ngTransclude directive in the template! ' +
	       'No parent directive that requires a transclusion found. ' +
	       'Element: {0}',
	       startingTag($element));
	    }
	
	    // If there is no slot name defined or the slot name is not optional
	    // then transclude the slot
	    var slotName = $attrs.ngTransclude || $attrs.ngTranscludeSlot;
	    $transclude(ngTranscludeCloneAttachFn, null, slotName);
	  }
	});
	
	/**
	 * @ngdoc directive
	 * @name script
	 * @restrict E
	 *
	 * @description
	 * Load the content of a `<script>` element into {@link ng.$templateCache `$templateCache`}, so that the
	 * template can be used by {@link ng.directive:ngInclude `ngInclude`},
	 * {@link ngRoute.directive:ngView `ngView`}, or {@link guide/directive directives}. The type of the
	 * `<script>` element must be specified as `text/ng-template`, and a cache name for the template must be
	 * assigned through the element's `id`, which can then be used as a directive's `templateUrl`.
	 *
	 * @param {string} type Must be set to `'text/ng-template'`.
	 * @param {string} id Cache name of the template.
	 *
	 * @example
	  <example>
	    <file name="index.html">
	      <script type="text/ng-template" id="/tpl.html">
	        Content of the template.
	      </script>
	
	      <a ng-click="currentTpl='/tpl.html'" id="tpl-link">Load inlined template</a>
	      <div id="tpl-content" ng-include src="currentTpl"></div>
	    </file>
	    <file name="protractor.js" type="protractor">
	      it('should load template defined inside script tag', function() {
	        element(by.css('#tpl-link')).click();
	        expect(element(by.css('#tpl-content')).getText()).toMatch(/Content of the template/);
	      });
	    </file>
	  </example>
	 */
	var scriptDirective = ['$templateCache', function($templateCache) {
	  return {
	    restrict: 'E',
	    terminal: true,
	    compile: function(element, attr) {
	      if (attr.type == 'text/ng-template') {
	        var templateUrl = attr.id,
	            text = element[0].text;
	
	        $templateCache.put(templateUrl, text);
	      }
	    }
	  };
	}];
	
	var noopNgModelController = { $setViewValue: noop, $render: noop };
	
	function chromeHack(optionElement) {
	  // Workaround for https://code.google.com/p/chromium/issues/detail?id=381459
	  // Adding an <option selected="selected"> element to a <select required="required"> should
	  // automatically select the new element
	  if (optionElement[0].hasAttribute('selected')) {
	    optionElement[0].selected = true;
	  }
	}
	
	/**
	 * @ngdoc type
	 * @name  select.SelectController
	 * @description
	 * The controller for the `<select>` directive. This provides support for reading
	 * and writing the selected value(s) of the control and also coordinates dynamically
	 * added `<option>` elements, perhaps by an `ngRepeat` directive.
	 */
	var SelectController =
	        ['$element', '$scope', function($element, $scope) {
	
	  var self = this,
	      optionsMap = new HashMap();
	
	  // If the ngModel doesn't get provided then provide a dummy noop version to prevent errors
	  self.ngModelCtrl = noopNgModelController;
	
	  // The "unknown" option is one that is prepended to the list if the viewValue
	  // does not match any of the options. When it is rendered the value of the unknown
	  // option is '? XXX ?' where XXX is the hashKey of the value that is not known.
	  //
	  // We can't just jqLite('<option>') since jqLite is not smart enough
	  // to create it in <select> and IE barfs otherwise.
	  self.unknownOption = jqLite(window.document.createElement('option'));
	  self.renderUnknownOption = function(val) {
	    var unknownVal = '? ' + hashKey(val) + ' ?';
	    self.unknownOption.val(unknownVal);
	    $element.prepend(self.unknownOption);
	    $element.val(unknownVal);
	  };
	
	  $scope.$on('$destroy', function() {
	    // disable unknown option so that we don't do work when the whole select is being destroyed
	    self.renderUnknownOption = noop;
	  });
	
	  self.removeUnknownOption = function() {
	    if (self.unknownOption.parent()) self.unknownOption.remove();
	  };
	
	
	  // Read the value of the select control, the implementation of this changes depending
	  // upon whether the select can have multiple values and whether ngOptions is at work.
	  self.readValue = function readSingleValue() {
	    self.removeUnknownOption();
	    return $element.val();
	  };
	
	
	  // Write the value to the select control, the implementation of this changes depending
	  // upon whether the select can have multiple values and whether ngOptions is at work.
	  self.writeValue = function writeSingleValue(value) {
	    if (self.hasOption(value)) {
	      self.removeUnknownOption();
	      $element.val(value);
	      if (value === '') self.emptyOption.prop('selected', true); // to make IE9 happy
	    } else {
	      if (value == null && self.emptyOption) {
	        self.removeUnknownOption();
	        $element.val('');
	      } else {
	        self.renderUnknownOption(value);
	      }
	    }
	  };
	
	
	  // Tell the select control that an option, with the given value, has been added
	  self.addOption = function(value, element) {
	    // Skip comment nodes, as they only pollute the `optionsMap`
	    if (element[0].nodeType === NODE_TYPE_COMMENT) return;
	
	    assertNotHasOwnProperty(value, '"option value"');
	    if (value === '') {
	      self.emptyOption = element;
	    }
	    var count = optionsMap.get(value) || 0;
	    optionsMap.put(value, count + 1);
	    self.ngModelCtrl.$render();
	    chromeHack(element);
	  };
	
	  // Tell the select control that an option, with the given value, has been removed
	  self.removeOption = function(value) {
	    var count = optionsMap.get(value);
	    if (count) {
	      if (count === 1) {
	        optionsMap.remove(value);
	        if (value === '') {
	          self.emptyOption = undefined;
	        }
	      } else {
	        optionsMap.put(value, count - 1);
	      }
	    }
	  };
	
	  // Check whether the select control has an option matching the given value
	  self.hasOption = function(value) {
	    return !!optionsMap.get(value);
	  };
	
	
	  self.registerOption = function(optionScope, optionElement, optionAttrs, interpolateValueFn, interpolateTextFn) {
	
	    if (interpolateValueFn) {
	      // The value attribute is interpolated
	      var oldVal;
	      optionAttrs.$observe('value', function valueAttributeObserveAction(newVal) {
	        if (isDefined(oldVal)) {
	          self.removeOption(oldVal);
	        }
	        oldVal = newVal;
	        self.addOption(newVal, optionElement);
	      });
	    } else if (interpolateTextFn) {
	      // The text content is interpolated
	      optionScope.$watch(interpolateTextFn, function interpolateWatchAction(newVal, oldVal) {
	        optionAttrs.$set('value', newVal);
	        if (oldVal !== newVal) {
	          self.removeOption(oldVal);
	        }
	        self.addOption(newVal, optionElement);
	      });
	    } else {
	      // The value attribute is static
	      self.addOption(optionAttrs.value, optionElement);
	    }
	
	    optionElement.on('$destroy', function() {
	      self.removeOption(optionAttrs.value);
	      self.ngModelCtrl.$render();
	    });
	  };
	}];
	
	/**
	 * @ngdoc directive
	 * @name select
	 * @restrict E
	 *
	 * @description
	 * HTML `SELECT` element with angular data-binding.
	 *
	 * The `select` directive is used together with {@link ngModel `ngModel`} to provide data-binding
	 * between the scope and the `<select>` control (including setting default values).
	 * It also handles dynamic `<option>` elements, which can be added using the {@link ngRepeat `ngRepeat}` or
	 * {@link ngOptions `ngOptions`} directives.
	 *
	 * When an item in the `<select>` menu is selected, the value of the selected option will be bound
	 * to the model identified by the `ngModel` directive. With static or repeated options, this is
	 * the content of the `value` attribute or the textContent of the `<option>`, if the value attribute is missing.
	 * If you want dynamic value attributes, you can use interpolation inside the value attribute.
	 *
	 * <div class="alert alert-warning">
	 * Note that the value of a `select` directive used without `ngOptions` is always a string.
	 * When the model needs to be bound to a non-string value, you must either explicitly convert it
	 * using a directive (see example below) or use `ngOptions` to specify the set of options.
	 * This is because an option element can only be bound to string values at present.
	 * </div>
	 *
	 * If the viewValue of `ngModel` does not match any of the options, then the control
	 * will automatically add an "unknown" option, which it then removes when the mismatch is resolved.
	 *
	 * Optionally, a single hard-coded `<option>` element, with the value set to an empty string, can
	 * be nested into the `<select>` element. This element will then represent the `null` or "not selected"
	 * option. See example below for demonstration.
	 *
	 * <div class="alert alert-info">
	 * In many cases, `ngRepeat` can be used on `<option>` elements instead of {@link ng.directive:ngOptions
	 * ngOptions} to achieve a similar result. However, `ngOptions` provides some benefits, such as
	 * more flexibility in how the `<select>`'s model is assigned via the `select` **`as`** part of the
	 * comprehension expression, and additionally in reducing memory and increasing speed by not creating
	 * a new scope for each repeated instance.
	 * </div>
	 *
	 *
	 * @param {string} ngModel Assignable angular expression to data-bind to.
	 * @param {string=} name Property name of the form under which the control is published.
	 * @param {string=} multiple Allows multiple options to be selected. The selected values will be
	 *     bound to the model as an array.
	 * @param {string=} required Sets `required` validation error key if the value is not entered.
	 * @param {string=} ngRequired Adds required attribute and required validation constraint to
	 * the element when the ngRequired expression evaluates to true. Use ngRequired instead of required
	 * when you want to data-bind to the required attribute.
	 * @param {string=} ngChange Angular expression to be executed when selected option(s) changes due to user
	 *    interaction with the select element.
	 * @param {string=} ngOptions sets the options that the select is populated with and defines what is
	 * set on the model on selection. See {@link ngOptions `ngOptions`}.
	 *
	 * @example
	 * ### Simple `select` elements with static options
	 *
	 * <example name="static-select" module="staticSelect">
	 * <file name="index.html">
	 * <div ng-controller="ExampleController">
	 *   <form name="myForm">
	 *     <label for="singleSelect"> Single select: </label><br>
	 *     <select name="singleSelect" ng-model="data.singleSelect">
	 *       <option value="option-1">Option 1</option>
	 *       <option value="option-2">Option 2</option>
	 *     </select><br>
	 *
	 *     <label for="singleSelect"> Single select with "not selected" option and dynamic option values: </label><br>
	 *     <select name="singleSelect" id="singleSelect" ng-model="data.singleSelect">
	 *       <option value="">---Please select---</option> <!-- not selected / blank option -->
	 *       <option value="{{data.option1}}">Option 1</option> <!-- interpolation -->
	 *       <option value="option-2">Option 2</option>
	 *     </select><br>
	 *     <button ng-click="forceUnknownOption()">Force unknown option</button><br>
	 *     <tt>singleSelect = {{data.singleSelect}}</tt>
	 *
	 *     <hr>
	 *     <label for="multipleSelect"> Multiple select: </label><br>
	 *     <select name="multipleSelect" id="multipleSelect" ng-model="data.multipleSelect" multiple>
	 *       <option value="option-1">Option 1</option>
	 *       <option value="option-2">Option 2</option>
	 *       <option value="option-3">Option 3</option>
	 *     </select><br>
	 *     <tt>multipleSelect = {{data.multipleSelect}}</tt><br/>
	 *   </form>
	 * </div>
	 * </file>
	 * <file name="app.js">
	 *  angular.module('staticSelect', [])
	 *    .controller('ExampleController', ['$scope', function($scope) {
	 *      $scope.data = {
	 *       singleSelect: null,
	 *       multipleSelect: [],
	 *       option1: 'option-1',
	 *      };
	 *
	 *      $scope.forceUnknownOption = function() {
	 *        $scope.data.singleSelect = 'nonsense';
	 *      };
	 *   }]);
	 * </file>
	 *</example>
	 *
	 * ### Using `ngRepeat` to generate `select` options
	 * <example name="ngrepeat-select" module="ngrepeatSelect">
	 * <file name="index.html">
	 * <div ng-controller="ExampleController">
	 *   <form name="myForm">
	 *     <label for="repeatSelect"> Repeat select: </label>
	 *     <select name="repeatSelect" id="repeatSelect" ng-model="data.repeatSelect">
	 *       <option ng-repeat="option in data.availableOptions" value="{{option.id}}">{{option.name}}</option>
	 *     </select>
	 *   </form>
	 *   <hr>
	 *   <tt>repeatSelect = {{data.repeatSelect}}</tt><br/>
	 * </div>
	 * </file>
	 * <file name="app.js">
	 *  angular.module('ngrepeatSelect', [])
	 *    .controller('ExampleController', ['$scope', function($scope) {
	 *      $scope.data = {
	 *       repeatSelect: null,
	 *       availableOptions: [
	 *         {id: '1', name: 'Option A'},
	 *         {id: '2', name: 'Option B'},
	 *         {id: '3', name: 'Option C'}
	 *       ],
	 *      };
	 *   }]);
	 * </file>
	 *</example>
	 *
	 *
	 * ### Using `select` with `ngOptions` and setting a default value
	 * See the {@link ngOptions ngOptions documentation} for more `ngOptions` usage examples.
	 *
	 * <example name="select-with-default-values" module="defaultValueSelect">
	 * <file name="index.html">
	 * <div ng-controller="ExampleController">
	 *   <form name="myForm">
	 *     <label for="mySelect">Make a choice:</label>
	 *     <select name="mySelect" id="mySelect"
	 *       ng-options="option.name for option in data.availableOptions track by option.id"
	 *       ng-model="data.selectedOption"></select>
	 *   </form>
	 *   <hr>
	 *   <tt>option = {{data.selectedOption}}</tt><br/>
	 * </div>
	 * </file>
	 * <file name="app.js">
	 *  angular.module('defaultValueSelect', [])
	 *    .controller('ExampleController', ['$scope', function($scope) {
	 *      $scope.data = {
	 *       availableOptions: [
	 *         {id: '1', name: 'Option A'},
	 *         {id: '2', name: 'Option B'},
	 *         {id: '3', name: 'Option C'}
	 *       ],
	 *       selectedOption: {id: '3', name: 'Option C'} //This sets the default value of the select in the ui
	 *       };
	 *   }]);
	 * </file>
	 *</example>
	 *
	 *
	 * ### Binding `select` to a non-string value via `ngModel` parsing / formatting
	 *
	 * <example name="select-with-non-string-options" module="nonStringSelect">
	 *   <file name="index.html">
	 *     <select ng-model="model.id" convert-to-number>
	 *       <option value="0">Zero</option>
	 *       <option value="1">One</option>
	 *       <option value="2">Two</option>
	 *     </select>
	 *     {{ model }}
	 *   </file>
	 *   <file name="app.js">
	 *     angular.module('nonStringSelect', [])
	 *       .run(function($rootScope) {
	 *         $rootScope.model = { id: 2 };
	 *       })
	 *       .directive('convertToNumber', function() {
	 *         return {
	 *           require: 'ngModel',
	 *           link: function(scope, element, attrs, ngModel) {
	 *             ngModel.$parsers.push(function(val) {
	 *               return parseInt(val, 10);
	 *             });
	 *             ngModel.$formatters.push(function(val) {
	 *               return '' + val;
	 *             });
	 *           }
	 *         };
	 *       });
	 *   </file>
	 *   <file name="protractor.js" type="protractor">
	 *     it('should initialize to model', function() {
	 *       var select = element(by.css('select'));
	 *       expect(element(by.model('model.id')).$('option:checked').getText()).toEqual('Two');
	 *     });
	 *   </file>
	 * </example>
	 *
	 */
	var selectDirective = function() {
	
	  return {
	    restrict: 'E',
	    require: ['select', '?ngModel'],
	    controller: SelectController,
	    priority: 1,
	    link: {
	      pre: selectPreLink,
	      post: selectPostLink
	    }
	  };
	
	  function selectPreLink(scope, element, attr, ctrls) {
	
	      // if ngModel is not defined, we don't need to do anything
	      var ngModelCtrl = ctrls[1];
	      if (!ngModelCtrl) return;
	
	      var selectCtrl = ctrls[0];
	
	      selectCtrl.ngModelCtrl = ngModelCtrl;
	
	      // When the selected item(s) changes we delegate getting the value of the select control
	      // to the `readValue` method, which can be changed if the select can have multiple
	      // selected values or if the options are being generated by `ngOptions`
	      element.on('change', function() {
	        scope.$apply(function() {
	          ngModelCtrl.$setViewValue(selectCtrl.readValue());
	        });
	      });
	
	      // If the select allows multiple values then we need to modify how we read and write
	      // values from and to the control; also what it means for the value to be empty and
	      // we have to add an extra watch since ngModel doesn't work well with arrays - it
	      // doesn't trigger rendering if only an item in the array changes.
	      if (attr.multiple) {
	
	        // Read value now needs to check each option to see if it is selected
	        selectCtrl.readValue = function readMultipleValue() {
	          var array = [];
	          forEach(element.find('option'), function(option) {
	            if (option.selected) {
	              array.push(option.value);
	            }
	          });
	          return array;
	        };
	
	        // Write value now needs to set the selected property of each matching option
	        selectCtrl.writeValue = function writeMultipleValue(value) {
	          var items = new HashMap(value);
	          forEach(element.find('option'), function(option) {
	            option.selected = isDefined(items.get(option.value));
	          });
	        };
	
	        // we have to do it on each watch since ngModel watches reference, but
	        // we need to work of an array, so we need to see if anything was inserted/removed
	        var lastView, lastViewRef = NaN;
	        scope.$watch(function selectMultipleWatch() {
	          if (lastViewRef === ngModelCtrl.$viewValue && !equals(lastView, ngModelCtrl.$viewValue)) {
	            lastView = shallowCopy(ngModelCtrl.$viewValue);
	            ngModelCtrl.$render();
	          }
	          lastViewRef = ngModelCtrl.$viewValue;
	        });
	
	        // If we are a multiple select then value is now a collection
	        // so the meaning of $isEmpty changes
	        ngModelCtrl.$isEmpty = function(value) {
	          return !value || value.length === 0;
	        };
	
	      }
	    }
	
	    function selectPostLink(scope, element, attrs, ctrls) {
	      // if ngModel is not defined, we don't need to do anything
	      var ngModelCtrl = ctrls[1];
	      if (!ngModelCtrl) return;
	
	      var selectCtrl = ctrls[0];
	
	      // We delegate rendering to the `writeValue` method, which can be changed
	      // if the select can have multiple selected values or if the options are being
	      // generated by `ngOptions`.
	      // This must be done in the postLink fn to prevent $render to be called before
	      // all nodes have been linked correctly.
	      ngModelCtrl.$render = function() {
	        selectCtrl.writeValue(ngModelCtrl.$viewValue);
	      };
	    }
	};
	
	
	// The option directive is purely designed to communicate the existence (or lack of)
	// of dynamically created (and destroyed) option elements to their containing select
	// directive via its controller.
	var optionDirective = ['$interpolate', function($interpolate) {
	  return {
	    restrict: 'E',
	    priority: 100,
	    compile: function(element, attr) {
	      if (isDefined(attr.value)) {
	        // If the value attribute is defined, check if it contains an interpolation
	        var interpolateValueFn = $interpolate(attr.value, true);
	      } else {
	        // If the value attribute is not defined then we fall back to the
	        // text content of the option element, which may be interpolated
	        var interpolateTextFn = $interpolate(element.text(), true);
	        if (!interpolateTextFn) {
	          attr.$set('value', element.text());
	        }
	      }
	
	      return function(scope, element, attr) {
	        // This is an optimization over using ^^ since we don't want to have to search
	        // all the way to the root of the DOM for every single option element
	        var selectCtrlName = '$selectController',
	            parent = element.parent(),
	            selectCtrl = parent.data(selectCtrlName) ||
	              parent.parent().data(selectCtrlName); // in case we are in optgroup
	
	        if (selectCtrl) {
	          selectCtrl.registerOption(scope, element, attr, interpolateValueFn, interpolateTextFn);
	        }
	      };
	    }
	  };
	}];
	
	var styleDirective = valueFn({
	  restrict: 'E',
	  terminal: false
	});
	
	/**
	 * @ngdoc directive
	 * @name ngRequired
	 *
	 * @description
	 *
	 * ngRequired adds the required {@link ngModel.NgModelController#$validators `validator`} to {@link ngModel `ngModel`}.
	 * It is most often used for {@link input `input`} and {@link select `select`} controls, but can also be
	 * applied to custom controls.
	 *
	 * The directive sets the `required` attribute on the element if the Angular expression inside
	 * `ngRequired` evaluates to true. A special directive for setting `required` is necessary because we
	 * cannot use interpolation inside `required`. See the {@link guide/interpolation interpolation guide}
	 * for more info.
	 *
	 * The validator will set the `required` error key to true if the `required` attribute is set and
	 * calling {@link ngModel.NgModelController#$isEmpty `NgModelController.$isEmpty`} with the
	 * {@link ngModel.NgModelController#$viewValue `ngModel.$viewValue`} returns `true`. For example, the
	 * `$isEmpty()` implementation for `input[text]` checks the length of the `$viewValue`. When developing
	 * custom controls, `$isEmpty()` can be overwritten to account for a $viewValue that is not string-based.
	 *
	 * @example
	 * <example name="ngRequiredDirective" module="ngRequiredExample">
	 *   <file name="index.html">
	 *     <script>
	 *       angular.module('ngRequiredExample', [])
	 *         .controller('ExampleController', ['$scope', function($scope) {
	 *           $scope.required = true;
	 *         }]);
	 *     </script>
	 *     <div ng-controller="ExampleController">
	 *       <form name="form">
	 *         <label for="required">Toggle required: </label>
	 *         <input type="checkbox" ng-model="required" id="required" />
	 *         <br>
	 *         <label for="input">This input must be filled if `required` is true: </label>
	 *         <input type="text" ng-model="model" id="input" name="input" ng-required="required" /><br>
	 *         <hr>
	 *         required error set? = <code>{{form.input.$error.required}}</code><br>
	 *         model = <code>{{model}}</code>
	 *       </form>
	 *     </div>
	 *   </file>
	 *   <file name="protractor.js" type="protractor">
	       var required = element(by.binding('form.input.$error.required'));
	       var model = element(by.binding('model'));
	       var input = element(by.id('input'));
	
	       it('should set the required error', function() {
	         expect(required.getText()).toContain('true');
	
	         input.sendKeys('123');
	         expect(required.getText()).not.toContain('true');
	         expect(model.getText()).toContain('123');
	       });
	 *   </file>
	 * </example>
	 */
	var requiredDirective = function() {
	  return {
	    restrict: 'A',
	    require: '?ngModel',
	    link: function(scope, elm, attr, ctrl) {
	      if (!ctrl) return;
	      attr.required = true; // force truthy in case we are on non input element
	
	      ctrl.$validators.required = function(modelValue, viewValue) {
	        return !attr.required || !ctrl.$isEmpty(viewValue);
	      };
	
	      attr.$observe('required', function() {
	        ctrl.$validate();
	      });
	    }
	  };
	};
	
	/**
	 * @ngdoc directive
	 * @name ngPattern
	 *
	 * @description
	 *
	 * ngPattern adds the pattern {@link ngModel.NgModelController#$validators `validator`} to {@link ngModel `ngModel`}.
	 * It is most often used for text-based {@link input `input`} controls, but can also be applied to custom text-based controls.
	 *
	 * The validator sets the `pattern` error key if the {@link ngModel.NgModelController#$viewValue `ngModel.$viewValue`}
	 * does not match a RegExp which is obtained by evaluating the Angular expression given in the
	 * `ngPattern` attribute value:
	 * * If the expression evaluates to a RegExp object, then this is used directly.
	 * * If the expression evaluates to a string, then it will be converted to a RegExp after wrapping it
	 * in `^` and `$` characters. For instance, `"abc"` will be converted to `new RegExp('^abc$')`.
	 *
	 * <div class="alert alert-info">
	 * **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to
	 * start at the index of the last search's match, thus not taking the whole input value into
	 * account.
	 * </div>
	 *
	 * <div class="alert alert-info">
	 * **Note:** This directive is also added when the plain `pattern` attribute is used, with two
	 * differences:
	 * <ol>
	 *   <li>
	 *     `ngPattern` does not set the `pattern` attribute and therefore HTML5 constraint validation is
	 *     not available.
	 *   </li>
	 *   <li>
	 *     The `ngPattern` attribute must be an expression, while the `pattern` value must be
	 *     interpolated.
	 *   </li>
	 * </ol>
	 * </div>
	 *
	 * @example
	 * <example name="ngPatternDirective" module="ngPatternExample">
	 *   <file name="index.html">
	 *     <script>
	 *       angular.module('ngPatternExample', [])
	 *         .controller('ExampleController', ['$scope', function($scope) {
	 *           $scope.regex = '\\d+';
	 *         }]);
	 *     </script>
	 *     <div ng-controller="ExampleController">
	 *       <form name="form">
	 *         <label for="regex">Set a pattern (regex string): </label>
	 *         <input type="text" ng-model="regex" id="regex" />
	 *         <br>
	 *         <label for="input">This input is restricted by the current pattern: </label>
	 *         <input type="text" ng-model="model" id="input" name="input" ng-pattern="regex" /><br>
	 *         <hr>
	 *         input valid? = <code>{{form.input.$valid}}</code><br>
	 *         model = <code>{{model}}</code>
	 *       </form>
	 *     </div>
	 *   </file>
	 *   <file name="protractor.js" type="protractor">
	       var model = element(by.binding('model'));
	       var input = element(by.id('input'));
	
	       it('should validate the input with the default pattern', function() {
	         input.sendKeys('aaa');
	         expect(model.getText()).not.toContain('aaa');
	
	         input.clear().then(function() {
	           input.sendKeys('123');
	           expect(model.getText()).toContain('123');
	         });
	       });
	 *   </file>
	 * </example>
	 */
	var patternDirective = function() {
	  return {
	    restrict: 'A',
	    require: '?ngModel',
	    link: function(scope, elm, attr, ctrl) {
	      if (!ctrl) return;
	
	      var regexp, patternExp = attr.ngPattern || attr.pattern;
	      attr.$observe('pattern', function(regex) {
	        if (isString(regex) && regex.length > 0) {
	          regex = new RegExp('^' + regex + '$');
	        }
	
	        if (regex && !regex.test) {
	          throw minErr('ngPattern')('noregexp',
	            'Expected {0} to be a RegExp but was {1}. Element: {2}', patternExp,
	            regex, startingTag(elm));
	        }
	
	        regexp = regex || undefined;
	        ctrl.$validate();
	      });
	
	      ctrl.$validators.pattern = function(modelValue, viewValue) {
	        // HTML5 pattern constraint validates the input value, so we validate the viewValue
	        return ctrl.$isEmpty(viewValue) || isUndefined(regexp) || regexp.test(viewValue);
	      };
	    }
	  };
	};
	
	/**
	 * @ngdoc directive
	 * @name ngMaxlength
	 *
	 * @description
	 *
	 * ngMaxlength adds the maxlength {@link ngModel.NgModelController#$validators `validator`} to {@link ngModel `ngModel`}.
	 * It is most often used for text-based {@link input `input`} controls, but can also be applied to custom text-based controls.
	 *
	 * The validator sets the `maxlength` error key if the {@link ngModel.NgModelController#$viewValue `ngModel.$viewValue`}
	 * is longer than the integer obtained by evaluating the Angular expression given in the
	 * `ngMaxlength` attribute value.
	 *
	 * <div class="alert alert-info">
	 * **Note:** This directive is also added when the plain `maxlength` attribute is used, with two
	 * differences:
	 * <ol>
	 *   <li>
	 *     `ngMaxlength` does not set the `maxlength` attribute and therefore HTML5 constraint
	 *     validation is not available.
	 *   </li>
	 *   <li>
	 *     The `ngMaxlength` attribute must be an expression, while the `maxlength` value must be
	 *     interpolated.
	 *   </li>
	 * </ol>
	 * </div>
	 *
	 * @example
	 * <example name="ngMaxlengthDirective" module="ngMaxlengthExample">
	 *   <file name="index.html">
	 *     <script>
	 *       angular.module('ngMaxlengthExample', [])
	 *         .controller('ExampleController', ['$scope', function($scope) {
	 *           $scope.maxlength = 5;
	 *         }]);
	 *     </script>
	 *     <div ng-controller="ExampleController">
	 *       <form name="form">
	 *         <label for="maxlength">Set a maxlength: </label>
	 *         <input type="number" ng-model="maxlength" id="maxlength" />
	 *         <br>
	 *         <label for="input">This input is restricted by the current maxlength: </label>
	 *         <input type="text" ng-model="model" id="input" name="input" ng-maxlength="maxlength" /><br>
	 *         <hr>
	 *         input valid? = <code>{{form.input.$valid}}</code><br>
	 *         model = <code>{{model}}</code>
	 *       </form>
	 *     </div>
	 *   </file>
	 *   <file name="protractor.js" type="protractor">
	       var model = element(by.binding('model'));
	       var input = element(by.id('input'));
	
	       it('should validate the input with the default maxlength', function() {
	         input.sendKeys('abcdef');
	         expect(model.getText()).not.toContain('abcdef');
	
	         input.clear().then(function() {
	           input.sendKeys('abcde');
	           expect(model.getText()).toContain('abcde');
	         });
	       });
	 *   </file>
	 * </example>
	 */
	var maxlengthDirective = function() {
	  return {
	    restrict: 'A',
	    require: '?ngModel',
	    link: function(scope, elm, attr, ctrl) {
	      if (!ctrl) return;
	
	      var maxlength = -1;
	      attr.$observe('maxlength', function(value) {
	        var intVal = toInt(value);
	        maxlength = isNaN(intVal) ? -1 : intVal;
	        ctrl.$validate();
	      });
	      ctrl.$validators.maxlength = function(modelValue, viewValue) {
	        return (maxlength < 0) || ctrl.$isEmpty(viewValue) || (viewValue.length <= maxlength);
	      };
	    }
	  };
	};
	
	/**
	 * @ngdoc directive
	 * @name ngMinlength
	 *
	 * @description
	 *
	 * ngMinlength adds the minlength {@link ngModel.NgModelController#$validators `validator`} to {@link ngModel `ngModel`}.
	 * It is most often used for text-based {@link input `input`} controls, but can also be applied to custom text-based controls.
	 *
	 * The validator sets the `minlength` error key if the {@link ngModel.NgModelController#$viewValue `ngModel.$viewValue`}
	 * is shorter than the integer obtained by evaluating the Angular expression given in the
	 * `ngMinlength` attribute value.
	 *
	 * <div class="alert alert-info">
	 * **Note:** This directive is also added when the plain `minlength` attribute is used, with two
	 * differences:
	 * <ol>
	 *   <li>
	 *     `ngMinlength` does not set the `minlength` attribute and therefore HTML5 constraint
	 *     validation is not available.
	 *   </li>
	 *   <li>
	 *     The `ngMinlength` value must be an expression, while the `minlength` value must be
	 *     interpolated.
	 *   </li>
	 * </ol>
	 * </div>
	 *
	 * @example
	 * <example name="ngMinlengthDirective" module="ngMinlengthExample">
	 *   <file name="index.html">
	 *     <script>
	 *       angular.module('ngMinlengthExample', [])
	 *         .controller('ExampleController', ['$scope', function($scope) {
	 *           $scope.minlength = 3;
	 *         }]);
	 *     </script>
	 *     <div ng-controller="ExampleController">
	 *       <form name="form">
	 *         <label for="minlength">Set a minlength: </label>
	 *         <input type="number" ng-model="minlength" id="minlength" />
	 *         <br>
	 *         <label for="input">This input is restricted by the current minlength: </label>
	 *         <input type="text" ng-model="model" id="input" name="input" ng-minlength="minlength" /><br>
	 *         <hr>
	 *         input valid? = <code>{{form.input.$valid}}</code><br>
	 *         model = <code>{{model}}</code>
	 *       </form>
	 *     </div>
	 *   </file>
	 *   <file name="protractor.js" type="protractor">
	       var model = element(by.binding('model'));
	       var input = element(by.id('input'));
	
	       it('should validate the input with the default minlength', function() {
	         input.sendKeys('ab');
	         expect(model.getText()).not.toContain('ab');
	
	         input.sendKeys('abc');
	         expect(model.getText()).toContain('abc');
	       });
	 *   </file>
	 * </example>
	 */
	var minlengthDirective = function() {
	  return {
	    restrict: 'A',
	    require: '?ngModel',
	    link: function(scope, elm, attr, ctrl) {
	      if (!ctrl) return;
	
	      var minlength = 0;
	      attr.$observe('minlength', function(value) {
	        minlength = toInt(value) || 0;
	        ctrl.$validate();
	      });
	      ctrl.$validators.minlength = function(modelValue, viewValue) {
	        return ctrl.$isEmpty(viewValue) || viewValue.length >= minlength;
	      };
	    }
	  };
	};
	
	if (window.angular.bootstrap) {
	  //AngularJS is already loaded, so we can return here...
	  if (window.console) {
	    console.log('WARNING: Tried to load angular more than once.');
	  }
	  return;
	}
	
	//try to bind to jquery now so that one can write jqLite(document).ready()
	//but we will rebind on bootstrap again.
	bindJQuery();
	
	publishExternalAPI(angular);
	
	angular.module("ngLocale", [], ["$provide", function($provide) {
	var PLURAL_CATEGORY = {ZERO: "zero", ONE: "one", TWO: "two", FEW: "few", MANY: "many", OTHER: "other"};
	function getDecimals(n) {
	  n = n + '';
	  var i = n.indexOf('.');
	  return (i == -1) ? 0 : n.length - i - 1;
	}
	
	function getVF(n, opt_precision) {
	  var v = opt_precision;
	
	  if (undefined === v) {
	    v = Math.min(getDecimals(n), 3);
	  }
	
	  var base = Math.pow(10, v);
	  var f = ((n * base) | 0) % base;
	  return {v: v, f: f};
	}
	
	$provide.value("$locale", {
	  "DATETIME_FORMATS": {
	    "AMPMS": [
	      "AM",
	      "PM"
	    ],
	    "DAY": [
	      "Sunday",
	      "Monday",
	      "Tuesday",
	      "Wednesday",
	      "Thursday",
	      "Friday",
	      "Saturday"
	    ],
	    "ERANAMES": [
	      "Before Christ",
	      "Anno Domini"
	    ],
	    "ERAS": [
	      "BC",
	      "AD"
	    ],
	    "FIRSTDAYOFWEEK": 6,
	    "MONTH": [
	      "January",
	      "February",
	      "March",
	      "April",
	      "May",
	      "June",
	      "July",
	      "August",
	      "September",
	      "October",
	      "November",
	      "December"
	    ],
	    "SHORTDAY": [
	      "Sun",
	      "Mon",
	      "Tue",
	      "Wed",
	      "Thu",
	      "Fri",
	      "Sat"
	    ],
	    "SHORTMONTH": [
	      "Jan",
	      "Feb",
	      "Mar",
	      "Apr",
	      "May",
	      "Jun",
	      "Jul",
	      "Aug",
	      "Sep",
	      "Oct",
	      "Nov",
	      "Dec"
	    ],
	    "STANDALONEMONTH": [
	      "January",
	      "February",
	      "March",
	      "April",
	      "May",
	      "June",
	      "July",
	      "August",
	      "September",
	      "October",
	      "November",
	      "December"
	    ],
	    "WEEKENDRANGE": [
	      5,
	      6
	    ],
	    "fullDate": "EEEE, MMMM d, y",
	    "longDate": "MMMM d, y",
	    "medium": "MMM d, y h:mm:ss a",
	    "mediumDate": "MMM d, y",
	    "mediumTime": "h:mm:ss a",
	    "short": "M/d/yy h:mm a",
	    "shortDate": "M/d/yy",
	    "shortTime": "h:mm a"
	  },
	  "NUMBER_FORMATS": {
	    "CURRENCY_SYM": "$",
	    "DECIMAL_SEP": ".",
	    "GROUP_SEP": ",",
	    "PATTERNS": [
	      {
	        "gSize": 3,
	        "lgSize": 3,
	        "maxFrac": 3,
	        "minFrac": 0,
	        "minInt": 1,
	        "negPre": "-",
	        "negSuf": "",
	        "posPre": "",
	        "posSuf": ""
	      },
	      {
	        "gSize": 3,
	        "lgSize": 3,
	        "maxFrac": 2,
	        "minFrac": 2,
	        "minInt": 1,
	        "negPre": "-\u00a4",
	        "negSuf": "",
	        "posPre": "\u00a4",
	        "posSuf": ""
	      }
	    ]
	  },
	  "id": "en-us",
	  "localeID": "en_US",
	  "pluralCat": function(n, opt_precision) {  var i = n | 0;  var vf = getVF(n, opt_precision);  if (i == 1 && vf.v == 0) {    return PLURAL_CATEGORY.ONE;  }  return PLURAL_CATEGORY.OTHER;}
	});
	}]);
	
	  jqLite(window.document).ready(function() {
	    angularInit(window.document, bootstrap);
	  });
	
	})(window);
	
	!window.angular.$$csp().noInlineStyle && window.angular.element(document.head).prepend('<style type="text/css">@charset "UTF-8";[ng\\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide:not(.ng-hide-animate){display:none !important;}ng\\:form{display:block;}.ng-animate-shim{visibility:hidden;}.ng-anchor{position:absolute;}</style>');
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(5);
	module.exports = 'ngRoute';


/***/ },
/* 5 */
/***/ function(module, exports) {

	/**
	 * @license AngularJS v1.5.5
	 * (c) 2010-2016 Google, Inc. http://angularjs.org
	 * License: MIT
	 */
	(function(window, angular) {'use strict';
	
	/**
	 * @ngdoc module
	 * @name ngRoute
	 * @description
	 *
	 * # ngRoute
	 *
	 * The `ngRoute` module provides routing and deeplinking services and directives for angular apps.
	 *
	 * ## Example
	 * See {@link ngRoute.$route#example $route} for an example of configuring and using `ngRoute`.
	 *
	 *
	 * <div doc-module-components="ngRoute"></div>
	 */
	 /* global -ngRouteModule */
	var ngRouteModule = angular.module('ngRoute', ['ng']).
	                        provider('$route', $RouteProvider),
	    $routeMinErr = angular.$$minErr('ngRoute');
	
	/**
	 * @ngdoc provider
	 * @name $routeProvider
	 *
	 * @description
	 *
	 * Used for configuring routes.
	 *
	 * ## Example
	 * See {@link ngRoute.$route#example $route} for an example of configuring and using `ngRoute`.
	 *
	 * ## Dependencies
	 * Requires the {@link ngRoute `ngRoute`} module to be installed.
	 */
	function $RouteProvider() {
	  function inherit(parent, extra) {
	    return angular.extend(Object.create(parent), extra);
	  }
	
	  var routes = {};
	
	  /**
	   * @ngdoc method
	   * @name $routeProvider#when
	   *
	   * @param {string} path Route path (matched against `$location.path`). If `$location.path`
	   *    contains redundant trailing slash or is missing one, the route will still match and the
	   *    `$location.path` will be updated to add or drop the trailing slash to exactly match the
	   *    route definition.
	   *
	   *    * `path` can contain named groups starting with a colon: e.g. `:name`. All characters up
	   *        to the next slash are matched and stored in `$routeParams` under the given `name`
	   *        when the route matches.
	   *    * `path` can contain named groups starting with a colon and ending with a star:
	   *        e.g.`:name*`. All characters are eagerly stored in `$routeParams` under the given `name`
	   *        when the route matches.
	   *    * `path` can contain optional named groups with a question mark: e.g.`:name?`.
	   *
	   *    For example, routes like `/color/:color/largecode/:largecode*\/edit` will match
	   *    `/color/brown/largecode/code/with/slashes/edit` and extract:
	   *
	   *    * `color: brown`
	   *    * `largecode: code/with/slashes`.
	   *
	   *
	   * @param {Object} route Mapping information to be assigned to `$route.current` on route
	   *    match.
	   *
	   *    Object properties:
	   *
	   *    - `controller` – `{(string|function()=}` – Controller fn that should be associated with
	   *      newly created scope or the name of a {@link angular.Module#controller registered
	   *      controller} if passed as a string.
	   *    - `controllerAs` – `{string=}` – An identifier name for a reference to the controller.
	   *      If present, the controller will be published to scope under the `controllerAs` name.
	   *    - `template` – `{string=|function()=}` – html template as a string or a function that
	   *      returns an html template as a string which should be used by {@link
	   *      ngRoute.directive:ngView ngView} or {@link ng.directive:ngInclude ngInclude} directives.
	   *      This property takes precedence over `templateUrl`.
	   *
	   *      If `template` is a function, it will be called with the following parameters:
	   *
	   *      - `{Array.<Object>}` - route parameters extracted from the current
	   *        `$location.path()` by applying the current route
	   *
	   *    - `templateUrl` – `{string=|function()=}` – path or function that returns a path to an html
	   *      template that should be used by {@link ngRoute.directive:ngView ngView}.
	   *
	   *      If `templateUrl` is a function, it will be called with the following parameters:
	   *
	   *      - `{Array.<Object>}` - route parameters extracted from the current
	   *        `$location.path()` by applying the current route
	   *
	   *    - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should
	   *      be injected into the controller. If any of these dependencies are promises, the router
	   *      will wait for them all to be resolved or one to be rejected before the controller is
	   *      instantiated.
	   *      If all the promises are resolved successfully, the values of the resolved promises are
	   *      injected and {@link ngRoute.$route#$routeChangeSuccess $routeChangeSuccess} event is
	   *      fired. If any of the promises are rejected the
	   *      {@link ngRoute.$route#$routeChangeError $routeChangeError} event is fired.
	   *      For easier access to the resolved dependencies from the template, the `resolve` map will
	   *      be available on the scope of the route, under `$resolve` (by default) or a custom name
	   *      specified by the `resolveAs` property (see below). This can be particularly useful, when
	   *      working with {@link angular.Module#component components} as route templates.<br />
	   *      <div class="alert alert-warning">
	   *        **Note:** If your scope already contains a property with this name, it will be hidden
	   *        or overwritten. Make sure, you specify an appropriate name for this property, that
	   *        does not collide with other properties on the scope.
	   *      </div>
	   *      The map object is:
	   *
	   *      - `key` – `{string}`: a name of a dependency to be injected into the controller.
	   *      - `factory` - `{string|function}`: If `string` then it is an alias for a service.
	   *        Otherwise if function, then it is {@link auto.$injector#invoke injected}
	   *        and the return value is treated as the dependency. If the result is a promise, it is
	   *        resolved before its value is injected into the controller. Be aware that
	   *        `ngRoute.$routeParams` will still refer to the previous route within these resolve
	   *        functions.  Use `$route.current.params` to access the new route parameters, instead.
	   *
	   *    - `resolveAs` - `{string=}` - The name under which the `resolve` map will be available on
	   *      the scope of the route. If omitted, defaults to `$resolve`.
	   *
	   *    - `redirectTo` – `{(string|function())=}` – value to update
	   *      {@link ng.$location $location} path with and trigger route redirection.
	   *
	   *      If `redirectTo` is a function, it will be called with the following parameters:
	   *
	   *      - `{Object.<string>}` - route parameters extracted from the current
	   *        `$location.path()` by applying the current route templateUrl.
	   *      - `{string}` - current `$location.path()`
	   *      - `{Object}` - current `$location.search()`
	   *
	   *      The custom `redirectTo` function is expected to return a string which will be used
	   *      to update `$location.path()` and `$location.search()`.
	   *
	   *    - `[reloadOnSearch=true]` - `{boolean=}` - reload route when only `$location.search()`
	   *      or `$location.hash()` changes.
	   *
	   *      If the option is set to `false` and url in the browser changes, then
	   *      `$routeUpdate` event is broadcasted on the root scope.
	   *
	   *    - `[caseInsensitiveMatch=false]` - `{boolean=}` - match routes without being case sensitive
	   *
	   *      If the option is set to `true`, then the particular route can be matched without being
	   *      case sensitive
	   *
	   * @returns {Object} self
	   *
	   * @description
	   * Adds a new route definition to the `$route` service.
	   */
	  this.when = function(path, route) {
	    //copy original route object to preserve params inherited from proto chain
	    var routeCopy = angular.copy(route);
	    if (angular.isUndefined(routeCopy.reloadOnSearch)) {
	      routeCopy.reloadOnSearch = true;
	    }
	    if (angular.isUndefined(routeCopy.caseInsensitiveMatch)) {
	      routeCopy.caseInsensitiveMatch = this.caseInsensitiveMatch;
	    }
	    routes[path] = angular.extend(
	      routeCopy,
	      path && pathRegExp(path, routeCopy)
	    );
	
	    // create redirection for trailing slashes
	    if (path) {
	      var redirectPath = (path[path.length - 1] == '/')
	            ? path.substr(0, path.length - 1)
	            : path + '/';
	
	      routes[redirectPath] = angular.extend(
	        {redirectTo: path},
	        pathRegExp(redirectPath, routeCopy)
	      );
	    }
	
	    return this;
	  };
	
	  /**
	   * @ngdoc property
	   * @name $routeProvider#caseInsensitiveMatch
	   * @description
	   *
	   * A boolean property indicating if routes defined
	   * using this provider should be matched using a case insensitive
	   * algorithm. Defaults to `false`.
	   */
	  this.caseInsensitiveMatch = false;
	
	   /**
	    * @param path {string} path
	    * @param opts {Object} options
	    * @return {?Object}
	    *
	    * @description
	    * Normalizes the given path, returning a regular expression
	    * and the original path.
	    *
	    * Inspired by pathRexp in visionmedia/express/lib/utils.js.
	    */
	  function pathRegExp(path, opts) {
	    var insensitive = opts.caseInsensitiveMatch,
	        ret = {
	          originalPath: path,
	          regexp: path
	        },
	        keys = ret.keys = [];
	
	    path = path
	      .replace(/([().])/g, '\\$1')
	      .replace(/(\/)?:(\w+)(\*\?|[\?\*])?/g, function(_, slash, key, option) {
	        var optional = (option === '?' || option === '*?') ? '?' : null;
	        var star = (option === '*' || option === '*?') ? '*' : null;
	        keys.push({ name: key, optional: !!optional });
	        slash = slash || '';
	        return ''
	          + (optional ? '' : slash)
	          + '(?:'
	          + (optional ? slash : '')
	          + (star && '(.+?)' || '([^/]+)')
	          + (optional || '')
	          + ')'
	          + (optional || '');
	      })
	      .replace(/([\/$\*])/g, '\\$1');
	
	    ret.regexp = new RegExp('^' + path + '$', insensitive ? 'i' : '');
	    return ret;
	  }
	
	  /**
	   * @ngdoc method
	   * @name $routeProvider#otherwise
	   *
	   * @description
	   * Sets route definition that will be used on route change when no other route definition
	   * is matched.
	   *
	   * @param {Object|string} params Mapping information to be assigned to `$route.current`.
	   * If called with a string, the value maps to `redirectTo`.
	   * @returns {Object} self
	   */
	  this.otherwise = function(params) {
	    if (typeof params === 'string') {
	      params = {redirectTo: params};
	    }
	    this.when(null, params);
	    return this;
	  };
	
	
	  this.$get = ['$rootScope',
	               '$location',
	               '$routeParams',
	               '$q',
	               '$injector',
	               '$templateRequest',
	               '$sce',
	      function($rootScope, $location, $routeParams, $q, $injector, $templateRequest, $sce) {
	
	    /**
	     * @ngdoc service
	     * @name $route
	     * @requires $location
	     * @requires $routeParams
	     *
	     * @property {Object} current Reference to the current route definition.
	     * The route definition contains:
	     *
	     *   - `controller`: The controller constructor as defined in the route definition.
	     *   - `locals`: A map of locals which is used by {@link ng.$controller $controller} service for
	     *     controller instantiation. The `locals` contain
	     *     the resolved values of the `resolve` map. Additionally the `locals` also contain:
	     *
	     *     - `$scope` - The current route scope.
	     *     - `$template` - The current route template HTML.
	     *
	     *     The `locals` will be assigned to the route scope's `$resolve` property. You can override
	     *     the property name, using `resolveAs` in the route definition. See
	     *     {@link ngRoute.$routeProvider $routeProvider} for more info.
	     *
	     * @property {Object} routes Object with all route configuration Objects as its properties.
	     *
	     * @description
	     * `$route` is used for deep-linking URLs to controllers and views (HTML partials).
	     * It watches `$location.url()` and tries to map the path to an existing route definition.
	     *
	     * Requires the {@link ngRoute `ngRoute`} module to be installed.
	     *
	     * You can define routes through {@link ngRoute.$routeProvider $routeProvider}'s API.
	     *
	     * The `$route` service is typically used in conjunction with the
	     * {@link ngRoute.directive:ngView `ngView`} directive and the
	     * {@link ngRoute.$routeParams `$routeParams`} service.
	     *
	     * @example
	     * This example shows how changing the URL hash causes the `$route` to match a route against the
	     * URL, and the `ngView` pulls in the partial.
	     *
	     * <example name="$route-service" module="ngRouteExample"
	     *          deps="angular-route.js" fixBase="true">
	     *   <file name="index.html">
	     *     <div ng-controller="MainController">
	     *       Choose:
	     *       <a href="Book/Moby">Moby</a> |
	     *       <a href="Book/Moby/ch/1">Moby: Ch1</a> |
	     *       <a href="Book/Gatsby">Gatsby</a> |
	     *       <a href="Book/Gatsby/ch/4?key=value">Gatsby: Ch4</a> |
	     *       <a href="Book/Scarlet">Scarlet Letter</a><br/>
	     *
	     *       <div ng-view></div>
	     *
	     *       <hr />
	     *
	     *       <pre>$location.path() = {{$location.path()}}</pre>
	     *       <pre>$route.current.templateUrl = {{$route.current.templateUrl}}</pre>
	     *       <pre>$route.current.params = {{$route.current.params}}</pre>
	     *       <pre>$route.current.scope.name = {{$route.current.scope.name}}</pre>
	     *       <pre>$routeParams = {{$routeParams}}</pre>
	     *     </div>
	     *   </file>
	     *
	     *   <file name="book.html">
	     *     controller: {{name}}<br />
	     *     Book Id: {{params.bookId}}<br />
	     *   </file>
	     *
	     *   <file name="chapter.html">
	     *     controller: {{name}}<br />
	     *     Book Id: {{params.bookId}}<br />
	     *     Chapter Id: {{params.chapterId}}
	     *   </file>
	     *
	     *   <file name="script.js">
	     *     angular.module('ngRouteExample', ['ngRoute'])
	     *
	     *      .controller('MainController', function($scope, $route, $routeParams, $location) {
	     *          $scope.$route = $route;
	     *          $scope.$location = $location;
	     *          $scope.$routeParams = $routeParams;
	     *      })
	     *
	     *      .controller('BookController', function($scope, $routeParams) {
	     *          $scope.name = "BookController";
	     *          $scope.params = $routeParams;
	     *      })
	     *
	     *      .controller('ChapterController', function($scope, $routeParams) {
	     *          $scope.name = "ChapterController";
	     *          $scope.params = $routeParams;
	     *      })
	     *
	     *     .config(function($routeProvider, $locationProvider) {
	     *       $routeProvider
	     *        .when('/Book/:bookId', {
	     *         templateUrl: 'book.html',
	     *         controller: 'BookController',
	     *         resolve: {
	     *           // I will cause a 1 second delay
	     *           delay: function($q, $timeout) {
	     *             var delay = $q.defer();
	     *             $timeout(delay.resolve, 1000);
	     *             return delay.promise;
	     *           }
	     *         }
	     *       })
	     *       .when('/Book/:bookId/ch/:chapterId', {
	     *         templateUrl: 'chapter.html',
	     *         controller: 'ChapterController'
	     *       });
	     *
	     *       // configure html5 to get links working on jsfiddle
	     *       $locationProvider.html5Mode(true);
	     *     });
	     *
	     *   </file>
	     *
	     *   <file name="protractor.js" type="protractor">
	     *     it('should load and compile correct template', function() {
	     *       element(by.linkText('Moby: Ch1')).click();
	     *       var content = element(by.css('[ng-view]')).getText();
	     *       expect(content).toMatch(/controller\: ChapterController/);
	     *       expect(content).toMatch(/Book Id\: Moby/);
	     *       expect(content).toMatch(/Chapter Id\: 1/);
	     *
	     *       element(by.partialLinkText('Scarlet')).click();
	     *
	     *       content = element(by.css('[ng-view]')).getText();
	     *       expect(content).toMatch(/controller\: BookController/);
	     *       expect(content).toMatch(/Book Id\: Scarlet/);
	     *     });
	     *   </file>
	     * </example>
	     */
	
	    /**
	     * @ngdoc event
	     * @name $route#$routeChangeStart
	     * @eventType broadcast on root scope
	     * @description
	     * Broadcasted before a route change. At this  point the route services starts
	     * resolving all of the dependencies needed for the route change to occur.
	     * Typically this involves fetching the view template as well as any dependencies
	     * defined in `resolve` route property. Once  all of the dependencies are resolved
	     * `$routeChangeSuccess` is fired.
	     *
	     * The route change (and the `$location` change that triggered it) can be prevented
	     * by calling `preventDefault` method of the event. See {@link ng.$rootScope.Scope#$on}
	     * for more details about event object.
	     *
	     * @param {Object} angularEvent Synthetic event object.
	     * @param {Route} next Future route information.
	     * @param {Route} current Current route information.
	     */
	
	    /**
	     * @ngdoc event
	     * @name $route#$routeChangeSuccess
	     * @eventType broadcast on root scope
	     * @description
	     * Broadcasted after a route change has happened successfully.
	     * The `resolve` dependencies are now available in the `current.locals` property.
	     *
	     * {@link ngRoute.directive:ngView ngView} listens for the directive
	     * to instantiate the controller and render the view.
	     *
	     * @param {Object} angularEvent Synthetic event object.
	     * @param {Route} current Current route information.
	     * @param {Route|Undefined} previous Previous route information, or undefined if current is
	     * first route entered.
	     */
	
	    /**
	     * @ngdoc event
	     * @name $route#$routeChangeError
	     * @eventType broadcast on root scope
	     * @description
	     * Broadcasted if any of the resolve promises are rejected.
	     *
	     * @param {Object} angularEvent Synthetic event object
	     * @param {Route} current Current route information.
	     * @param {Route} previous Previous route information.
	     * @param {Route} rejection Rejection of the promise. Usually the error of the failed promise.
	     */
	
	    /**
	     * @ngdoc event
	     * @name $route#$routeUpdate
	     * @eventType broadcast on root scope
	     * @description
	     * The `reloadOnSearch` property has been set to false, and we are reusing the same
	     * instance of the Controller.
	     *
	     * @param {Object} angularEvent Synthetic event object
	     * @param {Route} current Current/previous route information.
	     */
	
	    var forceReload = false,
	        preparedRoute,
	        preparedRouteIsUpdateOnly,
	        $route = {
	          routes: routes,
	
	          /**
	           * @ngdoc method
	           * @name $route#reload
	           *
	           * @description
	           * Causes `$route` service to reload the current route even if
	           * {@link ng.$location $location} hasn't changed.
	           *
	           * As a result of that, {@link ngRoute.directive:ngView ngView}
	           * creates new scope and reinstantiates the controller.
	           */
	          reload: function() {
	            forceReload = true;
	
	            var fakeLocationEvent = {
	              defaultPrevented: false,
	              preventDefault: function fakePreventDefault() {
	                this.defaultPrevented = true;
	                forceReload = false;
	              }
	            };
	
	            $rootScope.$evalAsync(function() {
	              prepareRoute(fakeLocationEvent);
	              if (!fakeLocationEvent.defaultPrevented) commitRoute();
	            });
	          },
	
	          /**
	           * @ngdoc method
	           * @name $route#updateParams
	           *
	           * @description
	           * Causes `$route` service to update the current URL, replacing
	           * current route parameters with those specified in `newParams`.
	           * Provided property names that match the route's path segment
	           * definitions will be interpolated into the location's path, while
	           * remaining properties will be treated as query params.
	           *
	           * @param {!Object<string, string>} newParams mapping of URL parameter names to values
	           */
	          updateParams: function(newParams) {
	            if (this.current && this.current.$$route) {
	              newParams = angular.extend({}, this.current.params, newParams);
	              $location.path(interpolate(this.current.$$route.originalPath, newParams));
	              // interpolate modifies newParams, only query params are left
	              $location.search(newParams);
	            } else {
	              throw $routeMinErr('norout', 'Tried updating route when with no current route');
	            }
	          }
	        };
	
	    $rootScope.$on('$locationChangeStart', prepareRoute);
	    $rootScope.$on('$locationChangeSuccess', commitRoute);
	
	    return $route;
	
	    /////////////////////////////////////////////////////
	
	    /**
	     * @param on {string} current url
	     * @param route {Object} route regexp to match the url against
	     * @return {?Object}
	     *
	     * @description
	     * Check if the route matches the current url.
	     *
	     * Inspired by match in
	     * visionmedia/express/lib/router/router.js.
	     */
	    function switchRouteMatcher(on, route) {
	      var keys = route.keys,
	          params = {};
	
	      if (!route.regexp) return null;
	
	      var m = route.regexp.exec(on);
	      if (!m) return null;
	
	      for (var i = 1, len = m.length; i < len; ++i) {
	        var key = keys[i - 1];
	
	        var val = m[i];
	
	        if (key && val) {
	          params[key.name] = val;
	        }
	      }
	      return params;
	    }
	
	    function prepareRoute($locationEvent) {
	      var lastRoute = $route.current;
	
	      preparedRoute = parseRoute();
	      preparedRouteIsUpdateOnly = preparedRoute && lastRoute && preparedRoute.$$route === lastRoute.$$route
	          && angular.equals(preparedRoute.pathParams, lastRoute.pathParams)
	          && !preparedRoute.reloadOnSearch && !forceReload;
	
	      if (!preparedRouteIsUpdateOnly && (lastRoute || preparedRoute)) {
	        if ($rootScope.$broadcast('$routeChangeStart', preparedRoute, lastRoute).defaultPrevented) {
	          if ($locationEvent) {
	            $locationEvent.preventDefault();
	          }
	        }
	      }
	    }
	
	    function commitRoute() {
	      var lastRoute = $route.current;
	      var nextRoute = preparedRoute;
	
	      if (preparedRouteIsUpdateOnly) {
	        lastRoute.params = nextRoute.params;
	        angular.copy(lastRoute.params, $routeParams);
	        $rootScope.$broadcast('$routeUpdate', lastRoute);
	      } else if (nextRoute || lastRoute) {
	        forceReload = false;
	        $route.current = nextRoute;
	        if (nextRoute) {
	          if (nextRoute.redirectTo) {
	            if (angular.isString(nextRoute.redirectTo)) {
	              $location.path(interpolate(nextRoute.redirectTo, nextRoute.params)).search(nextRoute.params)
	                       .replace();
	            } else {
	              $location.url(nextRoute.redirectTo(nextRoute.pathParams, $location.path(), $location.search()))
	                       .replace();
	            }
	          }
	        }
	
	        $q.when(nextRoute).
	          then(function() {
	            if (nextRoute) {
	              var locals = angular.extend({}, nextRoute.resolve),
	                  template, templateUrl;
	
	              angular.forEach(locals, function(value, key) {
	                locals[key] = angular.isString(value) ?
	                    $injector.get(value) : $injector.invoke(value, null, null, key);
	              });
	
	              if (angular.isDefined(template = nextRoute.template)) {
	                if (angular.isFunction(template)) {
	                  template = template(nextRoute.params);
	                }
	              } else if (angular.isDefined(templateUrl = nextRoute.templateUrl)) {
	                if (angular.isFunction(templateUrl)) {
	                  templateUrl = templateUrl(nextRoute.params);
	                }
	                if (angular.isDefined(templateUrl)) {
	                  nextRoute.loadedTemplateUrl = $sce.valueOf(templateUrl);
	                  template = $templateRequest(templateUrl);
	                }
	              }
	              if (angular.isDefined(template)) {
	                locals['$template'] = template;
	              }
	              return $q.all(locals);
	            }
	          }).
	          then(function(locals) {
	            // after route change
	            if (nextRoute == $route.current) {
	              if (nextRoute) {
	                nextRoute.locals = locals;
	                angular.copy(nextRoute.params, $routeParams);
	              }
	              $rootScope.$broadcast('$routeChangeSuccess', nextRoute, lastRoute);
	            }
	          }, function(error) {
	            if (nextRoute == $route.current) {
	              $rootScope.$broadcast('$routeChangeError', nextRoute, lastRoute, error);
	            }
	          });
	      }
	    }
	
	
	    /**
	     * @returns {Object} the current active route, by matching it against the URL
	     */
	    function parseRoute() {
	      // Match a route
	      var params, match;
	      angular.forEach(routes, function(route, path) {
	        if (!match && (params = switchRouteMatcher($location.path(), route))) {
	          match = inherit(route, {
	            params: angular.extend({}, $location.search(), params),
	            pathParams: params});
	          match.$$route = route;
	        }
	      });
	      // No route matched; fallback to "otherwise" route
	      return match || routes[null] && inherit(routes[null], {params: {}, pathParams:{}});
	    }
	
	    /**
	     * @returns {string} interpolation of the redirect path with the parameters
	     */
	    function interpolate(string, params) {
	      var result = [];
	      angular.forEach((string || '').split(':'), function(segment, i) {
	        if (i === 0) {
	          result.push(segment);
	        } else {
	          var segmentMatch = segment.match(/(\w+)(?:[?*])?(.*)/);
	          var key = segmentMatch[1];
	          result.push(params[key]);
	          result.push(segmentMatch[2] || '');
	          delete params[key];
	        }
	      });
	      return result.join('');
	    }
	  }];
	}
	
	ngRouteModule.provider('$routeParams', $RouteParamsProvider);
	
	
	/**
	 * @ngdoc service
	 * @name $routeParams
	 * @requires $route
	 *
	 * @description
	 * The `$routeParams` service allows you to retrieve the current set of route parameters.
	 *
	 * Requires the {@link ngRoute `ngRoute`} module to be installed.
	 *
	 * The route parameters are a combination of {@link ng.$location `$location`}'s
	 * {@link ng.$location#search `search()`} and {@link ng.$location#path `path()`}.
	 * The `path` parameters are extracted when the {@link ngRoute.$route `$route`} path is matched.
	 *
	 * In case of parameter name collision, `path` params take precedence over `search` params.
	 *
	 * The service guarantees that the identity of the `$routeParams` object will remain unchanged
	 * (but its properties will likely change) even when a route change occurs.
	 *
	 * Note that the `$routeParams` are only updated *after* a route change completes successfully.
	 * This means that you cannot rely on `$routeParams` being correct in route resolve functions.
	 * Instead you can use `$route.current.params` to access the new route's parameters.
	 *
	 * @example
	 * ```js
	 *  // Given:
	 *  // URL: http://server.com/index.html#/Chapter/1/Section/2?search=moby
	 *  // Route: /Chapter/:chapterId/Section/:sectionId
	 *  //
	 *  // Then
	 *  $routeParams ==> {chapterId:'1', sectionId:'2', search:'moby'}
	 * ```
	 */
	function $RouteParamsProvider() {
	  this.$get = function() { return {}; };
	}
	
	ngRouteModule.directive('ngView', ngViewFactory);
	ngRouteModule.directive('ngView', ngViewFillContentFactory);
	
	
	/**
	 * @ngdoc directive
	 * @name ngView
	 * @restrict ECA
	 *
	 * @description
	 * # Overview
	 * `ngView` is a directive that complements the {@link ngRoute.$route $route} service by
	 * including the rendered template of the current route into the main layout (`index.html`) file.
	 * Every time the current route changes, the included view changes with it according to the
	 * configuration of the `$route` service.
	 *
	 * Requires the {@link ngRoute `ngRoute`} module to be installed.
	 *
	 * @animations
	 * | Animation                        | Occurs                              |
	 * |----------------------------------|-------------------------------------|
	 * | {@link ng.$animate#enter enter}  | when the new element is inserted to the DOM |
	 * | {@link ng.$animate#leave leave}  | when the old element is removed from to the DOM  |
	 *
	 * The enter and leave animation occur concurrently.
	 *
	 * @knownIssue If `ngView` is contained in an asynchronously loaded template (e.g. in another
	 *             directive's templateUrl or in a template loaded using `ngInclude`), then you need to
	 *             make sure that `$route` is instantiated in time to capture the initial
	 *             `$locationChangeStart` event and load the appropriate view. One way to achieve this
	 *             is to have it as a dependency in a `.run` block:
	 *             `myModule.run(['$route', function() {}]);`
	 *
	 * @scope
	 * @priority 400
	 * @param {string=} onload Expression to evaluate whenever the view updates.
	 *
	 * @param {string=} autoscroll Whether `ngView` should call {@link ng.$anchorScroll
	 *                  $anchorScroll} to scroll the viewport after the view is updated.
	 *
	 *                  - If the attribute is not set, disable scrolling.
	 *                  - If the attribute is set without value, enable scrolling.
	 *                  - Otherwise enable scrolling only if the `autoscroll` attribute value evaluated
	 *                    as an expression yields a truthy value.
	 * @example
	    <example name="ngView-directive" module="ngViewExample"
	             deps="angular-route.js;angular-animate.js"
	             animations="true" fixBase="true">
	      <file name="index.html">
	        <div ng-controller="MainCtrl as main">
	          Choose:
	          <a href="Book/Moby">Moby</a> |
	          <a href="Book/Moby/ch/1">Moby: Ch1</a> |
	          <a href="Book/Gatsby">Gatsby</a> |
	          <a href="Book/Gatsby/ch/4?key=value">Gatsby: Ch4</a> |
	          <a href="Book/Scarlet">Scarlet Letter</a><br/>
	
	          <div class="view-animate-container">
	            <div ng-view class="view-animate"></div>
	          </div>
	          <hr />
	
	          <pre>$location.path() = {{main.$location.path()}}</pre>
	          <pre>$route.current.templateUrl = {{main.$route.current.templateUrl}}</pre>
	          <pre>$route.current.params = {{main.$route.current.params}}</pre>
	          <pre>$routeParams = {{main.$routeParams}}</pre>
	        </div>
	      </file>
	
	      <file name="book.html">
	        <div>
	          controller: {{book.name}}<br />
	          Book Id: {{book.params.bookId}}<br />
	        </div>
	      </file>
	
	      <file name="chapter.html">
	        <div>
	          controller: {{chapter.name}}<br />
	          Book Id: {{chapter.params.bookId}}<br />
	          Chapter Id: {{chapter.params.chapterId}}
	        </div>
	      </file>
	
	      <file name="animations.css">
	        .view-animate-container {
	          position:relative;
	          height:100px!important;
	          background:white;
	          border:1px solid black;
	          height:40px;
	          overflow:hidden;
	        }
	
	        .view-animate {
	          padding:10px;
	        }
	
	        .view-animate.ng-enter, .view-animate.ng-leave {
	          transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 1.5s;
	
	          display:block;
	          width:100%;
	          border-left:1px solid black;
	
	          position:absolute;
	          top:0;
	          left:0;
	          right:0;
	          bottom:0;
	          padding:10px;
	        }
	
	        .view-animate.ng-enter {
	          left:100%;
	        }
	        .view-animate.ng-enter.ng-enter-active {
	          left:0;
	        }
	        .view-animate.ng-leave.ng-leave-active {
	          left:-100%;
	        }
	      </file>
	
	      <file name="script.js">
	        angular.module('ngViewExample', ['ngRoute', 'ngAnimate'])
	          .config(['$routeProvider', '$locationProvider',
	            function($routeProvider, $locationProvider) {
	              $routeProvider
	                .when('/Book/:bookId', {
	                  templateUrl: 'book.html',
	                  controller: 'BookCtrl',
	                  controllerAs: 'book'
	                })
	                .when('/Book/:bookId/ch/:chapterId', {
	                  templateUrl: 'chapter.html',
	                  controller: 'ChapterCtrl',
	                  controllerAs: 'chapter'
	                });
	
	              $locationProvider.html5Mode(true);
	          }])
	          .controller('MainCtrl', ['$route', '$routeParams', '$location',
	            function($route, $routeParams, $location) {
	              this.$route = $route;
	              this.$location = $location;
	              this.$routeParams = $routeParams;
	          }])
	          .controller('BookCtrl', ['$routeParams', function($routeParams) {
	            this.name = "BookCtrl";
	            this.params = $routeParams;
	          }])
	          .controller('ChapterCtrl', ['$routeParams', function($routeParams) {
	            this.name = "ChapterCtrl";
	            this.params = $routeParams;
	          }]);
	
	      </file>
	
	      <file name="protractor.js" type="protractor">
	        it('should load and compile correct template', function() {
	          element(by.linkText('Moby: Ch1')).click();
	          var content = element(by.css('[ng-view]')).getText();
	          expect(content).toMatch(/controller\: ChapterCtrl/);
	          expect(content).toMatch(/Book Id\: Moby/);
	          expect(content).toMatch(/Chapter Id\: 1/);
	
	          element(by.partialLinkText('Scarlet')).click();
	
	          content = element(by.css('[ng-view]')).getText();
	          expect(content).toMatch(/controller\: BookCtrl/);
	          expect(content).toMatch(/Book Id\: Scarlet/);
	        });
	      </file>
	    </example>
	 */
	
	
	/**
	 * @ngdoc event
	 * @name ngView#$viewContentLoaded
	 * @eventType emit on the current ngView scope
	 * @description
	 * Emitted every time the ngView content is reloaded.
	 */
	ngViewFactory.$inject = ['$route', '$anchorScroll', '$animate'];
	function ngViewFactory($route, $anchorScroll, $animate) {
	  return {
	    restrict: 'ECA',
	    terminal: true,
	    priority: 400,
	    transclude: 'element',
	    link: function(scope, $element, attr, ctrl, $transclude) {
	        var currentScope,
	            currentElement,
	            previousLeaveAnimation,
	            autoScrollExp = attr.autoscroll,
	            onloadExp = attr.onload || '';
	
	        scope.$on('$routeChangeSuccess', update);
	        update();
	
	        function cleanupLastView() {
	          if (previousLeaveAnimation) {
	            $animate.cancel(previousLeaveAnimation);
	            previousLeaveAnimation = null;
	          }
	
	          if (currentScope) {
	            currentScope.$destroy();
	            currentScope = null;
	          }
	          if (currentElement) {
	            previousLeaveAnimation = $animate.leave(currentElement);
	            previousLeaveAnimation.then(function() {
	              previousLeaveAnimation = null;
	            });
	            currentElement = null;
	          }
	        }
	
	        function update() {
	          var locals = $route.current && $route.current.locals,
	              template = locals && locals.$template;
	
	          if (angular.isDefined(template)) {
	            var newScope = scope.$new();
	            var current = $route.current;
	
	            // Note: This will also link all children of ng-view that were contained in the original
	            // html. If that content contains controllers, ... they could pollute/change the scope.
	            // However, using ng-view on an element with additional content does not make sense...
	            // Note: We can't remove them in the cloneAttchFn of $transclude as that
	            // function is called before linking the content, which would apply child
	            // directives to non existing elements.
	            var clone = $transclude(newScope, function(clone) {
	              $animate.enter(clone, null, currentElement || $element).then(function onNgViewEnter() {
	                if (angular.isDefined(autoScrollExp)
	                  && (!autoScrollExp || scope.$eval(autoScrollExp))) {
	                  $anchorScroll();
	                }
	              });
	              cleanupLastView();
	            });
	
	            currentElement = clone;
	            currentScope = current.scope = newScope;
	            currentScope.$emit('$viewContentLoaded');
	            currentScope.$eval(onloadExp);
	          } else {
	            cleanupLastView();
	          }
	        }
	    }
	  };
	}
	
	// This directive is called during the $transclude call of the first `ngView` directive.
	// It will replace and compile the content of the element with the loaded template.
	// We need this directive so that the element content is already filled when
	// the link function of another directive on the same element as ngView
	// is called.
	ngViewFillContentFactory.$inject = ['$compile', '$controller', '$route'];
	function ngViewFillContentFactory($compile, $controller, $route) {
	  return {
	    restrict: 'ECA',
	    priority: -400,
	    link: function(scope, $element) {
	      var current = $route.current,
	          locals = current.locals;
	
	      $element.html(locals.$template);
	
	      var link = $compile($element.contents());
	
	      if (current.controller) {
	        locals.$scope = scope;
	        var controller = $controller(current.controller, locals);
	        if (current.controllerAs) {
	          scope[current.controllerAs] = controller;
	        }
	        $element.data('$ngControllerController', controller);
	        $element.children().data('$ngControllerController', controller);
	      }
	      scope[current.resolveAs || '$resolve'] = locals;
	
	      link(scope);
	    }
	  };
	}
	
	
	})(window, window.angular);


/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(7);
	module.exports = 'ngSanitize';


/***/ },
/* 7 */
/***/ function(module, exports) {

	/**
	 * @license AngularJS v1.5.5
	 * (c) 2010-2016 Google, Inc. http://angularjs.org
	 * License: MIT
	 */
	(function(window, angular) {'use strict';
	
	/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	 *     Any commits to this file should be reviewed with security in mind.  *
	 *   Changes to this file can potentially create security vulnerabilities. *
	 *          An approval from 2 Core members with history of modifying      *
	 *                         this file is required.                          *
	 *                                                                         *
	 *  Does the change somehow allow for arbitrary javascript to be executed? *
	 *    Or allows for someone to change the prototype of built-in objects?   *
	 *     Or gives undesired access to variables likes document or window?    *
	 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
	
	var $sanitizeMinErr = angular.$$minErr('$sanitize');
	
	/**
	 * @ngdoc module
	 * @name ngSanitize
	 * @description
	 *
	 * # ngSanitize
	 *
	 * The `ngSanitize` module provides functionality to sanitize HTML.
	 *
	 *
	 * <div doc-module-components="ngSanitize"></div>
	 *
	 * See {@link ngSanitize.$sanitize `$sanitize`} for usage.
	 */
	
	/**
	 * @ngdoc service
	 * @name $sanitize
	 * @kind function
	 *
	 * @description
	 *   Sanitizes an html string by stripping all potentially dangerous tokens.
	 *
	 *   The input is sanitized by parsing the HTML into tokens. All safe tokens (from a whitelist) are
	 *   then serialized back to properly escaped html string. This means that no unsafe input can make
	 *   it into the returned string.
	 *
	 *   The whitelist for URL sanitization of attribute values is configured using the functions
	 *   `aHrefSanitizationWhitelist` and `imgSrcSanitizationWhitelist` of {@link ng.$compileProvider
	 *   `$compileProvider`}.
	 *
	 *   The input may also contain SVG markup if this is enabled via {@link $sanitizeProvider}.
	 *
	 * @param {string} html HTML input.
	 * @returns {string} Sanitized HTML.
	 *
	 * @example
	   <example module="sanitizeExample" deps="angular-sanitize.js">
	   <file name="index.html">
	     <script>
	         angular.module('sanitizeExample', ['ngSanitize'])
	           .controller('ExampleController', ['$scope', '$sce', function($scope, $sce) {
	             $scope.snippet =
	               '<p style="color:blue">an html\n' +
	               '<em onmouseover="this.textContent=\'PWN3D!\'">click here</em>\n' +
	               'snippet</p>';
	             $scope.deliberatelyTrustDangerousSnippet = function() {
	               return $sce.trustAsHtml($scope.snippet);
	             };
	           }]);
	     </script>
	     <div ng-controller="ExampleController">
	        Snippet: <textarea ng-model="snippet" cols="60" rows="3"></textarea>
	       <table>
	         <tr>
	           <td>Directive</td>
	           <td>How</td>
	           <td>Source</td>
	           <td>Rendered</td>
	         </tr>
	         <tr id="bind-html-with-sanitize">
	           <td>ng-bind-html</td>
	           <td>Automatically uses $sanitize</td>
	           <td><pre>&lt;div ng-bind-html="snippet"&gt;<br/>&lt;/div&gt;</pre></td>
	           <td><div ng-bind-html="snippet"></div></td>
	         </tr>
	         <tr id="bind-html-with-trust">
	           <td>ng-bind-html</td>
	           <td>Bypass $sanitize by explicitly trusting the dangerous value</td>
	           <td>
	           <pre>&lt;div ng-bind-html="deliberatelyTrustDangerousSnippet()"&gt;
	&lt;/div&gt;</pre>
	           </td>
	           <td><div ng-bind-html="deliberatelyTrustDangerousSnippet()"></div></td>
	         </tr>
	         <tr id="bind-default">
	           <td>ng-bind</td>
	           <td>Automatically escapes</td>
	           <td><pre>&lt;div ng-bind="snippet"&gt;<br/>&lt;/div&gt;</pre></td>
	           <td><div ng-bind="snippet"></div></td>
	         </tr>
	       </table>
	       </div>
	   </file>
	   <file name="protractor.js" type="protractor">
	     it('should sanitize the html snippet by default', function() {
	       expect(element(by.css('#bind-html-with-sanitize div')).getInnerHtml()).
	         toBe('<p>an html\n<em>click here</em>\nsnippet</p>');
	     });
	
	     it('should inline raw snippet if bound to a trusted value', function() {
	       expect(element(by.css('#bind-html-with-trust div')).getInnerHtml()).
	         toBe("<p style=\"color:blue\">an html\n" +
	              "<em onmouseover=\"this.textContent='PWN3D!'\">click here</em>\n" +
	              "snippet</p>");
	     });
	
	     it('should escape snippet without any filter', function() {
	       expect(element(by.css('#bind-default div')).getInnerHtml()).
	         toBe("&lt;p style=\"color:blue\"&gt;an html\n" +
	              "&lt;em onmouseover=\"this.textContent='PWN3D!'\"&gt;click here&lt;/em&gt;\n" +
	              "snippet&lt;/p&gt;");
	     });
	
	     it('should update', function() {
	       element(by.model('snippet')).clear();
	       element(by.model('snippet')).sendKeys('new <b onclick="alert(1)">text</b>');
	       expect(element(by.css('#bind-html-with-sanitize div')).getInnerHtml()).
	         toBe('new <b>text</b>');
	       expect(element(by.css('#bind-html-with-trust div')).getInnerHtml()).toBe(
	         'new <b onclick="alert(1)">text</b>');
	       expect(element(by.css('#bind-default div')).getInnerHtml()).toBe(
	         "new &lt;b onclick=\"alert(1)\"&gt;text&lt;/b&gt;");
	     });
	   </file>
	   </example>
	 */
	
	
	/**
	 * @ngdoc provider
	 * @name $sanitizeProvider
	 *
	 * @description
	 * Creates and configures {@link $sanitize} instance.
	 */
	function $SanitizeProvider() {
	  var svgEnabled = false;
	
	  this.$get = ['$$sanitizeUri', function($$sanitizeUri) {
	    if (svgEnabled) {
	      angular.extend(validElements, svgElements);
	    }
	    return function(html) {
	      var buf = [];
	      htmlParser(html, htmlSanitizeWriter(buf, function(uri, isImage) {
	        return !/^unsafe:/.test($$sanitizeUri(uri, isImage));
	      }));
	      return buf.join('');
	    };
	  }];
	
	
	  /**
	   * @ngdoc method
	   * @name $sanitizeProvider#enableSvg
	   * @kind function
	   *
	   * @description
	   * Enables a subset of svg to be supported by the sanitizer.
	   *
	   * <div class="alert alert-warning">
	   *   <p>By enabling this setting without taking other precautions, you might expose your
	   *   application to click-hijacking attacks. In these attacks, sanitized svg elements could be positioned
	   *   outside of the containing element and be rendered over other elements on the page (e.g. a login
	   *   link). Such behavior can then result in phishing incidents.</p>
	   *
	   *   <p>To protect against these, explicitly setup `overflow: hidden` css rule for all potential svg
	   *   tags within the sanitized content:</p>
	   *
	   *   <br>
	   *
	   *   <pre><code>
	   *   .rootOfTheIncludedContent svg {
	   *     overflow: hidden !important;
	   *   }
	   *   </code></pre>
	   * </div>
	   *
	   * @param {boolean=} regexp New regexp to whitelist urls with.
	   * @returns {boolean|ng.$sanitizeProvider} Returns the currently configured value if called
	   *    without an argument or self for chaining otherwise.
	   */
	  this.enableSvg = function(enableSvg) {
	    if (angular.isDefined(enableSvg)) {
	      svgEnabled = enableSvg;
	      return this;
	    } else {
	      return svgEnabled;
	    }
	  };
	}
	
	function sanitizeText(chars) {
	  var buf = [];
	  var writer = htmlSanitizeWriter(buf, angular.noop);
	  writer.chars(chars);
	  return buf.join('');
	}
	
	
	// Regular Expressions for parsing tags and attributes
	var SURROGATE_PAIR_REGEXP = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g,
	  // Match everything outside of normal chars and " (quote character)
	  NON_ALPHANUMERIC_REGEXP = /([^\#-~ |!])/g;
	
	
	// Good source of info about elements and attributes
	// http://dev.w3.org/html5/spec/Overview.html#semantics
	// http://simon.html5.org/html-elements
	
	// Safe Void Elements - HTML5
	// http://dev.w3.org/html5/spec/Overview.html#void-elements
	var voidElements = toMap("area,br,col,hr,img,wbr");
	
	// Elements that you can, intentionally, leave open (and which close themselves)
	// http://dev.w3.org/html5/spec/Overview.html#optional-tags
	var optionalEndTagBlockElements = toMap("colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr"),
	    optionalEndTagInlineElements = toMap("rp,rt"),
	    optionalEndTagElements = angular.extend({},
	                                            optionalEndTagInlineElements,
	                                            optionalEndTagBlockElements);
	
	// Safe Block Elements - HTML5
	var blockElements = angular.extend({}, optionalEndTagBlockElements, toMap("address,article," +
	        "aside,blockquote,caption,center,del,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5," +
	        "h6,header,hgroup,hr,ins,map,menu,nav,ol,pre,section,table,ul"));
	
	// Inline Elements - HTML5
	var inlineElements = angular.extend({}, optionalEndTagInlineElements, toMap("a,abbr,acronym,b," +
	        "bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,q,ruby,rp,rt,s," +
	        "samp,small,span,strike,strong,sub,sup,time,tt,u,var"));
	
	// SVG Elements
	// https://wiki.whatwg.org/wiki/Sanitization_rules#svg_Elements
	// Note: the elements animate,animateColor,animateMotion,animateTransform,set are intentionally omitted.
	// They can potentially allow for arbitrary javascript to be executed. See #11290
	var svgElements = toMap("circle,defs,desc,ellipse,font-face,font-face-name,font-face-src,g,glyph," +
	        "hkern,image,linearGradient,line,marker,metadata,missing-glyph,mpath,path,polygon,polyline," +
	        "radialGradient,rect,stop,svg,switch,text,title,tspan");
	
	// Blocked Elements (will be stripped)
	var blockedElements = toMap("script,style");
	
	var validElements = angular.extend({},
	                                   voidElements,
	                                   blockElements,
	                                   inlineElements,
	                                   optionalEndTagElements);
	
	//Attributes that have href and hence need to be sanitized
	var uriAttrs = toMap("background,cite,href,longdesc,src,xlink:href");
	
	var htmlAttrs = toMap('abbr,align,alt,axis,bgcolor,border,cellpadding,cellspacing,class,clear,' +
	    'color,cols,colspan,compact,coords,dir,face,headers,height,hreflang,hspace,' +
	    'ismap,lang,language,nohref,nowrap,rel,rev,rows,rowspan,rules,' +
	    'scope,scrolling,shape,size,span,start,summary,tabindex,target,title,type,' +
	    'valign,value,vspace,width');
	
	// SVG attributes (without "id" and "name" attributes)
	// https://wiki.whatwg.org/wiki/Sanitization_rules#svg_Attributes
	var svgAttrs = toMap('accent-height,accumulate,additive,alphabetic,arabic-form,ascent,' +
	    'baseProfile,bbox,begin,by,calcMode,cap-height,class,color,color-rendering,content,' +
	    'cx,cy,d,dx,dy,descent,display,dur,end,fill,fill-rule,font-family,font-size,font-stretch,' +
	    'font-style,font-variant,font-weight,from,fx,fy,g1,g2,glyph-name,gradientUnits,hanging,' +
	    'height,horiz-adv-x,horiz-origin-x,ideographic,k,keyPoints,keySplines,keyTimes,lang,' +
	    'marker-end,marker-mid,marker-start,markerHeight,markerUnits,markerWidth,mathematical,' +
	    'max,min,offset,opacity,orient,origin,overline-position,overline-thickness,panose-1,' +
	    'path,pathLength,points,preserveAspectRatio,r,refX,refY,repeatCount,repeatDur,' +
	    'requiredExtensions,requiredFeatures,restart,rotate,rx,ry,slope,stemh,stemv,stop-color,' +
	    'stop-opacity,strikethrough-position,strikethrough-thickness,stroke,stroke-dasharray,' +
	    'stroke-dashoffset,stroke-linecap,stroke-linejoin,stroke-miterlimit,stroke-opacity,' +
	    'stroke-width,systemLanguage,target,text-anchor,to,transform,type,u1,u2,underline-position,' +
	    'underline-thickness,unicode,unicode-range,units-per-em,values,version,viewBox,visibility,' +
	    'width,widths,x,x-height,x1,x2,xlink:actuate,xlink:arcrole,xlink:role,xlink:show,xlink:title,' +
	    'xlink:type,xml:base,xml:lang,xml:space,xmlns,xmlns:xlink,y,y1,y2,zoomAndPan', true);
	
	var validAttrs = angular.extend({},
	                                uriAttrs,
	                                svgAttrs,
	                                htmlAttrs);
	
	function toMap(str, lowercaseKeys) {
	  var obj = {}, items = str.split(','), i;
	  for (i = 0; i < items.length; i++) {
	    obj[lowercaseKeys ? angular.lowercase(items[i]) : items[i]] = true;
	  }
	  return obj;
	}
	
	var inertBodyElement;
	(function(window) {
	  var doc;
	  if (window.document && window.document.implementation) {
	    doc = window.document.implementation.createHTMLDocument("inert");
	  } else {
	    throw $sanitizeMinErr('noinert', "Can't create an inert html document");
	  }
	  var docElement = doc.documentElement || doc.getDocumentElement();
	  var bodyElements = docElement.getElementsByTagName('body');
	
	  // usually there should be only one body element in the document, but IE doesn't have any, so we need to create one
	  if (bodyElements.length === 1) {
	    inertBodyElement = bodyElements[0];
	  } else {
	    var html = doc.createElement('html');
	    inertBodyElement = doc.createElement('body');
	    html.appendChild(inertBodyElement);
	    doc.appendChild(html);
	  }
	})(window);
	
	/**
	 * @example
	 * htmlParser(htmlString, {
	 *     start: function(tag, attrs) {},
	 *     end: function(tag) {},
	 *     chars: function(text) {},
	 *     comment: function(text) {}
	 * });
	 *
	 * @param {string} html string
	 * @param {object} handler
	 */
	function htmlParser(html, handler) {
	  if (html === null || html === undefined) {
	    html = '';
	  } else if (typeof html !== 'string') {
	    html = '' + html;
	  }
	  inertBodyElement.innerHTML = html;
	
	  //mXSS protection
	  var mXSSAttempts = 5;
	  do {
	    if (mXSSAttempts === 0) {
	      throw $sanitizeMinErr('uinput', "Failed to sanitize html because the input is unstable");
	    }
	    mXSSAttempts--;
	
	    // strip custom-namespaced attributes on IE<=11
	    if (window.document.documentMode) {
	      stripCustomNsAttrs(inertBodyElement);
	    }
	    html = inertBodyElement.innerHTML; //trigger mXSS
	    inertBodyElement.innerHTML = html;
	  } while (html !== inertBodyElement.innerHTML);
	
	  var node = inertBodyElement.firstChild;
	  while (node) {
	    switch (node.nodeType) {
	      case 1: // ELEMENT_NODE
	        handler.start(node.nodeName.toLowerCase(), attrToMap(node.attributes));
	        break;
	      case 3: // TEXT NODE
	        handler.chars(node.textContent);
	        break;
	    }
	
	    var nextNode;
	    if (!(nextNode = node.firstChild)) {
	      if (node.nodeType == 1) {
	        handler.end(node.nodeName.toLowerCase());
	      }
	      nextNode = node.nextSibling;
	      if (!nextNode) {
	        while (nextNode == null) {
	          node = node.parentNode;
	          if (node === inertBodyElement) break;
	          nextNode = node.nextSibling;
	          if (node.nodeType == 1) {
	            handler.end(node.nodeName.toLowerCase());
	          }
	        }
	      }
	    }
	    node = nextNode;
	  }
	
	  while (node = inertBodyElement.firstChild) {
	    inertBodyElement.removeChild(node);
	  }
	}
	
	function attrToMap(attrs) {
	  var map = {};
	  for (var i = 0, ii = attrs.length; i < ii; i++) {
	    var attr = attrs[i];
	    map[attr.name] = attr.value;
	  }
	  return map;
	}
	
	
	/**
	 * Escapes all potentially dangerous characters, so that the
	 * resulting string can be safely inserted into attribute or
	 * element text.
	 * @param value
	 * @returns {string} escaped text
	 */
	function encodeEntities(value) {
	  return value.
	    replace(/&/g, '&amp;').
	    replace(SURROGATE_PAIR_REGEXP, function(value) {
	      var hi = value.charCodeAt(0);
	      var low = value.charCodeAt(1);
	      return '&#' + (((hi - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000) + ';';
	    }).
	    replace(NON_ALPHANUMERIC_REGEXP, function(value) {
	      return '&#' + value.charCodeAt(0) + ';';
	    }).
	    replace(/</g, '&lt;').
	    replace(/>/g, '&gt;');
	}
	
	/**
	 * create an HTML/XML writer which writes to buffer
	 * @param {Array} buf use buf.join('') to get out sanitized html string
	 * @returns {object} in the form of {
	 *     start: function(tag, attrs) {},
	 *     end: function(tag) {},
	 *     chars: function(text) {},
	 *     comment: function(text) {}
	 * }
	 */
	function htmlSanitizeWriter(buf, uriValidator) {
	  var ignoreCurrentElement = false;
	  var out = angular.bind(buf, buf.push);
	  return {
	    start: function(tag, attrs) {
	      tag = angular.lowercase(tag);
	      if (!ignoreCurrentElement && blockedElements[tag]) {
	        ignoreCurrentElement = tag;
	      }
	      if (!ignoreCurrentElement && validElements[tag] === true) {
	        out('<');
	        out(tag);
	        angular.forEach(attrs, function(value, key) {
	          var lkey=angular.lowercase(key);
	          var isImage = (tag === 'img' && lkey === 'src') || (lkey === 'background');
	          if (validAttrs[lkey] === true &&
	            (uriAttrs[lkey] !== true || uriValidator(value, isImage))) {
	            out(' ');
	            out(key);
	            out('="');
	            out(encodeEntities(value));
	            out('"');
	          }
	        });
	        out('>');
	      }
	    },
	    end: function(tag) {
	      tag = angular.lowercase(tag);
	      if (!ignoreCurrentElement && validElements[tag] === true && voidElements[tag] !== true) {
	        out('</');
	        out(tag);
	        out('>');
	      }
	      if (tag == ignoreCurrentElement) {
	        ignoreCurrentElement = false;
	      }
	    },
	    chars: function(chars) {
	      if (!ignoreCurrentElement) {
	        out(encodeEntities(chars));
	      }
	    }
	  };
	}
	
	
	/**
	 * When IE9-11 comes across an unknown namespaced attribute e.g. 'xlink:foo' it adds 'xmlns:ns1' attribute to declare
	 * ns1 namespace and prefixes the attribute with 'ns1' (e.g. 'ns1:xlink:foo'). This is undesirable since we don't want
	 * to allow any of these custom attributes. This method strips them all.
	 *
	 * @param node Root element to process
	 */
	function stripCustomNsAttrs(node) {
	  if (node.nodeType === window.Node.ELEMENT_NODE) {
	    var attrs = node.attributes;
	    for (var i = 0, l = attrs.length; i < l; i++) {
	      var attrNode = attrs[i];
	      var attrName = attrNode.name.toLowerCase();
	      if (attrName === 'xmlns:ns1' || attrName.indexOf('ns1:') === 0) {
	        node.removeAttributeNode(attrNode);
	        i--;
	        l--;
	      }
	    }
	  }
	
	  var nextNode = node.firstChild;
	  if (nextNode) {
	    stripCustomNsAttrs(nextNode);
	  }
	
	  nextNode = node.nextSibling;
	  if (nextNode) {
	    stripCustomNsAttrs(nextNode);
	  }
	}
	
	
	
	// define ngSanitize module and register $sanitize service
	angular.module('ngSanitize', []).provider('$sanitize', $SanitizeProvider);
	
	/* global sanitizeText: false */
	
	/**
	 * @ngdoc filter
	 * @name linky
	 * @kind function
	 *
	 * @description
	 * Finds links in text input and turns them into html links. Supports `http/https/ftp/mailto` and
	 * plain email address links.
	 *
	 * Requires the {@link ngSanitize `ngSanitize`} module to be installed.
	 *
	 * @param {string} text Input text.
	 * @param {string} target Window (`_blank|_self|_parent|_top`) or named frame to open links in.
	 * @param {object|function(url)} [attributes] Add custom attributes to the link element.
	 *
	 *    Can be one of:
	 *
	 *    - `object`: A map of attributes
	 *    - `function`: Takes the url as a parameter and returns a map of attributes
	 *
	 *    If the map of attributes contains a value for `target`, it overrides the value of
	 *    the target parameter.
	 *
	 *
	 * @returns {string} Html-linkified and {@link $sanitize sanitized} text.
	 *
	 * @usage
	   <span ng-bind-html="linky_expression | linky"></span>
	 *
	 * @example
	   <example module="linkyExample" deps="angular-sanitize.js">
	     <file name="index.html">
	       <div ng-controller="ExampleController">
	       Snippet: <textarea ng-model="snippet" cols="60" rows="3"></textarea>
	       <table>
	         <tr>
	           <th>Filter</th>
	           <th>Source</th>
	           <th>Rendered</th>
	         </tr>
	         <tr id="linky-filter">
	           <td>linky filter</td>
	           <td>
	             <pre>&lt;div ng-bind-html="snippet | linky"&gt;<br>&lt;/div&gt;</pre>
	           </td>
	           <td>
	             <div ng-bind-html="snippet | linky"></div>
	           </td>
	         </tr>
	         <tr id="linky-target">
	          <td>linky target</td>
	          <td>
	            <pre>&lt;div ng-bind-html="snippetWithSingleURL | linky:'_blank'"&gt;<br>&lt;/div&gt;</pre>
	          </td>
	          <td>
	            <div ng-bind-html="snippetWithSingleURL | linky:'_blank'"></div>
	          </td>
	         </tr>
	         <tr id="linky-custom-attributes">
	          <td>linky custom attributes</td>
	          <td>
	            <pre>&lt;div ng-bind-html="snippetWithSingleURL | linky:'_self':{rel: 'nofollow'}"&gt;<br>&lt;/div&gt;</pre>
	          </td>
	          <td>
	            <div ng-bind-html="snippetWithSingleURL | linky:'_self':{rel: 'nofollow'}"></div>
	          </td>
	         </tr>
	         <tr id="escaped-html">
	           <td>no filter</td>
	           <td><pre>&lt;div ng-bind="snippet"&gt;<br>&lt;/div&gt;</pre></td>
	           <td><div ng-bind="snippet"></div></td>
	         </tr>
	       </table>
	     </file>
	     <file name="script.js">
	       angular.module('linkyExample', ['ngSanitize'])
	         .controller('ExampleController', ['$scope', function($scope) {
	           $scope.snippet =
	             'Pretty text with some links:\n'+
	             'http://angularjs.org/,\n'+
	             'mailto:us@somewhere.org,\n'+
	             'another@somewhere.org,\n'+
	             'and one more: ftp://127.0.0.1/.';
	           $scope.snippetWithSingleURL = 'http://angularjs.org/';
	         }]);
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should linkify the snippet with urls', function() {
	         expect(element(by.id('linky-filter')).element(by.binding('snippet | linky')).getText()).
	             toBe('Pretty text with some links: http://angularjs.org/, us@somewhere.org, ' +
	                  'another@somewhere.org, and one more: ftp://127.0.0.1/.');
	         expect(element.all(by.css('#linky-filter a')).count()).toEqual(4);
	       });
	
	       it('should not linkify snippet without the linky filter', function() {
	         expect(element(by.id('escaped-html')).element(by.binding('snippet')).getText()).
	             toBe('Pretty text with some links: http://angularjs.org/, mailto:us@somewhere.org, ' +
	                  'another@somewhere.org, and one more: ftp://127.0.0.1/.');
	         expect(element.all(by.css('#escaped-html a')).count()).toEqual(0);
	       });
	
	       it('should update', function() {
	         element(by.model('snippet')).clear();
	         element(by.model('snippet')).sendKeys('new http://link.');
	         expect(element(by.id('linky-filter')).element(by.binding('snippet | linky')).getText()).
	             toBe('new http://link.');
	         expect(element.all(by.css('#linky-filter a')).count()).toEqual(1);
	         expect(element(by.id('escaped-html')).element(by.binding('snippet')).getText())
	             .toBe('new http://link.');
	       });
	
	       it('should work with the target property', function() {
	        expect(element(by.id('linky-target')).
	            element(by.binding("snippetWithSingleURL | linky:'_blank'")).getText()).
	            toBe('http://angularjs.org/');
	        expect(element(by.css('#linky-target a')).getAttribute('target')).toEqual('_blank');
	       });
	
	       it('should optionally add custom attributes', function() {
	        expect(element(by.id('linky-custom-attributes')).
	            element(by.binding("snippetWithSingleURL | linky:'_self':{rel: 'nofollow'}")).getText()).
	            toBe('http://angularjs.org/');
	        expect(element(by.css('#linky-custom-attributes a')).getAttribute('rel')).toEqual('nofollow');
	       });
	     </file>
	   </example>
	 */
	angular.module('ngSanitize').filter('linky', ['$sanitize', function($sanitize) {
	  var LINKY_URL_REGEXP =
	        /((ftp|https?):\/\/|(www\.)|(mailto:)?[A-Za-z0-9._%+-]+@)\S*[^\s.;,(){}<>"\u201d\u2019]/i,
	      MAILTO_REGEXP = /^mailto:/i;
	
	  var linkyMinErr = angular.$$minErr('linky');
	  var isString = angular.isString;
	
	  return function(text, target, attributes) {
	    if (text == null || text === '') return text;
	    if (!isString(text)) throw linkyMinErr('notstring', 'Expected string but received: {0}', text);
	
	    var match;
	    var raw = text;
	    var html = [];
	    var url;
	    var i;
	    while ((match = raw.match(LINKY_URL_REGEXP))) {
	      // We can not end in these as they are sometimes found at the end of the sentence
	      url = match[0];
	      // if we did not match ftp/http/www/mailto then assume mailto
	      if (!match[2] && !match[4]) {
	        url = (match[3] ? 'http://' : 'mailto:') + url;
	      }
	      i = match.index;
	      addText(raw.substr(0, i));
	      addLink(url, match[0].replace(MAILTO_REGEXP, ''));
	      raw = raw.substring(i + match[0].length);
	    }
	    addText(raw);
	    return $sanitize(html.join(''));
	
	    function addText(text) {
	      if (!text) {
	        return;
	      }
	      html.push(sanitizeText(text));
	    }
	
	    function addLink(url, text) {
	      var key;
	      html.push('<a ');
	      if (angular.isFunction(attributes)) {
	        attributes = attributes(url);
	      }
	      if (angular.isObject(attributes)) {
	        for (key in attributes) {
	          html.push(key + '="' + attributes[key] + '" ');
	        }
	      } else {
	        attributes = {};
	      }
	      if (angular.isDefined(target) && !('target' in attributes)) {
	        html.push('target="',
	                  target,
	                  '" ');
	      }
	      html.push('href="',
	                url.replace(/"/g, '&quot;'),
	                '">');
	      addText(text);
	      html.push('</a>');
	    }
	  };
	}]);
	
	
	})(window, window.angular);


/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(9);
	module.exports = 'ui.select';


/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(__webpack_provided_window_dot_jQuery) {/*!
	 * ui-select
	 * http://github.com/angular-ui/ui-select
	 * Version: 0.16.0 - 2016-03-23T20:51:56.609Z
	 * License: MIT
	 */
	
	
	(function () { 
	"use strict";
	var KEY = {
	    TAB: 9,
	    ENTER: 13,
	    ESC: 27,
	    SPACE: 32,
	    LEFT: 37,
	    UP: 38,
	    RIGHT: 39,
	    DOWN: 40,
	    SHIFT: 16,
	    CTRL: 17,
	    ALT: 18,
	    PAGE_UP: 33,
	    PAGE_DOWN: 34,
	    HOME: 36,
	    END: 35,
	    BACKSPACE: 8,
	    DELETE: 46,
	    COMMAND: 91,
	
	    MAP: { 91 : "COMMAND", 8 : "BACKSPACE" , 9 : "TAB" , 13 : "ENTER" , 16 : "SHIFT" , 17 : "CTRL" , 18 : "ALT" , 19 : "PAUSEBREAK" , 20 : "CAPSLOCK" , 27 : "ESC" , 32 : "SPACE" , 33 : "PAGE_UP", 34 : "PAGE_DOWN" , 35 : "END" , 36 : "HOME" , 37 : "LEFT" , 38 : "UP" , 39 : "RIGHT" , 40 : "DOWN" , 43 : "+" , 44 : "PRINTSCREEN" , 45 : "INSERT" , 46 : "DELETE", 48 : "0" , 49 : "1" , 50 : "2" , 51 : "3" , 52 : "4" , 53 : "5" , 54 : "6" , 55 : "7" , 56 : "8" , 57 : "9" , 59 : ";", 61 : "=" , 65 : "A" , 66 : "B" , 67 : "C" , 68 : "D" , 69 : "E" , 70 : "F" , 71 : "G" , 72 : "H" , 73 : "I" , 74 : "J" , 75 : "K" , 76 : "L", 77 : "M" , 78 : "N" , 79 : "O" , 80 : "P" , 81 : "Q" , 82 : "R" , 83 : "S" , 84 : "T" , 85 : "U" , 86 : "V" , 87 : "W" , 88 : "X" , 89 : "Y" , 90 : "Z", 96 : "0" , 97 : "1" , 98 : "2" , 99 : "3" , 100 : "4" , 101 : "5" , 102 : "6" , 103 : "7" , 104 : "8" , 105 : "9", 106 : "*" , 107 : "+" , 109 : "-" , 110 : "." , 111 : "/", 112 : "F1" , 113 : "F2" , 114 : "F3" , 115 : "F4" , 116 : "F5" , 117 : "F6" , 118 : "F7" , 119 : "F8" , 120 : "F9" , 121 : "F10" , 122 : "F11" , 123 : "F12", 144 : "NUMLOCK" , 145 : "SCROLLLOCK" , 186 : ";" , 187 : "=" , 188 : "," , 189 : "-" , 190 : "." , 191 : "/" , 192 : "`" , 219 : "[" , 220 : "\\" , 221 : "]" , 222 : "'"
	    },
	
	    isControl: function (e) {
	        var k = e.which;
	        switch (k) {
	        case KEY.COMMAND:
	        case KEY.SHIFT:
	        case KEY.CTRL:
	        case KEY.ALT:
	            return true;
	        }
	
	        if (e.metaKey) return true;
	
	        return false;
	    },
	    isFunctionKey: function (k) {
	        k = k.which ? k.which : k;
	        return k >= 112 && k <= 123;
	    },
	    isVerticalMovement: function (k){
	      return ~[KEY.UP, KEY.DOWN].indexOf(k);
	    },
	    isHorizontalMovement: function (k){
	      return ~[KEY.LEFT,KEY.RIGHT,KEY.BACKSPACE,KEY.DELETE].indexOf(k);
	    },
	    toSeparator: function (k) {
	      var sep = {ENTER:"\n",TAB:"\t",SPACE:" "}[k];
	      if (sep) return sep;
	      // return undefined for special keys other than enter, tab or space.
	      // no way to use them to cut strings.
	      return KEY[k] ? undefined : k;
	    }
	  };
	
	/**
	 * Add querySelectorAll() to jqLite.
	 *
	 * jqLite find() is limited to lookups by tag name.
	 * TODO This will change with future versions of AngularJS, to be removed when this happens
	 *
	 * See jqLite.find - why not use querySelectorAll? https://github.com/angular/angular.js/issues/3586
	 * See feat(jqLite): use querySelectorAll instead of getElementsByTagName in jqLite.find https://github.com/angular/angular.js/pull/3598
	 */
	if (angular.element.prototype.querySelectorAll === undefined) {
	  angular.element.prototype.querySelectorAll = function(selector) {
	    return angular.element(this[0].querySelectorAll(selector));
	  };
	}
	
	/**
	 * Add closest() to jqLite.
	 */
	if (angular.element.prototype.closest === undefined) {
	  angular.element.prototype.closest = function( selector) {
	    var elem = this[0];
	    var matchesSelector = elem.matches || elem.webkitMatchesSelector || elem.mozMatchesSelector || elem.msMatchesSelector;
	
	    while (elem) {
	      if (matchesSelector.bind(elem)(selector)) {
	        return elem;
	      } else {
	        elem = elem.parentElement;
	      }
	    }
	    return false;
	  };
	}
	
	var latestId = 0;
	
	var uis = angular.module('ui.select', [])
	
	.constant('uiSelectConfig', {
	  theme: 'bootstrap',
	  searchEnabled: true,
	  sortable: false,
	  placeholder: '', // Empty by default, like HTML tag <select>
	  refreshDelay: 1000, // In milliseconds
	  closeOnSelect: true,
	  skipFocusser: false,
	  dropdownPosition: 'auto',
	  generateId: function() {
	    return latestId++;
	  },
	  appendToBody: false
	})
	
	// See Rename minErr and make it accessible from outside https://github.com/angular/angular.js/issues/6913
	.service('uiSelectMinErr', function() {
	  var minErr = angular.$$minErr('ui.select');
	  return function() {
	    var error = minErr.apply(this, arguments);
	    var message = error.message.replace(new RegExp('\nhttp://errors.angularjs.org/.*'), '');
	    return new Error(message);
	  };
	})
	
	// Recreates old behavior of ng-transclude. Used internally.
	.directive('uisTranscludeAppend', function () {
	  return {
	    link: function (scope, element, attrs, ctrl, transclude) {
	        transclude(scope, function (clone) {
	          element.append(clone);
	        });
	      }
	    };
	})
	
	/**
	 * Highlights text that matches $select.search.
	 *
	 * Taken from AngularUI Bootstrap Typeahead
	 * See https://github.com/angular-ui/bootstrap/blob/0.10.0/src/typeahead/typeahead.js#L340
	 */
	.filter('highlight', function() {
	  function escapeRegexp(queryToEscape) {
	    return ('' + queryToEscape).replace(/([.?*+^$[\]\\(){}|-])/g, '\\$1');
	  }
	
	  return function(matchItem, query) {
	    return query && matchItem ? ('' + matchItem).replace(new RegExp(escapeRegexp(query), 'gi'), '<span class="ui-select-highlight">$&</span>') : matchItem;
	  };
	})
	
	/**
	 * A read-only equivalent of jQuery's offset function: http://api.jquery.com/offset/
	 *
	 * Taken from AngularUI Bootstrap Position:
	 * See https://github.com/angular-ui/bootstrap/blob/master/src/position/position.js#L70
	 */
	.factory('uisOffset',
	  ['$document', '$window',
	  function ($document, $window) {
	
	  return function(element) {
	    var boundingClientRect = element[0].getBoundingClientRect();
	    return {
	      width: boundingClientRect.width || element.prop('offsetWidth'),
	      height: boundingClientRect.height || element.prop('offsetHeight'),
	      top: boundingClientRect.top + ($window.pageYOffset || $document[0].documentElement.scrollTop),
	      left: boundingClientRect.left + ($window.pageXOffset || $document[0].documentElement.scrollLeft)
	    };
	  };
	}]);
	
	uis.directive('uiSelectChoices',
	  ['uiSelectConfig', 'uisRepeatParser', 'uiSelectMinErr', '$compile', '$window',
	  function(uiSelectConfig, RepeatParser, uiSelectMinErr, $compile, $window) {
	
	  return {
	    restrict: 'EA',
	    require: '^uiSelect',
	    replace: true,
	    transclude: true,
	    templateUrl: function(tElement) {
	      // Needed so the uiSelect can detect the transcluded content
	      tElement.addClass('ui-select-choices');
	
	      // Gets theme attribute from parent (ui-select)
	      var theme = tElement.parent().attr('theme') || uiSelectConfig.theme;
	      return theme + '/choices.tpl.html';
	    },
	
	    compile: function(tElement, tAttrs) {
	
	      if (!tAttrs.repeat) throw uiSelectMinErr('repeat', "Expected 'repeat' expression.");
	
	      return function link(scope, element, attrs, $select, transcludeFn) {
	
	        // var repeat = RepeatParser.parse(attrs.repeat);
	        var groupByExp = attrs.groupBy;
	        var groupFilterExp = attrs.groupFilter;
	
	        $select.parseRepeatAttr(attrs.repeat, groupByExp, groupFilterExp); //Result ready at $select.parserResult
	
	        $select.disableChoiceExpression = attrs.uiDisableChoice;
	        $select.onHighlightCallback = attrs.onHighlight;
	
	        $select.dropdownPosition = attrs.position ? attrs.position.toLowerCase() : uiSelectConfig.dropdownPosition;
	
	        if(groupByExp) {
	          var groups = element.querySelectorAll('.ui-select-choices-group');
	          if (groups.length !== 1) throw uiSelectMinErr('rows', "Expected 1 .ui-select-choices-group but got '{0}'.", groups.length);
	          groups.attr('ng-repeat', RepeatParser.getGroupNgRepeatExpression());
	        }
	
	        var choices = element.querySelectorAll('.ui-select-choices-row');
	        if (choices.length !== 1) {
	          throw uiSelectMinErr('rows', "Expected 1 .ui-select-choices-row but got '{0}'.", choices.length);
	        }
	
	        choices.attr('ng-repeat', $select.parserResult.repeatExpression(groupByExp))
	            .attr('ng-if', '$select.open'); //Prevent unnecessary watches when dropdown is closed
	        if ($window.document.addEventListener) {  //crude way to exclude IE8, specifically, which also cannot capture events
	          choices.attr('ng-mouseenter', '$select.setActiveItem('+$select.parserResult.itemName +')')
	              .attr('ng-click', '$select.select(' + $select.parserResult.itemName + ',$select.skipFocusser,$event)');
	        }
	
	        var rowsInner = element.querySelectorAll('.ui-select-choices-row-inner');
	        if (rowsInner.length !== 1) throw uiSelectMinErr('rows', "Expected 1 .ui-select-choices-row-inner but got '{0}'.", rowsInner.length);
	        rowsInner.attr('uis-transclude-append', ''); //Adding uisTranscludeAppend directive to row element after choices element has ngRepeat
	        if (!$window.document.addEventListener) {  //crude way to target IE8, specifically, which also cannot capture events - so event bindings must be here
	          rowsInner.attr('ng-mouseenter', '$select.setActiveItem('+$select.parserResult.itemName +')')
	              .attr('ng-click', '$select.select(' + $select.parserResult.itemName + ',$select.skipFocusser,$event)');
	        }
	
	        $compile(element, transcludeFn)(scope); //Passing current transcludeFn to be able to append elements correctly from uisTranscludeAppend
	
	        scope.$watch('$select.search', function(newValue) {
	          if(newValue && !$select.open && $select.multiple) $select.activate(false, true);
	          $select.activeIndex = $select.tagging.isActivated ? -1 : 0;
	          if (!attrs.minimumInputLength || $select.search.length >= attrs.minimumInputLength) {
	            $select.refresh(attrs.refresh);
	          } else {
	            $select.items = [];
	          }
	        });
	
	        attrs.$observe('refreshDelay', function() {
	          // $eval() is needed otherwise we get a string instead of a number
	          var refreshDelay = scope.$eval(attrs.refreshDelay);
	          $select.refreshDelay = refreshDelay !== undefined ? refreshDelay : uiSelectConfig.refreshDelay;
	        });
	      };
	    }
	  };
	}]);
	
	/**
	 * Contains ui-select "intelligence".
	 *
	 * The goal is to limit dependency on the DOM whenever possible and
	 * put as much logic in the controller (instead of the link functions) as possible so it can be easily tested.
	 */
	uis.controller('uiSelectCtrl',
	  ['$scope', '$element', '$timeout', '$filter', 'uisRepeatParser', 'uiSelectMinErr', 'uiSelectConfig', '$parse', '$injector', '$window',
	  function($scope, $element, $timeout, $filter, RepeatParser, uiSelectMinErr, uiSelectConfig, $parse, $injector, $window) {
	
	  var ctrl = this;
	
	  var EMPTY_SEARCH = '';
	
	  ctrl.placeholder = uiSelectConfig.placeholder;
	  ctrl.searchEnabled = uiSelectConfig.searchEnabled;
	  ctrl.sortable = uiSelectConfig.sortable;
	  ctrl.refreshDelay = uiSelectConfig.refreshDelay;
	  ctrl.paste = uiSelectConfig.paste;
	
	  ctrl.removeSelected = false; //If selected item(s) should be removed from dropdown list
	  ctrl.closeOnSelect = true; //Initialized inside uiSelect directive link function
	  ctrl.skipFocusser = false; //Set to true to avoid returning focus to ctrl when item is selected
	  ctrl.search = EMPTY_SEARCH;
	
	  ctrl.activeIndex = 0; //Dropdown of choices
	  ctrl.items = []; //All available choices
	
	  ctrl.open = false;
	  ctrl.focus = false;
	  ctrl.disabled = false;
	  ctrl.selected = undefined;
	
	  ctrl.dropdownPosition = 'auto';
	
	  ctrl.focusser = undefined; //Reference to input element used to handle focus events
	  ctrl.resetSearchInput = true;
	  ctrl.multiple = undefined; // Initialized inside uiSelect directive link function
	  ctrl.disableChoiceExpression = undefined; // Initialized inside uiSelectChoices directive link function
	  ctrl.tagging = {isActivated: false, fct: undefined};
	  ctrl.taggingTokens = {isActivated: false, tokens: undefined};
	  ctrl.lockChoiceExpression = undefined; // Initialized inside uiSelectMatch directive link function
	  ctrl.clickTriggeredSelect = false;
	  ctrl.$filter = $filter;
	
	  // Use $injector to check for $animate and store a reference to it
	  ctrl.$animate = (function () {
	    try {
	      return $injector.get('$animate');
	    } catch (err) {
	      // $animate does not exist
	      return null;
	    }
	  })();
	
	  ctrl.searchInput = $element.querySelectorAll('input.ui-select-search');
	  if (ctrl.searchInput.length !== 1) {
	    throw uiSelectMinErr('searchInput', "Expected 1 input.ui-select-search but got '{0}'.", ctrl.searchInput.length);
	  }
	
	  ctrl.isEmpty = function() {
	    return angular.isUndefined(ctrl.selected) || ctrl.selected === null || ctrl.selected === '' || (ctrl.multiple && ctrl.selected.length === 0);
	  };
	
	  function _findIndex(collection, predicate, thisArg){
	    if (collection.findIndex){
	      return collection.findIndex(predicate, thisArg);
	    } else {
	      var list = Object(collection);
	      var length = list.length >>> 0;
	      var value;
	
	      for (var i = 0; i < length; i++) {
	        value = list[i];
	        if (predicate.call(thisArg, value, i, list)) {
	          return i;
	        }
	      }
	      return -1;
	    }
	  }
	
	  // Most of the time the user does not want to empty the search input when in typeahead mode
	  function _resetSearchInput() {
	    if (ctrl.resetSearchInput || (ctrl.resetSearchInput === undefined && uiSelectConfig.resetSearchInput)) {
	      ctrl.search = EMPTY_SEARCH;
	      //reset activeIndex
	      if (ctrl.selected && ctrl.items.length && !ctrl.multiple) {
	        ctrl.activeIndex = _findIndex(ctrl.items, function(item){
	          return angular.equals(this, item);
	        }, ctrl.selected);
	      }
	    }
	  }
	
	    function _groupsFilter(groups, groupNames) {
	      var i, j, result = [];
	      for(i = 0; i < groupNames.length ;i++){
	        for(j = 0; j < groups.length ;j++){
	          if(groups[j].name == [groupNames[i]]){
	            result.push(groups[j]);
	          }
	        }
	      }
	      return result;
	    }
	
	  // When the user clicks on ui-select, displays the dropdown list
	  ctrl.activate = function(initSearchValue, avoidReset) {
	    if (!ctrl.disabled  && !ctrl.open) {
	      if(!avoidReset) _resetSearchInput();
	
	      $scope.$broadcast('uis:activate');
	
	      ctrl.open = true;
	
	      ctrl.activeIndex = ctrl.activeIndex >= ctrl.items.length ? 0 : ctrl.activeIndex;
	
	      // ensure that the index is set to zero for tagging variants
	      // that where first option is auto-selected
	      if ( ctrl.activeIndex === -1 && ctrl.taggingLabel !== false ) {
	        ctrl.activeIndex = 0;
	      }
	
	      var container = $element.querySelectorAll('.ui-select-choices-content');
	      if (ctrl.$animate && ctrl.$animate.on && ctrl.$animate.enabled(container[0])) {
	        ctrl.$animate.on('enter', container[0], function (elem, phase) {
	          if (phase === 'close') {
	            // Only focus input after the animation has finished
	            $timeout(function () {
	              ctrl.focusSearchInput(initSearchValue);
	            });
	          }
	        });
	      } else {
	        $timeout(function () {
	          ctrl.focusSearchInput(initSearchValue);
	          if(!ctrl.tagging.isActivated && ctrl.items.length > 1) {
	            _ensureHighlightVisible();
	          }
	        });
	      }
	    }
	  };
	
	  ctrl.focusSearchInput = function (initSearchValue) {
	    ctrl.search = initSearchValue || ctrl.search;
	    ctrl.searchInput[0].focus();
	  };
	
	  ctrl.findGroupByName = function(name) {
	    return ctrl.groups && ctrl.groups.filter(function(group) {
	      return group.name === name;
	    })[0];
	  };
	
	  ctrl.parseRepeatAttr = function(repeatAttr, groupByExp, groupFilterExp) {
	    function updateGroups(items) {
	      var groupFn = $scope.$eval(groupByExp);
	      ctrl.groups = [];
	      angular.forEach(items, function(item) {
	        var groupName = angular.isFunction(groupFn) ? groupFn(item) : item[groupFn];
	        var group = ctrl.findGroupByName(groupName);
	        if(group) {
	          group.items.push(item);
	        }
	        else {
	          ctrl.groups.push({name: groupName, items: [item]});
	        }
	      });
	      if(groupFilterExp){
	        var groupFilterFn = $scope.$eval(groupFilterExp);
	        if( angular.isFunction(groupFilterFn)){
	          ctrl.groups = groupFilterFn(ctrl.groups);
	        } else if(angular.isArray(groupFilterFn)){
	          ctrl.groups = _groupsFilter(ctrl.groups, groupFilterFn);
	        }
	      }
	      ctrl.items = [];
	      ctrl.groups.forEach(function(group) {
	        ctrl.items = ctrl.items.concat(group.items);
	      });
	    }
	
	    function setPlainItems(items) {
	      ctrl.items = items;
	    }
	
	    ctrl.setItemsFn = groupByExp ? updateGroups : setPlainItems;
	
	    ctrl.parserResult = RepeatParser.parse(repeatAttr);
	
	    ctrl.isGrouped = !!groupByExp;
	    ctrl.itemProperty = ctrl.parserResult.itemName;
	
	    //If collection is an Object, convert it to Array
	
	    var originalSource = ctrl.parserResult.source;
	
	    //When an object is used as source, we better create an array and use it as 'source'
	    var createArrayFromObject = function(){
	      var origSrc = originalSource($scope);
	      $scope.$uisSource = Object.keys(origSrc).map(function(v){
	        var result = {};
	        result[ctrl.parserResult.keyName] = v;
	        result.value = origSrc[v];
	        return result;
	      });
	    };
	
	    if (ctrl.parserResult.keyName){ // Check for (key,value) syntax
	      createArrayFromObject();
	      ctrl.parserResult.source = $parse('$uisSource' + ctrl.parserResult.filters);
	      $scope.$watch(originalSource, function(newVal, oldVal){
	        if (newVal !== oldVal) createArrayFromObject();
	      }, true);
	    }
	
	    ctrl.refreshItems = function (data){
	      data = data || ctrl.parserResult.source($scope);
	      var selectedItems = ctrl.selected;
	      //TODO should implement for single mode removeSelected
	      if (ctrl.isEmpty() || (angular.isArray(selectedItems) && !selectedItems.length) || !ctrl.removeSelected) {
	        ctrl.setItemsFn(data);
	      }else{
	        if ( data !== undefined ) {
	          var filteredItems = data.filter(function(i) {
	            return selectedItems.every(function(selectedItem) {
	              return !angular.equals(i, selectedItem);
	            });
	          });
	          ctrl.setItemsFn(filteredItems);
	        }
	      }
	      if (ctrl.dropdownPosition === 'auto' || ctrl.dropdownPosition === 'up'){
	        $scope.calculateDropdownPos();
	      }
	    };
	
	    // See https://github.com/angular/angular.js/blob/v1.2.15/src/ng/directive/ngRepeat.js#L259
	    $scope.$watchCollection(ctrl.parserResult.source, function(items) {
	      if (items === undefined || items === null) {
	        // If the user specifies undefined or null => reset the collection
	        // Special case: items can be undefined if the user did not initialized the collection on the scope
	        // i.e $scope.addresses = [] is missing
	        ctrl.items = [];
	      } else {
	        if (!angular.isArray(items)) {
	          throw uiSelectMinErr('items', "Expected an array but got '{0}'.", items);
	        } else {
	          //Remove already selected items (ex: while searching)
	          //TODO Should add a test
	          ctrl.refreshItems(items);
	          ctrl.ngModel.$modelValue = null; //Force scope model value and ngModel value to be out of sync to re-run formatters
	        }
	      }
	    });
	
	  };
	
	  var _refreshDelayPromise;
	
	  /**
	   * Typeahead mode: lets the user refresh the collection using his own function.
	   *
	   * See Expose $select.search for external / remote filtering https://github.com/angular-ui/ui-select/pull/31
	   */
	  ctrl.refresh = function(refreshAttr) {
	    if (refreshAttr !== undefined) {
	
	      // Debounce
	      // See https://github.com/angular-ui/bootstrap/blob/0.10.0/src/typeahead/typeahead.js#L155
	      // FYI AngularStrap typeahead does not have debouncing: https://github.com/mgcrea/angular-strap/blob/v2.0.0-rc.4/src/typeahead/typeahead.js#L177
	      if (_refreshDelayPromise) {
	        $timeout.cancel(_refreshDelayPromise);
	      }
	      _refreshDelayPromise = $timeout(function() {
	        $scope.$eval(refreshAttr);
	      }, ctrl.refreshDelay);
	    }
	  };
	
	  ctrl.isActive = function(itemScope) {
	    if ( !ctrl.open ) {
	      return false;
	    }
	    var itemIndex = ctrl.items.indexOf(itemScope[ctrl.itemProperty]);
	    var isActive =  itemIndex == ctrl.activeIndex;
	
	    if ( !isActive || ( itemIndex < 0 && ctrl.taggingLabel !== false ) ||( itemIndex < 0 && ctrl.taggingLabel === false) ) {
	      return false;
	    }
	
	    if (isActive && !angular.isUndefined(ctrl.onHighlightCallback)) {
	      itemScope.$eval(ctrl.onHighlightCallback);
	    }
	
	    return isActive;
	  };
	
	  ctrl.isDisabled = function(itemScope) {
	
	    if (!ctrl.open) return;
	
	    var itemIndex = ctrl.items.indexOf(itemScope[ctrl.itemProperty]);
	    var isDisabled = false;
	    var item;
	
	    if (itemIndex >= 0 && !angular.isUndefined(ctrl.disableChoiceExpression)) {
	      item = ctrl.items[itemIndex];
	      isDisabled = !!(itemScope.$eval(ctrl.disableChoiceExpression)); // force the boolean value
	      item._uiSelectChoiceDisabled = isDisabled; // store this for later reference
	    }
	
	    return isDisabled;
	  };
	
	
	  // When the user selects an item with ENTER or clicks the dropdown
	  ctrl.select = function(item, skipFocusser, $event) {
	    if (item === undefined || !item._uiSelectChoiceDisabled) {
	
	      if ( ! ctrl.items && ! ctrl.search && ! ctrl.tagging.isActivated) return;
	
	      if (!item || !item._uiSelectChoiceDisabled) {
	        if(ctrl.tagging.isActivated) {
	          // if taggingLabel is disabled, we pull from ctrl.search val
	          if ( ctrl.taggingLabel === false ) {
	            if ( ctrl.activeIndex < 0 ) {
	              item = ctrl.tagging.fct !== undefined ? ctrl.tagging.fct(ctrl.search) : ctrl.search;
	              if (!item || angular.equals( ctrl.items[0], item ) ) {
	                return;
	              }
	            } else {
	              // keyboard nav happened first, user selected from dropdown
	              item = ctrl.items[ctrl.activeIndex];
	            }
	          } else {
	            // tagging always operates at index zero, taggingLabel === false pushes
	            // the ctrl.search value without having it injected
	            if ( ctrl.activeIndex === 0 ) {
	              // ctrl.tagging pushes items to ctrl.items, so we only have empty val
	              // for `item` if it is a detected duplicate
	              if ( item === undefined ) return;
	
	              // create new item on the fly if we don't already have one;
	              // use tagging function if we have one
	              if ( ctrl.tagging.fct !== undefined && typeof item === 'string' ) {
	                item = ctrl.tagging.fct(item);
	                if (!item) return;
	              // if item type is 'string', apply the tagging label
	              } else if ( typeof item === 'string' ) {
	                // trim the trailing space
	                item = item.replace(ctrl.taggingLabel,'').trim();
	              }
	            }
	          }
	          // search ctrl.selected for dupes potentially caused by tagging and return early if found
	          if ( ctrl.selected && angular.isArray(ctrl.selected) && ctrl.selected.filter( function (selection) { return angular.equals(selection, item); }).length > 0 ) {
	            ctrl.close(skipFocusser);
	            return;
	          }
	        }
	
	        $scope.$broadcast('uis:select', item);
	
	        var locals = {};
	        locals[ctrl.parserResult.itemName] = item;
	
	        $timeout(function(){
	          ctrl.onSelectCallback($scope, {
	            $item: item,
	            $model: ctrl.parserResult.modelMapper($scope, locals)
	          });
	        });
	
	        if (ctrl.closeOnSelect) {
	          ctrl.close(skipFocusser);
	        }
	        if ($event && $event.type === 'click') {
	          ctrl.clickTriggeredSelect = true;
	        }
	      }
	    }
	  };
	
	  // Closes the dropdown
	  ctrl.close = function(skipFocusser) {
	    if (!ctrl.open) return;
	    if (ctrl.ngModel && ctrl.ngModel.$setTouched) ctrl.ngModel.$setTouched();
	    _resetSearchInput();
	    ctrl.open = false;
	
	    $scope.$broadcast('uis:close', skipFocusser);
	
	  };
	
	  ctrl.setFocus = function(){
	    if (!ctrl.focus) ctrl.focusInput[0].focus();
	  };
	
	  ctrl.clear = function($event) {
	    ctrl.select(undefined);
	    $event.stopPropagation();
	    $timeout(function() {
	      ctrl.focusser[0].focus();
	    }, 0, false);
	  };
	
	  // Toggle dropdown
	  ctrl.toggle = function(e) {
	    if (ctrl.open) {
	      ctrl.close();
	      e.preventDefault();
	      e.stopPropagation();
	    } else {
	      ctrl.activate();
	    }
	  };
	
	  ctrl.isLocked = function(itemScope, itemIndex) {
	      var isLocked, item = ctrl.selected[itemIndex];
	
	      if (item && !angular.isUndefined(ctrl.lockChoiceExpression)) {
	          isLocked = !!(itemScope.$eval(ctrl.lockChoiceExpression)); // force the boolean value
	          item._uiSelectChoiceLocked = isLocked; // store this for later reference
	      }
	
	      return isLocked;
	  };
	
	  var sizeWatch = null;
	  ctrl.sizeSearchInput = function() {
	
	    var input = ctrl.searchInput[0],
	        container = ctrl.searchInput.parent().parent()[0],
	        calculateContainerWidth = function() {
	          // Return the container width only if the search input is visible
	          return container.clientWidth * !!input.offsetParent;
	        },
	        updateIfVisible = function(containerWidth) {
	          if (containerWidth === 0) {
	            return false;
	          }
	          var inputWidth = containerWidth - input.offsetLeft - 10;
	          if (inputWidth < 50) inputWidth = containerWidth;
	          ctrl.searchInput.css('width', inputWidth+'px');
	          return true;
	        };
	
	    ctrl.searchInput.css('width', '10px');
	    $timeout(function() { //Give tags time to render correctly
	      if (sizeWatch === null && !updateIfVisible(calculateContainerWidth())) {
	        sizeWatch = $scope.$watch(calculateContainerWidth, function(containerWidth) {
	          if (updateIfVisible(containerWidth)) {
	            sizeWatch();
	            sizeWatch = null;
	          }
	        });
	      }
	    });
	  };
	
	  function _handleDropDownSelection(key) {
	    var processed = true;
	    switch (key) {
	      case KEY.DOWN:
	        if (!ctrl.open && ctrl.multiple) ctrl.activate(false, true); //In case its the search input in 'multiple' mode
	        else if (ctrl.activeIndex < ctrl.items.length - 1) { ctrl.activeIndex++; }
	        break;
	      case KEY.UP:
	        if (!ctrl.open && ctrl.multiple) ctrl.activate(false, true); //In case its the search input in 'multiple' mode
	        else if (ctrl.activeIndex > 0 || (ctrl.search.length === 0 && ctrl.tagging.isActivated && ctrl.activeIndex > -1)) { ctrl.activeIndex--; }
	        break;
	      case KEY.TAB:
	        if (!ctrl.multiple || ctrl.open) ctrl.select(ctrl.items[ctrl.activeIndex], true);
	        break;
	      case KEY.ENTER:
	        if(ctrl.open && (ctrl.tagging.isActivated || ctrl.activeIndex >= 0)){
	          ctrl.select(ctrl.items[ctrl.activeIndex], ctrl.skipFocusser); // Make sure at least one dropdown item is highlighted before adding if not in tagging mode
	        } else {
	          ctrl.activate(false, true); //In case its the search input in 'multiple' mode
	        }
	        break;
	      case KEY.ESC:
	        ctrl.close();
	        break;
	      default:
	        processed = false;
	    }
	    return processed;
	  }
	
	  // Bind to keyboard shortcuts
	  ctrl.searchInput.on('keydown', function(e) {
	
	    var key = e.which;
	
	    if (~[KEY.ENTER,KEY.ESC].indexOf(key)){
	      e.preventDefault();
	      e.stopPropagation();
	    }
	
	    // if(~[KEY.ESC,KEY.TAB].indexOf(key)){
	    //   //TODO: SEGURO?
	    //   ctrl.close();
	    // }
	
	    $scope.$apply(function() {
	
	      var tagged = false;
	
	      if (ctrl.items.length > 0 || ctrl.tagging.isActivated) {
	        _handleDropDownSelection(key);
	        if ( ctrl.taggingTokens.isActivated ) {
	          for (var i = 0; i < ctrl.taggingTokens.tokens.length; i++) {
	            if ( ctrl.taggingTokens.tokens[i] === KEY.MAP[e.keyCode] ) {
	              // make sure there is a new value to push via tagging
	              if ( ctrl.search.length > 0 ) {
	                tagged = true;
	              }
	            }
	          }
	          if ( tagged ) {
	            $timeout(function() {
	              ctrl.searchInput.triggerHandler('tagged');
	              var newItem = ctrl.search.replace(KEY.MAP[e.keyCode],'').trim();
	              if ( ctrl.tagging.fct ) {
	                newItem = ctrl.tagging.fct( newItem );
	              }
	              if (newItem) ctrl.select(newItem, true);
	            });
	          }
	        }
	      }
	
	    });
	
	    if(KEY.isVerticalMovement(key) && ctrl.items.length > 0){
	      _ensureHighlightVisible();
	    }
	
	    if (key === KEY.ENTER || key === KEY.ESC) {
	      e.preventDefault();
	      e.stopPropagation();
	    }
	
	  });
	
	  ctrl.searchInput.on('paste', function (e) {
	    var data;
	
	    if (window.clipboardData && window.clipboardData.getData) { // IE
	      data = window.clipboardData.getData('Text');
	    } else {
	      data = (e.originalEvent || e).clipboardData.getData('text/plain');
	    }
	
	    // Prepend the current input field text to the paste buffer.
	    data = ctrl.search + data;
	
	    if (data && data.length > 0) {
	      // If tagging try to split by tokens and add items
	      if (ctrl.taggingTokens.isActivated) {
	        var separator = KEY.toSeparator(ctrl.taggingTokens.tokens[0]);
	        var items = data.split(separator || ctrl.taggingTokens.tokens[0]); // split by first token only
	        if (items && items.length > 0) {
	        var oldsearch = ctrl.search;
	          angular.forEach(items, function (item) {
	            var newItem = ctrl.tagging.fct ? ctrl.tagging.fct(item) : item;
	            if (newItem) {
	              ctrl.select(newItem, true);
	            }
	          });
	          ctrl.search = oldsearch || EMPTY_SEARCH;
	          e.preventDefault();
	          e.stopPropagation();
	        }
	      } else if (ctrl.paste) {
	        ctrl.paste(data);
	        ctrl.search = EMPTY_SEARCH;
	        e.preventDefault();
	        e.stopPropagation();
	      }
	    }
	  });
	
	  ctrl.searchInput.on('tagged', function() {
	    $timeout(function() {
	      _resetSearchInput();
	    });
	  });
	
	  // See https://github.com/ivaynberg/select2/blob/3.4.6/select2.js#L1431
	  function _ensureHighlightVisible() {
	    var container = $element.querySelectorAll('.ui-select-choices-content');
	    var choices = container.querySelectorAll('.ui-select-choices-row');
	    if (choices.length < 1) {
	      throw uiSelectMinErr('choices', "Expected multiple .ui-select-choices-row but got '{0}'.", choices.length);
	    }
	
	    if (ctrl.activeIndex < 0) {
	      return;
	    }
	
	    var highlighted = choices[ctrl.activeIndex];
	    var posY = highlighted.offsetTop + highlighted.clientHeight - container[0].scrollTop;
	    var height = container[0].offsetHeight;
	
	    if (posY > height) {
	      container[0].scrollTop += posY - height;
	    } else if (posY < highlighted.clientHeight) {
	      if (ctrl.isGrouped && ctrl.activeIndex === 0)
	        container[0].scrollTop = 0; //To make group header visible when going all the way up
	      else
	        container[0].scrollTop -= highlighted.clientHeight - posY;
	    }
	  }
	
	  $scope.$on('$destroy', function() {
	    ctrl.searchInput.off('keyup keydown tagged blur paste');
	  });
	
	  angular.element($window).bind('resize', function() {
	    ctrl.sizeSearchInput();
	  });
	
	}]);
	
	uis.directive('uiSelect',
	  ['$document', 'uiSelectConfig', 'uiSelectMinErr', 'uisOffset', '$compile', '$parse', '$timeout',
	  function($document, uiSelectConfig, uiSelectMinErr, uisOffset, $compile, $parse, $timeout) {
	
	  return {
	    restrict: 'EA',
	    templateUrl: function(tElement, tAttrs) {
	      var theme = tAttrs.theme || uiSelectConfig.theme;
	      return theme + (angular.isDefined(tAttrs.multiple) ? '/select-multiple.tpl.html' : '/select.tpl.html');
	    },
	    replace: true,
	    transclude: true,
	    require: ['uiSelect', '^ngModel'],
	    scope: true,
	
	    controller: 'uiSelectCtrl',
	    controllerAs: '$select',
	    compile: function(tElement, tAttrs) {
	
	      // Allow setting ngClass on uiSelect
	      var match = /{(.*)}\s*{(.*)}/.exec(tAttrs.ngClass);
	      if(match) {
	        var combined = '{'+ match[1] +', '+ match[2] +'}';
	        tAttrs.ngClass = combined;
	        tElement.attr('ng-class', combined);
	      }
	
	      //Multiple or Single depending if multiple attribute presence
	      if (angular.isDefined(tAttrs.multiple))
	        tElement.append('<ui-select-multiple/>').removeAttr('multiple');
	      else
	        tElement.append('<ui-select-single/>');
	
	      if (tAttrs.inputId)
	        tElement.querySelectorAll('input.ui-select-search')[0].id = tAttrs.inputId;
	
	      return function(scope, element, attrs, ctrls, transcludeFn) {
	
	        var $select = ctrls[0];
	        var ngModel = ctrls[1];
	
	        $select.generatedId = uiSelectConfig.generateId();
	        $select.baseTitle = attrs.title || 'Select box';
	        $select.focusserTitle = $select.baseTitle + ' focus';
	        $select.focusserId = 'focusser-' + $select.generatedId;
	
	        $select.closeOnSelect = function() {
	          if (angular.isDefined(attrs.closeOnSelect)) {
	            return $parse(attrs.closeOnSelect)();
	          } else {
	            return uiSelectConfig.closeOnSelect;
	          }
	        }();
	
	        scope.$watch('skipFocusser', function() {
	            var skipFocusser = scope.$eval(attrs.skipFocusser);
	            $select.skipFocusser = skipFocusser !== undefined ? skipFocusser : uiSelectConfig.skipFocusser;
	        });
	
	        $select.onSelectCallback = $parse(attrs.onSelect);
	        $select.onRemoveCallback = $parse(attrs.onRemove);
	
	        //Limit the number of selections allowed
	        $select.limit = (angular.isDefined(attrs.limit)) ? parseInt(attrs.limit, 10) : undefined;
	
	        //Set reference to ngModel from uiSelectCtrl
	        $select.ngModel = ngModel;
	
	        $select.choiceGrouped = function(group){
	          return $select.isGrouped && group && group.name;
	        };
	
	        if(attrs.tabindex){
	          attrs.$observe('tabindex', function(value) {
	            $select.focusInput.attr('tabindex', value);
	            element.removeAttr('tabindex');
	          });
	        }
	
	        scope.$watch('searchEnabled', function() {
	            var searchEnabled = scope.$eval(attrs.searchEnabled);
	            $select.searchEnabled = searchEnabled !== undefined ? searchEnabled : uiSelectConfig.searchEnabled;
	        });
	
	        scope.$watch('sortable', function() {
	            var sortable = scope.$eval(attrs.sortable);
	            $select.sortable = sortable !== undefined ? sortable : uiSelectConfig.sortable;
	        });
	
	        attrs.$observe('disabled', function() {
	          // No need to use $eval() (thanks to ng-disabled) since we already get a boolean instead of a string
	          $select.disabled = attrs.disabled !== undefined ? attrs.disabled : false;
	        });
	
	        attrs.$observe('resetSearchInput', function() {
	          // $eval() is needed otherwise we get a string instead of a boolean
	          var resetSearchInput = scope.$eval(attrs.resetSearchInput);
	          $select.resetSearchInput = resetSearchInput !== undefined ? resetSearchInput : true;
	        });
	
	        attrs.$observe('paste', function() {
	          $select.paste = scope.$eval(attrs.paste);
	        });
	
	        attrs.$observe('tagging', function() {
	          if(attrs.tagging !== undefined)
	          {
	            // $eval() is needed otherwise we get a string instead of a boolean
	            var taggingEval = scope.$eval(attrs.tagging);
	            $select.tagging = {isActivated: true, fct: taggingEval !== true ? taggingEval : undefined};
	          }
	          else
	          {
	            $select.tagging = {isActivated: false, fct: undefined};
	          }
	        });
	
	        attrs.$observe('taggingLabel', function() {
	          if(attrs.tagging !== undefined )
	          {
	            // check eval for FALSE, in this case, we disable the labels
	            // associated with tagging
	            if ( attrs.taggingLabel === 'false' ) {
	              $select.taggingLabel = false;
	            }
	            else
	            {
	              $select.taggingLabel = attrs.taggingLabel !== undefined ? attrs.taggingLabel : '(new)';
	            }
	          }
	        });
	
	        attrs.$observe('taggingTokens', function() {
	          if (attrs.tagging !== undefined) {
	            var tokens = attrs.taggingTokens !== undefined ? attrs.taggingTokens.split('|') : [',','ENTER'];
	            $select.taggingTokens = {isActivated: true, tokens: tokens };
	          }
	        });
	
	        //Automatically gets focus when loaded
	        if (angular.isDefined(attrs.autofocus)){
	          $timeout(function(){
	            $select.setFocus();
	          });
	        }
	
	        //Gets focus based on scope event name (e.g. focus-on='SomeEventName')
	        if (angular.isDefined(attrs.focusOn)){
	          scope.$on(attrs.focusOn, function() {
	              $timeout(function(){
	                $select.setFocus();
	              });
	          });
	        }
	
	        function onDocumentClick(e) {
	          if (!$select.open) return; //Skip it if dropdown is close
	
	          var contains = false;
	
	          if (__webpack_provided_window_dot_jQuery) {
	            // Firefox 3.6 does not support element.contains()
	            // See Node.contains https://developer.mozilla.org/en-US/docs/Web/API/Node.contains
	            contains = __webpack_provided_window_dot_jQuery.contains(element[0], e.target);
	          } else {
	            contains = element[0].contains(e.target);
	          }
	
	          if (!contains && !$select.clickTriggeredSelect) {
	            var skipFocusser;
	            if (!$select.skipFocusser) {
	              //Will lose focus only with certain targets
	              var focusableControls = ['input','button','textarea','select'];
	              var targetController = angular.element(e.target).controller('uiSelect'); //To check if target is other ui-select
	              skipFocusser = targetController && targetController !== $select; //To check if target is other ui-select
	              if (!skipFocusser) skipFocusser =  ~focusableControls.indexOf(e.target.tagName.toLowerCase()); //Check if target is input, button or textarea
	            } else {
	              skipFocusser = true;
	            }
	            $select.close(skipFocusser);
	            scope.$digest();
	          }
	          $select.clickTriggeredSelect = false;
	        }
	
	        // See Click everywhere but here event http://stackoverflow.com/questions/12931369
	        $document.on('click', onDocumentClick);
	
	        scope.$on('$destroy', function() {
	          $document.off('click', onDocumentClick);
	        });
	
	        // Move transcluded elements to their correct position in main template
	        transcludeFn(scope, function(clone) {
	          // See Transclude in AngularJS http://blog.omkarpatil.com/2012/11/transclude-in-angularjs.html
	
	          // One day jqLite will be replaced by jQuery and we will be able to write:
	          // var transcludedElement = clone.filter('.my-class')
	          // instead of creating a hackish DOM element:
	          var transcluded = angular.element('<div>').append(clone);
	
	          var transcludedMatch = transcluded.querySelectorAll('.ui-select-match');
	          transcludedMatch.removeAttr('ui-select-match'); //To avoid loop in case directive as attr
	          transcludedMatch.removeAttr('data-ui-select-match'); // Properly handle HTML5 data-attributes
	          if (transcludedMatch.length !== 1) {
	            throw uiSelectMinErr('transcluded', "Expected 1 .ui-select-match but got '{0}'.", transcludedMatch.length);
	          }
	          element.querySelectorAll('.ui-select-match').replaceWith(transcludedMatch);
	
	          var transcludedChoices = transcluded.querySelectorAll('.ui-select-choices');
	          transcludedChoices.removeAttr('ui-select-choices'); //To avoid loop in case directive as attr
	          transcludedChoices.removeAttr('data-ui-select-choices'); // Properly handle HTML5 data-attributes
	          if (transcludedChoices.length !== 1) {
	            throw uiSelectMinErr('transcluded', "Expected 1 .ui-select-choices but got '{0}'.", transcludedChoices.length);
	          }
	          element.querySelectorAll('.ui-select-choices').replaceWith(transcludedChoices);
	        });
	
	        // Support for appending the select field to the body when its open
	        var appendToBody = scope.$eval(attrs.appendToBody);
	        if (appendToBody !== undefined ? appendToBody : uiSelectConfig.appendToBody) {
	          scope.$watch('$select.open', function(isOpen) {
	            if (isOpen) {
	              positionDropdown();
	            } else {
	              resetDropdown();
	            }
	          });
	
	          // Move the dropdown back to its original location when the scope is destroyed. Otherwise
	          // it might stick around when the user routes away or the select field is otherwise removed
	          scope.$on('$destroy', function() {
	            resetDropdown();
	          });
	        }
	
	        // Hold on to a reference to the .ui-select-container element for appendToBody support
	        var placeholder = null,
	            originalWidth = '';
	
	        function positionDropdown() {
	          // Remember the absolute position of the element
	          var offset = uisOffset(element);
	
	          // Clone the element into a placeholder element to take its original place in the DOM
	          placeholder = angular.element('<div class="ui-select-placeholder"></div>');
	          placeholder[0].style.width = offset.width + 'px';
	          placeholder[0].style.height = offset.height + 'px';
	          element.after(placeholder);
	
	          // Remember the original value of the element width inline style, so it can be restored
	          // when the dropdown is closed
	          originalWidth = element[0].style.width;
	
	          // Now move the actual dropdown element to the end of the body
	          $document.find('body').append(element);
	
	          element[0].style.position = 'absolute';
	          element[0].style.left = offset.left + 'px';
	          element[0].style.top = offset.top + 'px';
	          element[0].style.width = offset.width + 'px';
	        }
	
	        function resetDropdown() {
	          if (placeholder === null) {
	            // The dropdown has not actually been display yet, so there's nothing to reset
	            return;
	          }
	
	          // Move the dropdown element back to its original location in the DOM
	          placeholder.replaceWith(element);
	          placeholder = null;
	
	          element[0].style.position = '';
	          element[0].style.left = '';
	          element[0].style.top = '';
	          element[0].style.width = originalWidth;
	
	          // Set focus back on to the moved element
	          $select.setFocus();
	        }
	
	        // Hold on to a reference to the .ui-select-dropdown element for direction support.
	        var dropdown = null,
	            directionUpClassName = 'direction-up';
	
	        // Support changing the direction of the dropdown if there isn't enough space to render it.
	        scope.$watch('$select.open', function() {
	
	          if ($select.dropdownPosition === 'auto' || $select.dropdownPosition === 'up'){
	            scope.calculateDropdownPos();
	          }
	
	        });
	
	        var setDropdownPosUp = function(offset, offsetDropdown){
	
	          offset = offset || uisOffset(element);
	          offsetDropdown = offsetDropdown || uisOffset(dropdown);
	
	          dropdown[0].style.position = 'absolute';
	          dropdown[0].style.top = (offsetDropdown.height * -1) + 'px';
	          element.addClass(directionUpClassName);
	
	        };
	
	        var setDropdownPosDown = function(offset, offsetDropdown){
	
	          element.removeClass(directionUpClassName);
	
	          offset = offset || uisOffset(element);
	          offsetDropdown = offsetDropdown || uisOffset(dropdown);
	
	          dropdown[0].style.position = '';
	          dropdown[0].style.top = '';
	
	        };
	
	        scope.calculateDropdownPos = function(){
	
	          if ($select.open) {
	            dropdown = angular.element(element).querySelectorAll('.ui-select-dropdown');
	            if (dropdown.length === 0) {
	              return;
	            }
	
	            // Hide the dropdown so there is no flicker until $timeout is done executing.
	            dropdown[0].style.opacity = 0;
	
	            // Delay positioning the dropdown until all choices have been added so its height is correct.
	            $timeout(function(){
	
	              if ($select.dropdownPosition === 'up'){
	                  //Go UP
	                  setDropdownPosUp();
	
	              }else{ //AUTO
	
	                element.removeClass(directionUpClassName);
	
	                var offset = uisOffset(element);
	                var offsetDropdown = uisOffset(dropdown);
	
	                //https://code.google.com/p/chromium/issues/detail?id=342307#c4
	                var scrollTop = $document[0].documentElement.scrollTop || $document[0].body.scrollTop; //To make it cross browser (blink, webkit, IE, Firefox).
	
	                // Determine if the direction of the dropdown needs to be changed.
	                if (offset.top + offset.height + offsetDropdown.height > scrollTop + $document[0].documentElement.clientHeight) {
	                  //Go UP
	                  setDropdownPosUp(offset, offsetDropdown);
	                }else{
	                  //Go DOWN
	                  setDropdownPosDown(offset, offsetDropdown);
	                }
	
	              }
	
	              // Display the dropdown once it has been positioned.
	              dropdown[0].style.opacity = 1;
	            });
	          } else {
	              if (dropdown === null || dropdown.length === 0) {
	                return;
	              }
	
	              // Reset the position of the dropdown.
	              dropdown[0].style.position = '';
	              dropdown[0].style.top = '';
	              element.removeClass(directionUpClassName);
	          }
	        };
	      };
	    }
	  };
	}]);
	
	uis.directive('uiSelectMatch', ['uiSelectConfig', function(uiSelectConfig) {
	  return {
	    restrict: 'EA',
	    require: '^uiSelect',
	    replace: true,
	    transclude: true,
	    templateUrl: function(tElement) {
	      // Needed so the uiSelect can detect the transcluded content
	      tElement.addClass('ui-select-match');
	
	      // Gets theme attribute from parent (ui-select)
	      var theme = tElement.parent().attr('theme') || uiSelectConfig.theme;
	      var multi = tElement.parent().attr('multiple');
	      return theme + (multi ? '/match-multiple.tpl.html' : '/match.tpl.html');
	    },
	    link: function(scope, element, attrs, $select) {
	      $select.lockChoiceExpression = attrs.uiLockChoice;
	      attrs.$observe('placeholder', function(placeholder) {
	        $select.placeholder = placeholder !== undefined ? placeholder : uiSelectConfig.placeholder;
	      });
	
	      function setAllowClear(allow) {
	        $select.allowClear = (angular.isDefined(allow)) ? (allow === '') ? true : (allow.toLowerCase() === 'true') : false;
	      }
	
	      attrs.$observe('allowClear', setAllowClear);
	      setAllowClear(attrs.allowClear);
	
	      if($select.multiple){
	        $select.sizeSearchInput();
	      }
	
	    }
	  };
	}]);
	
	uis.directive('uiSelectMultiple', ['uiSelectMinErr','$timeout', function(uiSelectMinErr, $timeout) {
	  return {
	    restrict: 'EA',
	    require: ['^uiSelect', '^ngModel'],
	
	    controller: ['$scope','$timeout', function($scope, $timeout){
	
	      var ctrl = this,
	          $select = $scope.$select,
	          ngModel;
	
	      if (angular.isUndefined($select.selected))
	        $select.selected = [];
	
	      //Wait for link fn to inject it
	      $scope.$evalAsync(function(){ ngModel = $scope.ngModel; });
	
	      ctrl.activeMatchIndex = -1;
	
	      ctrl.updateModel = function(){
	        ngModel.$setViewValue(Date.now()); //Set timestamp as a unique string to force changes
	        ctrl.refreshComponent();
	      };
	
	      ctrl.refreshComponent = function(){
	        //Remove already selected items
	        //e.g. When user clicks on a selection, the selected array changes and
	        //the dropdown should remove that item
	        $select.refreshItems();
	        $select.sizeSearchInput();
	      };
	
	      // Remove item from multiple select
	      ctrl.removeChoice = function(index){
	
	        var removedChoice = $select.selected[index];
	
	        // if the choice is locked, can't remove it
	        if(removedChoice._uiSelectChoiceLocked) return;
	
	        var locals = {};
	        locals[$select.parserResult.itemName] = removedChoice;
	
	        $select.selected.splice(index, 1);
	        ctrl.activeMatchIndex = -1;
	        $select.sizeSearchInput();
	
	        // Give some time for scope propagation.
	        $timeout(function(){
	          $select.onRemoveCallback($scope, {
	            $item: removedChoice,
	            $model: $select.parserResult.modelMapper($scope, locals)
	          });
	        });
	
	        ctrl.updateModel();
	
	      };
	
	      ctrl.getPlaceholder = function(){
	        //Refactor single?
	        if($select.selected && $select.selected.length) return;
	        return $select.placeholder;
	      };
	
	
	    }],
	    controllerAs: '$selectMultiple',
	
	    link: function(scope, element, attrs, ctrls) {
	
	      var $select = ctrls[0];
	      var ngModel = scope.ngModel = ctrls[1];
	      var $selectMultiple = scope.$selectMultiple;
	
	      //$select.selected = raw selected objects (ignoring any property binding)
	
	      $select.multiple = true;
	      $select.removeSelected = true;
	
	      //Input that will handle focus
	      $select.focusInput = $select.searchInput;
	
	      //Properly check for empty if set to multiple
	      ngModel.$isEmpty = function(value) {
	        return !value || value.length === 0;
	      };
	
	      //From view --> model
	      ngModel.$parsers.unshift(function () {
	        var locals = {},
	            result,
	            resultMultiple = [];
	        for (var j = $select.selected.length - 1; j >= 0; j--) {
	          locals = {};
	          locals[$select.parserResult.itemName] = $select.selected[j];
	          result = $select.parserResult.modelMapper(scope, locals);
	          resultMultiple.unshift(result);
	        }
	        return resultMultiple;
	      });
	
	      // From model --> view
	      ngModel.$formatters.unshift(function (inputValue) {
	        var data = $select.parserResult.source (scope, { $select : {search:''}}), //Overwrite $search
	            locals = {},
	            result;
	        if (!data) return inputValue;
	        var resultMultiple = [];
	        var checkFnMultiple = function(list, value){
	          if (!list || !list.length) return;
	          for (var p = list.length - 1; p >= 0; p--) {
	            locals[$select.parserResult.itemName] = list[p];
	            result = $select.parserResult.modelMapper(scope, locals);
	            if($select.parserResult.trackByExp){
	                var propsItemNameMatches = /(\w*)\./.exec($select.parserResult.trackByExp);
	                var matches = /\.([^\s]+)/.exec($select.parserResult.trackByExp);
	                if(propsItemNameMatches && propsItemNameMatches.length > 0 && propsItemNameMatches[1] == $select.parserResult.itemName){
	                  if(matches && matches.length>0 && result[matches[1]] == value[matches[1]]){
	                      resultMultiple.unshift(list[p]);
	                      return true;
	                  }
	                }
	            }
	            if (angular.equals(result,value)){
	              resultMultiple.unshift(list[p]);
	              return true;
	            }
	          }
	          return false;
	        };
	        if (!inputValue) return resultMultiple; //If ngModel was undefined
	        for (var k = inputValue.length - 1; k >= 0; k--) {
	          //Check model array of currently selected items
	          if (!checkFnMultiple($select.selected, inputValue[k])){
	            //Check model array of all items available
	            if (!checkFnMultiple(data, inputValue[k])){
	              //If not found on previous lists, just add it directly to resultMultiple
	              resultMultiple.unshift(inputValue[k]);
	            }
	          }
	        }
	        return resultMultiple;
	      });
	
	      //Watch for external model changes
	      scope.$watchCollection(function(){ return ngModel.$modelValue; }, function(newValue, oldValue) {
	        if (oldValue != newValue){
	          ngModel.$modelValue = null; //Force scope model value and ngModel value to be out of sync to re-run formatters
	          $selectMultiple.refreshComponent();
	        }
	      });
	
	      ngModel.$render = function() {
	        // Make sure that model value is array
	        if(!angular.isArray(ngModel.$viewValue)){
	          // Have tolerance for null or undefined values
	          if(angular.isUndefined(ngModel.$viewValue) || ngModel.$viewValue === null){
	            $select.selected = [];
	          } else {
	            throw uiSelectMinErr('multiarr', "Expected model value to be array but got '{0}'", ngModel.$viewValue);
	          }
	        }
	        $select.selected = ngModel.$viewValue;
	        $selectMultiple.refreshComponent();
	        scope.$evalAsync(); //To force $digest
	      };
	
	      scope.$on('uis:select', function (event, item) {
	        if($select.selected.length >= $select.limit) {
	          return;
	        }
	        $select.selected.push(item);
	        $selectMultiple.updateModel();
	      });
	
	      scope.$on('uis:activate', function () {
	        $selectMultiple.activeMatchIndex = -1;
	      });
	
	      scope.$watch('$select.disabled', function(newValue, oldValue) {
	        // As the search input field may now become visible, it may be necessary to recompute its size
	        if (oldValue && !newValue) $select.sizeSearchInput();
	      });
	
	      $select.searchInput.on('keydown', function(e) {
	        var key = e.which;
	        scope.$apply(function() {
	          var processed = false;
	          // var tagged = false; //Checkme
	          if(KEY.isHorizontalMovement(key)){
	            processed = _handleMatchSelection(key);
	          }
	          if (processed  && key != KEY.TAB) {
	            //TODO Check si el tab selecciona aun correctamente
	            //Crear test
	            e.preventDefault();
	            e.stopPropagation();
	          }
	        });
	      });
	      function _getCaretPosition(el) {
	        if(angular.isNumber(el.selectionStart)) return el.selectionStart;
	        // selectionStart is not supported in IE8 and we don't want hacky workarounds so we compromise
	        else return el.value.length;
	      }
	      // Handles selected options in "multiple" mode
	      function _handleMatchSelection(key){
	        var caretPosition = _getCaretPosition($select.searchInput[0]),
	            length = $select.selected.length,
	            // none  = -1,
	            first = 0,
	            last  = length-1,
	            curr  = $selectMultiple.activeMatchIndex,
	            next  = $selectMultiple.activeMatchIndex+1,
	            prev  = $selectMultiple.activeMatchIndex-1,
	            newIndex = curr;
	
	        if(caretPosition > 0 || ($select.search.length && key == KEY.RIGHT)) return false;
	
	        $select.close();
	
	        function getNewActiveMatchIndex(){
	          switch(key){
	            case KEY.LEFT:
	              // Select previous/first item
	              if(~$selectMultiple.activeMatchIndex) return prev;
	              // Select last item
	              else return last;
	              break;
	            case KEY.RIGHT:
	              // Open drop-down
	              if(!~$selectMultiple.activeMatchIndex || curr === last){
	                $select.activate();
	                return false;
	              }
	              // Select next/last item
	              else return next;
	              break;
	            case KEY.BACKSPACE:
	              // Remove selected item and select previous/first
	              if(~$selectMultiple.activeMatchIndex){
	                $selectMultiple.removeChoice(curr);
	                return prev;
	              }
	              // Select last item
	              else return last;
	              break;
	            case KEY.DELETE:
	              // Remove selected item and select next item
	              if(~$selectMultiple.activeMatchIndex){
	                $selectMultiple.removeChoice($selectMultiple.activeMatchIndex);
	                return curr;
	              }
	              else return false;
	          }
	        }
	
	        newIndex = getNewActiveMatchIndex();
	
	        if(!$select.selected.length || newIndex === false) $selectMultiple.activeMatchIndex = -1;
	        else $selectMultiple.activeMatchIndex = Math.min(last,Math.max(first,newIndex));
	
	        return true;
	      }
	
	      $select.searchInput.on('keyup', function(e) {
	
	        if ( ! KEY.isVerticalMovement(e.which) ) {
	          scope.$evalAsync( function () {
	            $select.activeIndex = $select.taggingLabel === false ? -1 : 0;
	          });
	        }
	        // Push a "create new" item into array if there is a search string
	        if ( $select.tagging.isActivated && $select.search.length > 0 ) {
	
	          // return early with these keys
	          if (e.which === KEY.TAB || KEY.isControl(e) || KEY.isFunctionKey(e) || e.which === KEY.ESC || KEY.isVerticalMovement(e.which) ) {
	            return;
	          }
	          // always reset the activeIndex to the first item when tagging
	          $select.activeIndex = $select.taggingLabel === false ? -1 : 0;
	          // taggingLabel === false bypasses all of this
	          if ($select.taggingLabel === false) return;
	
	          var items = angular.copy( $select.items );
	          var stashArr = angular.copy( $select.items );
	          var newItem;
	          var item;
	          var hasTag = false;
	          var dupeIndex = -1;
	          var tagItems;
	          var tagItem;
	
	          // case for object tagging via transform `$select.tagging.fct` function
	          if ( $select.tagging.fct !== undefined) {
	            tagItems = $select.$filter('filter')(items,{'isTag': true});
	            if ( tagItems.length > 0 ) {
	              tagItem = tagItems[0];
	            }
	            // remove the first element, if it has the `isTag` prop we generate a new one with each keyup, shaving the previous
	            if ( items.length > 0 && tagItem ) {
	              hasTag = true;
	              items = items.slice(1,items.length);
	              stashArr = stashArr.slice(1,stashArr.length);
	            }
	            newItem = $select.tagging.fct($select.search);
	            // verify the new tag doesn't match the value of a possible selection choice or an already selected item.
	            if (
	              stashArr.some(function (origItem) {
	                 return angular.equals(origItem, $select.tagging.fct($select.search));
	              }) ||
	              $select.selected.some(function (origItem) {
	                return angular.equals(origItem, newItem);
	              })
	            ) {
	              scope.$evalAsync(function () {
	                $select.activeIndex = 0;
	                $select.items = items;
	              });
	              return;
	            }
	            newItem.isTag = true;
	          // handle newItem string and stripping dupes in tagging string context
	          } else {
	            // find any tagging items already in the $select.items array and store them
	            tagItems = $select.$filter('filter')(items,function (item) {
	              return item.match($select.taggingLabel);
	            });
	            if ( tagItems.length > 0 ) {
	              tagItem = tagItems[0];
	            }
	            item = items[0];
	            // remove existing tag item if found (should only ever be one tag item)
	            if ( item !== undefined && items.length > 0 && tagItem ) {
	              hasTag = true;
	              items = items.slice(1,items.length);
	              stashArr = stashArr.slice(1,stashArr.length);
	            }
	            newItem = $select.search+' '+$select.taggingLabel;
	            if ( _findApproxDupe($select.selected, $select.search) > -1 ) {
	              return;
	            }
	            // verify the the tag doesn't match the value of an existing item from
	            // the searched data set or the items already selected
	            if ( _findCaseInsensitiveDupe(stashArr.concat($select.selected)) ) {
	              // if there is a tag from prev iteration, strip it / queue the change
	              // and return early
	              if ( hasTag ) {
	                items = stashArr;
	                scope.$evalAsync( function () {
	                  $select.activeIndex = 0;
	                  $select.items = items;
	                });
	              }
	              return;
	            }
	            if ( _findCaseInsensitiveDupe(stashArr) ) {
	              // if there is a tag from prev iteration, strip it
	              if ( hasTag ) {
	                $select.items = stashArr.slice(1,stashArr.length);
	              }
	              return;
	            }
	          }
	          if ( hasTag ) dupeIndex = _findApproxDupe($select.selected, newItem);
	          // dupe found, shave the first item
	          if ( dupeIndex > -1 ) {
	            items = items.slice(dupeIndex+1,items.length-1);
	          } else {
	            items = [];
	            items.push(newItem);
	            items = items.concat(stashArr);
	          }
	          scope.$evalAsync( function () {
	            $select.activeIndex = 0;
	            $select.items = items;
	          });
	        }
	      });
	      function _findCaseInsensitiveDupe(arr) {
	        if ( arr === undefined || $select.search === undefined ) {
	          return false;
	        }
	        var hasDupe = arr.filter( function (origItem) {
	          if ( $select.search.toUpperCase() === undefined || origItem === undefined ) {
	            return false;
	          }
	          return origItem.toUpperCase() === $select.search.toUpperCase();
	        }).length > 0;
	
	        return hasDupe;
	      }
	      function _findApproxDupe(haystack, needle) {
	        var dupeIndex = -1;
	        if(angular.isArray(haystack)) {
	          var tempArr = angular.copy(haystack);
	          for (var i = 0; i <tempArr.length; i++) {
	            // handle the simple string version of tagging
	            if ( $select.tagging.fct === undefined ) {
	              // search the array for the match
	              if ( tempArr[i]+' '+$select.taggingLabel === needle ) {
	              dupeIndex = i;
	              }
	            // handle the object tagging implementation
	            } else {
	              var mockObj = tempArr[i];
	              if (angular.isObject(mockObj)) {
	                mockObj.isTag = true;
	              }
	              if ( angular.equals(mockObj, needle) ) {
	                dupeIndex = i;
	              }
	            }
	          }
	        }
	        return dupeIndex;
	      }
	
	      $select.searchInput.on('blur', function() {
	        $timeout(function() {
	          $selectMultiple.activeMatchIndex = -1;
	        });
	      });
	
	    }
	  };
	}]);
	
	uis.directive('uiSelectSingle', ['$timeout','$compile', function($timeout, $compile) {
	  return {
	    restrict: 'EA',
	    require: ['^uiSelect', '^ngModel'],
	    link: function(scope, element, attrs, ctrls) {
	
	      var $select = ctrls[0];
	      var ngModel = ctrls[1];
	
	      //From view --> model
	      ngModel.$parsers.unshift(function (inputValue) {
	        var locals = {},
	            result;
	        locals[$select.parserResult.itemName] = inputValue;
	        result = $select.parserResult.modelMapper(scope, locals);
	        return result;
	      });
	
	      //From model --> view
	      ngModel.$formatters.unshift(function (inputValue) {
	        var data = $select.parserResult.source (scope, { $select : {search:''}}), //Overwrite $search
	            locals = {},
	            result;
	        if (data){
	          var checkFnSingle = function(d){
	            locals[$select.parserResult.itemName] = d;
	            result = $select.parserResult.modelMapper(scope, locals);
	            return result == inputValue;
	          };
	          //If possible pass same object stored in $select.selected
	          if ($select.selected && checkFnSingle($select.selected)) {
	            return $select.selected;
	          }
	          for (var i = data.length - 1; i >= 0; i--) {
	            if (checkFnSingle(data[i])) return data[i];
	          }
	        }
	        return inputValue;
	      });
	
	      //Update viewValue if model change
	      scope.$watch('$select.selected', function(newValue) {
	        if (ngModel.$viewValue !== newValue) {
	          ngModel.$setViewValue(newValue);
	        }
	      });
	
	      ngModel.$render = function() {
	        $select.selected = ngModel.$viewValue;
	      };
	
	      scope.$on('uis:select', function (event, item) {
	        $select.selected = item;
	      });
	
	      scope.$on('uis:close', function (event, skipFocusser) {
	        $timeout(function(){
	          $select.focusser.prop('disabled', false);
	          if (!skipFocusser) $select.focusser[0].focus();
	        },0,false);
	      });
	
	      scope.$on('uis:activate', function () {
	        focusser.prop('disabled', true); //Will reactivate it on .close()
	      });
	
	      //Idea from: https://github.com/ivaynberg/select2/blob/79b5bf6db918d7560bdd959109b7bcfb47edaf43/select2.js#L1954
	      var focusser = angular.element("<input ng-disabled='$select.disabled' class='ui-select-focusser ui-select-offscreen' type='text' id='{{ $select.focusserId }}' aria-label='{{ $select.focusserTitle }}' aria-haspopup='true' role='button' />");
	      $compile(focusser)(scope);
	      $select.focusser = focusser;
	
	      //Input that will handle focus
	      $select.focusInput = focusser;
	
	      element.parent().append(focusser);
	      focusser.bind("focus", function(){
	        scope.$evalAsync(function(){
	          $select.focus = true;
	        });
	      });
	      focusser.bind("blur", function(){
	        scope.$evalAsync(function(){
	          $select.focus = false;
	        });
	      });
	      focusser.bind("keydown", function(e){
	
	        if (e.which === KEY.BACKSPACE) {
	          e.preventDefault();
	          e.stopPropagation();
	          $select.select(undefined);
	          scope.$apply();
	          return;
	        }
	
	        if (e.which === KEY.TAB || KEY.isControl(e) || KEY.isFunctionKey(e) || e.which === KEY.ESC) {
	          return;
	        }
	
	        if (e.which == KEY.DOWN  || e.which == KEY.UP || e.which == KEY.ENTER || e.which == KEY.SPACE){
	          e.preventDefault();
	          e.stopPropagation();
	          $select.activate();
	        }
	
	        scope.$digest();
	      });
	
	      focusser.bind("keyup input", function(e){
	
	        if (e.which === KEY.TAB || KEY.isControl(e) || KEY.isFunctionKey(e) || e.which === KEY.ESC || e.which == KEY.ENTER || e.which === KEY.BACKSPACE) {
	          return;
	        }
	
	        $select.activate(focusser.val()); //User pressed some regular key, so we pass it to the search input
	        focusser.val('');
	        scope.$digest();
	
	      });
	
	
	    }
	  };
	}]);
	// Make multiple matches sortable
	uis.directive('uiSelectSort', ['$timeout', 'uiSelectConfig', 'uiSelectMinErr', function($timeout, uiSelectConfig, uiSelectMinErr) {
	  return {
	    require: '^^uiSelect',
	    link: function(scope, element, attrs, $select) {
	      if (scope[attrs.uiSelectSort] === null) {
	        throw uiSelectMinErr('sort', 'Expected a list to sort');
	      }
	
	      var options = angular.extend({
	          axis: 'horizontal'
	        },
	        scope.$eval(attrs.uiSelectSortOptions));
	
	      var axis = options.axis;
	      var draggingClassName = 'dragging';
	      var droppingClassName = 'dropping';
	      var droppingBeforeClassName = 'dropping-before';
	      var droppingAfterClassName = 'dropping-after';
	
	      scope.$watch(function(){
	        return $select.sortable;
	      }, function(newValue){
	        if (newValue) {
	          element.attr('draggable', true);
	        } else {
	          element.removeAttr('draggable');
	        }
	      });
	
	      element.on('dragstart', function(event) {
	        element.addClass(draggingClassName);
	
	        (event.dataTransfer || event.originalEvent.dataTransfer).setData('text', scope.$index.toString());
	      });
	
	      element.on('dragend', function() {
	        element.removeClass(draggingClassName);
	      });
	
	      var move = function(from, to) {
	        /*jshint validthis: true */
	        this.splice(to, 0, this.splice(from, 1)[0]);
	      };
	
	      var dragOverHandler = function(event) {
	        event.preventDefault();
	
	        var offset = axis === 'vertical' ? event.offsetY || event.layerY || (event.originalEvent ? event.originalEvent.offsetY : 0) : event.offsetX || event.layerX || (event.originalEvent ? event.originalEvent.offsetX : 0);
	
	        if (offset < (this[axis === 'vertical' ? 'offsetHeight' : 'offsetWidth'] / 2)) {
	          element.removeClass(droppingAfterClassName);
	          element.addClass(droppingBeforeClassName);
	
	        } else {
	          element.removeClass(droppingBeforeClassName);
	          element.addClass(droppingAfterClassName);
	        }
	      };
	
	      var dropTimeout;
	
	      var dropHandler = function(event) {
	        event.preventDefault();
	
	        var droppedItemIndex = parseInt((event.dataTransfer || event.originalEvent.dataTransfer).getData('text'), 10);
	
	        // prevent event firing multiple times in firefox
	        $timeout.cancel(dropTimeout);
	        dropTimeout = $timeout(function() {
	          _dropHandler(droppedItemIndex);
	        }, 20);
	      };
	
	      var _dropHandler = function(droppedItemIndex) {
	        var theList = scope.$eval(attrs.uiSelectSort);
	        var itemToMove = theList[droppedItemIndex];
	        var newIndex = null;
	
	        if (element.hasClass(droppingBeforeClassName)) {
	          if (droppedItemIndex < scope.$index) {
	            newIndex = scope.$index - 1;
	          } else {
	            newIndex = scope.$index;
	          }
	        } else {
	          if (droppedItemIndex < scope.$index) {
	            newIndex = scope.$index;
	          } else {
	            newIndex = scope.$index + 1;
	          }
	        }
	
	        move.apply(theList, [droppedItemIndex, newIndex]);
	
	        scope.$apply(function() {
	          scope.$emit('uiSelectSort:change', {
	            array: theList,
	            item: itemToMove,
	            from: droppedItemIndex,
	            to: newIndex
	          });
	        });
	
	        element.removeClass(droppingClassName);
	        element.removeClass(droppingBeforeClassName);
	        element.removeClass(droppingAfterClassName);
	
	        element.off('drop', dropHandler);
	      };
	
	      element.on('dragenter', function() {
	        if (element.hasClass(draggingClassName)) {
	          return;
	        }
	
	        element.addClass(droppingClassName);
	
	        element.on('dragover', dragOverHandler);
	        element.on('drop', dropHandler);
	      });
	
	      element.on('dragleave', function(event) {
	        if (event.target != element) {
	          return;
	        }
	        element.removeClass(droppingClassName);
	        element.removeClass(droppingBeforeClassName);
	        element.removeClass(droppingAfterClassName);
	
	        element.off('dragover', dragOverHandler);
	        element.off('drop', dropHandler);
	      });
	    }
	  };
	}]);
	
	/**
	 * Parses "repeat" attribute.
	 *
	 * Taken from AngularJS ngRepeat source code
	 * See https://github.com/angular/angular.js/blob/v1.2.15/src/ng/directive/ngRepeat.js#L211
	 *
	 * Original discussion about parsing "repeat" attribute instead of fully relying on ng-repeat:
	 * https://github.com/angular-ui/ui-select/commit/5dd63ad#commitcomment-5504697
	 */
	
	uis.service('uisRepeatParser', ['uiSelectMinErr','$parse', function(uiSelectMinErr, $parse) {
	  var self = this;
	
	  /**
	   * Example:
	   * expression = "address in addresses | filter: {street: $select.search} track by $index"
	   * itemName = "address",
	   * source = "addresses | filter: {street: $select.search}",
	   * trackByExp = "$index",
	   */
	  self.parse = function(expression) {
	
	
	    var match;
	    //var isObjectCollection = /\(\s*([\$\w][\$\w]*)\s*,\s*([\$\w][\$\w]*)\s*\)/.test(expression);
	    // If an array is used as collection
	
	    // if (isObjectCollection){
	    // 000000000000000000000000000000111111111000000000000000222222222222220033333333333333333333330000444444444444444444000000000000000055555555555000000000000000000000066666666600000000
	    match = expression.match(/^\s*(?:([\s\S]+?)\s+as\s+)?(?:([\$\w][\$\w]*)|(?:\(\s*([\$\w][\$\w]*)\s*,\s*([\$\w][\$\w]*)\s*\)))\s+in\s+(\s*[\s\S]+?)?(?:\s+track\s+by\s+([\s\S]+?))?\s*$/);
	
	    // 1 Alias
	    // 2 Item
	    // 3 Key on (key,value)
	    // 4 Value on (key,value)
	    // 5 Source expression (including filters)
	    // 6 Track by
	
	    if (!match) {
	      throw uiSelectMinErr('iexp', "Expected expression in form of '_item_ in _collection_[ track by _id_]' but got '{0}'.",
	              expression);
	    }
	    
	    var source = match[5], 
	        filters = '';
	
	    // When using (key,value) ui-select requires filters to be extracted, since the object
	    // is converted to an array for $select.items 
	    // (in which case the filters need to be reapplied)
	    if (match[3]) {
	      // Remove any enclosing parenthesis
	      source = match[5].replace(/(^\()|(\)$)/g, '');
	      // match all after | but not after ||
	      var filterMatch = match[5].match(/^\s*(?:[\s\S]+?)(?:[^\|]|\|\|)+([\s\S]*)\s*$/);
	      if(filterMatch && filterMatch[1].trim()) {
	        filters = filterMatch[1];
	        source = source.replace(filters, '');
	      }      
	    }
	
	    return {
	      itemName: match[4] || match[2], // (lhs) Left-hand side,
	      keyName: match[3], //for (key, value) syntax
	      source: $parse(source),
	      filters: filters,
	      trackByExp: match[6],
	      modelMapper: $parse(match[1] || match[4] || match[2]),
	      repeatExpression: function (grouped) {
	        var expression = this.itemName + ' in ' + (grouped ? '$group.items' : '$select.items');
	        if (this.trackByExp) {
	          expression += ' track by ' + this.trackByExp;
	        }
	        return expression;
	      } 
	    };
	
	  };
	
	  self.getGroupNgRepeatExpression = function() {
	    return '$group in $select.groups';
	  };
	
	}]);
	
	}());
	angular.module("ui.select").run(["$templateCache", function($templateCache) {$templateCache.put("bootstrap/choices.tpl.html","<ul class=\"ui-select-choices ui-select-choices-content ui-select-dropdown dropdown-menu\" role=\"listbox\" ng-show=\"$select.open\"><li class=\"ui-select-choices-group\" id=\"ui-select-choices-{{ $select.generatedId }}\"><div class=\"divider\" ng-show=\"$select.isGrouped && $index > 0\"></div><div ng-show=\"$select.isGrouped\" class=\"ui-select-choices-group-label dropdown-header\" ng-bind=\"$group.name\"></div><div id=\"ui-select-choices-row-{{ $select.generatedId }}-{{$index}}\" class=\"ui-select-choices-row\" ng-class=\"{active: $select.isActive(this), disabled: $select.isDisabled(this)}\" role=\"option\"><a href=\"\" class=\"ui-select-choices-row-inner\"></a></div></li></ul>");
	$templateCache.put("bootstrap/match-multiple.tpl.html","<span class=\"ui-select-match\"><span ng-repeat=\"$item in $select.selected\"><span class=\"ui-select-match-item btn btn-default btn-xs\" tabindex=\"-1\" type=\"button\" ng-disabled=\"$select.disabled\" ng-click=\"$selectMultiple.activeMatchIndex = $index;\" ng-class=\"{\'btn-primary\':$selectMultiple.activeMatchIndex === $index, \'select-locked\':$select.isLocked(this, $index)}\" ui-select-sort=\"$select.selected\"><span class=\"close ui-select-match-close\" ng-hide=\"$select.disabled\" ng-click=\"$selectMultiple.removeChoice($index)\">&nbsp;&times;</span> <span uis-transclude-append=\"\"></span></span></span></span>");
	$templateCache.put("bootstrap/match.tpl.html","<div class=\"ui-select-match\" ng-hide=\"$select.open\" ng-disabled=\"$select.disabled\" ng-class=\"{\'btn-default-focus\':$select.focus}\"><span tabindex=\"-1\" class=\"btn btn-default form-control ui-select-toggle\" aria-label=\"{{ $select.baseTitle }} activate\" ng-disabled=\"$select.disabled\" ng-click=\"$select.activate()\" style=\"outline: 0;\"><span ng-show=\"$select.isEmpty()\" class=\"ui-select-placeholder text-muted\">{{$select.placeholder}}</span> <span ng-hide=\"$select.isEmpty()\" class=\"ui-select-match-text pull-left\" ng-class=\"{\'ui-select-allow-clear\': $select.allowClear && !$select.isEmpty()}\" ng-transclude=\"\"></span> <i class=\"caret pull-right\" ng-click=\"$select.toggle($event)\"></i> <a ng-show=\"$select.allowClear && !$select.isEmpty()\" aria-label=\"{{ $select.baseTitle }} clear\" style=\"margin-right: 10px\" ng-click=\"$select.clear($event)\" class=\"btn btn-xs btn-link pull-right\"><i class=\"glyphicon glyphicon-remove\" aria-hidden=\"true\"></i></a></span></div>");
	$templateCache.put("bootstrap/select-multiple.tpl.html","<div class=\"ui-select-container ui-select-multiple ui-select-bootstrap dropdown form-control\" ng-class=\"{open: $select.open}\"><div><div class=\"ui-select-match\"></div><input type=\"text\" autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" class=\"ui-select-search input-xs\" placeholder=\"{{$selectMultiple.getPlaceholder()}}\" ng-disabled=\"$select.disabled\" ng-hide=\"$select.disabled\" ng-click=\"$select.activate()\" ng-model=\"$select.search\" role=\"combobox\" aria-label=\"{{ $select.baseTitle }}\" ondrop=\"return false;\"></div><div class=\"ui-select-choices\"></div></div>");
	$templateCache.put("bootstrap/select.tpl.html","<div class=\"ui-select-container ui-select-bootstrap dropdown\" ng-class=\"{open: $select.open}\"><div class=\"ui-select-match\"></div><input type=\"text\" autocomplete=\"off\" tabindex=\"-1\" aria-expanded=\"true\" aria-label=\"{{ $select.baseTitle }}\" aria-owns=\"ui-select-choices-{{ $select.generatedId }}\" aria-activedescendant=\"ui-select-choices-row-{{ $select.generatedId }}-{{ $select.activeIndex }}\" class=\"form-control ui-select-search\" placeholder=\"{{$select.placeholder}}\" ng-model=\"$select.search\" ng-show=\"$select.searchEnabled && $select.open\"><div class=\"ui-select-choices\"></div></div>");
	$templateCache.put("select2/choices.tpl.html","<ul class=\"ui-select-choices ui-select-choices-content select2-results\"><li class=\"ui-select-choices-group\" ng-class=\"{\'select2-result-with-children\': $select.choiceGrouped($group) }\"><div ng-show=\"$select.choiceGrouped($group)\" class=\"ui-select-choices-group-label select2-result-label\" ng-bind=\"$group.name\"></div><ul role=\"listbox\" id=\"ui-select-choices-{{ $select.generatedId }}\" ng-class=\"{\'select2-result-sub\': $select.choiceGrouped($group), \'select2-result-single\': !$select.choiceGrouped($group) }\"><li role=\"option\" id=\"ui-select-choices-row-{{ $select.generatedId }}-{{$index}}\" class=\"ui-select-choices-row\" ng-class=\"{\'select2-highlighted\': $select.isActive(this), \'select2-disabled\': $select.isDisabled(this)}\"><div class=\"select2-result-label ui-select-choices-row-inner\"></div></li></ul></li></ul>");
	$templateCache.put("select2/match-multiple.tpl.html","<span class=\"ui-select-match\"><li class=\"ui-select-match-item select2-search-choice\" ng-repeat=\"$item in $select.selected\" ng-class=\"{\'select2-search-choice-focus\':$selectMultiple.activeMatchIndex === $index, \'select2-locked\':$select.isLocked(this, $index)}\" ui-select-sort=\"$select.selected\"><span uis-transclude-append=\"\"></span> <a href=\"javascript:;\" class=\"ui-select-match-close select2-search-choice-close\" ng-click=\"$selectMultiple.removeChoice($index)\" tabindex=\"-1\"></a></li></span>");
	$templateCache.put("select2/match.tpl.html","<a class=\"select2-choice ui-select-match\" ng-class=\"{\'select2-default\': $select.isEmpty()}\" ng-click=\"$select.toggle($event)\" aria-label=\"{{ $select.baseTitle }} select\"><span ng-show=\"$select.isEmpty()\" class=\"select2-chosen\">{{$select.placeholder}}</span> <span ng-hide=\"$select.isEmpty()\" class=\"select2-chosen\" ng-transclude=\"\"></span> <abbr ng-if=\"$select.allowClear && !$select.isEmpty()\" class=\"select2-search-choice-close\" ng-click=\"$select.clear($event)\"></abbr> <span class=\"select2-arrow ui-select-toggle\"><b></b></span></a>");
	$templateCache.put("select2/select-multiple.tpl.html","<div class=\"ui-select-container ui-select-multiple select2 select2-container select2-container-multi\" ng-class=\"{\'select2-container-active select2-dropdown-open open\': $select.open, \'select2-container-disabled\': $select.disabled}\"><ul class=\"select2-choices\"><span class=\"ui-select-match\"></span><li class=\"select2-search-field\"><input type=\"text\" autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" role=\"combobox\" aria-expanded=\"true\" aria-owns=\"ui-select-choices-{{ $select.generatedId }}\" aria-label=\"{{ $select.baseTitle }}\" aria-activedescendant=\"ui-select-choices-row-{{ $select.generatedId }}-{{ $select.activeIndex }}\" class=\"select2-input ui-select-search\" placeholder=\"{{$selectMultiple.getPlaceholder()}}\" ng-disabled=\"$select.disabled\" ng-hide=\"$select.disabled\" ng-model=\"$select.search\" ng-click=\"$select.activate()\" style=\"width: 34px;\" ondrop=\"return false;\"></li></ul><div class=\"ui-select-dropdown select2-drop select2-with-searchbox select2-drop-active\" ng-class=\"{\'select2-display-none\': !$select.open}\"><div class=\"ui-select-choices\"></div></div></div>");
	$templateCache.put("select2/select.tpl.html","<div class=\"ui-select-container select2 select2-container\" ng-class=\"{\'select2-container-active select2-dropdown-open open\': $select.open, \'select2-container-disabled\': $select.disabled, \'select2-container-active\': $select.focus, \'select2-allowclear\': $select.allowClear && !$select.isEmpty()}\"><div class=\"ui-select-match\"></div><div class=\"ui-select-dropdown select2-drop select2-with-searchbox select2-drop-active\" ng-class=\"{\'select2-display-none\': !$select.open}\"><div class=\"select2-search\" ng-show=\"$select.searchEnabled\"><input type=\"text\" autocomplete=\"off\" autocorrect=\"false\" autocapitalize=\"off\" spellcheck=\"false\" role=\"combobox\" aria-expanded=\"true\" aria-owns=\"ui-select-choices-{{ $select.generatedId }}\" aria-label=\"{{ $select.baseTitle }}\" aria-activedescendant=\"ui-select-choices-row-{{ $select.generatedId }}-{{ $select.activeIndex }}\" class=\"ui-select-search select2-input\" ng-model=\"$select.search\"></div><div class=\"ui-select-choices\"></div></div></div>");
	$templateCache.put("selectize/choices.tpl.html","<div ng-show=\"$select.open\" class=\"ui-select-choices ui-select-dropdown selectize-dropdown single\"><div class=\"ui-select-choices-content selectize-dropdown-content\"><div class=\"ui-select-choices-group optgroup\" role=\"listbox\"><div ng-show=\"$select.isGrouped\" class=\"ui-select-choices-group-label optgroup-header\" ng-bind=\"$group.name\"></div><div role=\"option\" class=\"ui-select-choices-row\" ng-class=\"{active: $select.isActive(this), disabled: $select.isDisabled(this)}\"><div class=\"option ui-select-choices-row-inner\" data-selectable=\"\"></div></div></div></div></div>");
	$templateCache.put("selectize/match.tpl.html","<div ng-hide=\"($select.open || $select.isEmpty())\" class=\"ui-select-match\" ng-transclude=\"\"></div>");
	$templateCache.put("selectize/select.tpl.html","<div class=\"ui-select-container selectize-control single\" ng-class=\"{\'open\': $select.open}\"><div class=\"selectize-input\" ng-class=\"{\'focus\': $select.open, \'disabled\': $select.disabled, \'selectize-focus\' : $select.focus}\" ng-click=\"$select.open && !$select.searchEnabled ? $select.toggle($event) : $select.activate()\"><div class=\"ui-select-match\"></div><input type=\"text\" autocomplete=\"off\" tabindex=\"-1\" class=\"ui-select-search ui-select-toggle\" ng-click=\"$select.toggle($event)\" placeholder=\"{{$select.placeholder}}\" ng-model=\"$select.search\" ng-hide=\"!$select.searchEnabled || ($select.selected && !$select.open)\" ng-disabled=\"$select.disabled\" aria-label=\"{{ $select.baseTitle }}\"></div><div class=\"ui-select-choices\"></div></div>");}]);
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {//! moment.js
	//! version : 2.13.0
	//! authors : Tim Wood, Iskren Chernev, Moment.js contributors
	//! license : MIT
	//! momentjs.com
	
	;(function (global, factory) {
	     true ? module.exports = factory() :
	    typeof define === 'function' && define.amd ? define(factory) :
	    global.moment = factory()
	}(this, function () { 'use strict';
	
	    var hookCallback;
	
	    function utils_hooks__hooks () {
	        return hookCallback.apply(null, arguments);
	    }
	
	    // This is done to register the method called with moment()
	    // without creating circular dependencies.
	    function setHookCallback (callback) {
	        hookCallback = callback;
	    }
	
	    function isArray(input) {
	        return input instanceof Array || Object.prototype.toString.call(input) === '[object Array]';
	    }
	
	    function isDate(input) {
	        return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]';
	    }
	
	    function map(arr, fn) {
	        var res = [], i;
	        for (i = 0; i < arr.length; ++i) {
	            res.push(fn(arr[i], i));
	        }
	        return res;
	    }
	
	    function hasOwnProp(a, b) {
	        return Object.prototype.hasOwnProperty.call(a, b);
	    }
	
	    function extend(a, b) {
	        for (var i in b) {
	            if (hasOwnProp(b, i)) {
	                a[i] = b[i];
	            }
	        }
	
	        if (hasOwnProp(b, 'toString')) {
	            a.toString = b.toString;
	        }
	
	        if (hasOwnProp(b, 'valueOf')) {
	            a.valueOf = b.valueOf;
	        }
	
	        return a;
	    }
	
	    function create_utc__createUTC (input, format, locale, strict) {
	        return createLocalOrUTC(input, format, locale, strict, true).utc();
	    }
	
	    function defaultParsingFlags() {
	        // We need to deep clone this object.
	        return {
	            empty           : false,
	            unusedTokens    : [],
	            unusedInput     : [],
	            overflow        : -2,
	            charsLeftOver   : 0,
	            nullInput       : false,
	            invalidMonth    : null,
	            invalidFormat   : false,
	            userInvalidated : false,
	            iso             : false,
	            parsedDateParts : [],
	            meridiem        : null
	        };
	    }
	
	    function getParsingFlags(m) {
	        if (m._pf == null) {
	            m._pf = defaultParsingFlags();
	        }
	        return m._pf;
	    }
	
	    var some;
	    if (Array.prototype.some) {
	        some = Array.prototype.some;
	    } else {
	        some = function (fun) {
	            var t = Object(this);
	            var len = t.length >>> 0;
	
	            for (var i = 0; i < len; i++) {
	                if (i in t && fun.call(this, t[i], i, t)) {
	                    return true;
	                }
	            }
	
	            return false;
	        };
	    }
	
	    function valid__isValid(m) {
	        if (m._isValid == null) {
	            var flags = getParsingFlags(m);
	            var parsedParts = some.call(flags.parsedDateParts, function (i) {
	                return i != null;
	            });
	            m._isValid = !isNaN(m._d.getTime()) &&
	                flags.overflow < 0 &&
	                !flags.empty &&
	                !flags.invalidMonth &&
	                !flags.invalidWeekday &&
	                !flags.nullInput &&
	                !flags.invalidFormat &&
	                !flags.userInvalidated &&
	                (!flags.meridiem || (flags.meridiem && parsedParts));
	
	            if (m._strict) {
	                m._isValid = m._isValid &&
	                    flags.charsLeftOver === 0 &&
	                    flags.unusedTokens.length === 0 &&
	                    flags.bigHour === undefined;
	            }
	        }
	        return m._isValid;
	    }
	
	    function valid__createInvalid (flags) {
	        var m = create_utc__createUTC(NaN);
	        if (flags != null) {
	            extend(getParsingFlags(m), flags);
	        }
	        else {
	            getParsingFlags(m).userInvalidated = true;
	        }
	
	        return m;
	    }
	
	    function isUndefined(input) {
	        return input === void 0;
	    }
	
	    // Plugins that add properties should also add the key here (null value),
	    // so we can properly clone ourselves.
	    var momentProperties = utils_hooks__hooks.momentProperties = [];
	
	    function copyConfig(to, from) {
	        var i, prop, val;
	
	        if (!isUndefined(from._isAMomentObject)) {
	            to._isAMomentObject = from._isAMomentObject;
	        }
	        if (!isUndefined(from._i)) {
	            to._i = from._i;
	        }
	        if (!isUndefined(from._f)) {
	            to._f = from._f;
	        }
	        if (!isUndefined(from._l)) {
	            to._l = from._l;
	        }
	        if (!isUndefined(from._strict)) {
	            to._strict = from._strict;
	        }
	        if (!isUndefined(from._tzm)) {
	            to._tzm = from._tzm;
	        }
	        if (!isUndefined(from._isUTC)) {
	            to._isUTC = from._isUTC;
	        }
	        if (!isUndefined(from._offset)) {
	            to._offset = from._offset;
	        }
	        if (!isUndefined(from._pf)) {
	            to._pf = getParsingFlags(from);
	        }
	        if (!isUndefined(from._locale)) {
	            to._locale = from._locale;
	        }
	
	        if (momentProperties.length > 0) {
	            for (i in momentProperties) {
	                prop = momentProperties[i];
	                val = from[prop];
	                if (!isUndefined(val)) {
	                    to[prop] = val;
	                }
	            }
	        }
	
	        return to;
	    }
	
	    var updateInProgress = false;
	
	    // Moment prototype object
	    function Moment(config) {
	        copyConfig(this, config);
	        this._d = new Date(config._d != null ? config._d.getTime() : NaN);
	        // Prevent infinite loop in case updateOffset creates new moment
	        // objects.
	        if (updateInProgress === false) {
	            updateInProgress = true;
	            utils_hooks__hooks.updateOffset(this);
	            updateInProgress = false;
	        }
	    }
	
	    function isMoment (obj) {
	        return obj instanceof Moment || (obj != null && obj._isAMomentObject != null);
	    }
	
	    function absFloor (number) {
	        if (number < 0) {
	            return Math.ceil(number);
	        } else {
	            return Math.floor(number);
	        }
	    }
	
	    function toInt(argumentForCoercion) {
	        var coercedNumber = +argumentForCoercion,
	            value = 0;
	
	        if (coercedNumber !== 0 && isFinite(coercedNumber)) {
	            value = absFloor(coercedNumber);
	        }
	
	        return value;
	    }
	
	    // compare two arrays, return the number of differences
	    function compareArrays(array1, array2, dontConvert) {
	        var len = Math.min(array1.length, array2.length),
	            lengthDiff = Math.abs(array1.length - array2.length),
	            diffs = 0,
	            i;
	        for (i = 0; i < len; i++) {
	            if ((dontConvert && array1[i] !== array2[i]) ||
	                (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))) {
	                diffs++;
	            }
	        }
	        return diffs + lengthDiff;
	    }
	
	    function warn(msg) {
	        if (utils_hooks__hooks.suppressDeprecationWarnings === false &&
	                (typeof console !==  'undefined') && console.warn) {
	            console.warn('Deprecation warning: ' + msg);
	        }
	    }
	
	    function deprecate(msg, fn) {
	        var firstTime = true;
	
	        return extend(function () {
	            if (utils_hooks__hooks.deprecationHandler != null) {
	                utils_hooks__hooks.deprecationHandler(null, msg);
	            }
	            if (firstTime) {
	                warn(msg + '\nArguments: ' + Array.prototype.slice.call(arguments).join(', ') + '\n' + (new Error()).stack);
	                firstTime = false;
	            }
	            return fn.apply(this, arguments);
	        }, fn);
	    }
	
	    var deprecations = {};
	
	    function deprecateSimple(name, msg) {
	        if (utils_hooks__hooks.deprecationHandler != null) {
	            utils_hooks__hooks.deprecationHandler(name, msg);
	        }
	        if (!deprecations[name]) {
	            warn(msg);
	            deprecations[name] = true;
	        }
	    }
	
	    utils_hooks__hooks.suppressDeprecationWarnings = false;
	    utils_hooks__hooks.deprecationHandler = null;
	
	    function isFunction(input) {
	        return input instanceof Function || Object.prototype.toString.call(input) === '[object Function]';
	    }
	
	    function isObject(input) {
	        return Object.prototype.toString.call(input) === '[object Object]';
	    }
	
	    function locale_set__set (config) {
	        var prop, i;
	        for (i in config) {
	            prop = config[i];
	            if (isFunction(prop)) {
	                this[i] = prop;
	            } else {
	                this['_' + i] = prop;
	            }
	        }
	        this._config = config;
	        // Lenient ordinal parsing accepts just a number in addition to
	        // number + (possibly) stuff coming from _ordinalParseLenient.
	        this._ordinalParseLenient = new RegExp(this._ordinalParse.source + '|' + (/\d{1,2}/).source);
	    }
	
	    function mergeConfigs(parentConfig, childConfig) {
	        var res = extend({}, parentConfig), prop;
	        for (prop in childConfig) {
	            if (hasOwnProp(childConfig, prop)) {
	                if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
	                    res[prop] = {};
	                    extend(res[prop], parentConfig[prop]);
	                    extend(res[prop], childConfig[prop]);
	                } else if (childConfig[prop] != null) {
	                    res[prop] = childConfig[prop];
	                } else {
	                    delete res[prop];
	                }
	            }
	        }
	        return res;
	    }
	
	    function Locale(config) {
	        if (config != null) {
	            this.set(config);
	        }
	    }
	
	    var keys;
	
	    if (Object.keys) {
	        keys = Object.keys;
	    } else {
	        keys = function (obj) {
	            var i, res = [];
	            for (i in obj) {
	                if (hasOwnProp(obj, i)) {
	                    res.push(i);
	                }
	            }
	            return res;
	        };
	    }
	
	    // internal storage for locale config files
	    var locales = {};
	    var globalLocale;
	
	    function normalizeLocale(key) {
	        return key ? key.toLowerCase().replace('_', '-') : key;
	    }
	
	    // pick the locale from the array
	    // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
	    // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
	    function chooseLocale(names) {
	        var i = 0, j, next, locale, split;
	
	        while (i < names.length) {
	            split = normalizeLocale(names[i]).split('-');
	            j = split.length;
	            next = normalizeLocale(names[i + 1]);
	            next = next ? next.split('-') : null;
	            while (j > 0) {
	                locale = loadLocale(split.slice(0, j).join('-'));
	                if (locale) {
	                    return locale;
	                }
	                if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {
	                    //the next array item is better than a shallower substring of this one
	                    break;
	                }
	                j--;
	            }
	            i++;
	        }
	        return null;
	    }
	
	    function loadLocale(name) {
	        var oldLocale = null;
	        // TODO: Find a better way to register and load all the locales in Node
	        if (!locales[name] && (typeof module !== 'undefined') &&
	                module && module.exports) {
	            try {
	                oldLocale = globalLocale._abbr;
	                __webpack_require__(12)("./" + name);
	                // because defineLocale currently also sets the global locale, we
	                // want to undo that for lazy loaded locales
	                locale_locales__getSetGlobalLocale(oldLocale);
	            } catch (e) { }
	        }
	        return locales[name];
	    }
	
	    // This function will load locale and then set the global locale.  If
	    // no arguments are passed in, it will simply return the current global
	    // locale key.
	    function locale_locales__getSetGlobalLocale (key, values) {
	        var data;
	        if (key) {
	            if (isUndefined(values)) {
	                data = locale_locales__getLocale(key);
	            }
	            else {
	                data = defineLocale(key, values);
	            }
	
	            if (data) {
	                // moment.duration._locale = moment._locale = data;
	                globalLocale = data;
	            }
	        }
	
	        return globalLocale._abbr;
	    }
	
	    function defineLocale (name, config) {
	        if (config !== null) {
	            config.abbr = name;
	            if (locales[name] != null) {
	                deprecateSimple('defineLocaleOverride',
	                        'use moment.updateLocale(localeName, config) to change ' +
	                        'an existing locale. moment.defineLocale(localeName, ' +
	                        'config) should only be used for creating a new locale');
	                config = mergeConfigs(locales[name]._config, config);
	            } else if (config.parentLocale != null) {
	                if (locales[config.parentLocale] != null) {
	                    config = mergeConfigs(locales[config.parentLocale]._config, config);
	                } else {
	                    // treat as if there is no base config
	                    deprecateSimple('parentLocaleUndefined',
	                            'specified parentLocale is not defined yet');
	                }
	            }
	            locales[name] = new Locale(config);
	
	            // backwards compat for now: also set the locale
	            locale_locales__getSetGlobalLocale(name);
	
	            return locales[name];
	        } else {
	            // useful for testing
	            delete locales[name];
	            return null;
	        }
	    }
	
	    function updateLocale(name, config) {
	        if (config != null) {
	            var locale;
	            if (locales[name] != null) {
	                config = mergeConfigs(locales[name]._config, config);
	            }
	            locale = new Locale(config);
	            locale.parentLocale = locales[name];
	            locales[name] = locale;
	
	            // backwards compat for now: also set the locale
	            locale_locales__getSetGlobalLocale(name);
	        } else {
	            // pass null for config to unupdate, useful for tests
	            if (locales[name] != null) {
	                if (locales[name].parentLocale != null) {
	                    locales[name] = locales[name].parentLocale;
	                } else if (locales[name] != null) {
	                    delete locales[name];
	                }
	            }
	        }
	        return locales[name];
	    }
	
	    // returns locale data
	    function locale_locales__getLocale (key) {
	        var locale;
	
	        if (key && key._locale && key._locale._abbr) {
	            key = key._locale._abbr;
	        }
	
	        if (!key) {
	            return globalLocale;
	        }
	
	        if (!isArray(key)) {
	            //short-circuit everything else
	            locale = loadLocale(key);
	            if (locale) {
	                return locale;
	            }
	            key = [key];
	        }
	
	        return chooseLocale(key);
	    }
	
	    function locale_locales__listLocales() {
	        return keys(locales);
	    }
	
	    var aliases = {};
	
	    function addUnitAlias (unit, shorthand) {
	        var lowerCase = unit.toLowerCase();
	        aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;
	    }
	
	    function normalizeUnits(units) {
	        return typeof units === 'string' ? aliases[units] || aliases[units.toLowerCase()] : undefined;
	    }
	
	    function normalizeObjectUnits(inputObject) {
	        var normalizedInput = {},
	            normalizedProp,
	            prop;
	
	        for (prop in inputObject) {
	            if (hasOwnProp(inputObject, prop)) {
	                normalizedProp = normalizeUnits(prop);
	                if (normalizedProp) {
	                    normalizedInput[normalizedProp] = inputObject[prop];
	                }
	            }
	        }
	
	        return normalizedInput;
	    }
	
	    function makeGetSet (unit, keepTime) {
	        return function (value) {
	            if (value != null) {
	                get_set__set(this, unit, value);
	                utils_hooks__hooks.updateOffset(this, keepTime);
	                return this;
	            } else {
	                return get_set__get(this, unit);
	            }
	        };
	    }
	
	    function get_set__get (mom, unit) {
	        return mom.isValid() ?
	            mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]() : NaN;
	    }
	
	    function get_set__set (mom, unit, value) {
	        if (mom.isValid()) {
	            mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
	        }
	    }
	
	    // MOMENTS
	
	    function getSet (units, value) {
	        var unit;
	        if (typeof units === 'object') {
	            for (unit in units) {
	                this.set(unit, units[unit]);
	            }
	        } else {
	            units = normalizeUnits(units);
	            if (isFunction(this[units])) {
	                return this[units](value);
	            }
	        }
	        return this;
	    }
	
	    function zeroFill(number, targetLength, forceSign) {
	        var absNumber = '' + Math.abs(number),
	            zerosToFill = targetLength - absNumber.length,
	            sign = number >= 0;
	        return (sign ? (forceSign ? '+' : '') : '-') +
	            Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
	    }
	
	    var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;
	
	    var localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g;
	
	    var formatFunctions = {};
	
	    var formatTokenFunctions = {};
	
	    // token:    'M'
	    // padded:   ['MM', 2]
	    // ordinal:  'Mo'
	    // callback: function () { this.month() + 1 }
	    function addFormatToken (token, padded, ordinal, callback) {
	        var func = callback;
	        if (typeof callback === 'string') {
	            func = function () {
	                return this[callback]();
	            };
	        }
	        if (token) {
	            formatTokenFunctions[token] = func;
	        }
	        if (padded) {
	            formatTokenFunctions[padded[0]] = function () {
	                return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
	            };
	        }
	        if (ordinal) {
	            formatTokenFunctions[ordinal] = function () {
	                return this.localeData().ordinal(func.apply(this, arguments), token);
	            };
	        }
	    }
	
	    function removeFormattingTokens(input) {
	        if (input.match(/\[[\s\S]/)) {
	            return input.replace(/^\[|\]$/g, '');
	        }
	        return input.replace(/\\/g, '');
	    }
	
	    function makeFormatFunction(format) {
	        var array = format.match(formattingTokens), i, length;
	
	        for (i = 0, length = array.length; i < length; i++) {
	            if (formatTokenFunctions[array[i]]) {
	                array[i] = formatTokenFunctions[array[i]];
	            } else {
	                array[i] = removeFormattingTokens(array[i]);
	            }
	        }
	
	        return function (mom) {
	            var output = '', i;
	            for (i = 0; i < length; i++) {
	                output += array[i] instanceof Function ? array[i].call(mom, format) : array[i];
	            }
	            return output;
	        };
	    }
	
	    // format date using native date object
	    function formatMoment(m, format) {
	        if (!m.isValid()) {
	            return m.localeData().invalidDate();
	        }
	
	        format = expandFormat(format, m.localeData());
	        formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);
	
	        return formatFunctions[format](m);
	    }
	
	    function expandFormat(format, locale) {
	        var i = 5;
	
	        function replaceLongDateFormatTokens(input) {
	            return locale.longDateFormat(input) || input;
	        }
	
	        localFormattingTokens.lastIndex = 0;
	        while (i >= 0 && localFormattingTokens.test(format)) {
	            format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
	            localFormattingTokens.lastIndex = 0;
	            i -= 1;
	        }
	
	        return format;
	    }
	
	    var match1         = /\d/;            //       0 - 9
	    var match2         = /\d\d/;          //      00 - 99
	    var match3         = /\d{3}/;         //     000 - 999
	    var match4         = /\d{4}/;         //    0000 - 9999
	    var match6         = /[+-]?\d{6}/;    // -999999 - 999999
	    var match1to2      = /\d\d?/;         //       0 - 99
	    var match3to4      = /\d\d\d\d?/;     //     999 - 9999
	    var match5to6      = /\d\d\d\d\d\d?/; //   99999 - 999999
	    var match1to3      = /\d{1,3}/;       //       0 - 999
	    var match1to4      = /\d{1,4}/;       //       0 - 9999
	    var match1to6      = /[+-]?\d{1,6}/;  // -999999 - 999999
	
	    var matchUnsigned  = /\d+/;           //       0 - inf
	    var matchSigned    = /[+-]?\d+/;      //    -inf - inf
	
	    var matchOffset    = /Z|[+-]\d\d:?\d\d/gi; // +00:00 -00:00 +0000 -0000 or Z
	    var matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi; // +00 -00 +00:00 -00:00 +0000 -0000 or Z
	
	    var matchTimestamp = /[+-]?\d+(\.\d{1,3})?/; // 123456789 123456789.123
	
	    // any word (or two) characters or numbers including two/three word month in arabic.
	    // includes scottish gaelic two word and hyphenated months
	    var matchWord = /[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i;
	
	
	    var regexes = {};
	
	    function addRegexToken (token, regex, strictRegex) {
	        regexes[token] = isFunction(regex) ? regex : function (isStrict, localeData) {
	            return (isStrict && strictRegex) ? strictRegex : regex;
	        };
	    }
	
	    function getParseRegexForToken (token, config) {
	        if (!hasOwnProp(regexes, token)) {
	            return new RegExp(unescapeFormat(token));
	        }
	
	        return regexes[token](config._strict, config._locale);
	    }
	
	    // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
	    function unescapeFormat(s) {
	        return regexEscape(s.replace('\\', '').replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (matched, p1, p2, p3, p4) {
	            return p1 || p2 || p3 || p4;
	        }));
	    }
	
	    function regexEscape(s) {
	        return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
	    }
	
	    var tokens = {};
	
	    function addParseToken (token, callback) {
	        var i, func = callback;
	        if (typeof token === 'string') {
	            token = [token];
	        }
	        if (typeof callback === 'number') {
	            func = function (input, array) {
	                array[callback] = toInt(input);
	            };
	        }
	        for (i = 0; i < token.length; i++) {
	            tokens[token[i]] = func;
	        }
	    }
	
	    function addWeekParseToken (token, callback) {
	        addParseToken(token, function (input, array, config, token) {
	            config._w = config._w || {};
	            callback(input, config._w, config, token);
	        });
	    }
	
	    function addTimeToArrayFromToken(token, input, config) {
	        if (input != null && hasOwnProp(tokens, token)) {
	            tokens[token](input, config._a, config, token);
	        }
	    }
	
	    var YEAR = 0;
	    var MONTH = 1;
	    var DATE = 2;
	    var HOUR = 3;
	    var MINUTE = 4;
	    var SECOND = 5;
	    var MILLISECOND = 6;
	    var WEEK = 7;
	    var WEEKDAY = 8;
	
	    var indexOf;
	
	    if (Array.prototype.indexOf) {
	        indexOf = Array.prototype.indexOf;
	    } else {
	        indexOf = function (o) {
	            // I know
	            var i;
	            for (i = 0; i < this.length; ++i) {
	                if (this[i] === o) {
	                    return i;
	                }
	            }
	            return -1;
	        };
	    }
	
	    function daysInMonth(year, month) {
	        return new Date(Date.UTC(year, month + 1, 0)).getUTCDate();
	    }
	
	    // FORMATTING
	
	    addFormatToken('M', ['MM', 2], 'Mo', function () {
	        return this.month() + 1;
	    });
	
	    addFormatToken('MMM', 0, 0, function (format) {
	        return this.localeData().monthsShort(this, format);
	    });
	
	    addFormatToken('MMMM', 0, 0, function (format) {
	        return this.localeData().months(this, format);
	    });
	
	    // ALIASES
	
	    addUnitAlias('month', 'M');
	
	    // PARSING
	
	    addRegexToken('M',    match1to2);
	    addRegexToken('MM',   match1to2, match2);
	    addRegexToken('MMM',  function (isStrict, locale) {
	        return locale.monthsShortRegex(isStrict);
	    });
	    addRegexToken('MMMM', function (isStrict, locale) {
	        return locale.monthsRegex(isStrict);
	    });
	
	    addParseToken(['M', 'MM'], function (input, array) {
	        array[MONTH] = toInt(input) - 1;
	    });
	
	    addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {
	        var month = config._locale.monthsParse(input, token, config._strict);
	        // if we didn't find a month name, mark the date as invalid.
	        if (month != null) {
	            array[MONTH] = month;
	        } else {
	            getParsingFlags(config).invalidMonth = input;
	        }
	    });
	
	    // LOCALES
	
	    var MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s+)+MMMM?/;
	    var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_');
	    function localeMonths (m, format) {
	        return isArray(this._months) ? this._months[m.month()] :
	            this._months[MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'][m.month()];
	    }
	
	    var defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_');
	    function localeMonthsShort (m, format) {
	        return isArray(this._monthsShort) ? this._monthsShort[m.month()] :
	            this._monthsShort[MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'][m.month()];
	    }
	
	    function units_month__handleStrictParse(monthName, format, strict) {
	        var i, ii, mom, llc = monthName.toLocaleLowerCase();
	        if (!this._monthsParse) {
	            // this is not used
	            this._monthsParse = [];
	            this._longMonthsParse = [];
	            this._shortMonthsParse = [];
	            for (i = 0; i < 12; ++i) {
	                mom = create_utc__createUTC([2000, i]);
	                this._shortMonthsParse[i] = this.monthsShort(mom, '').toLocaleLowerCase();
	                this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();
	            }
	        }
	
	        if (strict) {
	            if (format === 'MMM') {
	                ii = indexOf.call(this._shortMonthsParse, llc);
	                return ii !== -1 ? ii : null;
	            } else {
	                ii = indexOf.call(this._longMonthsParse, llc);
	                return ii !== -1 ? ii : null;
	            }
	        } else {
	            if (format === 'MMM') {
	                ii = indexOf.call(this._shortMonthsParse, llc);
	                if (ii !== -1) {
	                    return ii;
	                }
	                ii = indexOf.call(this._longMonthsParse, llc);
	                return ii !== -1 ? ii : null;
	            } else {
	                ii = indexOf.call(this._longMonthsParse, llc);
	                if (ii !== -1) {
	                    return ii;
	                }
	                ii = indexOf.call(this._shortMonthsParse, llc);
	                return ii !== -1 ? ii : null;
	            }
	        }
	    }
	
	    function localeMonthsParse (monthName, format, strict) {
	        var i, mom, regex;
	
	        if (this._monthsParseExact) {
	            return units_month__handleStrictParse.call(this, monthName, format, strict);
	        }
	
	        if (!this._monthsParse) {
	            this._monthsParse = [];
	            this._longMonthsParse = [];
	            this._shortMonthsParse = [];
	        }
	
	        // TODO: add sorting
	        // Sorting makes sure if one month (or abbr) is a prefix of another
	        // see sorting in computeMonthsParse
	        for (i = 0; i < 12; i++) {
	            // make the regex if we don't have it already
	            mom = create_utc__createUTC([2000, i]);
	            if (strict && !this._longMonthsParse[i]) {
	                this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');
	                this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');
	            }
	            if (!strict && !this._monthsParse[i]) {
	                regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
	                this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
	            }
	            // test the regex
	            if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {
	                return i;
	            } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {
	                return i;
	            } else if (!strict && this._monthsParse[i].test(monthName)) {
	                return i;
	            }
	        }
	    }
	
	    // MOMENTS
	
	    function setMonth (mom, value) {
	        var dayOfMonth;
	
	        if (!mom.isValid()) {
	            // No op
	            return mom;
	        }
	
	        if (typeof value === 'string') {
	            if (/^\d+$/.test(value)) {
	                value = toInt(value);
	            } else {
	                value = mom.localeData().monthsParse(value);
	                // TODO: Another silent failure?
	                if (typeof value !== 'number') {
	                    return mom;
	                }
	            }
	        }
	
	        dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
	        mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
	        return mom;
	    }
	
	    function getSetMonth (value) {
	        if (value != null) {
	            setMonth(this, value);
	            utils_hooks__hooks.updateOffset(this, true);
	            return this;
	        } else {
	            return get_set__get(this, 'Month');
	        }
	    }
	
	    function getDaysInMonth () {
	        return daysInMonth(this.year(), this.month());
	    }
	
	    var defaultMonthsShortRegex = matchWord;
	    function monthsShortRegex (isStrict) {
	        if (this._monthsParseExact) {
	            if (!hasOwnProp(this, '_monthsRegex')) {
	                computeMonthsParse.call(this);
	            }
	            if (isStrict) {
	                return this._monthsShortStrictRegex;
	            } else {
	                return this._monthsShortRegex;
	            }
	        } else {
	            return this._monthsShortStrictRegex && isStrict ?
	                this._monthsShortStrictRegex : this._monthsShortRegex;
	        }
	    }
	
	    var defaultMonthsRegex = matchWord;
	    function monthsRegex (isStrict) {
	        if (this._monthsParseExact) {
	            if (!hasOwnProp(this, '_monthsRegex')) {
	                computeMonthsParse.call(this);
	            }
	            if (isStrict) {
	                return this._monthsStrictRegex;
	            } else {
	                return this._monthsRegex;
	            }
	        } else {
	            return this._monthsStrictRegex && isStrict ?
	                this._monthsStrictRegex : this._monthsRegex;
	        }
	    }
	
	    function computeMonthsParse () {
	        function cmpLenRev(a, b) {
	            return b.length - a.length;
	        }
	
	        var shortPieces = [], longPieces = [], mixedPieces = [],
	            i, mom;
	        for (i = 0; i < 12; i++) {
	            // make the regex if we don't have it already
	            mom = create_utc__createUTC([2000, i]);
	            shortPieces.push(this.monthsShort(mom, ''));
	            longPieces.push(this.months(mom, ''));
	            mixedPieces.push(this.months(mom, ''));
	            mixedPieces.push(this.monthsShort(mom, ''));
	        }
	        // Sorting makes sure if one month (or abbr) is a prefix of another it
	        // will match the longer piece.
	        shortPieces.sort(cmpLenRev);
	        longPieces.sort(cmpLenRev);
	        mixedPieces.sort(cmpLenRev);
	        for (i = 0; i < 12; i++) {
	            shortPieces[i] = regexEscape(shortPieces[i]);
	            longPieces[i] = regexEscape(longPieces[i]);
	            mixedPieces[i] = regexEscape(mixedPieces[i]);
	        }
	
	        this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
	        this._monthsShortRegex = this._monthsRegex;
	        this._monthsStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
	        this._monthsShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
	    }
	
	    function checkOverflow (m) {
	        var overflow;
	        var a = m._a;
	
	        if (a && getParsingFlags(m).overflow === -2) {
	            overflow =
	                a[MONTH]       < 0 || a[MONTH]       > 11  ? MONTH :
	                a[DATE]        < 1 || a[DATE]        > daysInMonth(a[YEAR], a[MONTH]) ? DATE :
	                a[HOUR]        < 0 || a[HOUR]        > 24 || (a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0)) ? HOUR :
	                a[MINUTE]      < 0 || a[MINUTE]      > 59  ? MINUTE :
	                a[SECOND]      < 0 || a[SECOND]      > 59  ? SECOND :
	                a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND :
	                -1;
	
	            if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
	                overflow = DATE;
	            }
	            if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
	                overflow = WEEK;
	            }
	            if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
	                overflow = WEEKDAY;
	            }
	
	            getParsingFlags(m).overflow = overflow;
	        }
	
	        return m;
	    }
	
	    // iso 8601 regex
	    // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)
	    var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?/;
	    var basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?/;
	
	    var tzRegex = /Z|[+-]\d\d(?::?\d\d)?/;
	
	    var isoDates = [
	        ['YYYYYY-MM-DD', /[+-]\d{6}-\d\d-\d\d/],
	        ['YYYY-MM-DD', /\d{4}-\d\d-\d\d/],
	        ['GGGG-[W]WW-E', /\d{4}-W\d\d-\d/],
	        ['GGGG-[W]WW', /\d{4}-W\d\d/, false],
	        ['YYYY-DDD', /\d{4}-\d{3}/],
	        ['YYYY-MM', /\d{4}-\d\d/, false],
	        ['YYYYYYMMDD', /[+-]\d{10}/],
	        ['YYYYMMDD', /\d{8}/],
	        // YYYYMM is NOT allowed by the standard
	        ['GGGG[W]WWE', /\d{4}W\d{3}/],
	        ['GGGG[W]WW', /\d{4}W\d{2}/, false],
	        ['YYYYDDD', /\d{7}/]
	    ];
	
	    // iso time formats and regexes
	    var isoTimes = [
	        ['HH:mm:ss.SSSS', /\d\d:\d\d:\d\d\.\d+/],
	        ['HH:mm:ss,SSSS', /\d\d:\d\d:\d\d,\d+/],
	        ['HH:mm:ss', /\d\d:\d\d:\d\d/],
	        ['HH:mm', /\d\d:\d\d/],
	        ['HHmmss.SSSS', /\d\d\d\d\d\d\.\d+/],
	        ['HHmmss,SSSS', /\d\d\d\d\d\d,\d+/],
	        ['HHmmss', /\d\d\d\d\d\d/],
	        ['HHmm', /\d\d\d\d/],
	        ['HH', /\d\d/]
	    ];
	
	    var aspNetJsonRegex = /^\/?Date\((\-?\d+)/i;
	
	    // date from iso format
	    function configFromISO(config) {
	        var i, l,
	            string = config._i,
	            match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),
	            allowTime, dateFormat, timeFormat, tzFormat;
	
	        if (match) {
	            getParsingFlags(config).iso = true;
	
	            for (i = 0, l = isoDates.length; i < l; i++) {
	                if (isoDates[i][1].exec(match[1])) {
	                    dateFormat = isoDates[i][0];
	                    allowTime = isoDates[i][2] !== false;
	                    break;
	                }
	            }
	            if (dateFormat == null) {
	                config._isValid = false;
	                return;
	            }
	            if (match[3]) {
	                for (i = 0, l = isoTimes.length; i < l; i++) {
	                    if (isoTimes[i][1].exec(match[3])) {
	                        // match[2] should be 'T' or space
	                        timeFormat = (match[2] || ' ') + isoTimes[i][0];
	                        break;
	                    }
	                }
	                if (timeFormat == null) {
	                    config._isValid = false;
	                    return;
	                }
	            }
	            if (!allowTime && timeFormat != null) {
	                config._isValid = false;
	                return;
	            }
	            if (match[4]) {
	                if (tzRegex.exec(match[4])) {
	                    tzFormat = 'Z';
	                } else {
	                    config._isValid = false;
	                    return;
	                }
	            }
	            config._f = dateFormat + (timeFormat || '') + (tzFormat || '');
	            configFromStringAndFormat(config);
	        } else {
	            config._isValid = false;
	        }
	    }
	
	    // date from iso format or fallback
	    function configFromString(config) {
	        var matched = aspNetJsonRegex.exec(config._i);
	
	        if (matched !== null) {
	            config._d = new Date(+matched[1]);
	            return;
	        }
	
	        configFromISO(config);
	        if (config._isValid === false) {
	            delete config._isValid;
	            utils_hooks__hooks.createFromInputFallback(config);
	        }
	    }
	
	    utils_hooks__hooks.createFromInputFallback = deprecate(
	        'moment construction falls back to js Date. This is ' +
	        'discouraged and will be removed in upcoming major ' +
	        'release. Please refer to ' +
	        'https://github.com/moment/moment/issues/1407 for more info.',
	        function (config) {
	            config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
	        }
	    );
	
	    function createDate (y, m, d, h, M, s, ms) {
	        //can't just apply() to create a date:
	        //http://stackoverflow.com/questions/181348/instantiating-a-javascript-object-by-calling-prototype-constructor-apply
	        var date = new Date(y, m, d, h, M, s, ms);
	
	        //the date constructor remaps years 0-99 to 1900-1999
	        if (y < 100 && y >= 0 && isFinite(date.getFullYear())) {
	            date.setFullYear(y);
	        }
	        return date;
	    }
	
	    function createUTCDate (y) {
	        var date = new Date(Date.UTC.apply(null, arguments));
	
	        //the Date.UTC function remaps years 0-99 to 1900-1999
	        if (y < 100 && y >= 0 && isFinite(date.getUTCFullYear())) {
	            date.setUTCFullYear(y);
	        }
	        return date;
	    }
	
	    // FORMATTING
	
	    addFormatToken('Y', 0, 0, function () {
	        var y = this.year();
	        return y <= 9999 ? '' + y : '+' + y;
	    });
	
	    addFormatToken(0, ['YY', 2], 0, function () {
	        return this.year() % 100;
	    });
	
	    addFormatToken(0, ['YYYY',   4],       0, 'year');
	    addFormatToken(0, ['YYYYY',  5],       0, 'year');
	    addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');
	
	    // ALIASES
	
	    addUnitAlias('year', 'y');
	
	    // PARSING
	
	    addRegexToken('Y',      matchSigned);
	    addRegexToken('YY',     match1to2, match2);
	    addRegexToken('YYYY',   match1to4, match4);
	    addRegexToken('YYYYY',  match1to6, match6);
	    addRegexToken('YYYYYY', match1to6, match6);
	
	    addParseToken(['YYYYY', 'YYYYYY'], YEAR);
	    addParseToken('YYYY', function (input, array) {
	        array[YEAR] = input.length === 2 ? utils_hooks__hooks.parseTwoDigitYear(input) : toInt(input);
	    });
	    addParseToken('YY', function (input, array) {
	        array[YEAR] = utils_hooks__hooks.parseTwoDigitYear(input);
	    });
	    addParseToken('Y', function (input, array) {
	        array[YEAR] = parseInt(input, 10);
	    });
	
	    // HELPERS
	
	    function daysInYear(year) {
	        return isLeapYear(year) ? 366 : 365;
	    }
	
	    function isLeapYear(year) {
	        return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
	    }
	
	    // HOOKS
	
	    utils_hooks__hooks.parseTwoDigitYear = function (input) {
	        return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
	    };
	
	    // MOMENTS
	
	    var getSetYear = makeGetSet('FullYear', true);
	
	    function getIsLeapYear () {
	        return isLeapYear(this.year());
	    }
	
	    // start-of-first-week - start-of-year
	    function firstWeekOffset(year, dow, doy) {
	        var // first-week day -- which january is always in the first week (4 for iso, 1 for other)
	            fwd = 7 + dow - doy,
	            // first-week day local weekday -- which local weekday is fwd
	            fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;
	
	        return -fwdlw + fwd - 1;
	    }
	
	    //http://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
	    function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
	        var localWeekday = (7 + weekday - dow) % 7,
	            weekOffset = firstWeekOffset(year, dow, doy),
	            dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,
	            resYear, resDayOfYear;
	
	        if (dayOfYear <= 0) {
	            resYear = year - 1;
	            resDayOfYear = daysInYear(resYear) + dayOfYear;
	        } else if (dayOfYear > daysInYear(year)) {
	            resYear = year + 1;
	            resDayOfYear = dayOfYear - daysInYear(year);
	        } else {
	            resYear = year;
	            resDayOfYear = dayOfYear;
	        }
	
	        return {
	            year: resYear,
	            dayOfYear: resDayOfYear
	        };
	    }
	
	    function weekOfYear(mom, dow, doy) {
	        var weekOffset = firstWeekOffset(mom.year(), dow, doy),
	            week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,
	            resWeek, resYear;
	
	        if (week < 1) {
	            resYear = mom.year() - 1;
	            resWeek = week + weeksInYear(resYear, dow, doy);
	        } else if (week > weeksInYear(mom.year(), dow, doy)) {
	            resWeek = week - weeksInYear(mom.year(), dow, doy);
	            resYear = mom.year() + 1;
	        } else {
	            resYear = mom.year();
	            resWeek = week;
	        }
	
	        return {
	            week: resWeek,
	            year: resYear
	        };
	    }
	
	    function weeksInYear(year, dow, doy) {
	        var weekOffset = firstWeekOffset(year, dow, doy),
	            weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
	        return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
	    }
	
	    // Pick the first defined of two or three arguments.
	    function defaults(a, b, c) {
	        if (a != null) {
	            return a;
	        }
	        if (b != null) {
	            return b;
	        }
	        return c;
	    }
	
	    function currentDateArray(config) {
	        // hooks is actually the exported moment object
	        var nowValue = new Date(utils_hooks__hooks.now());
	        if (config._useUTC) {
	            return [nowValue.getUTCFullYear(), nowValue.getUTCMonth(), nowValue.getUTCDate()];
	        }
	        return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
	    }
	
	    // convert an array to a date.
	    // the array should mirror the parameters below
	    // note: all values past the year are optional and will default to the lowest possible value.
	    // [year, month, day , hour, minute, second, millisecond]
	    function configFromArray (config) {
	        var i, date, input = [], currentDate, yearToUse;
	
	        if (config._d) {
	            return;
	        }
	
	        currentDate = currentDateArray(config);
	
	        //compute day of the year from weeks and weekdays
	        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
	            dayOfYearFromWeekInfo(config);
	        }
	
	        //if the day of the year is set, figure out what it is
	        if (config._dayOfYear) {
	            yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);
	
	            if (config._dayOfYear > daysInYear(yearToUse)) {
	                getParsingFlags(config)._overflowDayOfYear = true;
	            }
	
	            date = createUTCDate(yearToUse, 0, config._dayOfYear);
	            config._a[MONTH] = date.getUTCMonth();
	            config._a[DATE] = date.getUTCDate();
	        }
	
	        // Default to current date.
	        // * if no year, month, day of month are given, default to today
	        // * if day of month is given, default month and year
	        // * if month is given, default only year
	        // * if year is given, don't default anything
	        for (i = 0; i < 3 && config._a[i] == null; ++i) {
	            config._a[i] = input[i] = currentDate[i];
	        }
	
	        // Zero out whatever was not defaulted, including time
	        for (; i < 7; i++) {
	            config._a[i] = input[i] = (config._a[i] == null) ? (i === 2 ? 1 : 0) : config._a[i];
	        }
	
	        // Check for 24:00:00.000
	        if (config._a[HOUR] === 24 &&
	                config._a[MINUTE] === 0 &&
	                config._a[SECOND] === 0 &&
	                config._a[MILLISECOND] === 0) {
	            config._nextDay = true;
	            config._a[HOUR] = 0;
	        }
	
	        config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);
	        // Apply timezone offset from input. The actual utcOffset can be changed
	        // with parseZone.
	        if (config._tzm != null) {
	            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
	        }
	
	        if (config._nextDay) {
	            config._a[HOUR] = 24;
	        }
	    }
	
	    function dayOfYearFromWeekInfo(config) {
	        var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow;
	
	        w = config._w;
	        if (w.GG != null || w.W != null || w.E != null) {
	            dow = 1;
	            doy = 4;
	
	            // TODO: We need to take the current isoWeekYear, but that depends on
	            // how we interpret now (local, utc, fixed offset). So create
	            // a now version of current config (take local/utc/offset flags, and
	            // create now).
	            weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(local__createLocal(), 1, 4).year);
	            week = defaults(w.W, 1);
	            weekday = defaults(w.E, 1);
	            if (weekday < 1 || weekday > 7) {
	                weekdayOverflow = true;
	            }
	        } else {
	            dow = config._locale._week.dow;
	            doy = config._locale._week.doy;
	
	            weekYear = defaults(w.gg, config._a[YEAR], weekOfYear(local__createLocal(), dow, doy).year);
	            week = defaults(w.w, 1);
	
	            if (w.d != null) {
	                // weekday -- low day numbers are considered next week
	                weekday = w.d;
	                if (weekday < 0 || weekday > 6) {
	                    weekdayOverflow = true;
	                }
	            } else if (w.e != null) {
	                // local weekday -- counting starts from begining of week
	                weekday = w.e + dow;
	                if (w.e < 0 || w.e > 6) {
	                    weekdayOverflow = true;
	                }
	            } else {
	                // default to begining of week
	                weekday = dow;
	            }
	        }
	        if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
	            getParsingFlags(config)._overflowWeeks = true;
	        } else if (weekdayOverflow != null) {
	            getParsingFlags(config)._overflowWeekday = true;
	        } else {
	            temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
	            config._a[YEAR] = temp.year;
	            config._dayOfYear = temp.dayOfYear;
	        }
	    }
	
	    // constant that refers to the ISO standard
	    utils_hooks__hooks.ISO_8601 = function () {};
	
	    // date from string and format string
	    function configFromStringAndFormat(config) {
	        // TODO: Move this to another part of the creation flow to prevent circular deps
	        if (config._f === utils_hooks__hooks.ISO_8601) {
	            configFromISO(config);
	            return;
	        }
	
	        config._a = [];
	        getParsingFlags(config).empty = true;
	
	        // This array is used to make a Date, either with `new Date` or `Date.UTC`
	        var string = '' + config._i,
	            i, parsedInput, tokens, token, skipped,
	            stringLength = string.length,
	            totalParsedInputLength = 0;
	
	        tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];
	
	        for (i = 0; i < tokens.length; i++) {
	            token = tokens[i];
	            parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];
	            // console.log('token', token, 'parsedInput', parsedInput,
	            //         'regex', getParseRegexForToken(token, config));
	            if (parsedInput) {
	                skipped = string.substr(0, string.indexOf(parsedInput));
	                if (skipped.length > 0) {
	                    getParsingFlags(config).unusedInput.push(skipped);
	                }
	                string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
	                totalParsedInputLength += parsedInput.length;
	            }
	            // don't parse if it's not a known token
	            if (formatTokenFunctions[token]) {
	                if (parsedInput) {
	                    getParsingFlags(config).empty = false;
	                }
	                else {
	                    getParsingFlags(config).unusedTokens.push(token);
	                }
	                addTimeToArrayFromToken(token, parsedInput, config);
	            }
	            else if (config._strict && !parsedInput) {
	                getParsingFlags(config).unusedTokens.push(token);
	            }
	        }
	
	        // add remaining unparsed input length to the string
	        getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;
	        if (string.length > 0) {
	            getParsingFlags(config).unusedInput.push(string);
	        }
	
	        // clear _12h flag if hour is <= 12
	        if (getParsingFlags(config).bigHour === true &&
	                config._a[HOUR] <= 12 &&
	                config._a[HOUR] > 0) {
	            getParsingFlags(config).bigHour = undefined;
	        }
	
	        getParsingFlags(config).parsedDateParts = config._a.slice(0);
	        getParsingFlags(config).meridiem = config._meridiem;
	        // handle meridiem
	        config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);
	
	        configFromArray(config);
	        checkOverflow(config);
	    }
	
	
	    function meridiemFixWrap (locale, hour, meridiem) {
	        var isPm;
	
	        if (meridiem == null) {
	            // nothing to do
	            return hour;
	        }
	        if (locale.meridiemHour != null) {
	            return locale.meridiemHour(hour, meridiem);
	        } else if (locale.isPM != null) {
	            // Fallback
	            isPm = locale.isPM(meridiem);
	            if (isPm && hour < 12) {
	                hour += 12;
	            }
	            if (!isPm && hour === 12) {
	                hour = 0;
	            }
	            return hour;
	        } else {
	            // this is not supposed to happen
	            return hour;
	        }
	    }
	
	    // date from string and array of format strings
	    function configFromStringAndArray(config) {
	        var tempConfig,
	            bestMoment,
	
	            scoreToBeat,
	            i,
	            currentScore;
	
	        if (config._f.length === 0) {
	            getParsingFlags(config).invalidFormat = true;
	            config._d = new Date(NaN);
	            return;
	        }
	
	        for (i = 0; i < config._f.length; i++) {
	            currentScore = 0;
	            tempConfig = copyConfig({}, config);
	            if (config._useUTC != null) {
	                tempConfig._useUTC = config._useUTC;
	            }
	            tempConfig._f = config._f[i];
	            configFromStringAndFormat(tempConfig);
	
	            if (!valid__isValid(tempConfig)) {
	                continue;
	            }
	
	            // if there is any input that was not parsed add a penalty for that format
	            currentScore += getParsingFlags(tempConfig).charsLeftOver;
	
	            //or tokens
	            currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;
	
	            getParsingFlags(tempConfig).score = currentScore;
	
	            if (scoreToBeat == null || currentScore < scoreToBeat) {
	                scoreToBeat = currentScore;
	                bestMoment = tempConfig;
	            }
	        }
	
	        extend(config, bestMoment || tempConfig);
	    }
	
	    function configFromObject(config) {
	        if (config._d) {
	            return;
	        }
	
	        var i = normalizeObjectUnits(config._i);
	        config._a = map([i.year, i.month, i.day || i.date, i.hour, i.minute, i.second, i.millisecond], function (obj) {
	            return obj && parseInt(obj, 10);
	        });
	
	        configFromArray(config);
	    }
	
	    function createFromConfig (config) {
	        var res = new Moment(checkOverflow(prepareConfig(config)));
	        if (res._nextDay) {
	            // Adding is smart enough around DST
	            res.add(1, 'd');
	            res._nextDay = undefined;
	        }
	
	        return res;
	    }
	
	    function prepareConfig (config) {
	        var input = config._i,
	            format = config._f;
	
	        config._locale = config._locale || locale_locales__getLocale(config._l);
	
	        if (input === null || (format === undefined && input === '')) {
	            return valid__createInvalid({nullInput: true});
	        }
	
	        if (typeof input === 'string') {
	            config._i = input = config._locale.preparse(input);
	        }
	
	        if (isMoment(input)) {
	            return new Moment(checkOverflow(input));
	        } else if (isArray(format)) {
	            configFromStringAndArray(config);
	        } else if (format) {
	            configFromStringAndFormat(config);
	        } else if (isDate(input)) {
	            config._d = input;
	        } else {
	            configFromInput(config);
	        }
	
	        if (!valid__isValid(config)) {
	            config._d = null;
	        }
	
	        return config;
	    }
	
	    function configFromInput(config) {
	        var input = config._i;
	        if (input === undefined) {
	            config._d = new Date(utils_hooks__hooks.now());
	        } else if (isDate(input)) {
	            config._d = new Date(input.valueOf());
	        } else if (typeof input === 'string') {
	            configFromString(config);
	        } else if (isArray(input)) {
	            config._a = map(input.slice(0), function (obj) {
	                return parseInt(obj, 10);
	            });
	            configFromArray(config);
	        } else if (typeof(input) === 'object') {
	            configFromObject(config);
	        } else if (typeof(input) === 'number') {
	            // from milliseconds
	            config._d = new Date(input);
	        } else {
	            utils_hooks__hooks.createFromInputFallback(config);
	        }
	    }
	
	    function createLocalOrUTC (input, format, locale, strict, isUTC) {
	        var c = {};
	
	        if (typeof(locale) === 'boolean') {
	            strict = locale;
	            locale = undefined;
	        }
	        // object construction must be done this way.
	        // https://github.com/moment/moment/issues/1423
	        c._isAMomentObject = true;
	        c._useUTC = c._isUTC = isUTC;
	        c._l = locale;
	        c._i = input;
	        c._f = format;
	        c._strict = strict;
	
	        return createFromConfig(c);
	    }
	
	    function local__createLocal (input, format, locale, strict) {
	        return createLocalOrUTC(input, format, locale, strict, false);
	    }
	
	    var prototypeMin = deprecate(
	         'moment().min is deprecated, use moment.max instead. https://github.com/moment/moment/issues/1548',
	         function () {
	             var other = local__createLocal.apply(null, arguments);
	             if (this.isValid() && other.isValid()) {
	                 return other < this ? this : other;
	             } else {
	                 return valid__createInvalid();
	             }
	         }
	     );
	
	    var prototypeMax = deprecate(
	        'moment().max is deprecated, use moment.min instead. https://github.com/moment/moment/issues/1548',
	        function () {
	            var other = local__createLocal.apply(null, arguments);
	            if (this.isValid() && other.isValid()) {
	                return other > this ? this : other;
	            } else {
	                return valid__createInvalid();
	            }
	        }
	    );
	
	    // Pick a moment m from moments so that m[fn](other) is true for all
	    // other. This relies on the function fn to be transitive.
	    //
	    // moments should either be an array of moment objects or an array, whose
	    // first element is an array of moment objects.
	    function pickBy(fn, moments) {
	        var res, i;
	        if (moments.length === 1 && isArray(moments[0])) {
	            moments = moments[0];
	        }
	        if (!moments.length) {
	            return local__createLocal();
	        }
	        res = moments[0];
	        for (i = 1; i < moments.length; ++i) {
	            if (!moments[i].isValid() || moments[i][fn](res)) {
	                res = moments[i];
	            }
	        }
	        return res;
	    }
	
	    // TODO: Use [].sort instead?
	    function min () {
	        var args = [].slice.call(arguments, 0);
	
	        return pickBy('isBefore', args);
	    }
	
	    function max () {
	        var args = [].slice.call(arguments, 0);
	
	        return pickBy('isAfter', args);
	    }
	
	    var now = function () {
	        return Date.now ? Date.now() : +(new Date());
	    };
	
	    function Duration (duration) {
	        var normalizedInput = normalizeObjectUnits(duration),
	            years = normalizedInput.year || 0,
	            quarters = normalizedInput.quarter || 0,
	            months = normalizedInput.month || 0,
	            weeks = normalizedInput.week || 0,
	            days = normalizedInput.day || 0,
	            hours = normalizedInput.hour || 0,
	            minutes = normalizedInput.minute || 0,
	            seconds = normalizedInput.second || 0,
	            milliseconds = normalizedInput.millisecond || 0;
	
	        // representation for dateAddRemove
	        this._milliseconds = +milliseconds +
	            seconds * 1e3 + // 1000
	            minutes * 6e4 + // 1000 * 60
	            hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978
	        // Because of dateAddRemove treats 24 hours as different from a
	        // day when working around DST, we need to store them separately
	        this._days = +days +
	            weeks * 7;
	        // It is impossible translate months into days without knowing
	        // which months you are are talking about, so we have to store
	        // it separately.
	        this._months = +months +
	            quarters * 3 +
	            years * 12;
	
	        this._data = {};
	
	        this._locale = locale_locales__getLocale();
	
	        this._bubble();
	    }
	
	    function isDuration (obj) {
	        return obj instanceof Duration;
	    }
	
	    // FORMATTING
	
	    function offset (token, separator) {
	        addFormatToken(token, 0, 0, function () {
	            var offset = this.utcOffset();
	            var sign = '+';
	            if (offset < 0) {
	                offset = -offset;
	                sign = '-';
	            }
	            return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~(offset) % 60, 2);
	        });
	    }
	
	    offset('Z', ':');
	    offset('ZZ', '');
	
	    // PARSING
	
	    addRegexToken('Z',  matchShortOffset);
	    addRegexToken('ZZ', matchShortOffset);
	    addParseToken(['Z', 'ZZ'], function (input, array, config) {
	        config._useUTC = true;
	        config._tzm = offsetFromString(matchShortOffset, input);
	    });
	
	    // HELPERS
	
	    // timezone chunker
	    // '+10:00' > ['10',  '00']
	    // '-1530'  > ['-15', '30']
	    var chunkOffset = /([\+\-]|\d\d)/gi;
	
	    function offsetFromString(matcher, string) {
	        var matches = ((string || '').match(matcher) || []);
	        var chunk   = matches[matches.length - 1] || [];
	        var parts   = (chunk + '').match(chunkOffset) || ['-', 0, 0];
	        var minutes = +(parts[1] * 60) + toInt(parts[2]);
	
	        return parts[0] === '+' ? minutes : -minutes;
	    }
	
	    // Return a moment from input, that is local/utc/zone equivalent to model.
	    function cloneWithOffset(input, model) {
	        var res, diff;
	        if (model._isUTC) {
	            res = model.clone();
	            diff = (isMoment(input) || isDate(input) ? input.valueOf() : local__createLocal(input).valueOf()) - res.valueOf();
	            // Use low-level api, because this fn is low-level api.
	            res._d.setTime(res._d.valueOf() + diff);
	            utils_hooks__hooks.updateOffset(res, false);
	            return res;
	        } else {
	            return local__createLocal(input).local();
	        }
	    }
	
	    function getDateOffset (m) {
	        // On Firefox.24 Date#getTimezoneOffset returns a floating point.
	        // https://github.com/moment/moment/pull/1871
	        return -Math.round(m._d.getTimezoneOffset() / 15) * 15;
	    }
	
	    // HOOKS
	
	    // This function will be called whenever a moment is mutated.
	    // It is intended to keep the offset in sync with the timezone.
	    utils_hooks__hooks.updateOffset = function () {};
	
	    // MOMENTS
	
	    // keepLocalTime = true means only change the timezone, without
	    // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
	    // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
	    // +0200, so we adjust the time as needed, to be valid.
	    //
	    // Keeping the time actually adds/subtracts (one hour)
	    // from the actual represented time. That is why we call updateOffset
	    // a second time. In case it wants us to change the offset again
	    // _changeInProgress == true case, then we have to adjust, because
	    // there is no such time in the given timezone.
	    function getSetOffset (input, keepLocalTime) {
	        var offset = this._offset || 0,
	            localAdjust;
	        if (!this.isValid()) {
	            return input != null ? this : NaN;
	        }
	        if (input != null) {
	            if (typeof input === 'string') {
	                input = offsetFromString(matchShortOffset, input);
	            } else if (Math.abs(input) < 16) {
	                input = input * 60;
	            }
	            if (!this._isUTC && keepLocalTime) {
	                localAdjust = getDateOffset(this);
	            }
	            this._offset = input;
	            this._isUTC = true;
	            if (localAdjust != null) {
	                this.add(localAdjust, 'm');
	            }
	            if (offset !== input) {
	                if (!keepLocalTime || this._changeInProgress) {
	                    add_subtract__addSubtract(this, create__createDuration(input - offset, 'm'), 1, false);
	                } else if (!this._changeInProgress) {
	                    this._changeInProgress = true;
	                    utils_hooks__hooks.updateOffset(this, true);
	                    this._changeInProgress = null;
	                }
	            }
	            return this;
	        } else {
	            return this._isUTC ? offset : getDateOffset(this);
	        }
	    }
	
	    function getSetZone (input, keepLocalTime) {
	        if (input != null) {
	            if (typeof input !== 'string') {
	                input = -input;
	            }
	
	            this.utcOffset(input, keepLocalTime);
	
	            return this;
	        } else {
	            return -this.utcOffset();
	        }
	    }
	
	    function setOffsetToUTC (keepLocalTime) {
	        return this.utcOffset(0, keepLocalTime);
	    }
	
	    function setOffsetToLocal (keepLocalTime) {
	        if (this._isUTC) {
	            this.utcOffset(0, keepLocalTime);
	            this._isUTC = false;
	
	            if (keepLocalTime) {
	                this.subtract(getDateOffset(this), 'm');
	            }
	        }
	        return this;
	    }
	
	    function setOffsetToParsedOffset () {
	        if (this._tzm) {
	            this.utcOffset(this._tzm);
	        } else if (typeof this._i === 'string') {
	            this.utcOffset(offsetFromString(matchOffset, this._i));
	        }
	        return this;
	    }
	
	    function hasAlignedHourOffset (input) {
	        if (!this.isValid()) {
	            return false;
	        }
	        input = input ? local__createLocal(input).utcOffset() : 0;
	
	        return (this.utcOffset() - input) % 60 === 0;
	    }
	
	    function isDaylightSavingTime () {
	        return (
	            this.utcOffset() > this.clone().month(0).utcOffset() ||
	            this.utcOffset() > this.clone().month(5).utcOffset()
	        );
	    }
	
	    function isDaylightSavingTimeShifted () {
	        if (!isUndefined(this._isDSTShifted)) {
	            return this._isDSTShifted;
	        }
	
	        var c = {};
	
	        copyConfig(c, this);
	        c = prepareConfig(c);
	
	        if (c._a) {
	            var other = c._isUTC ? create_utc__createUTC(c._a) : local__createLocal(c._a);
	            this._isDSTShifted = this.isValid() &&
	                compareArrays(c._a, other.toArray()) > 0;
	        } else {
	            this._isDSTShifted = false;
	        }
	
	        return this._isDSTShifted;
	    }
	
	    function isLocal () {
	        return this.isValid() ? !this._isUTC : false;
	    }
	
	    function isUtcOffset () {
	        return this.isValid() ? this._isUTC : false;
	    }
	
	    function isUtc () {
	        return this.isValid() ? this._isUTC && this._offset === 0 : false;
	    }
	
	    // ASP.NET json date format regex
	    var aspNetRegex = /^(\-)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)\.?(\d{3})?\d*)?$/;
	
	    // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
	    // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
	    // and further modified to allow for strings containing both week and day
	    var isoRegex = /^(-)?P(?:(-?[0-9,.]*)Y)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)W)?(?:(-?[0-9,.]*)D)?(?:T(?:(-?[0-9,.]*)H)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)S)?)?$/;
	
	    function create__createDuration (input, key) {
	        var duration = input,
	            // matching against regexp is expensive, do it on demand
	            match = null,
	            sign,
	            ret,
	            diffRes;
	
	        if (isDuration(input)) {
	            duration = {
	                ms : input._milliseconds,
	                d  : input._days,
	                M  : input._months
	            };
	        } else if (typeof input === 'number') {
	            duration = {};
	            if (key) {
	                duration[key] = input;
	            } else {
	                duration.milliseconds = input;
	            }
	        } else if (!!(match = aspNetRegex.exec(input))) {
	            sign = (match[1] === '-') ? -1 : 1;
	            duration = {
	                y  : 0,
	                d  : toInt(match[DATE])        * sign,
	                h  : toInt(match[HOUR])        * sign,
	                m  : toInt(match[MINUTE])      * sign,
	                s  : toInt(match[SECOND])      * sign,
	                ms : toInt(match[MILLISECOND]) * sign
	            };
	        } else if (!!(match = isoRegex.exec(input))) {
	            sign = (match[1] === '-') ? -1 : 1;
	            duration = {
	                y : parseIso(match[2], sign),
	                M : parseIso(match[3], sign),
	                w : parseIso(match[4], sign),
	                d : parseIso(match[5], sign),
	                h : parseIso(match[6], sign),
	                m : parseIso(match[7], sign),
	                s : parseIso(match[8], sign)
	            };
	        } else if (duration == null) {// checks for null or undefined
	            duration = {};
	        } else if (typeof duration === 'object' && ('from' in duration || 'to' in duration)) {
	            diffRes = momentsDifference(local__createLocal(duration.from), local__createLocal(duration.to));
	
	            duration = {};
	            duration.ms = diffRes.milliseconds;
	            duration.M = diffRes.months;
	        }
	
	        ret = new Duration(duration);
	
	        if (isDuration(input) && hasOwnProp(input, '_locale')) {
	            ret._locale = input._locale;
	        }
	
	        return ret;
	    }
	
	    create__createDuration.fn = Duration.prototype;
	
	    function parseIso (inp, sign) {
	        // We'd normally use ~~inp for this, but unfortunately it also
	        // converts floats to ints.
	        // inp may be undefined, so careful calling replace on it.
	        var res = inp && parseFloat(inp.replace(',', '.'));
	        // apply sign while we're at it
	        return (isNaN(res) ? 0 : res) * sign;
	    }
	
	    function positiveMomentsDifference(base, other) {
	        var res = {milliseconds: 0, months: 0};
	
	        res.months = other.month() - base.month() +
	            (other.year() - base.year()) * 12;
	        if (base.clone().add(res.months, 'M').isAfter(other)) {
	            --res.months;
	        }
	
	        res.milliseconds = +other - +(base.clone().add(res.months, 'M'));
	
	        return res;
	    }
	
	    function momentsDifference(base, other) {
	        var res;
	        if (!(base.isValid() && other.isValid())) {
	            return {milliseconds: 0, months: 0};
	        }
	
	        other = cloneWithOffset(other, base);
	        if (base.isBefore(other)) {
	            res = positiveMomentsDifference(base, other);
	        } else {
	            res = positiveMomentsDifference(other, base);
	            res.milliseconds = -res.milliseconds;
	            res.months = -res.months;
	        }
	
	        return res;
	    }
	
	    function absRound (number) {
	        if (number < 0) {
	            return Math.round(-1 * number) * -1;
	        } else {
	            return Math.round(number);
	        }
	    }
	
	    // TODO: remove 'name' arg after deprecation is removed
	    function createAdder(direction, name) {
	        return function (val, period) {
	            var dur, tmp;
	            //invert the arguments, but complain about it
	            if (period !== null && !isNaN(+period)) {
	                deprecateSimple(name, 'moment().' + name  + '(period, number) is deprecated. Please use moment().' + name + '(number, period).');
	                tmp = val; val = period; period = tmp;
	            }
	
	            val = typeof val === 'string' ? +val : val;
	            dur = create__createDuration(val, period);
	            add_subtract__addSubtract(this, dur, direction);
	            return this;
	        };
	    }
	
	    function add_subtract__addSubtract (mom, duration, isAdding, updateOffset) {
	        var milliseconds = duration._milliseconds,
	            days = absRound(duration._days),
	            months = absRound(duration._months);
	
	        if (!mom.isValid()) {
	            // No op
	            return;
	        }
	
	        updateOffset = updateOffset == null ? true : updateOffset;
	
	        if (milliseconds) {
	            mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);
	        }
	        if (days) {
	            get_set__set(mom, 'Date', get_set__get(mom, 'Date') + days * isAdding);
	        }
	        if (months) {
	            setMonth(mom, get_set__get(mom, 'Month') + months * isAdding);
	        }
	        if (updateOffset) {
	            utils_hooks__hooks.updateOffset(mom, days || months);
	        }
	    }
	
	    var add_subtract__add      = createAdder(1, 'add');
	    var add_subtract__subtract = createAdder(-1, 'subtract');
	
	    function moment_calendar__calendar (time, formats) {
	        // We want to compare the start of today, vs this.
	        // Getting start-of-today depends on whether we're local/utc/offset or not.
	        var now = time || local__createLocal(),
	            sod = cloneWithOffset(now, this).startOf('day'),
	            diff = this.diff(sod, 'days', true),
	            format = diff < -6 ? 'sameElse' :
	                diff < -1 ? 'lastWeek' :
	                diff < 0 ? 'lastDay' :
	                diff < 1 ? 'sameDay' :
	                diff < 2 ? 'nextDay' :
	                diff < 7 ? 'nextWeek' : 'sameElse';
	
	        var output = formats && (isFunction(formats[format]) ? formats[format]() : formats[format]);
	
	        return this.format(output || this.localeData().calendar(format, this, local__createLocal(now)));
	    }
	
	    function clone () {
	        return new Moment(this);
	    }
	
	    function isAfter (input, units) {
	        var localInput = isMoment(input) ? input : local__createLocal(input);
	        if (!(this.isValid() && localInput.isValid())) {
	            return false;
	        }
	        units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');
	        if (units === 'millisecond') {
	            return this.valueOf() > localInput.valueOf();
	        } else {
	            return localInput.valueOf() < this.clone().startOf(units).valueOf();
	        }
	    }
	
	    function isBefore (input, units) {
	        var localInput = isMoment(input) ? input : local__createLocal(input);
	        if (!(this.isValid() && localInput.isValid())) {
	            return false;
	        }
	        units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');
	        if (units === 'millisecond') {
	            return this.valueOf() < localInput.valueOf();
	        } else {
	            return this.clone().endOf(units).valueOf() < localInput.valueOf();
	        }
	    }
	
	    function isBetween (from, to, units, inclusivity) {
	        inclusivity = inclusivity || '()';
	        return (inclusivity[0] === '(' ? this.isAfter(from, units) : !this.isBefore(from, units)) &&
	            (inclusivity[1] === ')' ? this.isBefore(to, units) : !this.isAfter(to, units));
	    }
	
	    function isSame (input, units) {
	        var localInput = isMoment(input) ? input : local__createLocal(input),
	            inputMs;
	        if (!(this.isValid() && localInput.isValid())) {
	            return false;
	        }
	        units = normalizeUnits(units || 'millisecond');
	        if (units === 'millisecond') {
	            return this.valueOf() === localInput.valueOf();
	        } else {
	            inputMs = localInput.valueOf();
	            return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();
	        }
	    }
	
	    function isSameOrAfter (input, units) {
	        return this.isSame(input, units) || this.isAfter(input,units);
	    }
	
	    function isSameOrBefore (input, units) {
	        return this.isSame(input, units) || this.isBefore(input,units);
	    }
	
	    function diff (input, units, asFloat) {
	        var that,
	            zoneDelta,
	            delta, output;
	
	        if (!this.isValid()) {
	            return NaN;
	        }
	
	        that = cloneWithOffset(input, this);
	
	        if (!that.isValid()) {
	            return NaN;
	        }
	
	        zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;
	
	        units = normalizeUnits(units);
	
	        if (units === 'year' || units === 'month' || units === 'quarter') {
	            output = monthDiff(this, that);
	            if (units === 'quarter') {
	                output = output / 3;
	            } else if (units === 'year') {
	                output = output / 12;
	            }
	        } else {
	            delta = this - that;
	            output = units === 'second' ? delta / 1e3 : // 1000
	                units === 'minute' ? delta / 6e4 : // 1000 * 60
	                units === 'hour' ? delta / 36e5 : // 1000 * 60 * 60
	                units === 'day' ? (delta - zoneDelta) / 864e5 : // 1000 * 60 * 60 * 24, negate dst
	                units === 'week' ? (delta - zoneDelta) / 6048e5 : // 1000 * 60 * 60 * 24 * 7, negate dst
	                delta;
	        }
	        return asFloat ? output : absFloor(output);
	    }
	
	    function monthDiff (a, b) {
	        // difference in months
	        var wholeMonthDiff = ((b.year() - a.year()) * 12) + (b.month() - a.month()),
	            // b is in (anchor - 1 month, anchor + 1 month)
	            anchor = a.clone().add(wholeMonthDiff, 'months'),
	            anchor2, adjust;
	
	        if (b - anchor < 0) {
	            anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
	            // linear across the month
	            adjust = (b - anchor) / (anchor - anchor2);
	        } else {
	            anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
	            // linear across the month
	            adjust = (b - anchor) / (anchor2 - anchor);
	        }
	
	        //check for negative zero, return zero if negative zero
	        return -(wholeMonthDiff + adjust) || 0;
	    }
	
	    utils_hooks__hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';
	    utils_hooks__hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';
	
	    function toString () {
	        return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
	    }
	
	    function moment_format__toISOString () {
	        var m = this.clone().utc();
	        if (0 < m.year() && m.year() <= 9999) {
	            if (isFunction(Date.prototype.toISOString)) {
	                // native implementation is ~50x faster, use it when we can
	                return this.toDate().toISOString();
	            } else {
	                return formatMoment(m, 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
	            }
	        } else {
	            return formatMoment(m, 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
	        }
	    }
	
	    function format (inputString) {
	        if (!inputString) {
	            inputString = this.isUtc() ? utils_hooks__hooks.defaultFormatUtc : utils_hooks__hooks.defaultFormat;
	        }
	        var output = formatMoment(this, inputString);
	        return this.localeData().postformat(output);
	    }
	
	    function from (time, withoutSuffix) {
	        if (this.isValid() &&
	                ((isMoment(time) && time.isValid()) ||
	                 local__createLocal(time).isValid())) {
	            return create__createDuration({to: this, from: time}).locale(this.locale()).humanize(!withoutSuffix);
	        } else {
	            return this.localeData().invalidDate();
	        }
	    }
	
	    function fromNow (withoutSuffix) {
	        return this.from(local__createLocal(), withoutSuffix);
	    }
	
	    function to (time, withoutSuffix) {
	        if (this.isValid() &&
	                ((isMoment(time) && time.isValid()) ||
	                 local__createLocal(time).isValid())) {
	            return create__createDuration({from: this, to: time}).locale(this.locale()).humanize(!withoutSuffix);
	        } else {
	            return this.localeData().invalidDate();
	        }
	    }
	
	    function toNow (withoutSuffix) {
	        return this.to(local__createLocal(), withoutSuffix);
	    }
	
	    // If passed a locale key, it will set the locale for this
	    // instance.  Otherwise, it will return the locale configuration
	    // variables for this instance.
	    function locale (key) {
	        var newLocaleData;
	
	        if (key === undefined) {
	            return this._locale._abbr;
	        } else {
	            newLocaleData = locale_locales__getLocale(key);
	            if (newLocaleData != null) {
	                this._locale = newLocaleData;
	            }
	            return this;
	        }
	    }
	
	    var lang = deprecate(
	        'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',
	        function (key) {
	            if (key === undefined) {
	                return this.localeData();
	            } else {
	                return this.locale(key);
	            }
	        }
	    );
	
	    function localeData () {
	        return this._locale;
	    }
	
	    function startOf (units) {
	        units = normalizeUnits(units);
	        // the following switch intentionally omits break keywords
	        // to utilize falling through the cases.
	        switch (units) {
	        case 'year':
	            this.month(0);
	            /* falls through */
	        case 'quarter':
	        case 'month':
	            this.date(1);
	            /* falls through */
	        case 'week':
	        case 'isoWeek':
	        case 'day':
	        case 'date':
	            this.hours(0);
	            /* falls through */
	        case 'hour':
	            this.minutes(0);
	            /* falls through */
	        case 'minute':
	            this.seconds(0);
	            /* falls through */
	        case 'second':
	            this.milliseconds(0);
	        }
	
	        // weeks are a special case
	        if (units === 'week') {
	            this.weekday(0);
	        }
	        if (units === 'isoWeek') {
	            this.isoWeekday(1);
	        }
	
	        // quarters are also special
	        if (units === 'quarter') {
	            this.month(Math.floor(this.month() / 3) * 3);
	        }
	
	        return this;
	    }
	
	    function endOf (units) {
	        units = normalizeUnits(units);
	        if (units === undefined || units === 'millisecond') {
	            return this;
	        }
	
	        // 'date' is an alias for 'day', so it should be considered as such.
	        if (units === 'date') {
	            units = 'day';
	        }
	
	        return this.startOf(units).add(1, (units === 'isoWeek' ? 'week' : units)).subtract(1, 'ms');
	    }
	
	    function to_type__valueOf () {
	        return this._d.valueOf() - ((this._offset || 0) * 60000);
	    }
	
	    function unix () {
	        return Math.floor(this.valueOf() / 1000);
	    }
	
	    function toDate () {
	        return this._offset ? new Date(this.valueOf()) : this._d;
	    }
	
	    function toArray () {
	        var m = this;
	        return [m.year(), m.month(), m.date(), m.hour(), m.minute(), m.second(), m.millisecond()];
	    }
	
	    function toObject () {
	        var m = this;
	        return {
	            years: m.year(),
	            months: m.month(),
	            date: m.date(),
	            hours: m.hours(),
	            minutes: m.minutes(),
	            seconds: m.seconds(),
	            milliseconds: m.milliseconds()
	        };
	    }
	
	    function toJSON () {
	        // new Date(NaN).toJSON() === null
	        return this.isValid() ? this.toISOString() : null;
	    }
	
	    function moment_valid__isValid () {
	        return valid__isValid(this);
	    }
	
	    function parsingFlags () {
	        return extend({}, getParsingFlags(this));
	    }
	
	    function invalidAt () {
	        return getParsingFlags(this).overflow;
	    }
	
	    function creationData() {
	        return {
	            input: this._i,
	            format: this._f,
	            locale: this._locale,
	            isUTC: this._isUTC,
	            strict: this._strict
	        };
	    }
	
	    // FORMATTING
	
	    addFormatToken(0, ['gg', 2], 0, function () {
	        return this.weekYear() % 100;
	    });
	
	    addFormatToken(0, ['GG', 2], 0, function () {
	        return this.isoWeekYear() % 100;
	    });
	
	    function addWeekYearFormatToken (token, getter) {
	        addFormatToken(0, [token, token.length], 0, getter);
	    }
	
	    addWeekYearFormatToken('gggg',     'weekYear');
	    addWeekYearFormatToken('ggggg',    'weekYear');
	    addWeekYearFormatToken('GGGG',  'isoWeekYear');
	    addWeekYearFormatToken('GGGGG', 'isoWeekYear');
	
	    // ALIASES
	
	    addUnitAlias('weekYear', 'gg');
	    addUnitAlias('isoWeekYear', 'GG');
	
	    // PARSING
	
	    addRegexToken('G',      matchSigned);
	    addRegexToken('g',      matchSigned);
	    addRegexToken('GG',     match1to2, match2);
	    addRegexToken('gg',     match1to2, match2);
	    addRegexToken('GGGG',   match1to4, match4);
	    addRegexToken('gggg',   match1to4, match4);
	    addRegexToken('GGGGG',  match1to6, match6);
	    addRegexToken('ggggg',  match1to6, match6);
	
	    addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (input, week, config, token) {
	        week[token.substr(0, 2)] = toInt(input);
	    });
	
	    addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {
	        week[token] = utils_hooks__hooks.parseTwoDigitYear(input);
	    });
	
	    // MOMENTS
	
	    function getSetWeekYear (input) {
	        return getSetWeekYearHelper.call(this,
	                input,
	                this.week(),
	                this.weekday(),
	                this.localeData()._week.dow,
	                this.localeData()._week.doy);
	    }
	
	    function getSetISOWeekYear (input) {
	        return getSetWeekYearHelper.call(this,
	                input, this.isoWeek(), this.isoWeekday(), 1, 4);
	    }
	
	    function getISOWeeksInYear () {
	        return weeksInYear(this.year(), 1, 4);
	    }
	
	    function getWeeksInYear () {
	        var weekInfo = this.localeData()._week;
	        return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
	    }
	
	    function getSetWeekYearHelper(input, week, weekday, dow, doy) {
	        var weeksTarget;
	        if (input == null) {
	            return weekOfYear(this, dow, doy).year;
	        } else {
	            weeksTarget = weeksInYear(input, dow, doy);
	            if (week > weeksTarget) {
	                week = weeksTarget;
	            }
	            return setWeekAll.call(this, input, week, weekday, dow, doy);
	        }
	    }
	
	    function setWeekAll(weekYear, week, weekday, dow, doy) {
	        var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),
	            date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);
	
	        this.year(date.getUTCFullYear());
	        this.month(date.getUTCMonth());
	        this.date(date.getUTCDate());
	        return this;
	    }
	
	    // FORMATTING
	
	    addFormatToken('Q', 0, 'Qo', 'quarter');
	
	    // ALIASES
	
	    addUnitAlias('quarter', 'Q');
	
	    // PARSING
	
	    addRegexToken('Q', match1);
	    addParseToken('Q', function (input, array) {
	        array[MONTH] = (toInt(input) - 1) * 3;
	    });
	
	    // MOMENTS
	
	    function getSetQuarter (input) {
	        return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
	    }
	
	    // FORMATTING
	
	    addFormatToken('w', ['ww', 2], 'wo', 'week');
	    addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');
	
	    // ALIASES
	
	    addUnitAlias('week', 'w');
	    addUnitAlias('isoWeek', 'W');
	
	    // PARSING
	
	    addRegexToken('w',  match1to2);
	    addRegexToken('ww', match1to2, match2);
	    addRegexToken('W',  match1to2);
	    addRegexToken('WW', match1to2, match2);
	
	    addWeekParseToken(['w', 'ww', 'W', 'WW'], function (input, week, config, token) {
	        week[token.substr(0, 1)] = toInt(input);
	    });
	
	    // HELPERS
	
	    // LOCALES
	
	    function localeWeek (mom) {
	        return weekOfYear(mom, this._week.dow, this._week.doy).week;
	    }
	
	    var defaultLocaleWeek = {
	        dow : 0, // Sunday is the first day of the week.
	        doy : 6  // The week that contains Jan 1st is the first week of the year.
	    };
	
	    function localeFirstDayOfWeek () {
	        return this._week.dow;
	    }
	
	    function localeFirstDayOfYear () {
	        return this._week.doy;
	    }
	
	    // MOMENTS
	
	    function getSetWeek (input) {
	        var week = this.localeData().week(this);
	        return input == null ? week : this.add((input - week) * 7, 'd');
	    }
	
	    function getSetISOWeek (input) {
	        var week = weekOfYear(this, 1, 4).week;
	        return input == null ? week : this.add((input - week) * 7, 'd');
	    }
	
	    // FORMATTING
	
	    addFormatToken('D', ['DD', 2], 'Do', 'date');
	
	    // ALIASES
	
	    addUnitAlias('date', 'D');
	
	    // PARSING
	
	    addRegexToken('D',  match1to2);
	    addRegexToken('DD', match1to2, match2);
	    addRegexToken('Do', function (isStrict, locale) {
	        return isStrict ? locale._ordinalParse : locale._ordinalParseLenient;
	    });
	
	    addParseToken(['D', 'DD'], DATE);
	    addParseToken('Do', function (input, array) {
	        array[DATE] = toInt(input.match(match1to2)[0], 10);
	    });
	
	    // MOMENTS
	
	    var getSetDayOfMonth = makeGetSet('Date', true);
	
	    // FORMATTING
	
	    addFormatToken('d', 0, 'do', 'day');
	
	    addFormatToken('dd', 0, 0, function (format) {
	        return this.localeData().weekdaysMin(this, format);
	    });
	
	    addFormatToken('ddd', 0, 0, function (format) {
	        return this.localeData().weekdaysShort(this, format);
	    });
	
	    addFormatToken('dddd', 0, 0, function (format) {
	        return this.localeData().weekdays(this, format);
	    });
	
	    addFormatToken('e', 0, 0, 'weekday');
	    addFormatToken('E', 0, 0, 'isoWeekday');
	
	    // ALIASES
	
	    addUnitAlias('day', 'd');
	    addUnitAlias('weekday', 'e');
	    addUnitAlias('isoWeekday', 'E');
	
	    // PARSING
	
	    addRegexToken('d',    match1to2);
	    addRegexToken('e',    match1to2);
	    addRegexToken('E',    match1to2);
	    addRegexToken('dd',   function (isStrict, locale) {
	        return locale.weekdaysMinRegex(isStrict);
	    });
	    addRegexToken('ddd',   function (isStrict, locale) {
	        return locale.weekdaysShortRegex(isStrict);
	    });
	    addRegexToken('dddd',   function (isStrict, locale) {
	        return locale.weekdaysRegex(isStrict);
	    });
	
	    addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {
	        var weekday = config._locale.weekdaysParse(input, token, config._strict);
	        // if we didn't get a weekday name, mark the date as invalid
	        if (weekday != null) {
	            week.d = weekday;
	        } else {
	            getParsingFlags(config).invalidWeekday = input;
	        }
	    });
	
	    addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {
	        week[token] = toInt(input);
	    });
	
	    // HELPERS
	
	    function parseWeekday(input, locale) {
	        if (typeof input !== 'string') {
	            return input;
	        }
	
	        if (!isNaN(input)) {
	            return parseInt(input, 10);
	        }
	
	        input = locale.weekdaysParse(input);
	        if (typeof input === 'number') {
	            return input;
	        }
	
	        return null;
	    }
	
	    // LOCALES
	
	    var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_');
	    function localeWeekdays (m, format) {
	        return isArray(this._weekdays) ? this._weekdays[m.day()] :
	            this._weekdays[this._weekdays.isFormat.test(format) ? 'format' : 'standalone'][m.day()];
	    }
	
	    var defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_');
	    function localeWeekdaysShort (m) {
	        return this._weekdaysShort[m.day()];
	    }
	
	    var defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_');
	    function localeWeekdaysMin (m) {
	        return this._weekdaysMin[m.day()];
	    }
	
	    function day_of_week__handleStrictParse(weekdayName, format, strict) {
	        var i, ii, mom, llc = weekdayName.toLocaleLowerCase();
	        if (!this._weekdaysParse) {
	            this._weekdaysParse = [];
	            this._shortWeekdaysParse = [];
	            this._minWeekdaysParse = [];
	
	            for (i = 0; i < 7; ++i) {
	                mom = create_utc__createUTC([2000, 1]).day(i);
	                this._minWeekdaysParse[i] = this.weekdaysMin(mom, '').toLocaleLowerCase();
	                this._shortWeekdaysParse[i] = this.weekdaysShort(mom, '').toLocaleLowerCase();
	                this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();
	            }
	        }
	
	        if (strict) {
	            if (format === 'dddd') {
	                ii = indexOf.call(this._weekdaysParse, llc);
	                return ii !== -1 ? ii : null;
	            } else if (format === 'ddd') {
	                ii = indexOf.call(this._shortWeekdaysParse, llc);
	                return ii !== -1 ? ii : null;
	            } else {
	                ii = indexOf.call(this._minWeekdaysParse, llc);
	                return ii !== -1 ? ii : null;
	            }
	        } else {
	            if (format === 'dddd') {
	                ii = indexOf.call(this._weekdaysParse, llc);
	                if (ii !== -1) {
	                    return ii;
	                }
	                ii = indexOf.call(this._shortWeekdaysParse, llc);
	                if (ii !== -1) {
	                    return ii;
	                }
	                ii = indexOf.call(this._minWeekdaysParse, llc);
	                return ii !== -1 ? ii : null;
	            } else if (format === 'ddd') {
	                ii = indexOf.call(this._shortWeekdaysParse, llc);
	                if (ii !== -1) {
	                    return ii;
	                }
	                ii = indexOf.call(this._weekdaysParse, llc);
	                if (ii !== -1) {
	                    return ii;
	                }
	                ii = indexOf.call(this._minWeekdaysParse, llc);
	                return ii !== -1 ? ii : null;
	            } else {
	                ii = indexOf.call(this._minWeekdaysParse, llc);
	                if (ii !== -1) {
	                    return ii;
	                }
	                ii = indexOf.call(this._weekdaysParse, llc);
	                if (ii !== -1) {
	                    return ii;
	                }
	                ii = indexOf.call(this._shortWeekdaysParse, llc);
	                return ii !== -1 ? ii : null;
	            }
	        }
	    }
	
	    function localeWeekdaysParse (weekdayName, format, strict) {
	        var i, mom, regex;
	
	        if (this._weekdaysParseExact) {
	            return day_of_week__handleStrictParse.call(this, weekdayName, format, strict);
	        }
	
	        if (!this._weekdaysParse) {
	            this._weekdaysParse = [];
	            this._minWeekdaysParse = [];
	            this._shortWeekdaysParse = [];
	            this._fullWeekdaysParse = [];
	        }
	
	        for (i = 0; i < 7; i++) {
	            // make the regex if we don't have it already
	
	            mom = create_utc__createUTC([2000, 1]).day(i);
	            if (strict && !this._fullWeekdaysParse[i]) {
	                this._fullWeekdaysParse[i] = new RegExp('^' + this.weekdays(mom, '').replace('.', '\.?') + '$', 'i');
	                this._shortWeekdaysParse[i] = new RegExp('^' + this.weekdaysShort(mom, '').replace('.', '\.?') + '$', 'i');
	                this._minWeekdaysParse[i] = new RegExp('^' + this.weekdaysMin(mom, '').replace('.', '\.?') + '$', 'i');
	            }
	            if (!this._weekdaysParse[i]) {
	                regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');
	                this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
	            }
	            // test the regex
	            if (strict && format === 'dddd' && this._fullWeekdaysParse[i].test(weekdayName)) {
	                return i;
	            } else if (strict && format === 'ddd' && this._shortWeekdaysParse[i].test(weekdayName)) {
	                return i;
	            } else if (strict && format === 'dd' && this._minWeekdaysParse[i].test(weekdayName)) {
	                return i;
	            } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
	                return i;
	            }
	        }
	    }
	
	    // MOMENTS
	
	    function getSetDayOfWeek (input) {
	        if (!this.isValid()) {
	            return input != null ? this : NaN;
	        }
	        var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
	        if (input != null) {
	            input = parseWeekday(input, this.localeData());
	            return this.add(input - day, 'd');
	        } else {
	            return day;
	        }
	    }
	
	    function getSetLocaleDayOfWeek (input) {
	        if (!this.isValid()) {
	            return input != null ? this : NaN;
	        }
	        var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
	        return input == null ? weekday : this.add(input - weekday, 'd');
	    }
	
	    function getSetISODayOfWeek (input) {
	        if (!this.isValid()) {
	            return input != null ? this : NaN;
	        }
	        // behaves the same as moment#day except
	        // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
	        // as a setter, sunday should belong to the previous week.
	        return input == null ? this.day() || 7 : this.day(this.day() % 7 ? input : input - 7);
	    }
	
	    var defaultWeekdaysRegex = matchWord;
	    function weekdaysRegex (isStrict) {
	        if (this._weekdaysParseExact) {
	            if (!hasOwnProp(this, '_weekdaysRegex')) {
	                computeWeekdaysParse.call(this);
	            }
	            if (isStrict) {
	                return this._weekdaysStrictRegex;
	            } else {
	                return this._weekdaysRegex;
	            }
	        } else {
	            return this._weekdaysStrictRegex && isStrict ?
	                this._weekdaysStrictRegex : this._weekdaysRegex;
	        }
	    }
	
	    var defaultWeekdaysShortRegex = matchWord;
	    function weekdaysShortRegex (isStrict) {
	        if (this._weekdaysParseExact) {
	            if (!hasOwnProp(this, '_weekdaysRegex')) {
	                computeWeekdaysParse.call(this);
	            }
	            if (isStrict) {
	                return this._weekdaysShortStrictRegex;
	            } else {
	                return this._weekdaysShortRegex;
	            }
	        } else {
	            return this._weekdaysShortStrictRegex && isStrict ?
	                this._weekdaysShortStrictRegex : this._weekdaysShortRegex;
	        }
	    }
	
	    var defaultWeekdaysMinRegex = matchWord;
	    function weekdaysMinRegex (isStrict) {
	        if (this._weekdaysParseExact) {
	            if (!hasOwnProp(this, '_weekdaysRegex')) {
	                computeWeekdaysParse.call(this);
	            }
	            if (isStrict) {
	                return this._weekdaysMinStrictRegex;
	            } else {
	                return this._weekdaysMinRegex;
	            }
	        } else {
	            return this._weekdaysMinStrictRegex && isStrict ?
	                this._weekdaysMinStrictRegex : this._weekdaysMinRegex;
	        }
	    }
	
	
	    function computeWeekdaysParse () {
	        function cmpLenRev(a, b) {
	            return b.length - a.length;
	        }
	
	        var minPieces = [], shortPieces = [], longPieces = [], mixedPieces = [],
	            i, mom, minp, shortp, longp;
	        for (i = 0; i < 7; i++) {
	            // make the regex if we don't have it already
	            mom = create_utc__createUTC([2000, 1]).day(i);
	            minp = this.weekdaysMin(mom, '');
	            shortp = this.weekdaysShort(mom, '');
	            longp = this.weekdays(mom, '');
	            minPieces.push(minp);
	            shortPieces.push(shortp);
	            longPieces.push(longp);
	            mixedPieces.push(minp);
	            mixedPieces.push(shortp);
	            mixedPieces.push(longp);
	        }
	        // Sorting makes sure if one weekday (or abbr) is a prefix of another it
	        // will match the longer piece.
	        minPieces.sort(cmpLenRev);
	        shortPieces.sort(cmpLenRev);
	        longPieces.sort(cmpLenRev);
	        mixedPieces.sort(cmpLenRev);
	        for (i = 0; i < 7; i++) {
	            shortPieces[i] = regexEscape(shortPieces[i]);
	            longPieces[i] = regexEscape(longPieces[i]);
	            mixedPieces[i] = regexEscape(mixedPieces[i]);
	        }
	
	        this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
	        this._weekdaysShortRegex = this._weekdaysRegex;
	        this._weekdaysMinRegex = this._weekdaysRegex;
	
	        this._weekdaysStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
	        this._weekdaysShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
	        this._weekdaysMinStrictRegex = new RegExp('^(' + minPieces.join('|') + ')', 'i');
	    }
	
	    // FORMATTING
	
	    addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');
	
	    // ALIASES
	
	    addUnitAlias('dayOfYear', 'DDD');
	
	    // PARSING
	
	    addRegexToken('DDD',  match1to3);
	    addRegexToken('DDDD', match3);
	    addParseToken(['DDD', 'DDDD'], function (input, array, config) {
	        config._dayOfYear = toInt(input);
	    });
	
	    // HELPERS
	
	    // MOMENTS
	
	    function getSetDayOfYear (input) {
	        var dayOfYear = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 864e5) + 1;
	        return input == null ? dayOfYear : this.add((input - dayOfYear), 'd');
	    }
	
	    // FORMATTING
	
	    function hFormat() {
	        return this.hours() % 12 || 12;
	    }
	
	    function kFormat() {
	        return this.hours() || 24;
	    }
	
	    addFormatToken('H', ['HH', 2], 0, 'hour');
	    addFormatToken('h', ['hh', 2], 0, hFormat);
	    addFormatToken('k', ['kk', 2], 0, kFormat);
	
	    addFormatToken('hmm', 0, 0, function () {
	        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);
	    });
	
	    addFormatToken('hmmss', 0, 0, function () {
	        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2) +
	            zeroFill(this.seconds(), 2);
	    });
	
	    addFormatToken('Hmm', 0, 0, function () {
	        return '' + this.hours() + zeroFill(this.minutes(), 2);
	    });
	
	    addFormatToken('Hmmss', 0, 0, function () {
	        return '' + this.hours() + zeroFill(this.minutes(), 2) +
	            zeroFill(this.seconds(), 2);
	    });
	
	    function meridiem (token, lowercase) {
	        addFormatToken(token, 0, 0, function () {
	            return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);
	        });
	    }
	
	    meridiem('a', true);
	    meridiem('A', false);
	
	    // ALIASES
	
	    addUnitAlias('hour', 'h');
	
	    // PARSING
	
	    function matchMeridiem (isStrict, locale) {
	        return locale._meridiemParse;
	    }
	
	    addRegexToken('a',  matchMeridiem);
	    addRegexToken('A',  matchMeridiem);
	    addRegexToken('H',  match1to2);
	    addRegexToken('h',  match1to2);
	    addRegexToken('HH', match1to2, match2);
	    addRegexToken('hh', match1to2, match2);
	
	    addRegexToken('hmm', match3to4);
	    addRegexToken('hmmss', match5to6);
	    addRegexToken('Hmm', match3to4);
	    addRegexToken('Hmmss', match5to6);
	
	    addParseToken(['H', 'HH'], HOUR);
	    addParseToken(['a', 'A'], function (input, array, config) {
	        config._isPm = config._locale.isPM(input);
	        config._meridiem = input;
	    });
	    addParseToken(['h', 'hh'], function (input, array, config) {
	        array[HOUR] = toInt(input);
	        getParsingFlags(config).bigHour = true;
	    });
	    addParseToken('hmm', function (input, array, config) {
	        var pos = input.length - 2;
	        array[HOUR] = toInt(input.substr(0, pos));
	        array[MINUTE] = toInt(input.substr(pos));
	        getParsingFlags(config).bigHour = true;
	    });
	    addParseToken('hmmss', function (input, array, config) {
	        var pos1 = input.length - 4;
	        var pos2 = input.length - 2;
	        array[HOUR] = toInt(input.substr(0, pos1));
	        array[MINUTE] = toInt(input.substr(pos1, 2));
	        array[SECOND] = toInt(input.substr(pos2));
	        getParsingFlags(config).bigHour = true;
	    });
	    addParseToken('Hmm', function (input, array, config) {
	        var pos = input.length - 2;
	        array[HOUR] = toInt(input.substr(0, pos));
	        array[MINUTE] = toInt(input.substr(pos));
	    });
	    addParseToken('Hmmss', function (input, array, config) {
	        var pos1 = input.length - 4;
	        var pos2 = input.length - 2;
	        array[HOUR] = toInt(input.substr(0, pos1));
	        array[MINUTE] = toInt(input.substr(pos1, 2));
	        array[SECOND] = toInt(input.substr(pos2));
	    });
	
	    // LOCALES
	
	    function localeIsPM (input) {
	        // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
	        // Using charAt should be more compatible.
	        return ((input + '').toLowerCase().charAt(0) === 'p');
	    }
	
	    var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i;
	    function localeMeridiem (hours, minutes, isLower) {
	        if (hours > 11) {
	            return isLower ? 'pm' : 'PM';
	        } else {
	            return isLower ? 'am' : 'AM';
	        }
	    }
	
	
	    // MOMENTS
	
	    // Setting the hour should keep the time, because the user explicitly
	    // specified which hour he wants. So trying to maintain the same hour (in
	    // a new timezone) makes sense. Adding/subtracting hours does not follow
	    // this rule.
	    var getSetHour = makeGetSet('Hours', true);
	
	    // FORMATTING
	
	    addFormatToken('m', ['mm', 2], 0, 'minute');
	
	    // ALIASES
	
	    addUnitAlias('minute', 'm');
	
	    // PARSING
	
	    addRegexToken('m',  match1to2);
	    addRegexToken('mm', match1to2, match2);
	    addParseToken(['m', 'mm'], MINUTE);
	
	    // MOMENTS
	
	    var getSetMinute = makeGetSet('Minutes', false);
	
	    // FORMATTING
	
	    addFormatToken('s', ['ss', 2], 0, 'second');
	
	    // ALIASES
	
	    addUnitAlias('second', 's');
	
	    // PARSING
	
	    addRegexToken('s',  match1to2);
	    addRegexToken('ss', match1to2, match2);
	    addParseToken(['s', 'ss'], SECOND);
	
	    // MOMENTS
	
	    var getSetSecond = makeGetSet('Seconds', false);
	
	    // FORMATTING
	
	    addFormatToken('S', 0, 0, function () {
	        return ~~(this.millisecond() / 100);
	    });
	
	    addFormatToken(0, ['SS', 2], 0, function () {
	        return ~~(this.millisecond() / 10);
	    });
	
	    addFormatToken(0, ['SSS', 3], 0, 'millisecond');
	    addFormatToken(0, ['SSSS', 4], 0, function () {
	        return this.millisecond() * 10;
	    });
	    addFormatToken(0, ['SSSSS', 5], 0, function () {
	        return this.millisecond() * 100;
	    });
	    addFormatToken(0, ['SSSSSS', 6], 0, function () {
	        return this.millisecond() * 1000;
	    });
	    addFormatToken(0, ['SSSSSSS', 7], 0, function () {
	        return this.millisecond() * 10000;
	    });
	    addFormatToken(0, ['SSSSSSSS', 8], 0, function () {
	        return this.millisecond() * 100000;
	    });
	    addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {
	        return this.millisecond() * 1000000;
	    });
	
	
	    // ALIASES
	
	    addUnitAlias('millisecond', 'ms');
	
	    // PARSING
	
	    addRegexToken('S',    match1to3, match1);
	    addRegexToken('SS',   match1to3, match2);
	    addRegexToken('SSS',  match1to3, match3);
	
	    var token;
	    for (token = 'SSSS'; token.length <= 9; token += 'S') {
	        addRegexToken(token, matchUnsigned);
	    }
	
	    function parseMs(input, array) {
	        array[MILLISECOND] = toInt(('0.' + input) * 1000);
	    }
	
	    for (token = 'S'; token.length <= 9; token += 'S') {
	        addParseToken(token, parseMs);
	    }
	    // MOMENTS
	
	    var getSetMillisecond = makeGetSet('Milliseconds', false);
	
	    // FORMATTING
	
	    addFormatToken('z',  0, 0, 'zoneAbbr');
	    addFormatToken('zz', 0, 0, 'zoneName');
	
	    // MOMENTS
	
	    function getZoneAbbr () {
	        return this._isUTC ? 'UTC' : '';
	    }
	
	    function getZoneName () {
	        return this._isUTC ? 'Coordinated Universal Time' : '';
	    }
	
	    var momentPrototype__proto = Moment.prototype;
	
	    momentPrototype__proto.add               = add_subtract__add;
	    momentPrototype__proto.calendar          = moment_calendar__calendar;
	    momentPrototype__proto.clone             = clone;
	    momentPrototype__proto.diff              = diff;
	    momentPrototype__proto.endOf             = endOf;
	    momentPrototype__proto.format            = format;
	    momentPrototype__proto.from              = from;
	    momentPrototype__proto.fromNow           = fromNow;
	    momentPrototype__proto.to                = to;
	    momentPrototype__proto.toNow             = toNow;
	    momentPrototype__proto.get               = getSet;
	    momentPrototype__proto.invalidAt         = invalidAt;
	    momentPrototype__proto.isAfter           = isAfter;
	    momentPrototype__proto.isBefore          = isBefore;
	    momentPrototype__proto.isBetween         = isBetween;
	    momentPrototype__proto.isSame            = isSame;
	    momentPrototype__proto.isSameOrAfter     = isSameOrAfter;
	    momentPrototype__proto.isSameOrBefore    = isSameOrBefore;
	    momentPrototype__proto.isValid           = moment_valid__isValid;
	    momentPrototype__proto.lang              = lang;
	    momentPrototype__proto.locale            = locale;
	    momentPrototype__proto.localeData        = localeData;
	    momentPrototype__proto.max               = prototypeMax;
	    momentPrototype__proto.min               = prototypeMin;
	    momentPrototype__proto.parsingFlags      = parsingFlags;
	    momentPrototype__proto.set               = getSet;
	    momentPrototype__proto.startOf           = startOf;
	    momentPrototype__proto.subtract          = add_subtract__subtract;
	    momentPrototype__proto.toArray           = toArray;
	    momentPrototype__proto.toObject          = toObject;
	    momentPrototype__proto.toDate            = toDate;
	    momentPrototype__proto.toISOString       = moment_format__toISOString;
	    momentPrototype__proto.toJSON            = toJSON;
	    momentPrototype__proto.toString          = toString;
	    momentPrototype__proto.unix              = unix;
	    momentPrototype__proto.valueOf           = to_type__valueOf;
	    momentPrototype__proto.creationData      = creationData;
	
	    // Year
	    momentPrototype__proto.year       = getSetYear;
	    momentPrototype__proto.isLeapYear = getIsLeapYear;
	
	    // Week Year
	    momentPrototype__proto.weekYear    = getSetWeekYear;
	    momentPrototype__proto.isoWeekYear = getSetISOWeekYear;
	
	    // Quarter
	    momentPrototype__proto.quarter = momentPrototype__proto.quarters = getSetQuarter;
	
	    // Month
	    momentPrototype__proto.month       = getSetMonth;
	    momentPrototype__proto.daysInMonth = getDaysInMonth;
	
	    // Week
	    momentPrototype__proto.week           = momentPrototype__proto.weeks        = getSetWeek;
	    momentPrototype__proto.isoWeek        = momentPrototype__proto.isoWeeks     = getSetISOWeek;
	    momentPrototype__proto.weeksInYear    = getWeeksInYear;
	    momentPrototype__proto.isoWeeksInYear = getISOWeeksInYear;
	
	    // Day
	    momentPrototype__proto.date       = getSetDayOfMonth;
	    momentPrototype__proto.day        = momentPrototype__proto.days             = getSetDayOfWeek;
	    momentPrototype__proto.weekday    = getSetLocaleDayOfWeek;
	    momentPrototype__proto.isoWeekday = getSetISODayOfWeek;
	    momentPrototype__proto.dayOfYear  = getSetDayOfYear;
	
	    // Hour
	    momentPrototype__proto.hour = momentPrototype__proto.hours = getSetHour;
	
	    // Minute
	    momentPrototype__proto.minute = momentPrototype__proto.minutes = getSetMinute;
	
	    // Second
	    momentPrototype__proto.second = momentPrototype__proto.seconds = getSetSecond;
	
	    // Millisecond
	    momentPrototype__proto.millisecond = momentPrototype__proto.milliseconds = getSetMillisecond;
	
	    // Offset
	    momentPrototype__proto.utcOffset            = getSetOffset;
	    momentPrototype__proto.utc                  = setOffsetToUTC;
	    momentPrototype__proto.local                = setOffsetToLocal;
	    momentPrototype__proto.parseZone            = setOffsetToParsedOffset;
	    momentPrototype__proto.hasAlignedHourOffset = hasAlignedHourOffset;
	    momentPrototype__proto.isDST                = isDaylightSavingTime;
	    momentPrototype__proto.isDSTShifted         = isDaylightSavingTimeShifted;
	    momentPrototype__proto.isLocal              = isLocal;
	    momentPrototype__proto.isUtcOffset          = isUtcOffset;
	    momentPrototype__proto.isUtc                = isUtc;
	    momentPrototype__proto.isUTC                = isUtc;
	
	    // Timezone
	    momentPrototype__proto.zoneAbbr = getZoneAbbr;
	    momentPrototype__proto.zoneName = getZoneName;
	
	    // Deprecations
	    momentPrototype__proto.dates  = deprecate('dates accessor is deprecated. Use date instead.', getSetDayOfMonth);
	    momentPrototype__proto.months = deprecate('months accessor is deprecated. Use month instead', getSetMonth);
	    momentPrototype__proto.years  = deprecate('years accessor is deprecated. Use year instead', getSetYear);
	    momentPrototype__proto.zone   = deprecate('moment().zone is deprecated, use moment().utcOffset instead. https://github.com/moment/moment/issues/1779', getSetZone);
	
	    var momentPrototype = momentPrototype__proto;
	
	    function moment__createUnix (input) {
	        return local__createLocal(input * 1000);
	    }
	
	    function moment__createInZone () {
	        return local__createLocal.apply(null, arguments).parseZone();
	    }
	
	    var defaultCalendar = {
	        sameDay : '[Today at] LT',
	        nextDay : '[Tomorrow at] LT',
	        nextWeek : 'dddd [at] LT',
	        lastDay : '[Yesterday at] LT',
	        lastWeek : '[Last] dddd [at] LT',
	        sameElse : 'L'
	    };
	
	    function locale_calendar__calendar (key, mom, now) {
	        var output = this._calendar[key];
	        return isFunction(output) ? output.call(mom, now) : output;
	    }
	
	    var defaultLongDateFormat = {
	        LTS  : 'h:mm:ss A',
	        LT   : 'h:mm A',
	        L    : 'MM/DD/YYYY',
	        LL   : 'MMMM D, YYYY',
	        LLL  : 'MMMM D, YYYY h:mm A',
	        LLLL : 'dddd, MMMM D, YYYY h:mm A'
	    };
	
	    function longDateFormat (key) {
	        var format = this._longDateFormat[key],
	            formatUpper = this._longDateFormat[key.toUpperCase()];
	
	        if (format || !formatUpper) {
	            return format;
	        }
	
	        this._longDateFormat[key] = formatUpper.replace(/MMMM|MM|DD|dddd/g, function (val) {
	            return val.slice(1);
	        });
	
	        return this._longDateFormat[key];
	    }
	
	    var defaultInvalidDate = 'Invalid date';
	
	    function invalidDate () {
	        return this._invalidDate;
	    }
	
	    var defaultOrdinal = '%d';
	    var defaultOrdinalParse = /\d{1,2}/;
	
	    function ordinal (number) {
	        return this._ordinal.replace('%d', number);
	    }
	
	    function preParsePostFormat (string) {
	        return string;
	    }
	
	    var defaultRelativeTime = {
	        future : 'in %s',
	        past   : '%s ago',
	        s  : 'a few seconds',
	        m  : 'a minute',
	        mm : '%d minutes',
	        h  : 'an hour',
	        hh : '%d hours',
	        d  : 'a day',
	        dd : '%d days',
	        M  : 'a month',
	        MM : '%d months',
	        y  : 'a year',
	        yy : '%d years'
	    };
	
	    function relative__relativeTime (number, withoutSuffix, string, isFuture) {
	        var output = this._relativeTime[string];
	        return (isFunction(output)) ?
	            output(number, withoutSuffix, string, isFuture) :
	            output.replace(/%d/i, number);
	    }
	
	    function pastFuture (diff, output) {
	        var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
	        return isFunction(format) ? format(output) : format.replace(/%s/i, output);
	    }
	
	    var prototype__proto = Locale.prototype;
	
	    prototype__proto._calendar       = defaultCalendar;
	    prototype__proto.calendar        = locale_calendar__calendar;
	    prototype__proto._longDateFormat = defaultLongDateFormat;
	    prototype__proto.longDateFormat  = longDateFormat;
	    prototype__proto._invalidDate    = defaultInvalidDate;
	    prototype__proto.invalidDate     = invalidDate;
	    prototype__proto._ordinal        = defaultOrdinal;
	    prototype__proto.ordinal         = ordinal;
	    prototype__proto._ordinalParse   = defaultOrdinalParse;
	    prototype__proto.preparse        = preParsePostFormat;
	    prototype__proto.postformat      = preParsePostFormat;
	    prototype__proto._relativeTime   = defaultRelativeTime;
	    prototype__proto.relativeTime    = relative__relativeTime;
	    prototype__proto.pastFuture      = pastFuture;
	    prototype__proto.set             = locale_set__set;
	
	    // Month
	    prototype__proto.months            =        localeMonths;
	    prototype__proto._months           = defaultLocaleMonths;
	    prototype__proto.monthsShort       =        localeMonthsShort;
	    prototype__proto._monthsShort      = defaultLocaleMonthsShort;
	    prototype__proto.monthsParse       =        localeMonthsParse;
	    prototype__proto._monthsRegex      = defaultMonthsRegex;
	    prototype__proto.monthsRegex       = monthsRegex;
	    prototype__proto._monthsShortRegex = defaultMonthsShortRegex;
	    prototype__proto.monthsShortRegex  = monthsShortRegex;
	
	    // Week
	    prototype__proto.week = localeWeek;
	    prototype__proto._week = defaultLocaleWeek;
	    prototype__proto.firstDayOfYear = localeFirstDayOfYear;
	    prototype__proto.firstDayOfWeek = localeFirstDayOfWeek;
	
	    // Day of Week
	    prototype__proto.weekdays       =        localeWeekdays;
	    prototype__proto._weekdays      = defaultLocaleWeekdays;
	    prototype__proto.weekdaysMin    =        localeWeekdaysMin;
	    prototype__proto._weekdaysMin   = defaultLocaleWeekdaysMin;
	    prototype__proto.weekdaysShort  =        localeWeekdaysShort;
	    prototype__proto._weekdaysShort = defaultLocaleWeekdaysShort;
	    prototype__proto.weekdaysParse  =        localeWeekdaysParse;
	
	    prototype__proto._weekdaysRegex      = defaultWeekdaysRegex;
	    prototype__proto.weekdaysRegex       =        weekdaysRegex;
	    prototype__proto._weekdaysShortRegex = defaultWeekdaysShortRegex;
	    prototype__proto.weekdaysShortRegex  =        weekdaysShortRegex;
	    prototype__proto._weekdaysMinRegex   = defaultWeekdaysMinRegex;
	    prototype__proto.weekdaysMinRegex    =        weekdaysMinRegex;
	
	    // Hours
	    prototype__proto.isPM = localeIsPM;
	    prototype__proto._meridiemParse = defaultLocaleMeridiemParse;
	    prototype__proto.meridiem = localeMeridiem;
	
	    function lists__get (format, index, field, setter) {
	        var locale = locale_locales__getLocale();
	        var utc = create_utc__createUTC().set(setter, index);
	        return locale[field](utc, format);
	    }
	
	    function listMonthsImpl (format, index, field) {
	        if (typeof format === 'number') {
	            index = format;
	            format = undefined;
	        }
	
	        format = format || '';
	
	        if (index != null) {
	            return lists__get(format, index, field, 'month');
	        }
	
	        var i;
	        var out = [];
	        for (i = 0; i < 12; i++) {
	            out[i] = lists__get(format, i, field, 'month');
	        }
	        return out;
	    }
	
	    // ()
	    // (5)
	    // (fmt, 5)
	    // (fmt)
	    // (true)
	    // (true, 5)
	    // (true, fmt, 5)
	    // (true, fmt)
	    function listWeekdaysImpl (localeSorted, format, index, field) {
	        if (typeof localeSorted === 'boolean') {
	            if (typeof format === 'number') {
	                index = format;
	                format = undefined;
	            }
	
	            format = format || '';
	        } else {
	            format = localeSorted;
	            index = format;
	            localeSorted = false;
	
	            if (typeof format === 'number') {
	                index = format;
	                format = undefined;
	            }
	
	            format = format || '';
	        }
	
	        var locale = locale_locales__getLocale(),
	            shift = localeSorted ? locale._week.dow : 0;
	
	        if (index != null) {
	            return lists__get(format, (index + shift) % 7, field, 'day');
	        }
	
	        var i;
	        var out = [];
	        for (i = 0; i < 7; i++) {
	            out[i] = lists__get(format, (i + shift) % 7, field, 'day');
	        }
	        return out;
	    }
	
	    function lists__listMonths (format, index) {
	        return listMonthsImpl(format, index, 'months');
	    }
	
	    function lists__listMonthsShort (format, index) {
	        return listMonthsImpl(format, index, 'monthsShort');
	    }
	
	    function lists__listWeekdays (localeSorted, format, index) {
	        return listWeekdaysImpl(localeSorted, format, index, 'weekdays');
	    }
	
	    function lists__listWeekdaysShort (localeSorted, format, index) {
	        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');
	    }
	
	    function lists__listWeekdaysMin (localeSorted, format, index) {
	        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');
	    }
	
	    locale_locales__getSetGlobalLocale('en', {
	        ordinalParse: /\d{1,2}(th|st|nd|rd)/,
	        ordinal : function (number) {
	            var b = number % 10,
	                output = (toInt(number % 100 / 10) === 1) ? 'th' :
	                (b === 1) ? 'st' :
	                (b === 2) ? 'nd' :
	                (b === 3) ? 'rd' : 'th';
	            return number + output;
	        }
	    });
	
	    // Side effect imports
	    utils_hooks__hooks.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', locale_locales__getSetGlobalLocale);
	    utils_hooks__hooks.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', locale_locales__getLocale);
	
	    var mathAbs = Math.abs;
	
	    function duration_abs__abs () {
	        var data           = this._data;
	
	        this._milliseconds = mathAbs(this._milliseconds);
	        this._days         = mathAbs(this._days);
	        this._months       = mathAbs(this._months);
	
	        data.milliseconds  = mathAbs(data.milliseconds);
	        data.seconds       = mathAbs(data.seconds);
	        data.minutes       = mathAbs(data.minutes);
	        data.hours         = mathAbs(data.hours);
	        data.months        = mathAbs(data.months);
	        data.years         = mathAbs(data.years);
	
	        return this;
	    }
	
	    function duration_add_subtract__addSubtract (duration, input, value, direction) {
	        var other = create__createDuration(input, value);
	
	        duration._milliseconds += direction * other._milliseconds;
	        duration._days         += direction * other._days;
	        duration._months       += direction * other._months;
	
	        return duration._bubble();
	    }
	
	    // supports only 2.0-style add(1, 's') or add(duration)
	    function duration_add_subtract__add (input, value) {
	        return duration_add_subtract__addSubtract(this, input, value, 1);
	    }
	
	    // supports only 2.0-style subtract(1, 's') or subtract(duration)
	    function duration_add_subtract__subtract (input, value) {
	        return duration_add_subtract__addSubtract(this, input, value, -1);
	    }
	
	    function absCeil (number) {
	        if (number < 0) {
	            return Math.floor(number);
	        } else {
	            return Math.ceil(number);
	        }
	    }
	
	    function bubble () {
	        var milliseconds = this._milliseconds;
	        var days         = this._days;
	        var months       = this._months;
	        var data         = this._data;
	        var seconds, minutes, hours, years, monthsFromDays;
	
	        // if we have a mix of positive and negative values, bubble down first
	        // check: https://github.com/moment/moment/issues/2166
	        if (!((milliseconds >= 0 && days >= 0 && months >= 0) ||
	                (milliseconds <= 0 && days <= 0 && months <= 0))) {
	            milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
	            days = 0;
	            months = 0;
	        }
	
	        // The following code bubbles up values, see the tests for
	        // examples of what that means.
	        data.milliseconds = milliseconds % 1000;
	
	        seconds           = absFloor(milliseconds / 1000);
	        data.seconds      = seconds % 60;
	
	        minutes           = absFloor(seconds / 60);
	        data.minutes      = minutes % 60;
	
	        hours             = absFloor(minutes / 60);
	        data.hours        = hours % 24;
	
	        days += absFloor(hours / 24);
	
	        // convert days to months
	        monthsFromDays = absFloor(daysToMonths(days));
	        months += monthsFromDays;
	        days -= absCeil(monthsToDays(monthsFromDays));
	
	        // 12 months -> 1 year
	        years = absFloor(months / 12);
	        months %= 12;
	
	        data.days   = days;
	        data.months = months;
	        data.years  = years;
	
	        return this;
	    }
	
	    function daysToMonths (days) {
	        // 400 years have 146097 days (taking into account leap year rules)
	        // 400 years have 12 months === 4800
	        return days * 4800 / 146097;
	    }
	
	    function monthsToDays (months) {
	        // the reverse of daysToMonths
	        return months * 146097 / 4800;
	    }
	
	    function as (units) {
	        var days;
	        var months;
	        var milliseconds = this._milliseconds;
	
	        units = normalizeUnits(units);
	
	        if (units === 'month' || units === 'year') {
	            days   = this._days   + milliseconds / 864e5;
	            months = this._months + daysToMonths(days);
	            return units === 'month' ? months : months / 12;
	        } else {
	            // handle milliseconds separately because of floating point math errors (issue #1867)
	            days = this._days + Math.round(monthsToDays(this._months));
	            switch (units) {
	                case 'week'   : return days / 7     + milliseconds / 6048e5;
	                case 'day'    : return days         + milliseconds / 864e5;
	                case 'hour'   : return days * 24    + milliseconds / 36e5;
	                case 'minute' : return days * 1440  + milliseconds / 6e4;
	                case 'second' : return days * 86400 + milliseconds / 1000;
	                // Math.floor prevents floating point math errors here
	                case 'millisecond': return Math.floor(days * 864e5) + milliseconds;
	                default: throw new Error('Unknown unit ' + units);
	            }
	        }
	    }
	
	    // TODO: Use this.as('ms')?
	    function duration_as__valueOf () {
	        return (
	            this._milliseconds +
	            this._days * 864e5 +
	            (this._months % 12) * 2592e6 +
	            toInt(this._months / 12) * 31536e6
	        );
	    }
	
	    function makeAs (alias) {
	        return function () {
	            return this.as(alias);
	        };
	    }
	
	    var asMilliseconds = makeAs('ms');
	    var asSeconds      = makeAs('s');
	    var asMinutes      = makeAs('m');
	    var asHours        = makeAs('h');
	    var asDays         = makeAs('d');
	    var asWeeks        = makeAs('w');
	    var asMonths       = makeAs('M');
	    var asYears        = makeAs('y');
	
	    function duration_get__get (units) {
	        units = normalizeUnits(units);
	        return this[units + 's']();
	    }
	
	    function makeGetter(name) {
	        return function () {
	            return this._data[name];
	        };
	    }
	
	    var milliseconds = makeGetter('milliseconds');
	    var seconds      = makeGetter('seconds');
	    var minutes      = makeGetter('minutes');
	    var hours        = makeGetter('hours');
	    var days         = makeGetter('days');
	    var months       = makeGetter('months');
	    var years        = makeGetter('years');
	
	    function weeks () {
	        return absFloor(this.days() / 7);
	    }
	
	    var round = Math.round;
	    var thresholds = {
	        s: 45,  // seconds to minute
	        m: 45,  // minutes to hour
	        h: 22,  // hours to day
	        d: 26,  // days to month
	        M: 11   // months to year
	    };
	
	    // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
	    function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
	        return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
	    }
	
	    function duration_humanize__relativeTime (posNegDuration, withoutSuffix, locale) {
	        var duration = create__createDuration(posNegDuration).abs();
	        var seconds  = round(duration.as('s'));
	        var minutes  = round(duration.as('m'));
	        var hours    = round(duration.as('h'));
	        var days     = round(duration.as('d'));
	        var months   = round(duration.as('M'));
	        var years    = round(duration.as('y'));
	
	        var a = seconds < thresholds.s && ['s', seconds]  ||
	                minutes <= 1           && ['m']           ||
	                minutes < thresholds.m && ['mm', minutes] ||
	                hours   <= 1           && ['h']           ||
	                hours   < thresholds.h && ['hh', hours]   ||
	                days    <= 1           && ['d']           ||
	                days    < thresholds.d && ['dd', days]    ||
	                months  <= 1           && ['M']           ||
	                months  < thresholds.M && ['MM', months]  ||
	                years   <= 1           && ['y']           || ['yy', years];
	
	        a[2] = withoutSuffix;
	        a[3] = +posNegDuration > 0;
	        a[4] = locale;
	        return substituteTimeAgo.apply(null, a);
	    }
	
	    // This function allows you to set a threshold for relative time strings
	    function duration_humanize__getSetRelativeTimeThreshold (threshold, limit) {
	        if (thresholds[threshold] === undefined) {
	            return false;
	        }
	        if (limit === undefined) {
	            return thresholds[threshold];
	        }
	        thresholds[threshold] = limit;
	        return true;
	    }
	
	    function humanize (withSuffix) {
	        var locale = this.localeData();
	        var output = duration_humanize__relativeTime(this, !withSuffix, locale);
	
	        if (withSuffix) {
	            output = locale.pastFuture(+this, output);
	        }
	
	        return locale.postformat(output);
	    }
	
	    var iso_string__abs = Math.abs;
	
	    function iso_string__toISOString() {
	        // for ISO strings we do not use the normal bubbling rules:
	        //  * milliseconds bubble up until they become hours
	        //  * days do not bubble at all
	        //  * months bubble up until they become years
	        // This is because there is no context-free conversion between hours and days
	        // (think of clock changes)
	        // and also not between days and months (28-31 days per month)
	        var seconds = iso_string__abs(this._milliseconds) / 1000;
	        var days         = iso_string__abs(this._days);
	        var months       = iso_string__abs(this._months);
	        var minutes, hours, years;
	
	        // 3600 seconds -> 60 minutes -> 1 hour
	        minutes           = absFloor(seconds / 60);
	        hours             = absFloor(minutes / 60);
	        seconds %= 60;
	        minutes %= 60;
	
	        // 12 months -> 1 year
	        years  = absFloor(months / 12);
	        months %= 12;
	
	
	        // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
	        var Y = years;
	        var M = months;
	        var D = days;
	        var h = hours;
	        var m = minutes;
	        var s = seconds;
	        var total = this.asSeconds();
	
	        if (!total) {
	            // this is the same as C#'s (Noda) and python (isodate)...
	            // but not other JS (goog.date)
	            return 'P0D';
	        }
	
	        return (total < 0 ? '-' : '') +
	            'P' +
	            (Y ? Y + 'Y' : '') +
	            (M ? M + 'M' : '') +
	            (D ? D + 'D' : '') +
	            ((h || m || s) ? 'T' : '') +
	            (h ? h + 'H' : '') +
	            (m ? m + 'M' : '') +
	            (s ? s + 'S' : '');
	    }
	
	    var duration_prototype__proto = Duration.prototype;
	
	    duration_prototype__proto.abs            = duration_abs__abs;
	    duration_prototype__proto.add            = duration_add_subtract__add;
	    duration_prototype__proto.subtract       = duration_add_subtract__subtract;
	    duration_prototype__proto.as             = as;
	    duration_prototype__proto.asMilliseconds = asMilliseconds;
	    duration_prototype__proto.asSeconds      = asSeconds;
	    duration_prototype__proto.asMinutes      = asMinutes;
	    duration_prototype__proto.asHours        = asHours;
	    duration_prototype__proto.asDays         = asDays;
	    duration_prototype__proto.asWeeks        = asWeeks;
	    duration_prototype__proto.asMonths       = asMonths;
	    duration_prototype__proto.asYears        = asYears;
	    duration_prototype__proto.valueOf        = duration_as__valueOf;
	    duration_prototype__proto._bubble        = bubble;
	    duration_prototype__proto.get            = duration_get__get;
	    duration_prototype__proto.milliseconds   = milliseconds;
	    duration_prototype__proto.seconds        = seconds;
	    duration_prototype__proto.minutes        = minutes;
	    duration_prototype__proto.hours          = hours;
	    duration_prototype__proto.days           = days;
	    duration_prototype__proto.weeks          = weeks;
	    duration_prototype__proto.months         = months;
	    duration_prototype__proto.years          = years;
	    duration_prototype__proto.humanize       = humanize;
	    duration_prototype__proto.toISOString    = iso_string__toISOString;
	    duration_prototype__proto.toString       = iso_string__toISOString;
	    duration_prototype__proto.toJSON         = iso_string__toISOString;
	    duration_prototype__proto.locale         = locale;
	    duration_prototype__proto.localeData     = localeData;
	
	    // Deprecations
	    duration_prototype__proto.toIsoString = deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', iso_string__toISOString);
	    duration_prototype__proto.lang = lang;
	
	    // Side effect imports
	
	    // FORMATTING
	
	    addFormatToken('X', 0, 0, 'unix');
	    addFormatToken('x', 0, 0, 'valueOf');
	
	    // PARSING
	
	    addRegexToken('x', matchSigned);
	    addRegexToken('X', matchTimestamp);
	    addParseToken('X', function (input, array, config) {
	        config._d = new Date(parseFloat(input, 10) * 1000);
	    });
	    addParseToken('x', function (input, array, config) {
	        config._d = new Date(toInt(input));
	    });
	
	    // Side effect imports
	
	
	    utils_hooks__hooks.version = '2.13.0';
	
	    setHookCallback(local__createLocal);
	
	    utils_hooks__hooks.fn                    = momentPrototype;
	    utils_hooks__hooks.min                   = min;
	    utils_hooks__hooks.max                   = max;
	    utils_hooks__hooks.now                   = now;
	    utils_hooks__hooks.utc                   = create_utc__createUTC;
	    utils_hooks__hooks.unix                  = moment__createUnix;
	    utils_hooks__hooks.months                = lists__listMonths;
	    utils_hooks__hooks.isDate                = isDate;
	    utils_hooks__hooks.locale                = locale_locales__getSetGlobalLocale;
	    utils_hooks__hooks.invalid               = valid__createInvalid;
	    utils_hooks__hooks.duration              = create__createDuration;
	    utils_hooks__hooks.isMoment              = isMoment;
	    utils_hooks__hooks.weekdays              = lists__listWeekdays;
	    utils_hooks__hooks.parseZone             = moment__createInZone;
	    utils_hooks__hooks.localeData            = locale_locales__getLocale;
	    utils_hooks__hooks.isDuration            = isDuration;
	    utils_hooks__hooks.monthsShort           = lists__listMonthsShort;
	    utils_hooks__hooks.weekdaysMin           = lists__listWeekdaysMin;
	    utils_hooks__hooks.defineLocale          = defineLocale;
	    utils_hooks__hooks.updateLocale          = updateLocale;
	    utils_hooks__hooks.locales               = locale_locales__listLocales;
	    utils_hooks__hooks.weekdaysShort         = lists__listWeekdaysShort;
	    utils_hooks__hooks.normalizeUnits        = normalizeUnits;
	    utils_hooks__hooks.relativeTimeThreshold = duration_humanize__getSetRelativeTimeThreshold;
	    utils_hooks__hooks.prototype             = momentPrototype;
	
	    var _moment = utils_hooks__hooks;
	
	    return _moment;
	
	}));
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(11)(module)))

/***/ },
/* 11 */
/***/ function(module, exports) {

	module.exports = function(module) {
		if(!module.webpackPolyfill) {
			module.deprecate = function() {};
			module.paths = [];
			// module.parent = undefined by default
			module.children = [];
			module.webpackPolyfill = 1;
		}
		return module;
	}


/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	var map = {
		"./af": 13,
		"./af.js": 13,
		"./ar": 14,
		"./ar-ma": 15,
		"./ar-ma.js": 15,
		"./ar-sa": 16,
		"./ar-sa.js": 16,
		"./ar-tn": 17,
		"./ar-tn.js": 17,
		"./ar.js": 14,
		"./az": 18,
		"./az.js": 18,
		"./be": 19,
		"./be.js": 19,
		"./bg": 20,
		"./bg.js": 20,
		"./bn": 21,
		"./bn.js": 21,
		"./bo": 22,
		"./bo.js": 22,
		"./br": 23,
		"./br.js": 23,
		"./bs": 24,
		"./bs.js": 24,
		"./ca": 25,
		"./ca.js": 25,
		"./cs": 26,
		"./cs.js": 26,
		"./cv": 27,
		"./cv.js": 27,
		"./cy": 28,
		"./cy.js": 28,
		"./da": 29,
		"./da.js": 29,
		"./de": 30,
		"./de-at": 31,
		"./de-at.js": 31,
		"./de.js": 30,
		"./dv": 32,
		"./dv.js": 32,
		"./el": 33,
		"./el.js": 33,
		"./en-au": 34,
		"./en-au.js": 34,
		"./en-ca": 35,
		"./en-ca.js": 35,
		"./en-gb": 36,
		"./en-gb.js": 36,
		"./en-ie": 37,
		"./en-ie.js": 37,
		"./en-nz": 38,
		"./en-nz.js": 38,
		"./eo": 39,
		"./eo.js": 39,
		"./es": 40,
		"./es.js": 40,
		"./et": 41,
		"./et.js": 41,
		"./eu": 42,
		"./eu.js": 42,
		"./fa": 43,
		"./fa.js": 43,
		"./fi": 44,
		"./fi.js": 44,
		"./fo": 45,
		"./fo.js": 45,
		"./fr": 46,
		"./fr-ca": 47,
		"./fr-ca.js": 47,
		"./fr-ch": 48,
		"./fr-ch.js": 48,
		"./fr.js": 46,
		"./fy": 49,
		"./fy.js": 49,
		"./gd": 50,
		"./gd.js": 50,
		"./gl": 51,
		"./gl.js": 51,
		"./he": 52,
		"./he.js": 52,
		"./hi": 53,
		"./hi.js": 53,
		"./hr": 54,
		"./hr.js": 54,
		"./hu": 55,
		"./hu.js": 55,
		"./hy-am": 56,
		"./hy-am.js": 56,
		"./id": 57,
		"./id.js": 57,
		"./is": 58,
		"./is.js": 58,
		"./it": 59,
		"./it.js": 59,
		"./ja": 60,
		"./ja.js": 60,
		"./jv": 61,
		"./jv.js": 61,
		"./ka": 62,
		"./ka.js": 62,
		"./kk": 63,
		"./kk.js": 63,
		"./km": 64,
		"./km.js": 64,
		"./ko": 65,
		"./ko.js": 65,
		"./ky": 66,
		"./ky.js": 66,
		"./lb": 67,
		"./lb.js": 67,
		"./lo": 68,
		"./lo.js": 68,
		"./lt": 69,
		"./lt.js": 69,
		"./lv": 70,
		"./lv.js": 70,
		"./me": 71,
		"./me.js": 71,
		"./mk": 72,
		"./mk.js": 72,
		"./ml": 73,
		"./ml.js": 73,
		"./mr": 74,
		"./mr.js": 74,
		"./ms": 75,
		"./ms-my": 76,
		"./ms-my.js": 76,
		"./ms.js": 75,
		"./my": 77,
		"./my.js": 77,
		"./nb": 78,
		"./nb.js": 78,
		"./ne": 79,
		"./ne.js": 79,
		"./nl": 80,
		"./nl.js": 80,
		"./nn": 81,
		"./nn.js": 81,
		"./pa-in": 82,
		"./pa-in.js": 82,
		"./pl": 83,
		"./pl.js": 83,
		"./pt": 84,
		"./pt-br": 85,
		"./pt-br.js": 85,
		"./pt.js": 84,
		"./ro": 86,
		"./ro.js": 86,
		"./ru": 87,
		"./ru.js": 87,
		"./se": 88,
		"./se.js": 88,
		"./si": 89,
		"./si.js": 89,
		"./sk": 90,
		"./sk.js": 90,
		"./sl": 91,
		"./sl.js": 91,
		"./sq": 92,
		"./sq.js": 92,
		"./sr": 93,
		"./sr-cyrl": 94,
		"./sr-cyrl.js": 94,
		"./sr.js": 93,
		"./ss": 95,
		"./ss.js": 95,
		"./sv": 96,
		"./sv.js": 96,
		"./sw": 97,
		"./sw.js": 97,
		"./ta": 98,
		"./ta.js": 98,
		"./te": 99,
		"./te.js": 99,
		"./th": 100,
		"./th.js": 100,
		"./tl-ph": 101,
		"./tl-ph.js": 101,
		"./tlh": 102,
		"./tlh.js": 102,
		"./tr": 103,
		"./tr.js": 103,
		"./tzl": 104,
		"./tzl.js": 104,
		"./tzm": 105,
		"./tzm-latn": 106,
		"./tzm-latn.js": 106,
		"./tzm.js": 105,
		"./uk": 107,
		"./uk.js": 107,
		"./uz": 108,
		"./uz.js": 108,
		"./vi": 109,
		"./vi.js": 109,
		"./x-pseudo": 110,
		"./x-pseudo.js": 110,
		"./zh-cn": 111,
		"./zh-cn.js": 111,
		"./zh-tw": 112,
		"./zh-tw.js": 112
	};
	function webpackContext(req) {
		return __webpack_require__(webpackContextResolve(req));
	};
	function webpackContextResolve(req) {
		return map[req] || (function() { throw new Error("Cannot find module '" + req + "'.") }());
	};
	webpackContext.keys = function webpackContextKeys() {
		return Object.keys(map);
	};
	webpackContext.resolve = webpackContextResolve;
	module.exports = webpackContext;
	webpackContext.id = 12;


/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : afrikaans (af)
	//! author : Werner Mollentze : https://github.com/wernerm
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(10)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var af = moment.defineLocale('af', {
	        months : 'Januarie_Februarie_Maart_April_Mei_Junie_Julie_Augustus_September_Oktober_November_Desember'.split('_'),
	        monthsShort : 'Jan_Feb_Mar_Apr_Mei_Jun_Jul_Aug_Sep_Okt_Nov_Des'.split('_'),
	        weekdays : 'Sondag_Maandag_Dinsdag_Woensdag_Donderdag_Vrydag_Saterdag'.split('_'),
	        weekdaysShort : 'Son_Maa_Din_Woe_Don_Vry_Sat'.split('_'),
	        weekdaysMin : 'So_Ma_Di_Wo_Do_Vr_Sa'.split('_'),
	        meridiemParse: /vm|nm/i,
	        isPM : function (input) {
	            return /^nm$/i.test(input);
	        },
	        meridiem : function (hours, minutes, isLower) {
	            if (hours < 12) {
	                return isLower ? 'vm' : 'VM';
	            } else {
	                return isLower ? 'nm' : 'NM';
	            }
	        },
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd, D MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay : '[Vandag om] LT',
	            nextDay : '[Môre om] LT',
	            nextWeek : 'dddd [om] LT',
	            lastDay : '[Gister om] LT',
	            lastWeek : '[Laas] dddd [om] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'oor %s',
	            past : '%s gelede',
	            s : '\'n paar sekondes',
	            m : '\'n minuut',
	            mm : '%d minute',
	            h : '\'n uur',
	            hh : '%d ure',
	            d : '\'n dag',
	            dd : '%d dae',
	            M : '\'n maand',
	            MM : '%d maande',
	            y : '\'n jaar',
	            yy : '%d jaar'
	        },
	        ordinalParse: /\d{1,2}(ste|de)/,
	        ordinal : function (number) {
	            return number + ((number === 1 || number === 8 || number >= 20) ? 'ste' : 'de'); // Thanks to Joris Röling : https://github.com/jjupiter
	        },
	        week : {
	            dow : 1, // Maandag is die eerste dag van die week.
	            doy : 4  // Die week wat die 4de Januarie bevat is die eerste week van die jaar.
	        }
	    });
	
	    return af;
	
	}));

/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! Locale: Arabic (ar)
	//! Author: Abdel Said: https://github.com/abdelsaid
	//! Changes in months, weekdays: Ahmed Elkhatib
	//! Native plural forms: forabi https://github.com/forabi
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(10)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var symbolMap = {
	        '1': '١',
	        '2': '٢',
	        '3': '٣',
	        '4': '٤',
	        '5': '٥',
	        '6': '٦',
	        '7': '٧',
	        '8': '٨',
	        '9': '٩',
	        '0': '٠'
	    }, numberMap = {
	        '١': '1',
	        '٢': '2',
	        '٣': '3',
	        '٤': '4',
	        '٥': '5',
	        '٦': '6',
	        '٧': '7',
	        '٨': '8',
	        '٩': '9',
	        '٠': '0'
	    }, pluralForm = function (n) {
	        return n === 0 ? 0 : n === 1 ? 1 : n === 2 ? 2 : n % 100 >= 3 && n % 100 <= 10 ? 3 : n % 100 >= 11 ? 4 : 5;
	    }, plurals = {
	        s : ['أقل من ثانية', 'ثانية واحدة', ['ثانيتان', 'ثانيتين'], '%d ثوان', '%d ثانية', '%d ثانية'],
	        m : ['أقل من دقيقة', 'دقيقة واحدة', ['دقيقتان', 'دقيقتين'], '%d دقائق', '%d دقيقة', '%d دقيقة'],
	        h : ['أقل من ساعة', 'ساعة واحدة', ['ساعتان', 'ساعتين'], '%d ساعات', '%d ساعة', '%d ساعة'],
	        d : ['أقل من يوم', 'يوم واحد', ['يومان', 'يومين'], '%d أيام', '%d يومًا', '%d يوم'],
	        M : ['أقل من شهر', 'شهر واحد', ['شهران', 'شهرين'], '%d أشهر', '%d شهرا', '%d شهر'],
	        y : ['أقل من عام', 'عام واحد', ['عامان', 'عامين'], '%d أعوام', '%d عامًا', '%d عام']
	    }, pluralize = function (u) {
	        return function (number, withoutSuffix, string, isFuture) {
	            var f = pluralForm(number),
	                str = plurals[u][pluralForm(number)];
	            if (f === 2) {
	                str = str[withoutSuffix ? 0 : 1];
	            }
	            return str.replace(/%d/i, number);
	        };
	    }, months = [
	        'كانون الثاني يناير',
	        'شباط فبراير',
	        'آذار مارس',
	        'نيسان أبريل',
	        'أيار مايو',
	        'حزيران يونيو',
	        'تموز يوليو',
	        'آب أغسطس',
	        'أيلول سبتمبر',
	        'تشرين الأول أكتوبر',
	        'تشرين الثاني نوفمبر',
	        'كانون الأول ديسمبر'
	    ];
	
	    var ar = moment.defineLocale('ar', {
	        months : months,
	        monthsShort : months,
	        weekdays : 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
	        weekdaysShort : 'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),
	        weekdaysMin : 'ح_ن_ث_ر_خ_ج_س'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'D/\u200FM/\u200FYYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd D MMMM YYYY HH:mm'
	        },
	        meridiemParse: /ص|م/,
	        isPM : function (input) {
	            return 'م' === input;
	        },
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 12) {
	                return 'ص';
	            } else {
	                return 'م';
	            }
	        },
	        calendar : {
	            sameDay: '[اليوم عند الساعة] LT',
	            nextDay: '[غدًا عند الساعة] LT',
	            nextWeek: 'dddd [عند الساعة] LT',
	            lastDay: '[أمس عند الساعة] LT',
	            lastWeek: 'dddd [عند الساعة] LT',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'بعد %s',
	            past : 'منذ %s',
	            s : pluralize('s'),
	            m : pluralize('m'),
	            mm : pluralize('m'),
	            h : pluralize('h'),
	            hh : pluralize('h'),
	            d : pluralize('d'),
	            dd : pluralize('d'),
	            M : pluralize('M'),
	            MM : pluralize('M'),
	            y : pluralize('y'),
	            yy : pluralize('y')
	        },
	        preparse: function (string) {
	            return string.replace(/\u200f/g, '').replace(/[١٢٣٤٥٦٧٨٩٠]/g, function (match) {
	                return numberMap[match];
	            }).replace(/،/g, ',');
	        },
	        postformat: function (string) {
	            return string.replace(/\d/g, function (match) {
	                return symbolMap[match];
	            }).replace(/,/g, '،');
	        },
	        week : {
	            dow : 6, // Saturday is the first day of the week.
	            doy : 12  // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	
	    return ar;
	
	}));

/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Moroccan Arabic (ar-ma)
	//! author : ElFadili Yassine : https://github.com/ElFadiliY
	//! author : Abdel Said : https://github.com/abdelsaid
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(10)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var ar_ma = moment.defineLocale('ar-ma', {
	        months : 'يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر'.split('_'),
	        monthsShort : 'يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر'.split('_'),
	        weekdays : 'الأحد_الإتنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
	        weekdaysShort : 'احد_اتنين_ثلاثاء_اربعاء_خميس_جمعة_سبت'.split('_'),
	        weekdaysMin : 'ح_ن_ث_ر_خ_ج_س'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd D MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay: '[اليوم على الساعة] LT',
	            nextDay: '[غدا على الساعة] LT',
	            nextWeek: 'dddd [على الساعة] LT',
	            lastDay: '[أمس على الساعة] LT',
	            lastWeek: 'dddd [على الساعة] LT',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'في %s',
	            past : 'منذ %s',
	            s : 'ثوان',
	            m : 'دقيقة',
	            mm : '%d دقائق',
	            h : 'ساعة',
	            hh : '%d ساعات',
	            d : 'يوم',
	            dd : '%d أيام',
	            M : 'شهر',
	            MM : '%d أشهر',
	            y : 'سنة',
	            yy : '%d سنوات'
	        },
	        week : {
	            dow : 6, // Saturday is the first day of the week.
	            doy : 12  // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	
	    return ar_ma;
	
	}));

/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Arabic Saudi Arabia (ar-sa)
	//! author : Suhail Alkowaileet : https://github.com/xsoh
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(10)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var symbolMap = {
	        '1': '١',
	        '2': '٢',
	        '3': '٣',
	        '4': '٤',
	        '5': '٥',
	        '6': '٦',
	        '7': '٧',
	        '8': '٨',
	        '9': '٩',
	        '0': '٠'
	    }, numberMap = {
	        '١': '1',
	        '٢': '2',
	        '٣': '3',
	        '٤': '4',
	        '٥': '5',
	        '٦': '6',
	        '٧': '7',
	        '٨': '8',
	        '٩': '9',
	        '٠': '0'
	    };
	
	    var ar_sa = moment.defineLocale('ar-sa', {
	        months : 'يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),
	        monthsShort : 'يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),
	        weekdays : 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
	        weekdaysShort : 'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),
	        weekdaysMin : 'ح_ن_ث_ر_خ_ج_س'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd D MMMM YYYY HH:mm'
	        },
	        meridiemParse: /ص|م/,
	        isPM : function (input) {
	            return 'م' === input;
	        },
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 12) {
	                return 'ص';
	            } else {
	                return 'م';
	            }
	        },
	        calendar : {
	            sameDay: '[اليوم على الساعة] LT',
	            nextDay: '[غدا على الساعة] LT',
	            nextWeek: 'dddd [على الساعة] LT',
	            lastDay: '[أمس على الساعة] LT',
	            lastWeek: 'dddd [على الساعة] LT',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'في %s',
	            past : 'منذ %s',
	            s : 'ثوان',
	            m : 'دقيقة',
	            mm : '%d دقائق',
	            h : 'ساعة',
	            hh : '%d ساعات',
	            d : 'يوم',
	            dd : '%d أيام',
	            M : 'شهر',
	            MM : '%d أشهر',
	            y : 'سنة',
	            yy : '%d سنوات'
	        },
	        preparse: function (string) {
	            return string.replace(/[١٢٣٤٥٦٧٨٩٠]/g, function (match) {
	                return numberMap[match];
	            }).replace(/،/g, ',');
	        },
	        postformat: function (string) {
	            return string.replace(/\d/g, function (match) {
	                return symbolMap[match];
	            }).replace(/,/g, '،');
	        },
	        week : {
	            dow : 6, // Saturday is the first day of the week.
	            doy : 12  // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	
	    return ar_sa;
	
	}));

/***/ },
/* 17 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale  : Tunisian Arabic (ar-tn)
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(10)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var ar_tn = moment.defineLocale('ar-tn', {
	        months: 'جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),
	        monthsShort: 'جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),
	        weekdays: 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
	        weekdaysShort: 'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),
	        weekdaysMin: 'ح_ن_ث_ر_خ_ج_س'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd D MMMM YYYY HH:mm'
	        },
	        calendar: {
	            sameDay: '[اليوم على الساعة] LT',
	            nextDay: '[غدا على الساعة] LT',
	            nextWeek: 'dddd [على الساعة] LT',
	            lastDay: '[أمس على الساعة] LT',
	            lastWeek: 'dddd [على الساعة] LT',
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: 'في %s',
	            past: 'منذ %s',
	            s: 'ثوان',
	            m: 'دقيقة',
	            mm: '%d دقائق',
	            h: 'ساعة',
	            hh: '%d ساعات',
	            d: 'يوم',
	            dd: '%d أيام',
	            M: 'شهر',
	            MM: '%d أشهر',
	            y: 'سنة',
	            yy: '%d سنوات'
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4 // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    return ar_tn;
	
	}));

/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : azerbaijani (az)
	//! author : topchiyev : https://github.com/topchiyev
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(10)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var suffixes = {
	        1: '-inci',
	        5: '-inci',
	        8: '-inci',
	        70: '-inci',
	        80: '-inci',
	        2: '-nci',
	        7: '-nci',
	        20: '-nci',
	        50: '-nci',
	        3: '-üncü',
	        4: '-üncü',
	        100: '-üncü',
	        6: '-ncı',
	        9: '-uncu',
	        10: '-uncu',
	        30: '-uncu',
	        60: '-ıncı',
	        90: '-ıncı'
	    };
	
	    var az = moment.defineLocale('az', {
	        months : 'yanvar_fevral_mart_aprel_may_iyun_iyul_avqust_sentyabr_oktyabr_noyabr_dekabr'.split('_'),
	        monthsShort : 'yan_fev_mar_apr_may_iyn_iyl_avq_sen_okt_noy_dek'.split('_'),
	        weekdays : 'Bazar_Bazar ertəsi_Çərşənbə axşamı_Çərşənbə_Cümə axşamı_Cümə_Şənbə'.split('_'),
	        weekdaysShort : 'Baz_BzE_ÇAx_Çər_CAx_Cüm_Şən'.split('_'),
	        weekdaysMin : 'Bz_BE_ÇA_Çə_CA_Cü_Şə'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd, D MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay : '[bugün saat] LT',
	            nextDay : '[sabah saat] LT',
	            nextWeek : '[gələn həftə] dddd [saat] LT',
	            lastDay : '[dünən] LT',
	            lastWeek : '[keçən həftə] dddd [saat] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : '%s sonra',
	            past : '%s əvvəl',
	            s : 'birneçə saniyyə',
	            m : 'bir dəqiqə',
	            mm : '%d dəqiqə',
	            h : 'bir saat',
	            hh : '%d saat',
	            d : 'bir gün',
	            dd : '%d gün',
	            M : 'bir ay',
	            MM : '%d ay',
	            y : 'bir il',
	            yy : '%d il'
	        },
	        meridiemParse: /gecə|səhər|gündüz|axşam/,
	        isPM : function (input) {
	            return /^(gündüz|axşam)$/.test(input);
	        },
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 4) {
	                return 'gecə';
	            } else if (hour < 12) {
	                return 'səhər';
	            } else if (hour < 17) {
	                return 'gündüz';
	            } else {
	                return 'axşam';
	            }
	        },
	        ordinalParse: /\d{1,2}-(ıncı|inci|nci|üncü|ncı|uncu)/,
	        ordinal : function (number) {
	            if (number === 0) {  // special case for zero
	                return number + '-ıncı';
	            }
	            var a = number % 10,
	                b = number % 100 - a,
	                c = number >= 100 ? 100 : null;
	            return number + (suffixes[a] || suffixes[b] || suffixes[c]);
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	
	    return az;
	
	}));

/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : belarusian (be)
	//! author : Dmitry Demidov : https://github.com/demidov91
	//! author: Praleska: http://praleska.pro/
	//! Author : Menelion Elensúle : https://github.com/Oire
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(10)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    function plural(word, num) {
	        var forms = word.split('_');
	        return num % 10 === 1 && num % 100 !== 11 ? forms[0] : (num % 10 >= 2 && num % 10 <= 4 && (num % 100 < 10 || num % 100 >= 20) ? forms[1] : forms[2]);
	    }
	    function relativeTimeWithPlural(number, withoutSuffix, key) {
	        var format = {
	            'mm': withoutSuffix ? 'хвіліна_хвіліны_хвілін' : 'хвіліну_хвіліны_хвілін',
	            'hh': withoutSuffix ? 'гадзіна_гадзіны_гадзін' : 'гадзіну_гадзіны_гадзін',
	            'dd': 'дзень_дні_дзён',
	            'MM': 'месяц_месяцы_месяцаў',
	            'yy': 'год_гады_гадоў'
	        };
	        if (key === 'm') {
	            return withoutSuffix ? 'хвіліна' : 'хвіліну';
	        }
	        else if (key === 'h') {
	            return withoutSuffix ? 'гадзіна' : 'гадзіну';
	        }
	        else {
	            return number + ' ' + plural(format[key], +number);
	        }
	    }
	
	    var be = moment.defineLocale('be', {
	        months : {
	            format: 'студзеня_лютага_сакавіка_красавіка_траўня_чэрвеня_ліпеня_жніўня_верасня_кастрычніка_лістапада_снежня'.split('_'),
	            standalone: 'студзень_люты_сакавік_красавік_травень_чэрвень_ліпень_жнівень_верасень_кастрычнік_лістапад_снежань'.split('_')
	        },
	        monthsShort : 'студ_лют_сак_крас_трав_чэрв_ліп_жнів_вер_каст_ліст_снеж'.split('_'),
	        weekdays : {
	            format: 'нядзелю_панядзелак_аўторак_сераду_чацвер_пятніцу_суботу'.split('_'),
	            standalone: 'нядзеля_панядзелак_аўторак_серада_чацвер_пятніца_субота'.split('_'),
	            isFormat: /\[ ?[Вв] ?(?:мінулую|наступную)? ?\] ?dddd/
	        },
	        weekdaysShort : 'нд_пн_ат_ср_чц_пт_сб'.split('_'),
	        weekdaysMin : 'нд_пн_ат_ср_чц_пт_сб'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D MMMM YYYY г.',
	            LLL : 'D MMMM YYYY г., HH:mm',
	            LLLL : 'dddd, D MMMM YYYY г., HH:mm'
	        },
	        calendar : {
	            sameDay: '[Сёння ў] LT',
	            nextDay: '[Заўтра ў] LT',
	            lastDay: '[Учора ў] LT',
	            nextWeek: function () {
	                return '[У] dddd [ў] LT';
	            },
	            lastWeek: function () {
	                switch (this.day()) {
	                case 0:
	                case 3:
	                case 5:
	                case 6:
	                    return '[У мінулую] dddd [ў] LT';
	                case 1:
	                case 2:
	                case 4:
	                    return '[У мінулы] dddd [ў] LT';
	                }
	            },
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'праз %s',
	            past : '%s таму',
	            s : 'некалькі секунд',
	            m : relativeTimeWithPlural,
	            mm : relativeTimeWithPlural,
	            h : relativeTimeWithPlural,
	            hh : relativeTimeWithPlural,
	            d : 'дзень',
	            dd : relativeTimeWithPlural,
	            M : 'месяц',
	            MM : relativeTimeWithPlural,
	            y : 'год',
	            yy : relativeTimeWithPlural
	        },
	        meridiemParse: /ночы|раніцы|дня|вечара/,
	        isPM : function (input) {
	            return /^(дня|вечара)$/.test(input);
	        },
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 4) {
	                return 'ночы';
	            } else if (hour < 12) {
	                return 'раніцы';
	            } else if (hour < 17) {
	                return 'дня';
	            } else {
	                return 'вечара';
	            }
	        },
	        ordinalParse: /\d{1,2}-(і|ы|га)/,
	        ordinal: function (number, period) {
	            switch (period) {
	            case 'M':
	            case 'd':
	            case 'DDD':
	            case 'w':
	            case 'W':
	                return (number % 10 === 2 || number % 10 === 3) && (number % 100 !== 12 && number % 100 !== 13) ? number + '-і' : number + '-ы';
	            case 'D':
	                return number + '-га';
	            default:
	                return number;
	            }
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	
	    return be;
	
	}));

/***/ },
/* 20 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : bulgarian (bg)
	//! author : Krasen Borisov : https://github.com/kraz
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(10)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var bg = moment.defineLocale('bg', {
	        months : 'януари_февруари_март_април_май_юни_юли_август_септември_октомври_ноември_декември'.split('_'),
	        monthsShort : 'янр_фев_мар_апр_май_юни_юли_авг_сеп_окт_ное_дек'.split('_'),
	        weekdays : 'неделя_понеделник_вторник_сряда_четвъртък_петък_събота'.split('_'),
	        weekdaysShort : 'нед_пон_вто_сря_чет_пет_съб'.split('_'),
	        weekdaysMin : 'нд_пн_вт_ср_чт_пт_сб'.split('_'),
	        longDateFormat : {
	            LT : 'H:mm',
	            LTS : 'H:mm:ss',
	            L : 'D.MM.YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY H:mm',
	            LLLL : 'dddd, D MMMM YYYY H:mm'
	        },
	        calendar : {
	            sameDay : '[Днес в] LT',
	            nextDay : '[Утре в] LT',
	            nextWeek : 'dddd [в] LT',
	            lastDay : '[Вчера в] LT',
	            lastWeek : function () {
	                switch (this.day()) {
	                case 0:
	                case 3:
	                case 6:
	                    return '[В изминалата] dddd [в] LT';
	                case 1:
	                case 2:
	                case 4:
	                case 5:
	                    return '[В изминалия] dddd [в] LT';
	                }
	            },
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'след %s',
	            past : 'преди %s',
	            s : 'няколко секунди',
	            m : 'минута',
	            mm : '%d минути',
	            h : 'час',
	            hh : '%d часа',
	            d : 'ден',
	            dd : '%d дни',
	            M : 'месец',
	            MM : '%d месеца',
	            y : 'година',
	            yy : '%d години'
	        },
	        ordinalParse: /\d{1,2}-(ев|ен|ти|ви|ри|ми)/,
	        ordinal : function (number) {
	            var lastDigit = number % 10,
	                last2Digits = number % 100;
	            if (number === 0) {
	                return number + '-ев';
	            } else if (last2Digits === 0) {
	                return number + '-ен';
	            } else if (last2Digits > 10 && last2Digits < 20) {
	                return number + '-ти';
	            } else if (lastDigit === 1) {
	                return number + '-ви';
	            } else if (lastDigit === 2) {
	                return number + '-ри';
	            } else if (lastDigit === 7 || lastDigit === 8) {
	                return number + '-ми';
	            } else {
	                return number + '-ти';
	            }
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	
	    return bg;
	
	}));

/***/ },
/* 21 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Bengali (bn)
	//! author : Kaushik Gandhi : https://github.com/kaushikgandhi
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(10)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var symbolMap = {
	        '1': '১',
	        '2': '২',
	        '3': '৩',
	        '4': '৪',
	        '5': '৫',
	        '6': '৬',
	        '7': '৭',
	        '8': '৮',
	        '9': '৯',
	        '0': '০'
	    },
	    numberMap = {
	        '১': '1',
	        '২': '2',
	        '৩': '3',
	        '৪': '4',
	        '৫': '5',
	        '৬': '6',
	        '৭': '7',
	        '৮': '8',
	        '৯': '9',
	        '০': '0'
	    };
	
	    var bn = moment.defineLocale('bn', {
	        months : 'জানুয়ারী_ফেবুয়ারী_মার্চ_এপ্রিল_মে_জুন_জুলাই_অগাস্ট_সেপ্টেম্বর_অক্টোবর_নভেম্বর_ডিসেম্বর'.split('_'),
	        monthsShort : 'জানু_ফেব_মার্চ_এপর_মে_জুন_জুল_অগ_সেপ্ট_অক্টো_নভ_ডিসেম্'.split('_'),
	        weekdays : 'রবিবার_সোমবার_মঙ্গলবার_বুধবার_বৃহস্পত্তিবার_শুক্রবার_শনিবার'.split('_'),
	        weekdaysShort : 'রবি_সোম_মঙ্গল_বুধ_বৃহস্পত্তি_শুক্র_শনি'.split('_'),
	        weekdaysMin : 'রব_সম_মঙ্গ_বু_ব্রিহ_শু_শনি'.split('_'),
	        longDateFormat : {
	            LT : 'A h:mm সময়',
	            LTS : 'A h:mm:ss সময়',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY, A h:mm সময়',
	            LLLL : 'dddd, D MMMM YYYY, A h:mm সময়'
	        },
	        calendar : {
	            sameDay : '[আজ] LT',
	            nextDay : '[আগামীকাল] LT',
	            nextWeek : 'dddd, LT',
	            lastDay : '[গতকাল] LT',
	            lastWeek : '[গত] dddd, LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : '%s পরে',
	            past : '%s আগে',
	            s : 'কয়েক সেকেন্ড',
	            m : 'এক মিনিট',
	            mm : '%d মিনিট',
	            h : 'এক ঘন্টা',
	            hh : '%d ঘন্টা',
	            d : 'এক দিন',
	            dd : '%d দিন',
	            M : 'এক মাস',
	            MM : '%d মাস',
	            y : 'এক বছর',
	            yy : '%d বছর'
	        },
	        preparse: function (string) {
	            return string.replace(/[১২৩৪৫৬৭৮৯০]/g, function (match) {
	                return numberMap[match];
	            });
	        },
	        postformat: function (string) {
	            return string.replace(/\d/g, function (match) {
	                return symbolMap[match];
	            });
	        },
	        meridiemParse: /রাত|সকাল|দুপুর|বিকাল|রাত/,
	        meridiemHour : function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if ((meridiem === 'রাত' && hour >= 4) ||
	                    (meridiem === 'দুপুর' && hour < 5) ||
	                    meridiem === 'বিকাল') {
	                return hour + 12;
	            } else {
	                return hour;
	            }
	        },
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 4) {
	                return 'রাত';
	            } else if (hour < 10) {
	                return 'সকাল';
	            } else if (hour < 17) {
	                return 'দুপুর';
	            } else if (hour < 20) {
	                return 'বিকাল';
	            } else {
	                return 'রাত';
	            }
	        },
	        week : {
	            dow : 0, // Sunday is the first day of the week.
	            doy : 6  // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	
	    return bn;
	
	}));

/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : tibetan (bo)
	//! author : Thupten N. Chakrishar : https://github.com/vajradog
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(10)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var symbolMap = {
	        '1': '༡',
	        '2': '༢',
	        '3': '༣',
	        '4': '༤',
	        '5': '༥',
	        '6': '༦',
	        '7': '༧',
	        '8': '༨',
	        '9': '༩',
	        '0': '༠'
	    },
	    numberMap = {
	        '༡': '1',
	        '༢': '2',
	        '༣': '3',
	        '༤': '4',
	        '༥': '5',
	        '༦': '6',
	        '༧': '7',
	        '༨': '8',
	        '༩': '9',
	        '༠': '0'
	    };
	
	    var bo = moment.defineLocale('bo', {
	        months : 'ཟླ་བ་དང་པོ_ཟླ་བ་གཉིས་པ_ཟླ་བ་གསུམ་པ_ཟླ་བ་བཞི་པ_ཟླ་བ་ལྔ་པ_ཟླ་བ་དྲུག་པ_ཟླ་བ་བདུན་པ_ཟླ་བ་བརྒྱད་པ_ཟླ་བ་དགུ་པ_ཟླ་བ་བཅུ་པ_ཟླ་བ་བཅུ་གཅིག་པ_ཟླ་བ་བཅུ་གཉིས་པ'.split('_'),
	        monthsShort : 'ཟླ་བ་དང་པོ_ཟླ་བ་གཉིས་པ_ཟླ་བ་གསུམ་པ_ཟླ་བ་བཞི་པ_ཟླ་བ་ལྔ་པ_ཟླ་བ་དྲུག་པ_ཟླ་བ་བདུན་པ_ཟླ་བ་བརྒྱད་པ_ཟླ་བ་དགུ་པ_ཟླ་བ་བཅུ་པ_ཟླ་བ་བཅུ་གཅིག་པ_ཟླ་བ་བཅུ་གཉིས་པ'.split('_'),
	        weekdays : 'གཟའ་ཉི་མ་_གཟའ་ཟླ་བ་_གཟའ་མིག་དམར་_གཟའ་ལྷག་པ་_གཟའ་ཕུར་བུ_གཟའ་པ་སངས་_གཟའ་སྤེན་པ་'.split('_'),
	        weekdaysShort : 'ཉི་མ་_ཟླ་བ་_མིག་དམར་_ལྷག་པ་_ཕུར་བུ_པ་སངས་_སྤེན་པ་'.split('_'),
	        weekdaysMin : 'ཉི་མ་_ཟླ་བ་_མིག་དམར་_ལྷག་པ་_ཕུར་བུ_པ་སངས་_སྤེན་པ་'.split('_'),
	        longDateFormat : {
	            LT : 'A h:mm',
	            LTS : 'A h:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY, A h:mm',
	            LLLL : 'dddd, D MMMM YYYY, A h:mm'
	        },
	        calendar : {
	            sameDay : '[དི་རིང] LT',
	            nextDay : '[སང་ཉིན] LT',
	            nextWeek : '[བདུན་ཕྲག་རྗེས་མ], LT',
	            lastDay : '[ཁ་སང] LT',
	            lastWeek : '[བདུན་ཕྲག་མཐའ་མ] dddd, LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : '%s ལ་',
	            past : '%s སྔན་ལ',
	            s : 'ལམ་སང',
	            m : 'སྐར་མ་གཅིག',
	            mm : '%d སྐར་མ',
	            h : 'ཆུ་ཚོད་གཅིག',
	            hh : '%d ཆུ་ཚོད',
	            d : 'ཉིན་གཅིག',
	            dd : '%d ཉིན་',
	            M : 'ཟླ་བ་གཅིག',
	            MM : '%d ཟླ་བ',
	            y : 'ལོ་གཅིག',
	            yy : '%d ལོ'
	        },
	        preparse: function (string) {
	            return string.replace(/[༡༢༣༤༥༦༧༨༩༠]/g, function (match) {
	                return numberMap[match];
	            });
	        },
	        postformat: function (string) {
	            return string.replace(/\d/g, function (match) {
	                return symbolMap[match];
	            });
	        },
	        meridiemParse: /མཚན་མོ|ཞོགས་ཀས|ཉིན་གུང|དགོང་དག|མཚན་མོ/,
	        meridiemHour : function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if ((meridiem === 'མཚན་མོ' && hour >= 4) ||
	                    (meridiem === 'ཉིན་གུང' && hour < 5) ||
	                    meridiem === 'དགོང་དག') {
	                return hour + 12;
	            } else {
	                return hour;
	            }
	        },
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 4) {
	                return 'མཚན་མོ';
	            } else if (hour < 10) {
	                return 'ཞོགས་ཀས';
	            } else if (hour < 17) {
	                return 'ཉིན་གུང';
	            } else if (hour < 20) {
	                return 'དགོང་དག';
	            } else {
	                return 'མཚན་མོ';
	            }
	        },
	        week : {
	            dow : 0, // Sunday is the first day of the week.
	            doy : 6  // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	
	    return bo;
	
	}));

/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : breton (br)
	//! author : Jean-Baptiste Le Duigou : https://github.com/jbleduigou
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(10)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    function relativeTimeWithMutation(number, withoutSuffix, key) {
	        var format = {
	            'mm': 'munutenn',
	            'MM': 'miz',
	            'dd': 'devezh'
	        };
	        return number + ' ' + mutation(format[key], number);
	    }
	    function specialMutationForYears(number) {
	        switch (lastNumber(number)) {
	        case 1:
	        case 3:
	        case 4:
	        case 5:
	        case 9:
	            return number + ' bloaz';
	        default:
	            return number + ' vloaz';
	        }
	    }
	    function lastNumber(number) {
	        if (number > 9) {
	            return lastNumber(number % 10);
	        }
	        return number;
	    }
	    function mutation(text, number) {
	        if (number === 2) {
	            return softMutation(text);
	        }
	        return text;
	    }
	    function softMutation(text) {
	        var mutationTable = {
	            'm': 'v',
	            'b': 'v',
	            'd': 'z'
	        };
	        if (mutationTable[text.charAt(0)] === undefined) {
	            return text;
	        }
	        return mutationTable[text.charAt(0)] + text.substring(1);
	    }
	
	    var br = moment.defineLocale('br', {
	        months : 'Genver_C\'hwevrer_Meurzh_Ebrel_Mae_Mezheven_Gouere_Eost_Gwengolo_Here_Du_Kerzu'.split('_'),
	        monthsShort : 'Gen_C\'hwe_Meu_Ebr_Mae_Eve_Gou_Eos_Gwe_Her_Du_Ker'.split('_'),
	        weekdays : 'Sul_Lun_Meurzh_Merc\'her_Yaou_Gwener_Sadorn'.split('_'),
	        weekdaysShort : 'Sul_Lun_Meu_Mer_Yao_Gwe_Sad'.split('_'),
	        weekdaysMin : 'Su_Lu_Me_Mer_Ya_Gw_Sa'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat : {
	            LT : 'h[e]mm A',
	            LTS : 'h[e]mm:ss A',
	            L : 'DD/MM/YYYY',
	            LL : 'D [a viz] MMMM YYYY',
	            LLL : 'D [a viz] MMMM YYYY h[e]mm A',
	            LLLL : 'dddd, D [a viz] MMMM YYYY h[e]mm A'
	        },
	        calendar : {
	            sameDay : '[Hiziv da] LT',
	            nextDay : '[Warc\'hoazh da] LT',
	            nextWeek : 'dddd [da] LT',
	            lastDay : '[Dec\'h da] LT',
	            lastWeek : 'dddd [paset da] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'a-benn %s',
	            past : '%s \'zo',
	            s : 'un nebeud segondennoù',
	            m : 'ur vunutenn',
	            mm : relativeTimeWithMutation,
	            h : 'un eur',
	            hh : '%d eur',
	            d : 'un devezh',
	            dd : relativeTimeWithMutation,
	            M : 'ur miz',
	            MM : relativeTimeWithMutation,
	            y : 'ur bloaz',
	            yy : specialMutationForYears
	        },
	        ordinalParse: /\d{1,2}(añ|vet)/,
	        ordinal : function (number) {
	            var output = (number === 1) ? 'añ' : 'vet';
	            return number + output;
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    return br;
	
	}));

/***/ },
/* 24 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : bosnian (bs)
	//! author : Nedim Cholich : https://github.com/frontyard
	//! based on (hr) translation by Bojan Marković
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(10)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    function translate(number, withoutSuffix, key) {
	        var result = number + ' ';
	        switch (key) {
	        case 'm':
	            return withoutSuffix ? 'jedna minuta' : 'jedne minute';
	        case 'mm':
	            if (number === 1) {
	                result += 'minuta';
	            } else if (number === 2 || number === 3 || number === 4) {
	                result += 'minute';
	            } else {
	                result += 'minuta';
	            }
	            return result;
	        case 'h':
	            return withoutSuffix ? 'jedan sat' : 'jednog sata';
	        case 'hh':
	            if (number === 1) {
	                result += 'sat';
	            } else if (number === 2 || number === 3 || number === 4) {
	                result += 'sata';
	            } else {
	                result += 'sati';
	            }
	            return result;
	        case 'dd':
	            if (number === 1) {
	                result += 'dan';
	            } else {
	                result += 'dana';
	            }
	            return result;
	        case 'MM':
	            if (number === 1) {
	                result += 'mjesec';
	            } else if (number === 2 || number === 3 || number === 4) {
	                result += 'mjeseca';
	            } else {
	                result += 'mjeseci';
	            }
	            return result;
	        case 'yy':
	            if (number === 1) {
	                result += 'godina';
	            } else if (number === 2 || number === 3 || number === 4) {
	                result += 'godine';
	            } else {
	                result += 'godina';
	            }
	            return result;
	        }
	    }
	
	    var bs = moment.defineLocale('bs', {
	        months : 'januar_februar_mart_april_maj_juni_juli_august_septembar_oktobar_novembar_decembar'.split('_'),
	        monthsShort : 'jan._feb._mar._apr._maj._jun._jul._aug._sep._okt._nov._dec.'.split('_'),
	        monthsParseExact: true,
	        weekdays : 'nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota'.split('_'),
	        weekdaysShort : 'ned._pon._uto._sri._čet._pet._sub.'.split('_'),
	        weekdaysMin : 'ne_po_ut_sr_če_pe_su'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat : {
	            LT : 'H:mm',
	            LTS : 'H:mm:ss',
	            L : 'DD. MM. YYYY',
	            LL : 'D. MMMM YYYY',
	            LLL : 'D. MMMM YYYY H:mm',
	            LLLL : 'dddd, D. MMMM YYYY H:mm'
	        },
	        calendar : {
	            sameDay  : '[danas u] LT',
	            nextDay  : '[sutra u] LT',
	            nextWeek : function () {
	                switch (this.day()) {
	                case 0:
	                    return '[u] [nedjelju] [u] LT';
	                case 3:
	                    return '[u] [srijedu] [u] LT';
	                case 6:
	                    return '[u] [subotu] [u] LT';
	                case 1:
	                case 2:
	                case 4:
	                case 5:
	                    return '[u] dddd [u] LT';
	                }
	            },
	            lastDay  : '[jučer u] LT',
	            lastWeek : function () {
	                switch (this.day()) {
	                case 0:
	                case 3:
	                    return '[prošlu] dddd [u] LT';
	                case 6:
	                    return '[prošle] [subote] [u] LT';
	                case 1:
	                case 2:
	                case 4:
	                case 5:
	                    return '[prošli] dddd [u] LT';
	                }
	            },
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'za %s',
	            past   : 'prije %s',
	            s      : 'par sekundi',
	            m      : translate,
	            mm     : translate,
	            h      : translate,
	            hh     : translate,
	            d      : 'dan',
	            dd     : translate,
	            M      : 'mjesec',
	            MM     : translate,
	            y      : 'godinu',
	            yy     : translate
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	
	    return bs;
	
	}));

/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : catalan (ca)
	//! author : Juan G. Hurtado : https://github.com/juanghurtado
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(10)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var ca = moment.defineLocale('ca', {
	        months : 'gener_febrer_març_abril_maig_juny_juliol_agost_setembre_octubre_novembre_desembre'.split('_'),
	        monthsShort : 'gen._febr._mar._abr._mai._jun._jul._ag._set._oct._nov._des.'.split('_'),
	        monthsParseExact : true,
	        weekdays : 'diumenge_dilluns_dimarts_dimecres_dijous_divendres_dissabte'.split('_'),
	        weekdaysShort : 'dg._dl._dt._dc._dj._dv._ds.'.split('_'),
	        weekdaysMin : 'Dg_Dl_Dt_Dc_Dj_Dv_Ds'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat : {
	            LT : 'H:mm',
	            LTS : 'H:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY H:mm',
	            LLLL : 'dddd D MMMM YYYY H:mm'
	        },
	        calendar : {
	            sameDay : function () {
	                return '[avui a ' + ((this.hours() !== 1) ? 'les' : 'la') + '] LT';
	            },
	            nextDay : function () {
	                return '[demà a ' + ((this.hours() !== 1) ? 'les' : 'la') + '] LT';
	            },
	            nextWeek : function () {
	                return 'dddd [a ' + ((this.hours() !== 1) ? 'les' : 'la') + '] LT';
	            },
	            lastDay : function () {
	                return '[ahir a ' + ((this.hours() !== 1) ? 'les' : 'la') + '] LT';
	            },
	            lastWeek : function () {
	                return '[el] dddd [passat a ' + ((this.hours() !== 1) ? 'les' : 'la') + '] LT';
	            },
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'en %s',
	            past : 'fa %s',
	            s : 'uns segons',
	            m : 'un minut',
	            mm : '%d minuts',
	            h : 'una hora',
	            hh : '%d hores',
	            d : 'un dia',
	            dd : '%d dies',
	            M : 'un mes',
	            MM : '%d mesos',
	            y : 'un any',
	            yy : '%d anys'
	        },
	        ordinalParse: /\d{1,2}(r|n|t|è|a)/,
	        ordinal : function (number, period) {
	            var output = (number === 1) ? 'r' :
	                (number === 2) ? 'n' :
	                (number === 3) ? 'r' :
	                (number === 4) ? 't' : 'è';
	            if (period === 'w' || period === 'W') {
	                output = 'a';
	            }
	            return number + output;
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    return ca;
	
	}));

/***/ },
/* 26 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : czech (cs)
	//! author : petrbela : https://github.com/petrbela
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(10)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var months = 'leden_únor_březen_duben_květen_červen_červenec_srpen_září_říjen_listopad_prosinec'.split('_'),
	        monthsShort = 'led_úno_bře_dub_kvě_čvn_čvc_srp_zář_říj_lis_pro'.split('_');
	    function plural(n) {
	        return (n > 1) && (n < 5) && (~~(n / 10) !== 1);
	    }
	    function translate(number, withoutSuffix, key, isFuture) {
	        var result = number + ' ';
	        switch (key) {
	        case 's':  // a few seconds / in a few seconds / a few seconds ago
	            return (withoutSuffix || isFuture) ? 'pár sekund' : 'pár sekundami';
	        case 'm':  // a minute / in a minute / a minute ago
	            return withoutSuffix ? 'minuta' : (isFuture ? 'minutu' : 'minutou');
	        case 'mm': // 9 minutes / in 9 minutes / 9 minutes ago
	            if (withoutSuffix || isFuture) {
	                return result + (plural(number) ? 'minuty' : 'minut');
	            } else {
	                return result + 'minutami';
	            }
	            break;
	        case 'h':  // an hour / in an hour / an hour ago
	            return withoutSuffix ? 'hodina' : (isFuture ? 'hodinu' : 'hodinou');
	        case 'hh': // 9 hours / in 9 hours / 9 hours ago
	            if (withoutSuffix || isFuture) {
	                return result + (plural(number) ? 'hodiny' : 'hodin');
	            } else {
	                return result + 'hodinami';
	            }
	            break;
	        case 'd':  // a day / in a day / a day ago
	            return (withoutSuffix || isFuture) ? 'den' : 'dnem';
	        case 'dd': // 9 days / in 9 days / 9 days ago
	            if (withoutSuffix || isFuture) {
	                return result + (plural(number) ? 'dny' : 'dní');
	            } else {
	                return result + 'dny';
	            }
	            break;
	        case 'M':  // a month / in a month / a month ago
	            return (withoutSuffix || isFuture) ? 'měsíc' : 'měsícem';
	        case 'MM': // 9 months / in 9 months / 9 months ago
	            if (withoutSuffix || isFuture) {
	                return result + (plural(number) ? 'měsíce' : 'měsíců');
	            } else {
	                return result + 'měsíci';
	            }
	            break;
	        case 'y':  // a year / in a year / a year ago
	            return (withoutSuffix || isFuture) ? 'rok' : 'rokem';
	        case 'yy': // 9 years / in 9 years / 9 years ago
	            if (withoutSuffix || isFuture) {
	                return result + (plural(number) ? 'roky' : 'let');
	            } else {
	                return result + 'lety';
	            }
	            break;
	        }
	    }
	
	    var cs = moment.defineLocale('cs', {
	        months : months,
	        monthsShort : monthsShort,
	        monthsParse : (function (months, monthsShort) {
	            var i, _monthsParse = [];
	            for (i = 0; i < 12; i++) {
	                // use custom parser to solve problem with July (červenec)
	                _monthsParse[i] = new RegExp('^' + months[i] + '$|^' + monthsShort[i] + '$', 'i');
	            }
	            return _monthsParse;
	        }(months, monthsShort)),
	        shortMonthsParse : (function (monthsShort) {
	            var i, _shortMonthsParse = [];
	            for (i = 0; i < 12; i++) {
	                _shortMonthsParse[i] = new RegExp('^' + monthsShort[i] + '$', 'i');
	            }
	            return _shortMonthsParse;
	        }(monthsShort)),
	        longMonthsParse : (function (months) {
	            var i, _longMonthsParse = [];
	            for (i = 0; i < 12; i++) {
	                _longMonthsParse[i] = new RegExp('^' + months[i] + '$', 'i');
	            }
	            return _longMonthsParse;
	        }(months)),
	        weekdays : 'neděle_pondělí_úterý_středa_čtvrtek_pátek_sobota'.split('_'),
	        weekdaysShort : 'ne_po_út_st_čt_pá_so'.split('_'),
	        weekdaysMin : 'ne_po_út_st_čt_pá_so'.split('_'),
	        longDateFormat : {
	            LT: 'H:mm',
	            LTS : 'H:mm:ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D. MMMM YYYY',
	            LLL : 'D. MMMM YYYY H:mm',
	            LLLL : 'dddd D. MMMM YYYY H:mm'
	        },
	        calendar : {
	            sameDay: '[dnes v] LT',
	            nextDay: '[zítra v] LT',
	            nextWeek: function () {
	                switch (this.day()) {
	                case 0:
	                    return '[v neděli v] LT';
	                case 1:
	                case 2:
	                    return '[v] dddd [v] LT';
	                case 3:
	                    return '[ve středu v] LT';
	                case 4:
	                    return '[ve čtvrtek v] LT';
	                case 5:
	                    return '[v pátek v] LT';
	                case 6:
	                    return '[v sobotu v] LT';
	                }
	            },
	            lastDay: '[včera v] LT',
	            lastWeek: function () {
	                switch (this.day()) {
	                case 0:
	                    return '[minulou neděli v] LT';
	                case 1:
	                case 2:
	                    return '[minulé] dddd [v] LT';
	                case 3:
	                    return '[minulou středu v] LT';
	                case 4:
	                case 5:
	                    return '[minulý] dddd [v] LT';
	                case 6:
	                    return '[minulou sobotu v] LT';
	                }
	            },
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'za %s',
	            past : 'před %s',
	            s : translate,
	            m : translate,
	            mm : translate,
	            h : translate,
	            hh : translate,
	            d : translate,
	            dd : translate,
	            M : translate,
	            MM : translate,
	            y : translate,
	            yy : translate
	        },
	        ordinalParse : /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    return cs;
	
	}));

/***/ },
/* 27 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : chuvash (cv)
	//! author : Anatoly Mironov : https://github.com/mirontoli
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(10)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var cv = moment.defineLocale('cv', {
	        months : 'кӑрлач_нарӑс_пуш_ака_май_ҫӗртме_утӑ_ҫурла_авӑн_юпа_чӳк_раштав'.split('_'),
	        monthsShort : 'кӑр_нар_пуш_ака_май_ҫӗр_утӑ_ҫур_авн_юпа_чӳк_раш'.split('_'),
	        weekdays : 'вырсарникун_тунтикун_ытларикун_юнкун_кӗҫнерникун_эрнекун_шӑматкун'.split('_'),
	        weekdaysShort : 'выр_тун_ытл_юн_кӗҫ_эрн_шӑм'.split('_'),
	        weekdaysMin : 'вр_тн_ыт_юн_кҫ_эр_шм'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD-MM-YYYY',
	            LL : 'YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ]',
	            LLL : 'YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm',
	            LLLL : 'dddd, YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm'
	        },
	        calendar : {
	            sameDay: '[Паян] LT [сехетре]',
	            nextDay: '[Ыран] LT [сехетре]',
	            lastDay: '[Ӗнер] LT [сехетре]',
	            nextWeek: '[Ҫитес] dddd LT [сехетре]',
	            lastWeek: '[Иртнӗ] dddd LT [сехетре]',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : function (output) {
	                var affix = /сехет$/i.exec(output) ? 'рен' : /ҫул$/i.exec(output) ? 'тан' : 'ран';
	                return output + affix;
	            },
	            past : '%s каялла',
	            s : 'пӗр-ик ҫеккунт',
	            m : 'пӗр минут',
	            mm : '%d минут',
	            h : 'пӗр сехет',
	            hh : '%d сехет',
	            d : 'пӗр кун',
	            dd : '%d кун',
	            M : 'пӗр уйӑх',
	            MM : '%d уйӑх',
	            y : 'пӗр ҫул',
	            yy : '%d ҫул'
	        },
	        ordinalParse: /\d{1,2}-мӗш/,
	        ordinal : '%d-мӗш',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	
	    return cv;
	
	}));

/***/ },
/* 28 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Welsh (cy)
	//! author : Robert Allen
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(10)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var cy = moment.defineLocale('cy', {
	        months: 'Ionawr_Chwefror_Mawrth_Ebrill_Mai_Mehefin_Gorffennaf_Awst_Medi_Hydref_Tachwedd_Rhagfyr'.split('_'),
	        monthsShort: 'Ion_Chwe_Maw_Ebr_Mai_Meh_Gor_Aws_Med_Hyd_Tach_Rhag'.split('_'),
	        weekdays: 'Dydd Sul_Dydd Llun_Dydd Mawrth_Dydd Mercher_Dydd Iau_Dydd Gwener_Dydd Sadwrn'.split('_'),
	        weekdaysShort: 'Sul_Llun_Maw_Mer_Iau_Gwe_Sad'.split('_'),
	        weekdaysMin: 'Su_Ll_Ma_Me_Ia_Gw_Sa'.split('_'),
	        weekdaysParseExact : true,
	        // time formats are the same as en-gb
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd, D MMMM YYYY HH:mm'
	        },
	        calendar: {
	            sameDay: '[Heddiw am] LT',
	            nextDay: '[Yfory am] LT',
	            nextWeek: 'dddd [am] LT',
	            lastDay: '[Ddoe am] LT',
	            lastWeek: 'dddd [diwethaf am] LT',
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: 'mewn %s',
	            past: '%s yn ôl',
	            s: 'ychydig eiliadau',
	            m: 'munud',
	            mm: '%d munud',
	            h: 'awr',
	            hh: '%d awr',
	            d: 'diwrnod',
	            dd: '%d diwrnod',
	            M: 'mis',
	            MM: '%d mis',
	            y: 'blwyddyn',
	            yy: '%d flynedd'
	        },
	        ordinalParse: /\d{1,2}(fed|ain|af|il|ydd|ed|eg)/,
	        // traditional ordinal numbers above 31 are not commonly used in colloquial Welsh
	        ordinal: function (number) {
	            var b = number,
	                output = '',
	                lookup = [
	                    '', 'af', 'il', 'ydd', 'ydd', 'ed', 'ed', 'ed', 'fed', 'fed', 'fed', // 1af to 10fed
	                    'eg', 'fed', 'eg', 'eg', 'fed', 'eg', 'eg', 'fed', 'eg', 'fed' // 11eg to 20fed
	                ];
	            if (b > 20) {
	                if (b === 40 || b === 50 || b === 60 || b === 80 || b === 100) {
	                    output = 'fed'; // not 30ain, 70ain or 90ain
	                } else {
	                    output = 'ain';
	                }
	            } else if (b > 0) {
	                output = lookup[b];
	            }
	            return number + output;
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    return cy;
	
	}));

/***/ },
/* 29 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : danish (da)
	//! author : Ulrik Nielsen : https://github.com/mrbase
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(10)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var da = moment.defineLocale('da', {
	        months : 'januar_februar_marts_april_maj_juni_juli_august_september_oktober_november_december'.split('_'),
	        monthsShort : 'jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec'.split('_'),
	        weekdays : 'søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag'.split('_'),
	        weekdaysShort : 'søn_man_tir_ons_tor_fre_lør'.split('_'),
	        weekdaysMin : 'sø_ma_ti_on_to_fr_lø'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D. MMMM YYYY',
	            LLL : 'D. MMMM YYYY HH:mm',
	            LLLL : 'dddd [d.] D. MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay : '[I dag kl.] LT',
	            nextDay : '[I morgen kl.] LT',
	            nextWeek : 'dddd [kl.] LT',
	            lastDay : '[I går kl.] LT',
	            lastWeek : '[sidste] dddd [kl] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'om %s',
	            past : '%s siden',
	            s : 'få sekunder',
	            m : 'et minut',
	            mm : '%d minutter',
	            h : 'en time',
	            hh : '%d timer',
	            d : 'en dag',
	            dd : '%d dage',
	            M : 'en måned',
	            MM : '%d måneder',
	            y : 'et år',
	            yy : '%d år'
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    return da;
	
	}));

/***/ },
/* 30 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : german (de)
	//! author : lluchs : https://github.com/lluchs
	//! author: Menelion Elensúle: https://github.com/Oire
	//! author : Mikolaj Dadela : https://github.com/mik01aj
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(10)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    function processRelativeTime(number, withoutSuffix, key, isFuture) {
	        var format = {
	            'm': ['eine Minute', 'einer Minute'],
	            'h': ['eine Stunde', 'einer Stunde'],
	            'd': ['ein Tag', 'einem Tag'],
	            'dd': [number + ' Tage', number + ' Tagen'],
	            'M': ['ein Monat', 'einem Monat'],
	            'MM': [number + ' Monate', number + ' Monaten'],
	            'y': ['ein Jahr', 'einem Jahr'],
	            'yy': [number + ' Jahre', number + ' Jahren']
	        };
	        return withoutSuffix ? format[key][0] : format[key][1];
	    }
	
	    var de = moment.defineLocale('de', {
	        months : 'Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember'.split('_'),
	        monthsShort : 'Jan._Febr._Mrz._Apr._Mai_Jun._Jul._Aug._Sept._Okt._Nov._Dez.'.split('_'),
	        monthsParseExact : true,
	        weekdays : 'Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag'.split('_'),
	        weekdaysShort : 'So._Mo._Di._Mi._Do._Fr._Sa.'.split('_'),
	        weekdaysMin : 'So_Mo_Di_Mi_Do_Fr_Sa'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat : {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D. MMMM YYYY',
	            LLL : 'D. MMMM YYYY HH:mm',
	            LLLL : 'dddd, D. MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay: '[heute um] LT [Uhr]',
	            sameElse: 'L',
	            nextDay: '[morgen um] LT [Uhr]',
	            nextWeek: 'dddd [um] LT [Uhr]',
	            lastDay: '[gestern um] LT [Uhr]',
	            lastWeek: '[letzten] dddd [um] LT [Uhr]'
	        },
	        relativeTime : {
	            future : 'in %s',
	            past : 'vor %s',
	            s : 'ein paar Sekunden',
	            m : processRelativeTime,
	            mm : '%d Minuten',
	            h : processRelativeTime,
	            hh : '%d Stunden',
	            d : processRelativeTime,
	            dd : processRelativeTime,
	            M : processRelativeTime,
	            MM : processRelativeTime,
	            y : processRelativeTime,
	            yy : processRelativeTime
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    return de;
	
	}));

/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : austrian german (de-at)
	//! author : lluchs : https://github.com/lluchs
	//! author: Menelion Elensúle: https://github.com/Oire
	//! author : Martin Groller : https://github.com/MadMG
	//! author : Mikolaj Dadela : https://github.com/mik01aj
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(10)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    function processRelativeTime(number, withoutSuffix, key, isFuture) {
	        var format = {
	            'm': ['eine Minute', 'einer Minute'],
	            'h': ['eine Stunde', 'einer Stunde'],
	            'd': ['ein Tag', 'einem Tag'],
	            'dd': [number + ' Tage', number + ' Tagen'],
	            'M': ['ein Monat', 'einem Monat'],
	            'MM': [number + ' Monate', number + ' Monaten'],
	            'y': ['ein Jahr', 'einem Jahr'],
	            'yy': [number + ' Jahre', number + ' Jahren']
	        };
	        return withoutSuffix ? format[key][0] : format[key][1];
	    }
	
	    var de_at = moment.defineLocale('de-at', {
	        months : 'Jänner_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember'.split('_'),
	        monthsShort : 'Jän._Febr._Mrz._Apr._Mai_Jun._Jul._Aug._Sept._Okt._Nov._Dez.'.split('_'),
	        monthsParseExact : true,
	        weekdays : 'Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag'.split('_'),
	        weekdaysShort : 'So._Mo._Di._Mi._Do._Fr._Sa.'.split('_'),
	        weekdaysMin : 'So_Mo_Di_Mi_Do_Fr_Sa'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat : {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D. MMMM YYYY',
	            LLL : 'D. MMMM YYYY HH:mm',
	            LLLL : 'dddd, D. MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay: '[heute um] LT [Uhr]',
	            sameElse: 'L',
	            nextDay: '[morgen um] LT [Uhr]',
	            nextWeek: 'dddd [um] LT [Uhr]',
	            lastDay: '[gestern um] LT [Uhr]',
	            lastWeek: '[letzten] dddd [um] LT [Uhr]'
	        },
	        relativeTime : {
	            future : 'in %s',
	            past : 'vor %s',
	            s : 'ein paar Sekunden',
	            m : processRelativeTime,
	            mm : '%d Minuten',
	            h : processRelativeTime,
	            hh : '%d Stunden',
	            d : processRelativeTime,
	            dd : processRelativeTime,
	            M : processRelativeTime,
	            MM : processRelativeTime,
	            y : processRelativeTime,
	            yy : processRelativeTime
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    return de_at;
	
	}));

/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : dhivehi (dv)
	//! author : Jawish Hameed : https://github.com/jawish
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(10)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var months = [
	        'ޖެނުއަރީ',
	        'ފެބްރުއަރީ',
	        'މާރިޗު',
	        'އޭޕްރީލު',
	        'މޭ',
	        'ޖޫން',
	        'ޖުލައި',
	        'އޯގަސްޓު',
	        'ސެޕްޓެމްބަރު',
	        'އޮކްޓޯބަރު',
	        'ނޮވެމްބަރު',
	        'ޑިސެމްބަރު'
	    ], weekdays = [
	        'އާދިއްތަ',
	        'ހޯމަ',
	        'އަންގާރަ',
	        'ބުދަ',
	        'ބުރާސްފަތި',
	        'ހުކުރު',
	        'ހޮނިހިރު'
	    ];
	
	    var dv = moment.defineLocale('dv', {
	        months : months,
	        monthsShort : months,
	        weekdays : weekdays,
	        weekdaysShort : weekdays,
	        weekdaysMin : 'އާދި_ހޯމަ_އަން_ބުދަ_ބުރާ_ހުކު_ހޮނި'.split('_'),
	        longDateFormat : {
	
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'D/M/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd D MMMM YYYY HH:mm'
	        },
	        meridiemParse: /މކ|މފ/,
	        isPM : function (input) {
	            return 'މފ' === input;
	        },
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 12) {
	                return 'މކ';
	            } else {
	                return 'މފ';
	            }
	        },
	        calendar : {
	            sameDay : '[މިއަދު] LT',
	            nextDay : '[މާދަމާ] LT',
	            nextWeek : 'dddd LT',
	            lastDay : '[އިއްޔެ] LT',
	            lastWeek : '[ފާއިތުވި] dddd LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'ތެރޭގައި %s',
	            past : 'ކުރިން %s',
	            s : 'ސިކުންތުކޮޅެއް',
	            m : 'މިނިޓެއް',
	            mm : 'މިނިޓު %d',
	            h : 'ގަޑިއިރެއް',
	            hh : 'ގަޑިއިރު %d',
	            d : 'ދުވަހެއް',
	            dd : 'ދުވަސް %d',
	            M : 'މަހެއް',
	            MM : 'މަސް %d',
	            y : 'އަހަރެއް',
	            yy : 'އަހަރު %d'
	        },
	        preparse: function (string) {
	            return string.replace(/،/g, ',');
	        },
	        postformat: function (string) {
	            return string.replace(/,/g, '،');
	        },
	        week : {
	            dow : 7,  // Sunday is the first day of the week.
	            doy : 12  // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	
	    return dv;
	
	}));

/***/ },
/* 33 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : modern greek (el)
	//! author : Aggelos Karalias : https://github.com/mehiel
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(10)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	    function isFunction(input) {
	        return input instanceof Function || Object.prototype.toString.call(input) === '[object Function]';
	    }
	
	
	    var el = moment.defineLocale('el', {
	        monthsNominativeEl : 'Ιανουάριος_Φεβρουάριος_Μάρτιος_Απρίλιος_Μάιος_Ιούνιος_Ιούλιος_Αύγουστος_Σεπτέμβριος_Οκτώβριος_Νοέμβριος_Δεκέμβριος'.split('_'),
	        monthsGenitiveEl : 'Ιανουαρίου_Φεβρουαρίου_Μαρτίου_Απριλίου_Μαΐου_Ιουνίου_Ιουλίου_Αυγούστου_Σεπτεμβρίου_Οκτωβρίου_Νοεμβρίου_Δεκεμβρίου'.split('_'),
	        months : function (momentToFormat, format) {
	            if (/D/.test(format.substring(0, format.indexOf('MMMM')))) { // if there is a day number before 'MMMM'
	                return this._monthsGenitiveEl[momentToFormat.month()];
	            } else {
	                return this._monthsNominativeEl[momentToFormat.month()];
	            }
	        },
	        monthsShort : 'Ιαν_Φεβ_Μαρ_Απρ_Μαϊ_Ιουν_Ιουλ_Αυγ_Σεπ_Οκτ_Νοε_Δεκ'.split('_'),
	        weekdays : 'Κυριακή_Δευτέρα_Τρίτη_Τετάρτη_Πέμπτη_Παρασκευή_Σάββατο'.split('_'),
	        weekdaysShort : 'Κυρ_Δευ_Τρι_Τετ_Πεμ_Παρ_Σαβ'.split('_'),
	        weekdaysMin : 'Κυ_Δε_Τρ_Τε_Πε_Πα_Σα'.split('_'),
	        meridiem : function (hours, minutes, isLower) {
	            if (hours > 11) {
	                return isLower ? 'μμ' : 'ΜΜ';
	            } else {
	                return isLower ? 'πμ' : 'ΠΜ';
	            }
	        },
	        isPM : function (input) {
	            return ((input + '').toLowerCase()[0] === 'μ');
	        },
	        meridiemParse : /[ΠΜ]\.?Μ?\.?/i,
	        longDateFormat : {
	            LT : 'h:mm A',
	            LTS : 'h:mm:ss A',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY h:mm A',
	            LLLL : 'dddd, D MMMM YYYY h:mm A'
	        },
	        calendarEl : {
	            sameDay : '[Σήμερα {}] LT',
	            nextDay : '[Αύριο {}] LT',
	            nextWeek : 'dddd [{}] LT',
	            lastDay : '[Χθες {}] LT',
	            lastWeek : function () {
	                switch (this.day()) {
	                    case 6:
	                        return '[το προηγούμενο] dddd [{}] LT';
	                    default:
	                        return '[την προηγούμενη] dddd [{}] LT';
	                }
	            },
	            sameElse : 'L'
	        },
	        calendar : function (key, mom) {
	            var output = this._calendarEl[key],
	                hours = mom && mom.hours();
	            if (isFunction(output)) {
	                output = output.apply(mom);
	            }
	            return output.replace('{}', (hours % 12 === 1 ? 'στη' : 'στις'));
	        },
	        relativeTime : {
	            future : 'σε %s',
	            past : '%s πριν',
	            s : 'λίγα δευτερόλεπτα',
	            m : 'ένα λεπτό',
	            mm : '%d λεπτά',
	            h : 'μία ώρα',
	            hh : '%d ώρες',
	            d : 'μία μέρα',
	            dd : '%d μέρες',
	            M : 'ένας μήνας',
	            MM : '%d μήνες',
	            y : 'ένας χρόνος',
	            yy : '%d χρόνια'
	        },
	        ordinalParse: /\d{1,2}η/,
	        ordinal: '%dη',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4st is the first week of the year.
	        }
	    });
	
	    return el;
	
	}));

/***/ },
/* 34 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : australian english (en-au)
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(10)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var en_au = moment.defineLocale('en-au', {
	        months : 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
	        monthsShort : 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
	        weekdays : 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
	        weekdaysShort : 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
	        weekdaysMin : 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
	        longDateFormat : {
	            LT : 'h:mm A',
	            LTS : 'h:mm:ss A',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY h:mm A',
	            LLLL : 'dddd, D MMMM YYYY h:mm A'
	        },
	        calendar : {
	            sameDay : '[Today at] LT',
	            nextDay : '[Tomorrow at] LT',
	            nextWeek : 'dddd [at] LT',
	            lastDay : '[Yesterday at] LT',
	            lastWeek : '[Last] dddd [at] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'in %s',
	            past : '%s ago',
	            s : 'a few seconds',
	            m : 'a minute',
	            mm : '%d minutes',
	            h : 'an hour',
	            hh : '%d hours',
	            d : 'a day',
	            dd : '%d days',
	            M : 'a month',
	            MM : '%d months',
	            y : 'a year',
	            yy : '%d years'
	        },
	        ordinalParse: /\d{1,2}(st|nd|rd|th)/,
	        ordinal : function (number) {
	            var b = number % 10,
	                output = (~~(number % 100 / 10) === 1) ? 'th' :
	                (b === 1) ? 'st' :
	                (b === 2) ? 'nd' :
	                (b === 3) ? 'rd' : 'th';
	            return number + output;
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    return en_au;
	
	}));

/***/ },
/* 35 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : canadian english (en-ca)
	//! author : Jonathan Abourbih : https://github.com/jonbca
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(10)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var en_ca = moment.defineLocale('en-ca', {
	        months : 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
	        monthsShort : 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
	        weekdays : 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
	        weekdaysShort : 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
	        weekdaysMin : 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
	        longDateFormat : {
	            LT : 'h:mm A',
	            LTS : 'h:mm:ss A',
	            L : 'YYYY-MM-DD',
	            LL : 'MMMM D, YYYY',
	            LLL : 'MMMM D, YYYY h:mm A',
	            LLLL : 'dddd, MMMM D, YYYY h:mm A'
	        },
	        calendar : {
	            sameDay : '[Today at] LT',
	            nextDay : '[Tomorrow at] LT',
	            nextWeek : 'dddd [at] LT',
	            lastDay : '[Yesterday at] LT',
	            lastWeek : '[Last] dddd [at] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'in %s',
	            past : '%s ago',
	            s : 'a few seconds',
	            m : 'a minute',
	            mm : '%d minutes',
	            h : 'an hour',
	            hh : '%d hours',
	            d : 'a day',
	            dd : '%d days',
	            M : 'a month',
	            MM : '%d months',
	            y : 'a year',
	            yy : '%d years'
	        },
	        ordinalParse: /\d{1,2}(st|nd|rd|th)/,
	        ordinal : function (number) {
	            var b = number % 10,
	                output = (~~(number % 100 / 10) === 1) ? 'th' :
	                (b === 1) ? 'st' :
	                (b === 2) ? 'nd' :
	                (b === 3) ? 'rd' : 'th';
	            return number + output;
	        }
	    });
	
	    return en_ca;
	
	}));

/***/ },
/* 36 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : great britain english (en-gb)
	//! author : Chris Gedrim : https://github.com/chrisgedrim
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(10)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var en_gb = moment.defineLocale('en-gb', {
	        months : 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
	        monthsShort : 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
	        weekdays : 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
	        weekdaysShort : 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
	        weekdaysMin : 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd, D MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay : '[Today at] LT',
	            nextDay : '[Tomorrow at] LT',
	            nextWeek : 'dddd [at] LT',
	            lastDay : '[Yesterday at] LT',
	            lastWeek : '[Last] dddd [at] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'in %s',
	            past : '%s ago',
	            s : 'a few seconds',
	            m : 'a minute',
	            mm : '%d minutes',
	            h : 'an hour',
	            hh : '%d hours',
	            d : 'a day',
	            dd : '%d days',
	            M : 'a month',
	            MM : '%d months',
	            y : 'a year',
	            yy : '%d years'
	        },
	        ordinalParse: /\d{1,2}(st|nd|rd|th)/,
	        ordinal : function (number) {
	            var b = number % 10,
	                output = (~~(number % 100 / 10) === 1) ? 'th' :
	                (b === 1) ? 'st' :
	                (b === 2) ? 'nd' :
	                (b === 3) ? 'rd' : 'th';
	            return number + output;
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    return en_gb;
	
	}));

/***/ },
/* 37 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Irish english (en-ie)
	//! author : Chris Cartlidge : https://github.com/chriscartlidge
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(10)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var en_ie = moment.defineLocale('en-ie', {
	        months : 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
	        monthsShort : 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
	        weekdays : 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
	        weekdaysShort : 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
	        weekdaysMin : 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD-MM-YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd D MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay : '[Today at] LT',
	            nextDay : '[Tomorrow at] LT',
	            nextWeek : 'dddd [at] LT',
	            lastDay : '[Yesterday at] LT',
	            lastWeek : '[Last] dddd [at] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'in %s',
	            past : '%s ago',
	            s : 'a few seconds',
	            m : 'a minute',
	            mm : '%d minutes',
	            h : 'an hour',
	            hh : '%d hours',
	            d : 'a day',
	            dd : '%d days',
	            M : 'a month',
	            MM : '%d months',
	            y : 'a year',
	            yy : '%d years'
	        },
	        ordinalParse: /\d{1,2}(st|nd|rd|th)/,
	        ordinal : function (number) {
	            var b = number % 10,
	                output = (~~(number % 100 / 10) === 1) ? 'th' :
	                (b === 1) ? 'st' :
	                (b === 2) ? 'nd' :
	                (b === 3) ? 'rd' : 'th';
	            return number + output;
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    return en_ie;
	
	}));

/***/ },
/* 38 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : New Zealand english (en-nz)
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(10)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var en_nz = moment.defineLocale('en-nz', {
	        months : 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
	        monthsShort : 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
	        weekdays : 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
	        weekdaysShort : 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
	        weekdaysMin : 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
	        longDateFormat : {
	            LT : 'h:mm A',
	            LTS : 'h:mm:ss A',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY h:mm A',
	            LLLL : 'dddd, D MMMM YYYY h:mm A'
	        },
	        calendar : {
	            sameDay : '[Today at] LT',
	            nextDay : '[Tomorrow at] LT',
	            nextWeek : 'dddd [at] LT',
	            lastDay : '[Yesterday at] LT',
	            lastWeek : '[Last] dddd [at] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'in %s',
	            past : '%s ago',
	            s : 'a few seconds',
	            m : 'a minute',
	            mm : '%d minutes',
	            h : 'an hour',
	            hh : '%d hours',
	            d : 'a day',
	            dd : '%d days',
	            M : 'a month',
	            MM : '%d months',
	            y : 'a year',
	            yy : '%d years'
	        },
	        ordinalParse: /\d{1,2}(st|nd|rd|th)/,
	        ordinal : function (number) {
	            var b = number % 10,
	                output = (~~(number % 100 / 10) === 1) ? 'th' :
	                (b === 1) ? 'st' :
	                (b === 2) ? 'nd' :
	                (b === 3) ? 'rd' : 'th';
	            return number + output;
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    return en_nz;
	
	}));

/***/ },
/* 39 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : esperanto (eo)
	//! author : Colin Dean : https://github.com/colindean
	//! komento: Mi estas malcerta se mi korekte traktis akuzativojn en tiu traduko.
	//!          Se ne, bonvolu korekti kaj avizi min por ke mi povas lerni!
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(10)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var eo = moment.defineLocale('eo', {
	        months : 'januaro_februaro_marto_aprilo_majo_junio_julio_aŭgusto_septembro_oktobro_novembro_decembro'.split('_'),
	        monthsShort : 'jan_feb_mar_apr_maj_jun_jul_aŭg_sep_okt_nov_dec'.split('_'),
	        weekdays : 'Dimanĉo_Lundo_Mardo_Merkredo_Ĵaŭdo_Vendredo_Sabato'.split('_'),
	        weekdaysShort : 'Dim_Lun_Mard_Merk_Ĵaŭ_Ven_Sab'.split('_'),
	        weekdaysMin : 'Di_Lu_Ma_Me_Ĵa_Ve_Sa'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'YYYY-MM-DD',
	            LL : 'D[-an de] MMMM, YYYY',
	            LLL : 'D[-an de] MMMM, YYYY HH:mm',
	            LLLL : 'dddd, [la] D[-an de] MMMM, YYYY HH:mm'
	        },
	        meridiemParse: /[ap]\.t\.m/i,
	        isPM: function (input) {
	            return input.charAt(0).toLowerCase() === 'p';
	        },
	        meridiem : function (hours, minutes, isLower) {
	            if (hours > 11) {
	                return isLower ? 'p.t.m.' : 'P.T.M.';
	            } else {
	                return isLower ? 'a.t.m.' : 'A.T.M.';
	            }
	        },
	        calendar : {
	            sameDay : '[Hodiaŭ je] LT',
	            nextDay : '[Morgaŭ je] LT',
	            nextWeek : 'dddd [je] LT',
	            lastDay : '[Hieraŭ je] LT',
	            lastWeek : '[pasinta] dddd [je] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'je %s',
	            past : 'antaŭ %s',
	            s : 'sekundoj',
	            m : 'minuto',
	            mm : '%d minutoj',
	            h : 'horo',
	            hh : '%d horoj',
	            d : 'tago',//ne 'diurno', ĉar estas uzita por proksimumo
	            dd : '%d tagoj',
	            M : 'monato',
	            MM : '%d monatoj',
	            y : 'jaro',
	            yy : '%d jaroj'
	        },
	        ordinalParse: /\d{1,2}a/,
	        ordinal : '%da',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	
	    return eo;
	
	}));

/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : spanish (es)
	//! author : Julio Napurí : https://github.com/julionc
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(10)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var monthsShortDot = 'ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.'.split('_'),
	        monthsShort = 'ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic'.split('_');
	
	    var es = moment.defineLocale('es', {
	        months : 'enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre'.split('_'),
	        monthsShort : function (m, format) {
	            if (/-MMM-/.test(format)) {
	                return monthsShort[m.month()];
	            } else {
	                return monthsShortDot[m.month()];
	            }
	        },
	        monthsParseExact : true,
	        weekdays : 'domingo_lunes_martes_miércoles_jueves_viernes_sábado'.split('_'),
	        weekdaysShort : 'dom._lun._mar._mié._jue._vie._sáb.'.split('_'),
	        weekdaysMin : 'do_lu_ma_mi_ju_vi_sá'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat : {
	            LT : 'H:mm',
	            LTS : 'H:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D [de] MMMM [de] YYYY',
	            LLL : 'D [de] MMMM [de] YYYY H:mm',
	            LLLL : 'dddd, D [de] MMMM [de] YYYY H:mm'
	        },
	        calendar : {
	            sameDay : function () {
	                return '[hoy a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
	            },
	            nextDay : function () {
	                return '[mañana a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
	            },
	            nextWeek : function () {
	                return 'dddd [a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
	            },
	            lastDay : function () {
	                return '[ayer a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
	            },
	            lastWeek : function () {
	                return '[el] dddd [pasado a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
	            },
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'en %s',
	            past : 'hace %s',
	            s : 'unos segundos',
	            m : 'un minuto',
	            mm : '%d minutos',
	            h : 'una hora',
	            hh : '%d horas',
	            d : 'un día',
	            dd : '%d días',
	            M : 'un mes',
	            MM : '%d meses',
	            y : 'un año',
	            yy : '%d años'
	        },
	        ordinalParse : /\d{1,2}º/,
	        ordinal : '%dº',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    return es;
	
	}));

/***/ },
/* 41 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : estonian (et)
	//! author : Henry Kehlmann : https://github.com/madhenry
	//! improvements : Illimar Tambek : https://github.com/ragulka
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(10)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    function processRelativeTime(number, withoutSuffix, key, isFuture) {
	        var format = {
	            's' : ['mõne sekundi', 'mõni sekund', 'paar sekundit'],
	            'm' : ['ühe minuti', 'üks minut'],
	            'mm': [number + ' minuti', number + ' minutit'],
	            'h' : ['ühe tunni', 'tund aega', 'üks tund'],
	            'hh': [number + ' tunni', number + ' tundi'],
	            'd' : ['ühe päeva', 'üks päev'],
	            'M' : ['kuu aja', 'kuu aega', 'üks kuu'],
	            'MM': [number + ' kuu', number + ' kuud'],
	            'y' : ['ühe aasta', 'aasta', 'üks aasta'],
	            'yy': [number + ' aasta', number + ' aastat']
	        };
	        if (withoutSuffix) {
	            return format[key][2] ? format[key][2] : format[key][1];
	        }
	        return isFuture ? format[key][0] : format[key][1];
	    }
	
	    var et = moment.defineLocale('et', {
	        months        : 'jaanuar_veebruar_märts_aprill_mai_juuni_juuli_august_september_oktoober_november_detsember'.split('_'),
	        monthsShort   : 'jaan_veebr_märts_apr_mai_juuni_juuli_aug_sept_okt_nov_dets'.split('_'),
	        weekdays      : 'pühapäev_esmaspäev_teisipäev_kolmapäev_neljapäev_reede_laupäev'.split('_'),
	        weekdaysShort : 'P_E_T_K_N_R_L'.split('_'),
	        weekdaysMin   : 'P_E_T_K_N_R_L'.split('_'),
	        longDateFormat : {
	            LT   : 'H:mm',
	            LTS : 'H:mm:ss',
	            L    : 'DD.MM.YYYY',
	            LL   : 'D. MMMM YYYY',
	            LLL  : 'D. MMMM YYYY H:mm',
	            LLLL : 'dddd, D. MMMM YYYY H:mm'
	        },
	        calendar : {
	            sameDay  : '[Täna,] LT',
	            nextDay  : '[Homme,] LT',
	            nextWeek : '[Järgmine] dddd LT',
	            lastDay  : '[Eile,] LT',
	            lastWeek : '[Eelmine] dddd LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : '%s pärast',
	            past   : '%s tagasi',
	            s      : processRelativeTime,
	            m      : processRelativeTime,
	            mm     : processRelativeTime,
	            h      : processRelativeTime,
	            hh     : processRelativeTime,
	            d      : processRelativeTime,
	            dd     : '%d päeva',
	            M      : processRelativeTime,
	            MM     : processRelativeTime,
	            y      : processRelativeTime,
	            yy     : processRelativeTime
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    return et;
	
	}));

/***/ },
/* 42 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : euskara (eu)
	//! author : Eneko Illarramendi : https://github.com/eillarra
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(10)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var eu = moment.defineLocale('eu', {
	        months : 'urtarrila_otsaila_martxoa_apirila_maiatza_ekaina_uztaila_abuztua_iraila_urria_azaroa_abendua'.split('_'),
	        monthsShort : 'urt._ots._mar._api._mai._eka._uzt._abu._ira._urr._aza._abe.'.split('_'),
	        monthsParseExact : true,
	        weekdays : 'igandea_astelehena_asteartea_asteazkena_osteguna_ostirala_larunbata'.split('_'),
	        weekdaysShort : 'ig._al._ar._az._og._ol._lr.'.split('_'),
	        weekdaysMin : 'ig_al_ar_az_og_ol_lr'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'YYYY-MM-DD',
	            LL : 'YYYY[ko] MMMM[ren] D[a]',
	            LLL : 'YYYY[ko] MMMM[ren] D[a] HH:mm',
	            LLLL : 'dddd, YYYY[ko] MMMM[ren] D[a] HH:mm',
	            l : 'YYYY-M-D',
	            ll : 'YYYY[ko] MMM D[a]',
	            lll : 'YYYY[ko] MMM D[a] HH:mm',
	            llll : 'ddd, YYYY[ko] MMM D[a] HH:mm'
	        },
	        calendar : {
	            sameDay : '[gaur] LT[etan]',
	            nextDay : '[bihar] LT[etan]',
	            nextWeek : 'dddd LT[etan]',
	            lastDay : '[atzo] LT[etan]',
	            lastWeek : '[aurreko] dddd LT[etan]',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : '%s barru',
	            past : 'duela %s',
	            s : 'segundo batzuk',
	            m : 'minutu bat',
	            mm : '%d minutu',
	            h : 'ordu bat',
	            hh : '%d ordu',
	            d : 'egun bat',
	            dd : '%d egun',
	            M : 'hilabete bat',
	            MM : '%d hilabete',
	            y : 'urte bat',
	            yy : '%d urte'
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	
	    return eu;
	
	}));

/***/ },
/* 43 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Persian (fa)
	//! author : Ebrahim Byagowi : https://github.com/ebraminio
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(10)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var symbolMap = {
	        '1': '۱',
	        '2': '۲',
	        '3': '۳',
	        '4': '۴',
	        '5': '۵',
	        '6': '۶',
	        '7': '۷',
	        '8': '۸',
	        '9': '۹',
	        '0': '۰'
	    }, numberMap = {
	        '۱': '1',
	        '۲': '2',
	        '۳': '3',
	        '۴': '4',
	        '۵': '5',
	        '۶': '6',
	        '۷': '7',
	        '۸': '8',
	        '۹': '9',
	        '۰': '0'
	    };
	
	    var fa = moment.defineLocale('fa', {
	        months : 'ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر'.split('_'),
	        monthsShort : 'ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر'.split('_'),
	        weekdays : 'یک\u200cشنبه_دوشنبه_سه\u200cشنبه_چهارشنبه_پنج\u200cشنبه_جمعه_شنبه'.split('_'),
	        weekdaysShort : 'یک\u200cشنبه_دوشنبه_سه\u200cشنبه_چهارشنبه_پنج\u200cشنبه_جمعه_شنبه'.split('_'),
	        weekdaysMin : 'ی_د_س_چ_پ_ج_ش'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd, D MMMM YYYY HH:mm'
	        },
	        meridiemParse: /قبل از ظهر|بعد از ظهر/,
	        isPM: function (input) {
	            return /بعد از ظهر/.test(input);
	        },
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 12) {
	                return 'قبل از ظهر';
	            } else {
	                return 'بعد از ظهر';
	            }
	        },
	        calendar : {
	            sameDay : '[امروز ساعت] LT',
	            nextDay : '[فردا ساعت] LT',
	            nextWeek : 'dddd [ساعت] LT',
	            lastDay : '[دیروز ساعت] LT',
	            lastWeek : 'dddd [پیش] [ساعت] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'در %s',
	            past : '%s پیش',
	            s : 'چندین ثانیه',
	            m : 'یک دقیقه',
	            mm : '%d دقیقه',
	            h : 'یک ساعت',
	            hh : '%d ساعت',
	            d : 'یک روز',
	            dd : '%d روز',
	            M : 'یک ماه',
	            MM : '%d ماه',
	            y : 'یک سال',
	            yy : '%d سال'
	        },
	        preparse: function (string) {
	            return string.replace(/[۰-۹]/g, function (match) {
	                return numberMap[match];
	            }).replace(/،/g, ',');
	        },
	        postformat: function (string) {
	            return string.replace(/\d/g, function (match) {
	                return symbolMap[match];
	            }).replace(/,/g, '،');
	        },
	        ordinalParse: /\d{1,2}م/,
	        ordinal : '%dم',
	        week : {
	            dow : 6, // Saturday is the first day of the week.
	            doy : 12 // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	
	    return fa;
	
	}));

/***/ },
/* 44 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : finnish (fi)
	//! author : Tarmo Aidantausta : https://github.com/bleadof
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(10)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var numbersPast = 'nolla yksi kaksi kolme neljä viisi kuusi seitsemän kahdeksan yhdeksän'.split(' '),
	        numbersFuture = [
	            'nolla', 'yhden', 'kahden', 'kolmen', 'neljän', 'viiden', 'kuuden',
	            numbersPast[7], numbersPast[8], numbersPast[9]
	        ];
	    function translate(number, withoutSuffix, key, isFuture) {
	        var result = '';
	        switch (key) {
	        case 's':
	            return isFuture ? 'muutaman sekunnin' : 'muutama sekunti';
	        case 'm':
	            return isFuture ? 'minuutin' : 'minuutti';
	        case 'mm':
	            result = isFuture ? 'minuutin' : 'minuuttia';
	            break;
	        case 'h':
	            return isFuture ? 'tunnin' : 'tunti';
	        case 'hh':
	            result = isFuture ? 'tunnin' : 'tuntia';
	            break;
	        case 'd':
	            return isFuture ? 'päivän' : 'päivä';
	        case 'dd':
	            result = isFuture ? 'päivän' : 'päivää';
	            break;
	        case 'M':
	            return isFuture ? 'kuukauden' : 'kuukausi';
	        case 'MM':
	            result = isFuture ? 'kuukauden' : 'kuukautta';
	            break;
	        case 'y':
	            return isFuture ? 'vuoden' : 'vuosi';
	        case 'yy':
	            result = isFuture ? 'vuoden' : 'vuotta';
	            break;
	        }
	        result = verbalNumber(number, isFuture) + ' ' + result;
	        return result;
	    }
	    function verbalNumber(number, isFuture) {
	        return number < 10 ? (isFuture ? numbersFuture[number] : numbersPast[number]) : number;
	    }
	
	    var fi = moment.defineLocale('fi', {
	        months : 'tammikuu_helmikuu_maaliskuu_huhtikuu_toukokuu_kesäkuu_heinäkuu_elokuu_syyskuu_lokakuu_marraskuu_joulukuu'.split('_'),
	        monthsShort : 'tammi_helmi_maalis_huhti_touko_kesä_heinä_elo_syys_loka_marras_joulu'.split('_'),
	        weekdays : 'sunnuntai_maanantai_tiistai_keskiviikko_torstai_perjantai_lauantai'.split('_'),
	        weekdaysShort : 'su_ma_ti_ke_to_pe_la'.split('_'),
	        weekdaysMin : 'su_ma_ti_ke_to_pe_la'.split('_'),
	        longDateFormat : {
	            LT : 'HH.mm',
	            LTS : 'HH.mm.ss',
	            L : 'DD.MM.YYYY',
	            LL : 'Do MMMM[ta] YYYY',
	            LLL : 'Do MMMM[ta] YYYY, [klo] HH.mm',
	            LLLL : 'dddd, Do MMMM[ta] YYYY, [klo] HH.mm',
	            l : 'D.M.YYYY',
	            ll : 'Do MMM YYYY',
	            lll : 'Do MMM YYYY, [klo] HH.mm',
	            llll : 'ddd, Do MMM YYYY, [klo] HH.mm'
	        },
	        calendar : {
	            sameDay : '[tänään] [klo] LT',
	            nextDay : '[huomenna] [klo] LT',
	            nextWeek : 'dddd [klo] LT',
	            lastDay : '[eilen] [klo] LT',
	            lastWeek : '[viime] dddd[na] [klo] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : '%s päästä',
	            past : '%s sitten',
	            s : translate,
	            m : translate,
	            mm : translate,
	            h : translate,
	            hh : translate,
	            d : translate,
	            dd : translate,
	            M : translate,
	            MM : translate,
	            y : translate,
	            yy : translate
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    return fi;
	
	}));

/***/ },
/* 45 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : faroese (fo)
	//! author : Ragnar Johannesen : https://github.com/ragnar123
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(10)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var fo = moment.defineLocale('fo', {
	        months : 'januar_februar_mars_apríl_mai_juni_juli_august_september_oktober_november_desember'.split('_'),
	        monthsShort : 'jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des'.split('_'),
	        weekdays : 'sunnudagur_mánadagur_týsdagur_mikudagur_hósdagur_fríggjadagur_leygardagur'.split('_'),
	        weekdaysShort : 'sun_mán_týs_mik_hós_frí_ley'.split('_'),
	        weekdaysMin : 'su_má_tý_mi_hó_fr_le'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd D. MMMM, YYYY HH:mm'
	        },
	        calendar : {
	            sameDay : '[Í dag kl.] LT',
	            nextDay : '[Í morgin kl.] LT',
	            nextWeek : 'dddd [kl.] LT',
	            lastDay : '[Í gjár kl.] LT',
	            lastWeek : '[síðstu] dddd [kl] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'um %s',
	            past : '%s síðani',
	            s : 'fá sekund',
	            m : 'ein minutt',
	            mm : '%d minuttir',
	            h : 'ein tími',
	            hh : '%d tímar',
	            d : 'ein dagur',
	            dd : '%d dagar',
	            M : 'ein mánaði',
	            MM : '%d mánaðir',
	            y : 'eitt ár',
	            yy : '%d ár'
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    return fo;
	
	}));

/***/ },
/* 46 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : french (fr)
	//! author : John Fischer : https://github.com/jfroffice
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(10)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var fr = moment.defineLocale('fr', {
	        months : 'janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre'.split('_'),
	        monthsShort : 'janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.'.split('_'),
	        monthsParseExact : true,
	        weekdays : 'dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi'.split('_'),
	        weekdaysShort : 'dim._lun._mar._mer._jeu._ven._sam.'.split('_'),
	        weekdaysMin : 'Di_Lu_Ma_Me_Je_Ve_Sa'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd D MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay: '[Aujourd\'hui à] LT',
	            nextDay: '[Demain à] LT',
	            nextWeek: 'dddd [à] LT',
	            lastDay: '[Hier à] LT',
	            lastWeek: 'dddd [dernier à] LT',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'dans %s',
	            past : 'il y a %s',
	            s : 'quelques secondes',
	            m : 'une minute',
	            mm : '%d minutes',
	            h : 'une heure',
	            hh : '%d heures',
	            d : 'un jour',
	            dd : '%d jours',
	            M : 'un mois',
	            MM : '%d mois',
	            y : 'un an',
	            yy : '%d ans'
	        },
	        ordinalParse: /\d{1,2}(er|)/,
	        ordinal : function (number) {
	            return number + (number === 1 ? 'er' : '');
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    return fr;
	
	}));

/***/ },
/* 47 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : canadian french (fr-ca)
	//! author : Jonathan Abourbih : https://github.com/jonbca
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(10)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var fr_ca = moment.defineLocale('fr-ca', {
	        months : 'janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre'.split('_'),
	        monthsShort : 'janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.'.split('_'),
	        monthsParseExact : true,
	        weekdays : 'dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi'.split('_'),
	        weekdaysShort : 'dim._lun._mar._mer._jeu._ven._sam.'.split('_'),
	        weekdaysMin : 'Di_Lu_Ma_Me_Je_Ve_Sa'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'YYYY-MM-DD',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd D MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay: '[Aujourd\'hui à] LT',
	            nextDay: '[Demain à] LT',
	            nextWeek: 'dddd [à] LT',
	            lastDay: '[Hier à] LT',
	            lastWeek: 'dddd [dernier à] LT',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'dans %s',
	            past : 'il y a %s',
	            s : 'quelques secondes',
	            m : 'une minute',
	            mm : '%d minutes',
	            h : 'une heure',
	            hh : '%d heures',
	            d : 'un jour',
	            dd : '%d jours',
	            M : 'un mois',
	            MM : '%d mois',
	            y : 'un an',
	            yy : '%d ans'
	        },
	        ordinalParse: /\d{1,2}(er|e)/,
	        ordinal : function (number) {
	            return number + (number === 1 ? 'er' : 'e');
	        }
	    });
	
	    return fr_ca;
	
	}));

/***/ },
/* 48 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : swiss french (fr)
	//! author : Gaspard Bucher : https://github.com/gaspard
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(10)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var fr_ch = moment.defineLocale('fr-ch', {
	        months : 'janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre'.split('_'),
	        monthsShort : 'janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.'.split('_'),
	        monthsParseExact : true,
	        weekdays : 'dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi'.split('_'),
	        weekdaysShort : 'dim._lun._mar._mer._jeu._ven._sam.'.split('_'),
	        weekdaysMin : 'Di_Lu_Ma_Me_Je_Ve_Sa'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd D MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay: '[Aujourd\'hui à] LT',
	            nextDay: '[Demain à] LT',
	            nextWeek: 'dddd [à] LT',
	            lastDay: '[Hier à] LT',
	            lastWeek: 'dddd [dernier à] LT',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'dans %s',
	            past : 'il y a %s',
	            s : 'quelques secondes',
	            m : 'une minute',
	            mm : '%d minutes',
	            h : 'une heure',
	            hh : '%d heures',
	            d : 'un jour',
	            dd : '%d jours',
	            M : 'un mois',
	            MM : '%d mois',
	            y : 'un an',
	            yy : '%d ans'
	        },
	        ordinalParse: /\d{1,2}(er|e)/,
	        ordinal : function (number) {
	            return number + (number === 1 ? 'er' : 'e');
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    return fr_ch;
	
	}));

/***/ },
/* 49 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : frisian (fy)
	//! author : Robin van der Vliet : https://github.com/robin0van0der0v
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(10)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var monthsShortWithDots = 'jan._feb._mrt._apr._mai_jun._jul._aug._sep._okt._nov._des.'.split('_'),
	        monthsShortWithoutDots = 'jan_feb_mrt_apr_mai_jun_jul_aug_sep_okt_nov_des'.split('_');
	
	    var fy = moment.defineLocale('fy', {
	        months : 'jannewaris_febrewaris_maart_april_maaie_juny_july_augustus_septimber_oktober_novimber_desimber'.split('_'),
	        monthsShort : function (m, format) {
	            if (/-MMM-/.test(format)) {
	                return monthsShortWithoutDots[m.month()];
	            } else {
	                return monthsShortWithDots[m.month()];
	            }
	        },
	        monthsParseExact : true,
	        weekdays : 'snein_moandei_tiisdei_woansdei_tongersdei_freed_sneon'.split('_'),
	        weekdaysShort : 'si._mo._ti._wo._to._fr._so.'.split('_'),
	        weekdaysMin : 'Si_Mo_Ti_Wo_To_Fr_So'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD-MM-YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd D MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay: '[hjoed om] LT',
	            nextDay: '[moarn om] LT',
	            nextWeek: 'dddd [om] LT',
	            lastDay: '[juster om] LT',
	            lastWeek: '[ôfrûne] dddd [om] LT',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'oer %s',
	            past : '%s lyn',
	            s : 'in pear sekonden',
	            m : 'ien minút',
	            mm : '%d minuten',
	            h : 'ien oere',
	            hh : '%d oeren',
	            d : 'ien dei',
	            dd : '%d dagen',
	            M : 'ien moanne',
	            MM : '%d moannen',
	            y : 'ien jier',
	            yy : '%d jierren'
	        },
	        ordinalParse: /\d{1,2}(ste|de)/,
	        ordinal : function (number) {
	            return number + ((number === 1 || number === 8 || number >= 20) ? 'ste' : 'de');
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    return fy;
	
	}));

/***/ },
/* 50 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : great britain scottish gealic (gd)
	//! author : Jon Ashdown : https://github.com/jonashdown
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(10)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var months = [
	        'Am Faoilleach', 'An Gearran', 'Am Màrt', 'An Giblean', 'An Cèitean', 'An t-Ògmhios', 'An t-Iuchar', 'An Lùnastal', 'An t-Sultain', 'An Dàmhair', 'An t-Samhain', 'An Dùbhlachd'
	    ];
	
	    var monthsShort = ['Faoi', 'Gear', 'Màrt', 'Gibl', 'Cèit', 'Ògmh', 'Iuch', 'Lùn', 'Sult', 'Dàmh', 'Samh', 'Dùbh'];
	
	    var weekdays = ['Didòmhnaich', 'Diluain', 'Dimàirt', 'Diciadain', 'Diardaoin', 'Dihaoine', 'Disathairne'];
	
	    var weekdaysShort = ['Did', 'Dil', 'Dim', 'Dic', 'Dia', 'Dih', 'Dis'];
	
	    var weekdaysMin = ['Dò', 'Lu', 'Mà', 'Ci', 'Ar', 'Ha', 'Sa'];
	
	    var gd = moment.defineLocale('gd', {
	        months : months,
	        monthsShort : monthsShort,
	        monthsParseExact : true,
	        weekdays : weekdays,
	        weekdaysShort : weekdaysShort,
	        weekdaysMin : weekdaysMin,
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd, D MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay : '[An-diugh aig] LT',
	            nextDay : '[A-màireach aig] LT',
	            nextWeek : 'dddd [aig] LT',
	            lastDay : '[An-dè aig] LT',
	            lastWeek : 'dddd [seo chaidh] [aig] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'ann an %s',
	            past : 'bho chionn %s',
	            s : 'beagan diogan',
	            m : 'mionaid',
	            mm : '%d mionaidean',
	            h : 'uair',
	            hh : '%d uairean',
	            d : 'latha',
	            dd : '%d latha',
	            M : 'mìos',
	            MM : '%d mìosan',
	            y : 'bliadhna',
	            yy : '%d bliadhna'
	        },
	        ordinalParse : /\d{1,2}(d|na|mh)/,
	        ordinal : function (number) {
	            var output = number === 1 ? 'd' : number % 10 === 2 ? 'na' : 'mh';
	            return number + output;
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    return gd;
	
	}));

/***/ },
/* 51 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : galician (gl)
	//! author : Juan G. Hurtado : https://github.com/juanghurtado
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(10)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var gl = moment.defineLocale('gl', {
	        months : 'Xaneiro_Febreiro_Marzo_Abril_Maio_Xuño_Xullo_Agosto_Setembro_Outubro_Novembro_Decembro'.split('_'),
	        monthsShort : 'Xan._Feb._Mar._Abr._Mai._Xuñ._Xul._Ago._Set._Out._Nov._Dec.'.split('_'),
	        monthsParseExact: true,
	        weekdays : 'Domingo_Luns_Martes_Mércores_Xoves_Venres_Sábado'.split('_'),
	        weekdaysShort : 'Dom._Lun._Mar._Mér._Xov._Ven._Sáb.'.split('_'),
	        weekdaysMin : 'Do_Lu_Ma_Mé_Xo_Ve_Sá'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat : {
	            LT : 'H:mm',
	            LTS : 'H:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY H:mm',
	            LLLL : 'dddd D MMMM YYYY H:mm'
	        },
	        calendar : {
	            sameDay : function () {
	                return '[hoxe ' + ((this.hours() !== 1) ? 'ás' : 'á') + '] LT';
	            },
	            nextDay : function () {
	                return '[mañá ' + ((this.hours() !== 1) ? 'ás' : 'á') + '] LT';
	            },
	            nextWeek : function () {
	                return 'dddd [' + ((this.hours() !== 1) ? 'ás' : 'a') + '] LT';
	            },
	            lastDay : function () {
	                return '[onte ' + ((this.hours() !== 1) ? 'á' : 'a') + '] LT';
	            },
	            lastWeek : function () {
	                return '[o] dddd [pasado ' + ((this.hours() !== 1) ? 'ás' : 'a') + '] LT';
	            },
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : function (str) {
	                if (str === 'uns segundos') {
	                    return 'nuns segundos';
	                }
	                return 'en ' + str;
	            },
	            past : 'hai %s',
	            s : 'uns segundos',
	            m : 'un minuto',
	            mm : '%d minutos',
	            h : 'unha hora',
	            hh : '%d horas',
	            d : 'un día',
	            dd : '%d días',
	            M : 'un mes',
	            MM : '%d meses',
	            y : 'un ano',
	            yy : '%d anos'
	        },
	        ordinalParse : /\d{1,2}º/,
	        ordinal : '%dº',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	
	    return gl;
	
	}));

/***/ },
/* 52 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Hebrew (he)
	//! author : Tomer Cohen : https://github.com/tomer
	//! author : Moshe Simantov : https://github.com/DevelopmentIL
	//! author : Tal Ater : https://github.com/TalAter
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(10)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var he = moment.defineLocale('he', {
	        months : 'ינואר_פברואר_מרץ_אפריל_מאי_יוני_יולי_אוגוסט_ספטמבר_אוקטובר_נובמבר_דצמבר'.split('_'),
	        monthsShort : 'ינו׳_פבר׳_מרץ_אפר׳_מאי_יוני_יולי_אוג׳_ספט׳_אוק׳_נוב׳_דצמ׳'.split('_'),
	        weekdays : 'ראשון_שני_שלישי_רביעי_חמישי_שישי_שבת'.split('_'),
	        weekdaysShort : 'א׳_ב׳_ג׳_ד׳_ה׳_ו׳_ש׳'.split('_'),
	        weekdaysMin : 'א_ב_ג_ד_ה_ו_ש'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D [ב]MMMM YYYY',
	            LLL : 'D [ב]MMMM YYYY HH:mm',
	            LLLL : 'dddd, D [ב]MMMM YYYY HH:mm',
	            l : 'D/M/YYYY',
	            ll : 'D MMM YYYY',
	            lll : 'D MMM YYYY HH:mm',
	            llll : 'ddd, D MMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay : '[היום ב־]LT',
	            nextDay : '[מחר ב־]LT',
	            nextWeek : 'dddd [בשעה] LT',
	            lastDay : '[אתמול ב־]LT',
	            lastWeek : '[ביום] dddd [האחרון בשעה] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'בעוד %s',
	            past : 'לפני %s',
	            s : 'מספר שניות',
	            m : 'דקה',
	            mm : '%d דקות',
	            h : 'שעה',
	            hh : function (number) {
	                if (number === 2) {
	                    return 'שעתיים';
	                }
	                return number + ' שעות';
	            },
	            d : 'יום',
	            dd : function (number) {
	                if (number === 2) {
	                    return 'יומיים';
	                }
	                return number + ' ימים';
	            },
	            M : 'חודש',
	            MM : function (number) {
	                if (number === 2) {
	                    return 'חודשיים';
	                }
	                return number + ' חודשים';
	            },
	            y : 'שנה',
	            yy : function (number) {
	                if (number === 2) {
	                    return 'שנתיים';
	                } else if (number % 10 === 0 && number !== 10) {
	                    return number + ' שנה';
	                }
	                return number + ' שנים';
	            }
	        },
	        meridiemParse: /אחה"צ|לפנה"צ|אחרי הצהריים|לפני הצהריים|לפנות בוקר|בבוקר|בערב/i,
	        isPM : function (input) {
	            return /^(אחה"צ|אחרי הצהריים|בערב)$/.test(input);
	        },
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 5) {
	                return 'לפנות בוקר';
	            } else if (hour < 10) {
	                return 'בבוקר';
	            } else if (hour < 12) {
	                return isLower ? 'לפנה"צ' : 'לפני הצהריים';
	            } else if (hour < 18) {
	                return isLower ? 'אחה"צ' : 'אחרי הצהריים';
	            } else {
	                return 'בערב';
	            }
	        }
	    });
	
	    return he;
	
	}));

/***/ },
/* 53 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : hindi (hi)
	//! author : Mayank Singhal : https://github.com/mayanksinghal
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(10)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var symbolMap = {
	        '1': '१',
	        '2': '२',
	        '3': '३',
	        '4': '४',
	        '5': '५',
	        '6': '६',
	        '7': '७',
	        '8': '८',
	        '9': '९',
	        '0': '०'
	    },
	    numberMap = {
	        '१': '1',
	        '२': '2',
	        '३': '3',
	        '४': '4',
	        '५': '5',
	        '६': '6',
	        '७': '7',
	        '८': '8',
	        '९': '9',
	        '०': '0'
	    };
	
	    var hi = moment.defineLocale('hi', {
	        months : 'जनवरी_फ़रवरी_मार्च_अप्रैल_मई_जून_जुलाई_अगस्त_सितम्बर_अक्टूबर_नवम्बर_दिसम्बर'.split('_'),
	        monthsShort : 'जन._फ़र._मार्च_अप्रै._मई_जून_जुल._अग._सित._अक्टू._नव._दिस.'.split('_'),
	        monthsParseExact: true,
	        weekdays : 'रविवार_सोमवार_मंगलवार_बुधवार_गुरूवार_शुक्रवार_शनिवार'.split('_'),
	        weekdaysShort : 'रवि_सोम_मंगल_बुध_गुरू_शुक्र_शनि'.split('_'),
	        weekdaysMin : 'र_सो_मं_बु_गु_शु_श'.split('_'),
	        longDateFormat : {
	            LT : 'A h:mm बजे',
	            LTS : 'A h:mm:ss बजे',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY, A h:mm बजे',
	            LLLL : 'dddd, D MMMM YYYY, A h:mm बजे'
	        },
	        calendar : {
	            sameDay : '[आज] LT',
	            nextDay : '[कल] LT',
	            nextWeek : 'dddd, LT',
	            lastDay : '[कल] LT',
	            lastWeek : '[पिछले] dddd, LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : '%s में',
	            past : '%s पहले',
	            s : 'कुछ ही क्षण',
	            m : 'एक मिनट',
	            mm : '%d मिनट',
	            h : 'एक घंटा',
	            hh : '%d घंटे',
	            d : 'एक दिन',
	            dd : '%d दिन',
	            M : 'एक महीने',
	            MM : '%d महीने',
	            y : 'एक वर्ष',
	            yy : '%d वर्ष'
	        },
	        preparse: function (string) {
	            return string.replace(/[१२३४५६७८९०]/g, function (match) {
	                return numberMap[match];
	            });
	        },
	        postformat: function (string) {
	            return string.replace(/\d/g, function (match) {
	                return symbolMap[match];
	            });
	        },
	        // Hindi notation for meridiems are quite fuzzy in practice. While there exists
	        // a rigid notion of a 'Pahar' it is not used as rigidly in modern Hindi.
	        meridiemParse: /रात|सुबह|दोपहर|शाम/,
	        meridiemHour : function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === 'रात') {
	                return hour < 4 ? hour : hour + 12;
	            } else if (meridiem === 'सुबह') {
	                return hour;
	            } else if (meridiem === 'दोपहर') {
	                return hour >= 10 ? hour : hour + 12;
	            } else if (meridiem === 'शाम') {
	                return hour + 12;
	            }
	        },
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 4) {
	                return 'रात';
	            } else if (hour < 10) {
	                return 'सुबह';
	            } else if (hour < 17) {
	                return 'दोपहर';
	            } else if (hour < 20) {
	                return 'शाम';
	            } else {
	                return 'रात';
	            }
	        },
	        week : {
	            dow : 0, // Sunday is the first day of the week.
	            doy : 6  // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	
	    return hi;
	
	}));

/***/ },
/* 54 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : hrvatski (hr)
	//! author : Bojan Marković : https://github.com/bmarkovic
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(10)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    function translate(number, withoutSuffix, key) {
	        var result = number + ' ';
	        switch (key) {
	        case 'm':
	            return withoutSuffix ? 'jedna minuta' : 'jedne minute';
	        case 'mm':
	            if (number === 1) {
	                result += 'minuta';
	            } else if (number === 2 || number === 3 || number === 4) {
	                result += 'minute';
	            } else {
	                result += 'minuta';
	            }
	            return result;
	        case 'h':
	            return withoutSuffix ? 'jedan sat' : 'jednog sata';
	        case 'hh':
	            if (number === 1) {
	                result += 'sat';
	            } else if (number === 2 || number === 3 || number === 4) {
	                result += 'sata';
	            } else {
	                result += 'sati';
	            }
	            return result;
	        case 'dd':
	            if (number === 1) {
	                result += 'dan';
	            } else {
	                result += 'dana';
	            }
	            return result;
	        case 'MM':
	            if (number === 1) {
	                result += 'mjesec';
	            } else if (number === 2 || number === 3 || number === 4) {
	                result += 'mjeseca';
	            } else {
	                result += 'mjeseci';
	            }
	            return result;
	        case 'yy':
	            if (number === 1) {
	                result += 'godina';
	            } else if (number === 2 || number === 3 || number === 4) {
	                result += 'godine';
	            } else {
	                result += 'godina';
	            }
	            return result;
	        }
	    }
	
	    var hr = moment.defineLocale('hr', {
	        months : {
	            format: 'siječnja_veljače_ožujka_travnja_svibnja_lipnja_srpnja_kolovoza_rujna_listopada_studenoga_prosinca'.split('_'),
	            standalone: 'siječanj_veljača_ožujak_travanj_svibanj_lipanj_srpanj_kolovoz_rujan_listopad_studeni_prosinac'.split('_')
	        },
	        monthsShort : 'sij._velj._ožu._tra._svi._lip._srp._kol._ruj._lis._stu._pro.'.split('_'),
	        monthsParseExact: true,
	        weekdays : 'nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota'.split('_'),
	        weekdaysShort : 'ned._pon._uto._sri._čet._pet._sub.'.split('_'),
	        weekdaysMin : 'ne_po_ut_sr_če_pe_su'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat : {
	            LT : 'H:mm',
	            LTS : 'H:mm:ss',
	            L : 'DD. MM. YYYY',
	            LL : 'D. MMMM YYYY',
	            LLL : 'D. MMMM YYYY H:mm',
	            LLLL : 'dddd, D. MMMM YYYY H:mm'
	        },
	        calendar : {
	            sameDay  : '[danas u] LT',
	            nextDay  : '[sutra u] LT',
	            nextWeek : function () {
	                switch (this.day()) {
	                case 0:
	                    return '[u] [nedjelju] [u] LT';
	                case 3:
	                    return '[u] [srijedu] [u] LT';
	                case 6:
	                    return '[u] [subotu] [u] LT';
	                case 1:
	                case 2:
	                case 4:
	                case 5:
	                    return '[u] dddd [u] LT';
	                }
	            },
	            lastDay  : '[jučer u] LT',
	            lastWeek : function () {
	                switch (this.day()) {
	                case 0:
	                case 3:
	                    return '[prošlu] dddd [u] LT';
	                case 6:
	                    return '[prošle] [subote] [u] LT';
	                case 1:
	                case 2:
	                case 4:
	                case 5:
	                    return '[prošli] dddd [u] LT';
	                }
	            },
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'za %s',
	            past   : 'prije %s',
	            s      : 'par sekundi',
	            m      : translate,
	            mm     : translate,
	            h      : translate,
	            hh     : translate,
	            d      : 'dan',
	            dd     : translate,
	            M      : 'mjesec',
	            MM     : translate,
	            y      : 'godinu',
	            yy     : translate
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	
	    return hr;
	
	}));

/***/ },
/* 55 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : hungarian (hu)
	//! author : Adam Brunner : https://github.com/adambrunner
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(10)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var weekEndings = 'vasárnap hétfőn kedden szerdán csütörtökön pénteken szombaton'.split(' ');
	    function translate(number, withoutSuffix, key, isFuture) {
	        var num = number,
	            suffix;
	        switch (key) {
	        case 's':
	            return (isFuture || withoutSuffix) ? 'néhány másodperc' : 'néhány másodperce';
	        case 'm':
	            return 'egy' + (isFuture || withoutSuffix ? ' perc' : ' perce');
	        case 'mm':
	            return num + (isFuture || withoutSuffix ? ' perc' : ' perce');
	        case 'h':
	            return 'egy' + (isFuture || withoutSuffix ? ' óra' : ' órája');
	        case 'hh':
	            return num + (isFuture || withoutSuffix ? ' óra' : ' órája');
	        case 'd':
	            return 'egy' + (isFuture || withoutSuffix ? ' nap' : ' napja');
	        case 'dd':
	            return num + (isFuture || withoutSuffix ? ' nap' : ' napja');
	        case 'M':
	            return 'egy' + (isFuture || withoutSuffix ? ' hónap' : ' hónapja');
	        case 'MM':
	            return num + (isFuture || withoutSuffix ? ' hónap' : ' hónapja');
	        case 'y':
	            return 'egy' + (isFuture || withoutSuffix ? ' év' : ' éve');
	        case 'yy':
	            return num + (isFuture || withoutSuffix ? ' év' : ' éve');
	        }
	        return '';
	    }
	    function week(isFuture) {
	        return (isFuture ? '' : '[múlt] ') + '[' + weekEndings[this.day()] + '] LT[-kor]';
	    }
	
	    var hu = moment.defineLocale('hu', {
	        months : 'január_február_március_április_május_június_július_augusztus_szeptember_október_november_december'.split('_'),
	        monthsShort : 'jan_feb_márc_ápr_máj_jún_júl_aug_szept_okt_nov_dec'.split('_'),
	        weekdays : 'vasárnap_hétfő_kedd_szerda_csütörtök_péntek_szombat'.split('_'),
	        weekdaysShort : 'vas_hét_kedd_sze_csüt_pén_szo'.split('_'),
	        weekdaysMin : 'v_h_k_sze_cs_p_szo'.split('_'),
	        longDateFormat : {
	            LT : 'H:mm',
	            LTS : 'H:mm:ss',
	            L : 'YYYY.MM.DD.',
	            LL : 'YYYY. MMMM D.',
	            LLL : 'YYYY. MMMM D. H:mm',
	            LLLL : 'YYYY. MMMM D., dddd H:mm'
	        },
	        meridiemParse: /de|du/i,
	        isPM: function (input) {
	            return input.charAt(1).toLowerCase() === 'u';
	        },
	        meridiem : function (hours, minutes, isLower) {
	            if (hours < 12) {
	                return isLower === true ? 'de' : 'DE';
	            } else {
	                return isLower === true ? 'du' : 'DU';
	            }
	        },
	        calendar : {
	            sameDay : '[ma] LT[-kor]',
	            nextDay : '[holnap] LT[-kor]',
	            nextWeek : function () {
	                return week.call(this, true);
	            },
	            lastDay : '[tegnap] LT[-kor]',
	            lastWeek : function () {
	                return week.call(this, false);
	            },
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : '%s múlva',
	            past : '%s',
	            s : translate,
	            m : translate,
	            mm : translate,
	            h : translate,
	            hh : translate,
	            d : translate,
	            dd : translate,
	            M : translate,
	            MM : translate,
	            y : translate,
	            yy : translate
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	
	    return hu;
	
	}));

/***/ },
/* 56 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Armenian (hy-am)
	//! author : Armendarabyan : https://github.com/armendarabyan
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(10)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var hy_am = moment.defineLocale('hy-am', {
	        months : {
	            format: 'հունվարի_փետրվարի_մարտի_ապրիլի_մայիսի_հունիսի_հուլիսի_օգոստոսի_սեպտեմբերի_հոկտեմբերի_նոյեմբերի_դեկտեմբերի'.split('_'),
	            standalone: 'հունվար_փետրվար_մարտ_ապրիլ_մայիս_հունիս_հուլիս_օգոստոս_սեպտեմբեր_հոկտեմբեր_նոյեմբեր_դեկտեմբեր'.split('_')
	        },
	        monthsShort : 'հնվ_փտր_մրտ_ապր_մյս_հնս_հլս_օգս_սպտ_հկտ_նմբ_դկտ'.split('_'),
	        weekdays : 'կիրակի_երկուշաբթի_երեքշաբթի_չորեքշաբթի_հինգշաբթի_ուրբաթ_շաբաթ'.split('_'),
	        weekdaysShort : 'կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ'.split('_'),
	        weekdaysMin : 'կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D MMMM YYYY թ.',
	            LLL : 'D MMMM YYYY թ., HH:mm',
	            LLLL : 'dddd, D MMMM YYYY թ., HH:mm'
	        },
	        calendar : {
	            sameDay: '[այսօր] LT',
	            nextDay: '[վաղը] LT',
	            lastDay: '[երեկ] LT',
	            nextWeek: function () {
	                return 'dddd [օրը ժամը] LT';
	            },
	            lastWeek: function () {
	                return '[անցած] dddd [օրը ժամը] LT';
	            },
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : '%s հետո',
	            past : '%s առաջ',
	            s : 'մի քանի վայրկյան',
	            m : 'րոպե',
	            mm : '%d րոպե',
	            h : 'ժամ',
	            hh : '%d ժամ',
	            d : 'օր',
	            dd : '%d օր',
	            M : 'ամիս',
	            MM : '%d ամիս',
	            y : 'տարի',
	            yy : '%d տարի'
	        },
	        meridiemParse: /գիշերվա|առավոտվա|ցերեկվա|երեկոյան/,
	        isPM: function (input) {
	            return /^(ցերեկվա|երեկոյան)$/.test(input);
	        },
	        meridiem : function (hour) {
	            if (hour < 4) {
	                return 'գիշերվա';
	            } else if (hour < 12) {
	                return 'առավոտվա';
	            } else if (hour < 17) {
	                return 'ցերեկվա';
	            } else {
	                return 'երեկոյան';
	            }
	        },
	        ordinalParse: /\d{1,2}|\d{1,2}-(ին|րդ)/,
	        ordinal: function (number, period) {
	            switch (period) {
	            case 'DDD':
	            case 'w':
	            case 'W':
	            case 'DDDo':
	                if (number === 1) {
	                    return number + '-ին';
	                }
	                return number + '-րդ';
	            default:
	                return number;
	            }
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	
	    return hy_am;
	
	}));

/***/ },
/* 57 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Bahasa Indonesia (id)
	//! author : Mohammad Satrio Utomo : https://github.com/tyok
	//! reference: http://id.wikisource.org/wiki/Pedoman_Umum_Ejaan_Bahasa_Indonesia_yang_Disempurnakan
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(10)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var id = moment.defineLocale('id', {
	        months : 'Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_November_Desember'.split('_'),
	        monthsShort : 'Jan_Feb_Mar_Apr_Mei_Jun_Jul_Ags_Sep_Okt_Nov_Des'.split('_'),
	        weekdays : 'Minggu_Senin_Selasa_Rabu_Kamis_Jumat_Sabtu'.split('_'),
	        weekdaysShort : 'Min_Sen_Sel_Rab_Kam_Jum_Sab'.split('_'),
	        weekdaysMin : 'Mg_Sn_Sl_Rb_Km_Jm_Sb'.split('_'),
	        longDateFormat : {
	            LT : 'HH.mm',
	            LTS : 'HH.mm.ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY [pukul] HH.mm',
	            LLLL : 'dddd, D MMMM YYYY [pukul] HH.mm'
	        },
	        meridiemParse: /pagi|siang|sore|malam/,
	        meridiemHour : function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === 'pagi') {
	                return hour;
	            } else if (meridiem === 'siang') {
	                return hour >= 11 ? hour : hour + 12;
	            } else if (meridiem === 'sore' || meridiem === 'malam') {
	                return hour + 12;
	            }
	        },
	        meridiem : function (hours, minutes, isLower) {
	            if (hours < 11) {
	                return 'pagi';
	            } else if (hours < 15) {
	                return 'siang';
	            } else if (hours < 19) {
	                return 'sore';
	            } else {
	                return 'malam';
	            }
	        },
	        calendar : {
	            sameDay : '[Hari ini pukul] LT',
	            nextDay : '[Besok pukul] LT',
	            nextWeek : 'dddd [pukul] LT',
	            lastDay : '[Kemarin pukul] LT',
	            lastWeek : 'dddd [lalu pukul] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'dalam %s',
	            past : '%s yang lalu',
	            s : 'beberapa detik',
	            m : 'semenit',
	            mm : '%d menit',
	            h : 'sejam',
	            hh : '%d jam',
	            d : 'sehari',
	            dd : '%d hari',
	            M : 'sebulan',
	            MM : '%d bulan',
	            y : 'setahun',
	            yy : '%d tahun'
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	
	    return id;
	
	}));

/***/ },
/* 58 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : icelandic (is)
	//! author : Hinrik Örn Sigurðsson : https://github.com/hinrik
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(10)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    function plural(n) {
	        if (n % 100 === 11) {
	            return true;
	        } else if (n % 10 === 1) {
	            return false;
	        }
	        return true;
	    }
	    function translate(number, withoutSuffix, key, isFuture) {
	        var result = number + ' ';
	        switch (key) {
	        case 's':
	            return withoutSuffix || isFuture ? 'nokkrar sekúndur' : 'nokkrum sekúndum';
	        case 'm':
	            return withoutSuffix ? 'mínúta' : 'mínútu';
	        case 'mm':
	            if (plural(number)) {
	                return result + (withoutSuffix || isFuture ? 'mínútur' : 'mínútum');
	            } else if (withoutSuffix) {
	                return result + 'mínúta';
	            }
	            return result + 'mínútu';
	        case 'hh':
	            if (plural(number)) {
	                return result + (withoutSuffix || isFuture ? 'klukkustundir' : 'klukkustundum');
	            }
	            return result + 'klukkustund';
	        case 'd':
	            if (withoutSuffix) {
	                return 'dagur';
	            }
	            return isFuture ? 'dag' : 'degi';
	        case 'dd':
	            if (plural(number)) {
	                if (withoutSuffix) {
	                    return result + 'dagar';
	                }
	                return result + (isFuture ? 'daga' : 'dögum');
	            } else if (withoutSuffix) {
	                return result + 'dagur';
	            }
	            return result + (isFuture ? 'dag' : 'degi');
	        case 'M':
	            if (withoutSuffix) {
	                return 'mánuður';
	            }
	            return isFuture ? 'mánuð' : 'mánuði';
	        case 'MM':
	            if (plural(number)) {
	                if (withoutSuffix) {
	                    return result + 'mánuðir';
	                }
	                return result + (isFuture ? 'mánuði' : 'mánuðum');
	            } else if (withoutSuffix) {
	                return result + 'mánuður';
	            }
	            return result + (isFuture ? 'mánuð' : 'mánuði');
	        case 'y':
	            return withoutSuffix || isFuture ? 'ár' : 'ári';
	        case 'yy':
	            if (plural(number)) {
	                return result + (withoutSuffix || isFuture ? 'ár' : 'árum');
	            }
	            return result + (withoutSuffix || isFuture ? 'ár' : 'ári');
	        }
	    }
	
	    var is = moment.defineLocale('is', {
	        months : 'janúar_febrúar_mars_apríl_maí_júní_júlí_ágúst_september_október_nóvember_desember'.split('_'),
	        monthsShort : 'jan_feb_mar_apr_maí_jún_júl_ágú_sep_okt_nóv_des'.split('_'),
	        weekdays : 'sunnudagur_mánudagur_þriðjudagur_miðvikudagur_fimmtudagur_föstudagur_laugardagur'.split('_'),
	        weekdaysShort : 'sun_mán_þri_mið_fim_fös_lau'.split('_'),
	        weekdaysMin : 'Su_Má_Þr_Mi_Fi_Fö_La'.split('_'),
	        longDateFormat : {
	            LT : 'H:mm',
	            LTS : 'H:mm:ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D. MMMM YYYY',
	            LLL : 'D. MMMM YYYY [kl.] H:mm',
	            LLLL : 'dddd, D. MMMM YYYY [kl.] H:mm'
	        },
	        calendar : {
	            sameDay : '[í dag kl.] LT',
	            nextDay : '[á morgun kl.] LT',
	            nextWeek : 'dddd [kl.] LT',
	            lastDay : '[í gær kl.] LT',
	            lastWeek : '[síðasta] dddd [kl.] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'eftir %s',
	            past : 'fyrir %s síðan',
	            s : translate,
	            m : translate,
	            mm : translate,
	            h : 'klukkustund',
	            hh : translate,
	            d : translate,
	            dd : translate,
	            M : translate,
	            MM : translate,
	            y : translate,
	            yy : translate
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    return is;
	
	}));

/***/ },
/* 59 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : italian (it)
	//! author : Lorenzo : https://github.com/aliem
	//! author: Mattia Larentis: https://github.com/nostalgiaz
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(10)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var it = moment.defineLocale('it', {
	        months : 'gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre'.split('_'),
	        monthsShort : 'gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic'.split('_'),
	        weekdays : 'Domenica_Lunedì_Martedì_Mercoledì_Giovedì_Venerdì_Sabato'.split('_'),
	        weekdaysShort : 'Dom_Lun_Mar_Mer_Gio_Ven_Sab'.split('_'),
	        weekdaysMin : 'Do_Lu_Ma_Me_Gi_Ve_Sa'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd, D MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay: '[Oggi alle] LT',
	            nextDay: '[Domani alle] LT',
	            nextWeek: 'dddd [alle] LT',
	            lastDay: '[Ieri alle] LT',
	            lastWeek: function () {
	                switch (this.day()) {
	                    case 0:
	                        return '[la scorsa] dddd [alle] LT';
	                    default:
	                        return '[lo scorso] dddd [alle] LT';
	                }
	            },
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : function (s) {
	                return ((/^[0-9].+$/).test(s) ? 'tra' : 'in') + ' ' + s;
	            },
	            past : '%s fa',
	            s : 'alcuni secondi',
	            m : 'un minuto',
	            mm : '%d minuti',
	            h : 'un\'ora',
	            hh : '%d ore',
	            d : 'un giorno',
	            dd : '%d giorni',
	            M : 'un mese',
	            MM : '%d mesi',
	            y : 'un anno',
	            yy : '%d anni'
	        },
	        ordinalParse : /\d{1,2}º/,
	        ordinal: '%dº',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    return it;
	
	}));

/***/ },
/* 60 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : japanese (ja)
	//! author : LI Long : https://github.com/baryon
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(10)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var ja = moment.defineLocale('ja', {
	        months : '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
	        monthsShort : '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
	        weekdays : '日曜日_月曜日_火曜日_水曜日_木曜日_金曜日_土曜日'.split('_'),
	        weekdaysShort : '日_月_火_水_木_金_土'.split('_'),
	        weekdaysMin : '日_月_火_水_木_金_土'.split('_'),
	        longDateFormat : {
	            LT : 'Ah時m分',
	            LTS : 'Ah時m分s秒',
	            L : 'YYYY/MM/DD',
	            LL : 'YYYY年M月D日',
	            LLL : 'YYYY年M月D日Ah時m分',
	            LLLL : 'YYYY年M月D日Ah時m分 dddd'
	        },
	        meridiemParse: /午前|午後/i,
	        isPM : function (input) {
	            return input === '午後';
	        },
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 12) {
	                return '午前';
	            } else {
	                return '午後';
	            }
	        },
	        calendar : {
	            sameDay : '[今日] LT',
	            nextDay : '[明日] LT',
	            nextWeek : '[来週]dddd LT',
	            lastDay : '[昨日] LT',
	            lastWeek : '[前週]dddd LT',
	            sameElse : 'L'
	        },
	        ordinalParse : /\d{1,2}日/,
	        ordinal : function (number, period) {
	            switch (period) {
	            case 'd':
	            case 'D':
	            case 'DDD':
	                return number + '日';
	            default:
	                return number;
	            }
	        },
	        relativeTime : {
	            future : '%s後',
	            past : '%s前',
	            s : '数秒',
	            m : '1分',
	            mm : '%d分',
	            h : '1時間',
	            hh : '%d時間',
	            d : '1日',
	            dd : '%d日',
	            M : '1ヶ月',
	            MM : '%dヶ月',
	            y : '1年',
	            yy : '%d年'
	        }
	    });
	
	    return ja;
	
	}));

/***/ },
/* 61 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Boso Jowo (jv)
	//! author : Rony Lantip : https://github.com/lantip
	//! reference: http://jv.wikipedia.org/wiki/Basa_Jawa
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(10)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var jv = moment.defineLocale('jv', {
	        months : 'Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_Nopember_Desember'.split('_'),
	        monthsShort : 'Jan_Feb_Mar_Apr_Mei_Jun_Jul_Ags_Sep_Okt_Nop_Des'.split('_'),
	        weekdays : 'Minggu_Senen_Seloso_Rebu_Kemis_Jemuwah_Septu'.split('_'),
	        weekdaysShort : 'Min_Sen_Sel_Reb_Kem_Jem_Sep'.split('_'),
	        weekdaysMin : 'Mg_Sn_Sl_Rb_Km_Jm_Sp'.split('_'),
	        longDateFormat : {
	            LT : 'HH.mm',
	            LTS : 'HH.mm.ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY [pukul] HH.mm',
	            LLLL : 'dddd, D MMMM YYYY [pukul] HH.mm'
	        },
	        meridiemParse: /enjing|siyang|sonten|ndalu/,
	        meridiemHour : function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === 'enjing') {
	                return hour;
	            } else if (meridiem === 'siyang') {
	                return hour >= 11 ? hour : hour + 12;
	            } else if (meridiem === 'sonten' || meridiem === 'ndalu') {
	                return hour + 12;
	            }
	        },
	        meridiem : function (hours, minutes, isLower) {
	            if (hours < 11) {
	                return 'enjing';
	            } else if (hours < 15) {
	                return 'siyang';
	            } else if (hours < 19) {
	                return 'sonten';
	            } else {
	                return 'ndalu';
	            }
	        },
	        calendar : {
	            sameDay : '[Dinten puniko pukul] LT',
	            nextDay : '[Mbenjang pukul] LT',
	            nextWeek : 'dddd [pukul] LT',
	            lastDay : '[Kala wingi pukul] LT',
	            lastWeek : 'dddd [kepengker pukul] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'wonten ing %s',
	            past : '%s ingkang kepengker',
	            s : 'sawetawis detik',
	            m : 'setunggal menit',
	            mm : '%d menit',
	            h : 'setunggal jam',
	            hh : '%d jam',
	            d : 'sedinten',
	            dd : '%d dinten',
	            M : 'sewulan',
	            MM : '%d wulan',
	            y : 'setaun',
	            yy : '%d taun'
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	
	    return jv;
	
	}));

/***/ },
/* 62 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Georgian (ka)
	//! author : Irakli Janiashvili : https://github.com/irakli-janiashvili
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(10)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var ka = moment.defineLocale('ka', {
	        months : {
	            standalone: 'იანვარი_თებერვალი_მარტი_აპრილი_მაისი_ივნისი_ივლისი_აგვისტო_სექტემბერი_ოქტომბერი_ნოემბერი_დეკემბერი'.split('_'),
	            format: 'იანვარს_თებერვალს_მარტს_აპრილის_მაისს_ივნისს_ივლისს_აგვისტს_სექტემბერს_ოქტომბერს_ნოემბერს_დეკემბერს'.split('_')
	        },
	        monthsShort : 'იან_თებ_მარ_აპრ_მაი_ივნ_ივლ_აგვ_სექ_ოქტ_ნოე_დეკ'.split('_'),
	        weekdays : {
	            standalone: 'კვირა_ორშაბათი_სამშაბათი_ოთხშაბათი_ხუთშაბათი_პარასკევი_შაბათი'.split('_'),
	            format: 'კვირას_ორშაბათს_სამშაბათს_ოთხშაბათს_ხუთშაბათს_პარასკევს_შაბათს'.split('_'),
	            isFormat: /(წინა|შემდეგ)/
	        },
	        weekdaysShort : 'კვი_ორშ_სამ_ოთხ_ხუთ_პარ_შაბ'.split('_'),
	        weekdaysMin : 'კვ_ორ_სა_ოთ_ხუ_პა_შა'.split('_'),
	        longDateFormat : {
	            LT : 'h:mm A',
	            LTS : 'h:mm:ss A',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY h:mm A',
	            LLLL : 'dddd, D MMMM YYYY h:mm A'
	        },
	        calendar : {
	            sameDay : '[დღეს] LT[-ზე]',
	            nextDay : '[ხვალ] LT[-ზე]',
	            lastDay : '[გუშინ] LT[-ზე]',
	            nextWeek : '[შემდეგ] dddd LT[-ზე]',
	            lastWeek : '[წინა] dddd LT-ზე',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : function (s) {
	                return (/(წამი|წუთი|საათი|წელი)/).test(s) ?
	                    s.replace(/ი$/, 'ში') :
	                    s + 'ში';
	            },
	            past : function (s) {
	                if ((/(წამი|წუთი|საათი|დღე|თვე)/).test(s)) {
	                    return s.replace(/(ი|ე)$/, 'ის წინ');
	                }
	                if ((/წელი/).test(s)) {
	                    return s.replace(/წელი$/, 'წლის წინ');
	                }
	            },
	            s : 'რამდენიმე წამი',
	            m : 'წუთი',
	            mm : '%d წუთი',
	            h : 'საათი',
	            hh : '%d საათი',
	            d : 'დღე',
	            dd : '%d დღე',
	            M : 'თვე',
	            MM : '%d თვე',
	            y : 'წელი',
	            yy : '%d წელი'
	        },
	        ordinalParse: /0|1-ლი|მე-\d{1,2}|\d{1,2}-ე/,
	        ordinal : function (number) {
	            if (number === 0) {
	                return number;
	            }
	            if (number === 1) {
	                return number + '-ლი';
	            }
	            if ((number < 20) || (number <= 100 && (number % 20 === 0)) || (number % 100 === 0)) {
	                return 'მე-' + number;
	            }
	            return number + '-ე';
	        },
	        week : {
	            dow : 1,
	            doy : 7
	        }
	    });
	
	    return ka;
	
	}));

/***/ },
/* 63 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : kazakh (kk)
	//! authors : Nurlan Rakhimzhanov : https://github.com/nurlan
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(10)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var suffixes = {
	        0: '-ші',
	        1: '-ші',
	        2: '-ші',
	        3: '-ші',
	        4: '-ші',
	        5: '-ші',
	        6: '-шы',
	        7: '-ші',
	        8: '-ші',
	        9: '-шы',
	        10: '-шы',
	        20: '-шы',
	        30: '-шы',
	        40: '-шы',
	        50: '-ші',
	        60: '-шы',
	        70: '-ші',
	        80: '-ші',
	        90: '-шы',
	        100: '-ші'
	    };
	
	    var kk = moment.defineLocale('kk', {
	        months : 'қаңтар_ақпан_наурыз_сәуір_мамыр_маусым_шілде_тамыз_қыркүйек_қазан_қараша_желтоқсан'.split('_'),
	        monthsShort : 'қаң_ақп_нау_сәу_мам_мау_шіл_там_қыр_қаз_қар_жел'.split('_'),
	        weekdays : 'жексенбі_дүйсенбі_сейсенбі_сәрсенбі_бейсенбі_жұма_сенбі'.split('_'),
	        weekdaysShort : 'жек_дүй_сей_сәр_бей_жұм_сен'.split('_'),
	        weekdaysMin : 'жк_дй_сй_ср_бй_жм_сн'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd, D MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay : '[Бүгін сағат] LT',
	            nextDay : '[Ертең сағат] LT',
	            nextWeek : 'dddd [сағат] LT',
	            lastDay : '[Кеше сағат] LT',
	            lastWeek : '[Өткен аптаның] dddd [сағат] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : '%s ішінде',
	            past : '%s бұрын',
	            s : 'бірнеше секунд',
	            m : 'бір минут',
	            mm : '%d минут',
	            h : 'бір сағат',
	            hh : '%d сағат',
	            d : 'бір күн',
	            dd : '%d күн',
	            M : 'бір ай',
	            MM : '%d ай',
	            y : 'бір жыл',
	            yy : '%d жыл'
	        },
	        ordinalParse: /\d{1,2}-(ші|шы)/,
	        ordinal : function (number) {
	            var a = number % 10,
	                b = number >= 100 ? 100 : null;
	            return number + (suffixes[number] || suffixes[a] || suffixes[b]);
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	
	    return kk;
	
	}));

/***/ },
/* 64 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : khmer (km)
	//! author : Kruy Vanna : https://github.com/kruyvanna
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(10)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var km = moment.defineLocale('km', {
	        months: 'មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ'.split('_'),
	        monthsShort: 'មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ'.split('_'),
	        weekdays: 'អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍'.split('_'),
	        weekdaysShort: 'អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍'.split('_'),
	        weekdaysMin: 'អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍'.split('_'),
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd, D MMMM YYYY HH:mm'
	        },
	        calendar: {
	            sameDay: '[ថ្ងៃនេះ ម៉ោង] LT',
	            nextDay: '[ស្អែក ម៉ោង] LT',
	            nextWeek: 'dddd [ម៉ោង] LT',
	            lastDay: '[ម្សិលមិញ ម៉ោង] LT',
	            lastWeek: 'dddd [សប្តាហ៍មុន] [ម៉ោង] LT',
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: '%sទៀត',
	            past: '%sមុន',
	            s: 'ប៉ុន្មានវិនាទី',
	            m: 'មួយនាទី',
	            mm: '%d នាទី',
	            h: 'មួយម៉ោង',
	            hh: '%d ម៉ោង',
	            d: 'មួយថ្ងៃ',
	            dd: '%d ថ្ងៃ',
	            M: 'មួយខែ',
	            MM: '%d ខែ',
	            y: 'មួយឆ្នាំ',
	            yy: '%d ឆ្នាំ'
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4 // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    return km;
	
	}));

/***/ },
/* 65 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : korean (ko)
	//!
	//! authors
	//!
	//! - Kyungwook, Park : https://github.com/kyungw00k
	//! - Jeeeyul Lee <jeeeyul@gmail.com>
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(10)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var ko = moment.defineLocale('ko', {
	        months : '1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월'.split('_'),
	        monthsShort : '1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월'.split('_'),
	        weekdays : '일요일_월요일_화요일_수요일_목요일_금요일_토요일'.split('_'),
	        weekdaysShort : '일_월_화_수_목_금_토'.split('_'),
	        weekdaysMin : '일_월_화_수_목_금_토'.split('_'),
	        longDateFormat : {
	            LT : 'A h시 m분',
	            LTS : 'A h시 m분 s초',
	            L : 'YYYY.MM.DD',
	            LL : 'YYYY년 MMMM D일',
	            LLL : 'YYYY년 MMMM D일 A h시 m분',
	            LLLL : 'YYYY년 MMMM D일 dddd A h시 m분'
	        },
	        calendar : {
	            sameDay : '오늘 LT',
	            nextDay : '내일 LT',
	            nextWeek : 'dddd LT',
	            lastDay : '어제 LT',
	            lastWeek : '지난주 dddd LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : '%s 후',
	            past : '%s 전',
	            s : '몇 초',
	            ss : '%d초',
	            m : '일분',
	            mm : '%d분',
	            h : '한 시간',
	            hh : '%d시간',
	            d : '하루',
	            dd : '%d일',
	            M : '한 달',
	            MM : '%d달',
	            y : '일 년',
	            yy : '%d년'
	        },
	        ordinalParse : /\d{1,2}일/,
	        ordinal : '%d일',
	        meridiemParse : /오전|오후/,
	        isPM : function (token) {
	            return token === '오후';
	        },
	        meridiem : function (hour, minute, isUpper) {
	            return hour < 12 ? '오전' : '오후';
	        }
	    });
	
	    return ko;
	
	}));

/***/ },
/* 66 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : kyrgyz (ky)
	//! author : Chyngyz Arystan uulu : https://github.com/chyngyz
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(10)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	
	    var suffixes = {
	        0: '-чү',
	        1: '-чи',
	        2: '-чи',
	        3: '-чү',
	        4: '-чү',
	        5: '-чи',
	        6: '-чы',
	        7: '-чи',
	        8: '-чи',
	        9: '-чу',
	        10: '-чу',
	        20: '-чы',
	        30: '-чу',
	        40: '-чы',
	        50: '-чү',
	        60: '-чы',
	        70: '-чи',
	        80: '-чи',
	        90: '-чу',
	        100: '-чү'
	    };
	
	    var ky = moment.defineLocale('ky', {
	        months : 'январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь'.split('_'),
	        monthsShort : 'янв_фев_март_апр_май_июнь_июль_авг_сен_окт_ноя_дек'.split('_'),
	        weekdays : 'Жекшемби_Дүйшөмбү_Шейшемби_Шаршемби_Бейшемби_Жума_Ишемби'.split('_'),
	        weekdaysShort : 'Жек_Дүй_Шей_Шар_Бей_Жум_Ише'.split('_'),
	        weekdaysMin : 'Жк_Дй_Шй_Шр_Бй_Жм_Иш'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd, D MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay : '[Бүгүн саат] LT',
	            nextDay : '[Эртең саат] LT',
	            nextWeek : 'dddd [саат] LT',
	            lastDay : '[Кече саат] LT',
	            lastWeek : '[Өткен аптанын] dddd [күнү] [саат] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : '%s ичинде',
	            past : '%s мурун',
	            s : 'бирнече секунд',
	            m : 'бир мүнөт',
	            mm : '%d мүнөт',
	            h : 'бир саат',
	            hh : '%d саат',
	            d : 'бир күн',
	            dd : '%d күн',
	            M : 'бир ай',
	            MM : '%d ай',
	            y : 'бир жыл',
	            yy : '%d жыл'
	        },
	        ordinalParse: /\d{1,2}-(чи|чы|чү|чу)/,
	        ordinal : function (number) {
	            var a = number % 10,
	                b = number >= 100 ? 100 : null;
	            return number + (suffixes[number] || suffixes[a] || suffixes[b]);
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	
	    return ky;
	
	}));

/***/ },
/* 67 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Luxembourgish (lb)
	//! author : mweimerskirch : https://github.com/mweimerskirch, David Raison : https://github.com/kwisatz
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(10)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    function processRelativeTime(number, withoutSuffix, key, isFuture) {
	        var format = {
	            'm': ['eng Minutt', 'enger Minutt'],
	            'h': ['eng Stonn', 'enger Stonn'],
	            'd': ['een Dag', 'engem Dag'],
	            'M': ['ee Mount', 'engem Mount'],
	            'y': ['ee Joer', 'engem Joer']
	        };
	        return withoutSuffix ? format[key][0] : format[key][1];
	    }
	    function processFutureTime(string) {
	        var number = string.substr(0, string.indexOf(' '));
	        if (eifelerRegelAppliesToNumber(number)) {
	            return 'a ' + string;
	        }
	        return 'an ' + string;
	    }
	    function processPastTime(string) {
	        var number = string.substr(0, string.indexOf(' '));
	        if (eifelerRegelAppliesToNumber(number)) {
	            return 'viru ' + string;
	        }
	        return 'virun ' + string;
	    }
	    /**
	     * Returns true if the word before the given number loses the '-n' ending.
	     * e.g. 'an 10 Deeg' but 'a 5 Deeg'
	     *
	     * @param number {integer}
	     * @returns {boolean}
	     */
	    function eifelerRegelAppliesToNumber(number) {
	        number = parseInt(number, 10);
	        if (isNaN(number)) {
	            return false;
	        }
	        if (number < 0) {
	            // Negative Number --> always true
	            return true;
	        } else if (number < 10) {
	            // Only 1 digit
	            if (4 <= number && number <= 7) {
	                return true;
	            }
	            return false;
	        } else if (number < 100) {
	            // 2 digits
	            var lastDigit = number % 10, firstDigit = number / 10;
	            if (lastDigit === 0) {
	                return eifelerRegelAppliesToNumber(firstDigit);
	            }
	            return eifelerRegelAppliesToNumber(lastDigit);
	        } else if (number < 10000) {
	            // 3 or 4 digits --> recursively check first digit
	            while (number >= 10) {
	                number = number / 10;
	            }
	            return eifelerRegelAppliesToNumber(number);
	        } else {
	            // Anything larger than 4 digits: recursively check first n-3 digits
	            number = number / 1000;
	            return eifelerRegelAppliesToNumber(number);
	        }
	    }
	
	    var lb = moment.defineLocale('lb', {
	        months: 'Januar_Februar_Mäerz_Abrëll_Mee_Juni_Juli_August_September_Oktober_November_Dezember'.split('_'),
	        monthsShort: 'Jan._Febr._Mrz._Abr._Mee_Jun._Jul._Aug._Sept._Okt._Nov._Dez.'.split('_'),
	        monthsParseExact : true,
	        weekdays: 'Sonndeg_Méindeg_Dënschdeg_Mëttwoch_Donneschdeg_Freideg_Samschdeg'.split('_'),
	        weekdaysShort: 'So._Mé._Dë._Më._Do._Fr._Sa.'.split('_'),
	        weekdaysMin: 'So_Mé_Dë_Më_Do_Fr_Sa'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat: {
	            LT: 'H:mm [Auer]',
	            LTS: 'H:mm:ss [Auer]',
	            L: 'DD.MM.YYYY',
	            LL: 'D. MMMM YYYY',
	            LLL: 'D. MMMM YYYY H:mm [Auer]',
	            LLLL: 'dddd, D. MMMM YYYY H:mm [Auer]'
	        },
	        calendar: {
	            sameDay: '[Haut um] LT',
	            sameElse: 'L',
	            nextDay: '[Muer um] LT',
	            nextWeek: 'dddd [um] LT',
	            lastDay: '[Gëschter um] LT',
	            lastWeek: function () {
	                // Different date string for 'Dënschdeg' (Tuesday) and 'Donneschdeg' (Thursday) due to phonological rule
	                switch (this.day()) {
	                    case 2:
	                    case 4:
	                        return '[Leschten] dddd [um] LT';
	                    default:
	                        return '[Leschte] dddd [um] LT';
	                }
	            }
	        },
	        relativeTime : {
	            future : processFutureTime,
	            past : processPastTime,
	            s : 'e puer Sekonnen',
	            m : processRelativeTime,
	            mm : '%d Minutten',
	            h : processRelativeTime,
	            hh : '%d Stonnen',
	            d : processRelativeTime,
	            dd : '%d Deeg',
	            M : processRelativeTime,
	            MM : '%d Méint',
	            y : processRelativeTime,
	            yy : '%d Joer'
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal: '%d.',
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    return lb;
	
	}));

/***/ },
/* 68 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : lao (lo)
	//! author : Ryan Hart : https://github.com/ryanhart2
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(10)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var lo = moment.defineLocale('lo', {
	        months : 'ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ'.split('_'),
	        monthsShort : 'ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ'.split('_'),
	        weekdays : 'ອາທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ'.split('_'),
	        weekdaysShort : 'ທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ'.split('_'),
	        weekdaysMin : 'ທ_ຈ_ອຄ_ພ_ພຫ_ສກ_ສ'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'ວັນdddd D MMMM YYYY HH:mm'
	        },
	        meridiemParse: /ຕອນເຊົ້າ|ຕອນແລງ/,
	        isPM: function (input) {
	            return input === 'ຕອນແລງ';
	        },
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 12) {
	                return 'ຕອນເຊົ້າ';
	            } else {
	                return 'ຕອນແລງ';
	            }
	        },
	        calendar : {
	            sameDay : '[ມື້ນີ້ເວລາ] LT',
	            nextDay : '[ມື້ອື່ນເວລາ] LT',
	            nextWeek : '[ວັນ]dddd[ໜ້າເວລາ] LT',
	            lastDay : '[ມື້ວານນີ້ເວລາ] LT',
	            lastWeek : '[ວັນ]dddd[ແລ້ວນີ້ເວລາ] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'ອີກ %s',
	            past : '%sຜ່ານມາ',
	            s : 'ບໍ່ເທົ່າໃດວິນາທີ',
	            m : '1 ນາທີ',
	            mm : '%d ນາທີ',
	            h : '1 ຊົ່ວໂມງ',
	            hh : '%d ຊົ່ວໂມງ',
	            d : '1 ມື້',
	            dd : '%d ມື້',
	            M : '1 ເດືອນ',
	            MM : '%d ເດືອນ',
	            y : '1 ປີ',
	            yy : '%d ປີ'
	        },
	        ordinalParse: /(ທີ່)\d{1,2}/,
	        ordinal : function (number) {
	            return 'ທີ່' + number;
	        }
	    });
	
	    return lo;
	
	}));

/***/ },
/* 69 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Lithuanian (lt)
	//! author : Mindaugas Mozūras : https://github.com/mmozuras
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(10)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var units = {
	        'm' : 'minutė_minutės_minutę',
	        'mm': 'minutės_minučių_minutes',
	        'h' : 'valanda_valandos_valandą',
	        'hh': 'valandos_valandų_valandas',
	        'd' : 'diena_dienos_dieną',
	        'dd': 'dienos_dienų_dienas',
	        'M' : 'mėnuo_mėnesio_mėnesį',
	        'MM': 'mėnesiai_mėnesių_mėnesius',
	        'y' : 'metai_metų_metus',
	        'yy': 'metai_metų_metus'
	    };
	    function translateSeconds(number, withoutSuffix, key, isFuture) {
	        if (withoutSuffix) {
	            return 'kelios sekundės';
	        } else {
	            return isFuture ? 'kelių sekundžių' : 'kelias sekundes';
	        }
	    }
	    function translateSingular(number, withoutSuffix, key, isFuture) {
	        return withoutSuffix ? forms(key)[0] : (isFuture ? forms(key)[1] : forms(key)[2]);
	    }
	    function special(number) {
	        return number % 10 === 0 || (number > 10 && number < 20);
	    }
	    function forms(key) {
	        return units[key].split('_');
	    }
	    function translate(number, withoutSuffix, key, isFuture) {
	        var result = number + ' ';
	        if (number === 1) {
	            return result + translateSingular(number, withoutSuffix, key[0], isFuture);
	        } else if (withoutSuffix) {
	            return result + (special(number) ? forms(key)[1] : forms(key)[0]);
	        } else {
	            if (isFuture) {
	                return result + forms(key)[1];
	            } else {
	                return result + (special(number) ? forms(key)[1] : forms(key)[2]);
	            }
	        }
	    }
	    var lt = moment.defineLocale('lt', {
	        months : {
	            format: 'sausio_vasario_kovo_balandžio_gegužės_birželio_liepos_rugpjūčio_rugsėjo_spalio_lapkričio_gruodžio'.split('_'),
	            standalone: 'sausis_vasaris_kovas_balandis_gegužė_birželis_liepa_rugpjūtis_rugsėjis_spalis_lapkritis_gruodis'.split('_')
	        },
	        monthsShort : 'sau_vas_kov_bal_geg_bir_lie_rgp_rgs_spa_lap_grd'.split('_'),
	        weekdays : {
	            format: 'sekmadienį_pirmadienį_antradienį_trečiadienį_ketvirtadienį_penktadienį_šeštadienį'.split('_'),
	            standalone: 'sekmadienis_pirmadienis_antradienis_trečiadienis_ketvirtadienis_penktadienis_šeštadienis'.split('_'),
	            isFormat: /dddd HH:mm/
	        },
	        weekdaysShort : 'Sek_Pir_Ant_Tre_Ket_Pen_Šeš'.split('_'),
	        weekdaysMin : 'S_P_A_T_K_Pn_Š'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'YYYY-MM-DD',
	            LL : 'YYYY [m.] MMMM D [d.]',
	            LLL : 'YYYY [m.] MMMM D [d.], HH:mm [val.]',
	            LLLL : 'YYYY [m.] MMMM D [d.], dddd, HH:mm [val.]',
	            l : 'YYYY-MM-DD',
	            ll : 'YYYY [m.] MMMM D [d.]',
	            lll : 'YYYY [m.] MMMM D [d.], HH:mm [val.]',
	            llll : 'YYYY [m.] MMMM D [d.], ddd, HH:mm [val.]'
	        },
	        calendar : {
	            sameDay : '[Šiandien] LT',
	            nextDay : '[Rytoj] LT',
	            nextWeek : 'dddd LT',
	            lastDay : '[Vakar] LT',
	            lastWeek : '[Praėjusį] dddd LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'po %s',
	            past : 'prieš %s',
	            s : translateSeconds,
	            m : translateSingular,
	            mm : translate,
	            h : translateSingular,
	            hh : translate,
	            d : translateSingular,
	            dd : translate,
	            M : translateSingular,
	            MM : translate,
	            y : translateSingular,
	            yy : translate
	        },
	        ordinalParse: /\d{1,2}-oji/,
	        ordinal : function (number) {
	            return number + '-oji';
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    return lt;
	
	}));

/***/ },
/* 70 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : latvian (lv)
	//! author : Kristaps Karlsons : https://github.com/skakri
	//! author : Jānis Elmeris : https://github.com/JanisE
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(10)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var units = {
	        'm': 'minūtes_minūtēm_minūte_minūtes'.split('_'),
	        'mm': 'minūtes_minūtēm_minūte_minūtes'.split('_'),
	        'h': 'stundas_stundām_stunda_stundas'.split('_'),
	        'hh': 'stundas_stundām_stunda_stundas'.split('_'),
	        'd': 'dienas_dienām_diena_dienas'.split('_'),
	        'dd': 'dienas_dienām_diena_dienas'.split('_'),
	        'M': 'mēneša_mēnešiem_mēnesis_mēneši'.split('_'),
	        'MM': 'mēneša_mēnešiem_mēnesis_mēneši'.split('_'),
	        'y': 'gada_gadiem_gads_gadi'.split('_'),
	        'yy': 'gada_gadiem_gads_gadi'.split('_')
	    };
	    /**
	     * @param withoutSuffix boolean true = a length of time; false = before/after a period of time.
	     */
	    function format(forms, number, withoutSuffix) {
	        if (withoutSuffix) {
	            // E.g. "21 minūte", "3 minūtes".
	            return number % 10 === 1 && number !== 11 ? forms[2] : forms[3];
	        } else {
	            // E.g. "21 minūtes" as in "pēc 21 minūtes".
	            // E.g. "3 minūtēm" as in "pēc 3 minūtēm".
	            return number % 10 === 1 && number !== 11 ? forms[0] : forms[1];
	        }
	    }
	    function relativeTimeWithPlural(number, withoutSuffix, key) {
	        return number + ' ' + format(units[key], number, withoutSuffix);
	    }
	    function relativeTimeWithSingular(number, withoutSuffix, key) {
	        return format(units[key], number, withoutSuffix);
	    }
	    function relativeSeconds(number, withoutSuffix) {
	        return withoutSuffix ? 'dažas sekundes' : 'dažām sekundēm';
	    }
	
	    var lv = moment.defineLocale('lv', {
	        months : 'janvāris_februāris_marts_aprīlis_maijs_jūnijs_jūlijs_augusts_septembris_oktobris_novembris_decembris'.split('_'),
	        monthsShort : 'jan_feb_mar_apr_mai_jūn_jūl_aug_sep_okt_nov_dec'.split('_'),
	        weekdays : 'svētdiena_pirmdiena_otrdiena_trešdiena_ceturtdiena_piektdiena_sestdiena'.split('_'),
	        weekdaysShort : 'Sv_P_O_T_C_Pk_S'.split('_'),
	        weekdaysMin : 'Sv_P_O_T_C_Pk_S'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD.MM.YYYY.',
	            LL : 'YYYY. [gada] D. MMMM',
	            LLL : 'YYYY. [gada] D. MMMM, HH:mm',
	            LLLL : 'YYYY. [gada] D. MMMM, dddd, HH:mm'
	        },
	        calendar : {
	            sameDay : '[Šodien pulksten] LT',
	            nextDay : '[Rīt pulksten] LT',
	            nextWeek : 'dddd [pulksten] LT',
	            lastDay : '[Vakar pulksten] LT',
	            lastWeek : '[Pagājušā] dddd [pulksten] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'pēc %s',
	            past : 'pirms %s',
	            s : relativeSeconds,
	            m : relativeTimeWithSingular,
	            mm : relativeTimeWithPlural,
	            h : relativeTimeWithSingular,
	            hh : relativeTimeWithPlural,
	            d : relativeTimeWithSingular,
	            dd : relativeTimeWithPlural,
	            M : relativeTimeWithSingular,
	            MM : relativeTimeWithPlural,
	            y : relativeTimeWithSingular,
	            yy : relativeTimeWithPlural
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    return lv;
	
	}));

/***/ },
/* 71 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Montenegrin (me)
	//! author : Miodrag Nikač <miodrag@restartit.me> : https://github.com/miodragnikac
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(10)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var translator = {
	        words: { //Different grammatical cases
	            m: ['jedan minut', 'jednog minuta'],
	            mm: ['minut', 'minuta', 'minuta'],
	            h: ['jedan sat', 'jednog sata'],
	            hh: ['sat', 'sata', 'sati'],
	            dd: ['dan', 'dana', 'dana'],
	            MM: ['mjesec', 'mjeseca', 'mjeseci'],
	            yy: ['godina', 'godine', 'godina']
	        },
	        correctGrammaticalCase: function (number, wordKey) {
	            return number === 1 ? wordKey[0] : (number >= 2 && number <= 4 ? wordKey[1] : wordKey[2]);
	        },
	        translate: function (number, withoutSuffix, key) {
	            var wordKey = translator.words[key];
	            if (key.length === 1) {
	                return withoutSuffix ? wordKey[0] : wordKey[1];
	            } else {
	                return number + ' ' + translator.correctGrammaticalCase(number, wordKey);
	            }
	        }
	    };
	
	    var me = moment.defineLocale('me', {
	        months: 'januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar'.split('_'),
	        monthsShort: 'jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.'.split('_'),
	        monthsParseExact : true,
	        weekdays: 'nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota'.split('_'),
	        weekdaysShort: 'ned._pon._uto._sri._čet._pet._sub.'.split('_'),
	        weekdaysMin: 'ne_po_ut_sr_če_pe_su'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat: {
	            LT: 'H:mm',
	            LTS : 'H:mm:ss',
	            L: 'DD. MM. YYYY',
	            LL: 'D. MMMM YYYY',
	            LLL: 'D. MMMM YYYY H:mm',
	            LLLL: 'dddd, D. MMMM YYYY H:mm'
	        },
	        calendar: {
	            sameDay: '[danas u] LT',
	            nextDay: '[sjutra u] LT',
	
	            nextWeek: function () {
	                switch (this.day()) {
	                case 0:
	                    return '[u] [nedjelju] [u] LT';
	                case 3:
	                    return '[u] [srijedu] [u] LT';
	                case 6:
	                    return '[u] [subotu] [u] LT';
	                case 1:
	                case 2:
	                case 4:
	                case 5:
	                    return '[u] dddd [u] LT';
	                }
	            },
	            lastDay  : '[juče u] LT',
	            lastWeek : function () {
	                var lastWeekDays = [
	                    '[prošle] [nedjelje] [u] LT',
	                    '[prošlog] [ponedjeljka] [u] LT',
	                    '[prošlog] [utorka] [u] LT',
	                    '[prošle] [srijede] [u] LT',
	                    '[prošlog] [četvrtka] [u] LT',
	                    '[prošlog] [petka] [u] LT',
	                    '[prošle] [subote] [u] LT'
	                ];
	                return lastWeekDays[this.day()];
	            },
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'za %s',
	            past   : 'prije %s',
	            s      : 'nekoliko sekundi',
	            m      : translator.translate,
	            mm     : translator.translate,
	            h      : translator.translate,
	            hh     : translator.translate,
	            d      : 'dan',
	            dd     : translator.translate,
	            M      : 'mjesec',
	            MM     : translator.translate,
	            y      : 'godinu',
	            yy     : translator.translate
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	
	    return me;
	
	}));

/***/ },
/* 72 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : macedonian (mk)
	//! author : Borislav Mickov : https://github.com/B0k0
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(10)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var mk = moment.defineLocale('mk', {
	        months : 'јануари_февруари_март_април_мај_јуни_јули_август_септември_октомври_ноември_декември'.split('_'),
	        monthsShort : 'јан_фев_мар_апр_мај_јун_јул_авг_сеп_окт_ное_дек'.split('_'),
	        weekdays : 'недела_понеделник_вторник_среда_четврток_петок_сабота'.split('_'),
	        weekdaysShort : 'нед_пон_вто_сре_чет_пет_саб'.split('_'),
	        weekdaysMin : 'нe_пo_вт_ср_че_пе_сa'.split('_'),
	        longDateFormat : {
	            LT : 'H:mm',
	            LTS : 'H:mm:ss',
	            L : 'D.MM.YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY H:mm',
	            LLLL : 'dddd, D MMMM YYYY H:mm'
	        },
	        calendar : {
	            sameDay : '[Денес во] LT',
	            nextDay : '[Утре во] LT',
	            nextWeek : '[Во] dddd [во] LT',
	            lastDay : '[Вчера во] LT',
	            lastWeek : function () {
	                switch (this.day()) {
	                case 0:
	                case 3:
	                case 6:
	                    return '[Изминатата] dddd [во] LT';
	                case 1:
	                case 2:
	                case 4:
	                case 5:
	                    return '[Изминатиот] dddd [во] LT';
	                }
	            },
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'после %s',
	            past : 'пред %s',
	            s : 'неколку секунди',
	            m : 'минута',
	            mm : '%d минути',
	            h : 'час',
	            hh : '%d часа',
	            d : 'ден',
	            dd : '%d дена',
	            M : 'месец',
	            MM : '%d месеци',
	            y : 'година',
	            yy : '%d години'
	        },
	        ordinalParse: /\d{1,2}-(ев|ен|ти|ви|ри|ми)/,
	        ordinal : function (number) {
	            var lastDigit = number % 10,
	                last2Digits = number % 100;
	            if (number === 0) {
	                return number + '-ев';
	            } else if (last2Digits === 0) {
	                return number + '-ен';
	            } else if (last2Digits > 10 && last2Digits < 20) {
	                return number + '-ти';
	            } else if (lastDigit === 1) {
	                return number + '-ви';
	            } else if (lastDigit === 2) {
	                return number + '-ри';
	            } else if (lastDigit === 7 || lastDigit === 8) {
	                return number + '-ми';
	            } else {
	                return number + '-ти';
	            }
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	
	    return mk;
	
	}));

/***/ },
/* 73 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : malayalam (ml)
	//! author : Floyd Pink : https://github.com/floydpink
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(10)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var ml = moment.defineLocale('ml', {
	        months : 'ജനുവരി_ഫെബ്രുവരി_മാർച്ച്_ഏപ്രിൽ_മേയ്_ജൂൺ_ജൂലൈ_ഓഗസ്റ്റ്_സെപ്റ്റംബർ_ഒക്ടോബർ_നവംബർ_ഡിസംബർ'.split('_'),
	        monthsShort : 'ജനു._ഫെബ്രു._മാർ._ഏപ്രി._മേയ്_ജൂൺ_ജൂലൈ._ഓഗ._സെപ്റ്റ._ഒക്ടോ._നവം._ഡിസം.'.split('_'),
	        monthsParseExact : true,
	        weekdays : 'ഞായറാഴ്ച_തിങ്കളാഴ്ച_ചൊവ്വാഴ്ച_ബുധനാഴ്ച_വ്യാഴാഴ്ച_വെള്ളിയാഴ്ച_ശനിയാഴ്ച'.split('_'),
	        weekdaysShort : 'ഞായർ_തിങ്കൾ_ചൊവ്വ_ബുധൻ_വ്യാഴം_വെള്ളി_ശനി'.split('_'),
	        weekdaysMin : 'ഞാ_തി_ചൊ_ബു_വ്യാ_വെ_ശ'.split('_'),
	        longDateFormat : {
	            LT : 'A h:mm -നു',
	            LTS : 'A h:mm:ss -നു',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY, A h:mm -നു',
	            LLLL : 'dddd, D MMMM YYYY, A h:mm -നു'
	        },
	        calendar : {
	            sameDay : '[ഇന്ന്] LT',
	            nextDay : '[നാളെ] LT',
	            nextWeek : 'dddd, LT',
	            lastDay : '[ഇന്നലെ] LT',
	            lastWeek : '[കഴിഞ്ഞ] dddd, LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : '%s കഴിഞ്ഞ്',
	            past : '%s മുൻപ്',
	            s : 'അൽപ നിമിഷങ്ങൾ',
	            m : 'ഒരു മിനിറ്റ്',
	            mm : '%d മിനിറ്റ്',
	            h : 'ഒരു മണിക്കൂർ',
	            hh : '%d മണിക്കൂർ',
	            d : 'ഒരു ദിവസം',
	            dd : '%d ദിവസം',
	            M : 'ഒരു മാസം',
	            MM : '%d മാസം',
	            y : 'ഒരു വർഷം',
	            yy : '%d വർഷം'
	        },
	        meridiemParse: /രാത്രി|രാവിലെ|ഉച്ച കഴിഞ്ഞ്|വൈകുന്നേരം|രാത്രി/i,
	        meridiemHour : function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if ((meridiem === 'രാത്രി' && hour >= 4) ||
	                    meridiem === 'ഉച്ച കഴിഞ്ഞ്' ||
	                    meridiem === 'വൈകുന്നേരം') {
	                return hour + 12;
	            } else {
	                return hour;
	            }
	        },
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 4) {
	                return 'രാത്രി';
	            } else if (hour < 12) {
	                return 'രാവിലെ';
	            } else if (hour < 17) {
	                return 'ഉച്ച കഴിഞ്ഞ്';
	            } else if (hour < 20) {
	                return 'വൈകുന്നേരം';
	            } else {
	                return 'രാത്രി';
	            }
	        }
	    });
	
	    return ml;
	
	}));

/***/ },
/* 74 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Marathi (mr)
	//! author : Harshad Kale : https://github.com/kalehv
	//! author : Vivek Athalye : https://github.com/vnathalye
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(10)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var symbolMap = {
	        '1': '१',
	        '2': '२',
	        '3': '३',
	        '4': '४',
	        '5': '५',
	        '6': '६',
	        '7': '७',
	        '8': '८',
	        '9': '९',
	        '0': '०'
	    },
	    numberMap = {
	        '१': '1',
	        '२': '2',
	        '३': '3',
	        '४': '4',
	        '५': '5',
	        '६': '6',
	        '७': '7',
	        '८': '8',
	        '९': '9',
	        '०': '0'
	    };
	
	    function relativeTimeMr(number, withoutSuffix, string, isFuture)
	    {
	        var output = '';
	        if (withoutSuffix) {
	            switch (string) {
	                case 's': output = 'काही सेकंद'; break;
	                case 'm': output = 'एक मिनिट'; break;
	                case 'mm': output = '%d मिनिटे'; break;
	                case 'h': output = 'एक तास'; break;
	                case 'hh': output = '%d तास'; break;
	                case 'd': output = 'एक दिवस'; break;
	                case 'dd': output = '%d दिवस'; break;
	                case 'M': output = 'एक महिना'; break;
	                case 'MM': output = '%d महिने'; break;
	                case 'y': output = 'एक वर्ष'; break;
	                case 'yy': output = '%d वर्षे'; break;
	            }
	        }
	        else {
	            switch (string) {
	                case 's': output = 'काही सेकंदां'; break;
	                case 'm': output = 'एका मिनिटा'; break;
	                case 'mm': output = '%d मिनिटां'; break;
	                case 'h': output = 'एका तासा'; break;
	                case 'hh': output = '%d तासां'; break;
	                case 'd': output = 'एका दिवसा'; break;
	                case 'dd': output = '%d दिवसां'; break;
	                case 'M': output = 'एका महिन्या'; break;
	                case 'MM': output = '%d महिन्यां'; break;
	                case 'y': output = 'एका वर्षा'; break;
	                case 'yy': output = '%d वर्षां'; break;
	            }
	        }
	        return output.replace(/%d/i, number);
	    }
	
	    var mr = moment.defineLocale('mr', {
	        months : 'जानेवारी_फेब्रुवारी_मार्च_एप्रिल_मे_जून_जुलै_ऑगस्ट_सप्टेंबर_ऑक्टोबर_नोव्हेंबर_डिसेंबर'.split('_'),
	        monthsShort: 'जाने._फेब्रु._मार्च._एप्रि._मे._जून._जुलै._ऑग._सप्टें._ऑक्टो._नोव्हें._डिसें.'.split('_'),
	        monthsParseExact : true,
	        weekdays : 'रविवार_सोमवार_मंगळवार_बुधवार_गुरूवार_शुक्रवार_शनिवार'.split('_'),
	        weekdaysShort : 'रवि_सोम_मंगळ_बुध_गुरू_शुक्र_शनि'.split('_'),
	        weekdaysMin : 'र_सो_मं_बु_गु_शु_श'.split('_'),
	        longDateFormat : {
	            LT : 'A h:mm वाजता',
	            LTS : 'A h:mm:ss वाजता',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY, A h:mm वाजता',
	            LLLL : 'dddd, D MMMM YYYY, A h:mm वाजता'
	        },
	        calendar : {
	            sameDay : '[आज] LT',
	            nextDay : '[उद्या] LT',
	            nextWeek : 'dddd, LT',
	            lastDay : '[काल] LT',
	            lastWeek: '[मागील] dddd, LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future: '%sमध्ये',
	            past: '%sपूर्वी',
	            s: relativeTimeMr,
	            m: relativeTimeMr,
	            mm: relativeTimeMr,
	            h: relativeTimeMr,
	            hh: relativeTimeMr,
	            d: relativeTimeMr,
	            dd: relativeTimeMr,
	            M: relativeTimeMr,
	            MM: relativeTimeMr,
	            y: relativeTimeMr,
	            yy: relativeTimeMr
	        },
	        preparse: function (string) {
	            return string.replace(/[१२३४५६७८९०]/g, function (match) {
	                return numberMap[match];
	            });
	        },
	        postformat: function (string) {
	            return string.replace(/\d/g, function (match) {
	                return symbolMap[match];
	            });
	        },
	        meridiemParse: /रात्री|सकाळी|दुपारी|सायंकाळी/,
	        meridiemHour : function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === 'रात्री') {
	                return hour < 4 ? hour : hour + 12;
	            } else if (meridiem === 'सकाळी') {
	                return hour;
	            } else if (meridiem === 'दुपारी') {
	                return hour >= 10 ? hour : hour + 12;
	            } else if (meridiem === 'सायंकाळी') {
	                return hour + 12;
	            }
	        },
	        meridiem: function (hour, minute, isLower) {
	            if (hour < 4) {
	                return 'रात्री';
	            } else if (hour < 10) {
	                return 'सकाळी';
	            } else if (hour < 17) {
	                return 'दुपारी';
	            } else if (hour < 20) {
	                return 'सायंकाळी';
	            } else {
	                return 'रात्री';
	            }
	        },
	        week : {
	            dow : 0, // Sunday is the first day of the week.
	            doy : 6  // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	
	    return mr;
	
	}));

/***/ },
/* 75 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Bahasa Malaysia (ms-MY)
	//! author : Weldan Jamili : https://github.com/weldan
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(10)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var ms = moment.defineLocale('ms', {
	        months : 'Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember'.split('_'),
	        monthsShort : 'Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis'.split('_'),
	        weekdays : 'Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu'.split('_'),
	        weekdaysShort : 'Ahd_Isn_Sel_Rab_Kha_Jum_Sab'.split('_'),
	        weekdaysMin : 'Ah_Is_Sl_Rb_Km_Jm_Sb'.split('_'),
	        longDateFormat : {
	            LT : 'HH.mm',
	            LTS : 'HH.mm.ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY [pukul] HH.mm',
	            LLLL : 'dddd, D MMMM YYYY [pukul] HH.mm'
	        },
	        meridiemParse: /pagi|tengahari|petang|malam/,
	        meridiemHour: function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === 'pagi') {
	                return hour;
	            } else if (meridiem === 'tengahari') {
	                return hour >= 11 ? hour : hour + 12;
	            } else if (meridiem === 'petang' || meridiem === 'malam') {
	                return hour + 12;
	            }
	        },
	        meridiem : function (hours, minutes, isLower) {
	            if (hours < 11) {
	                return 'pagi';
	            } else if (hours < 15) {
	                return 'tengahari';
	            } else if (hours < 19) {
	                return 'petang';
	            } else {
	                return 'malam';
	            }
	        },
	        calendar : {
	            sameDay : '[Hari ini pukul] LT',
	            nextDay : '[Esok pukul] LT',
	            nextWeek : 'dddd [pukul] LT',
	            lastDay : '[Kelmarin pukul] LT',
	            lastWeek : 'dddd [lepas pukul] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'dalam %s',
	            past : '%s yang lepas',
	            s : 'beberapa saat',
	            m : 'seminit',
	            mm : '%d minit',
	            h : 'sejam',
	            hh : '%d jam',
	            d : 'sehari',
	            dd : '%d hari',
	            M : 'sebulan',
	            MM : '%d bulan',
	            y : 'setahun',
	            yy : '%d tahun'
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	
	    return ms;
	
	}));

/***/ },
/* 76 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Bahasa Malaysia (ms-MY)
	//! author : Weldan Jamili : https://github.com/weldan
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(10)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var ms_my = moment.defineLocale('ms-my', {
	        months : 'Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember'.split('_'),
	        monthsShort : 'Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis'.split('_'),
	        weekdays : 'Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu'.split('_'),
	        weekdaysShort : 'Ahd_Isn_Sel_Rab_Kha_Jum_Sab'.split('_'),
	        weekdaysMin : 'Ah_Is_Sl_Rb_Km_Jm_Sb'.split('_'),
	        longDateFormat : {
	            LT : 'HH.mm',
	            LTS : 'HH.mm.ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY [pukul] HH.mm',
	            LLLL : 'dddd, D MMMM YYYY [pukul] HH.mm'
	        },
	        meridiemParse: /pagi|tengahari|petang|malam/,
	        meridiemHour: function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === 'pagi') {
	                return hour;
	            } else if (meridiem === 'tengahari') {
	                return hour >= 11 ? hour : hour + 12;
	            } else if (meridiem === 'petang' || meridiem === 'malam') {
	                return hour + 12;
	            }
	        },
	        meridiem : function (hours, minutes, isLower) {
	            if (hours < 11) {
	                return 'pagi';
	            } else if (hours < 15) {
	                return 'tengahari';
	            } else if (hours < 19) {
	                return 'petang';
	            } else {
	                return 'malam';
	            }
	        },
	        calendar : {
	            sameDay : '[Hari ini pukul] LT',
	            nextDay : '[Esok pukul] LT',
	            nextWeek : 'dddd [pukul] LT',
	            lastDay : '[Kelmarin pukul] LT',
	            lastWeek : 'dddd [lepas pukul] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'dalam %s',
	            past : '%s yang lepas',
	            s : 'beberapa saat',
	            m : 'seminit',
	            mm : '%d minit',
	            h : 'sejam',
	            hh : '%d jam',
	            d : 'sehari',
	            dd : '%d hari',
	            M : 'sebulan',
	            MM : '%d bulan',
	            y : 'setahun',
	            yy : '%d tahun'
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	
	    return ms_my;
	
	}));

/***/ },
/* 77 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Burmese (my)
	//! author : Squar team, mysquar.com
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(10)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var symbolMap = {
	        '1': '၁',
	        '2': '၂',
	        '3': '၃',
	        '4': '၄',
	        '5': '၅',
	        '6': '၆',
	        '7': '၇',
	        '8': '၈',
	        '9': '၉',
	        '0': '၀'
	    }, numberMap = {
	        '၁': '1',
	        '၂': '2',
	        '၃': '3',
	        '၄': '4',
	        '၅': '5',
	        '၆': '6',
	        '၇': '7',
	        '၈': '8',
	        '၉': '9',
	        '၀': '0'
	    };
	
	    var my = moment.defineLocale('my', {
	        months: 'ဇန်နဝါရီ_ဖေဖော်ဝါရီ_မတ်_ဧပြီ_မေ_ဇွန်_ဇူလိုင်_သြဂုတ်_စက်တင်ဘာ_အောက်တိုဘာ_နိုဝင်ဘာ_ဒီဇင်ဘာ'.split('_'),
	        monthsShort: 'ဇန်_ဖေ_မတ်_ပြီ_မေ_ဇွန်_လိုင်_သြ_စက်_အောက်_နို_ဒီ'.split('_'),
	        weekdays: 'တနင်္ဂနွေ_တနင်္လာ_အင်္ဂါ_ဗုဒ္ဓဟူး_ကြာသပတေး_သောကြာ_စနေ'.split('_'),
	        weekdaysShort: 'နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ'.split('_'),
	        weekdaysMin: 'နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ'.split('_'),
	
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd D MMMM YYYY HH:mm'
	        },
	        calendar: {
	            sameDay: '[ယနေ.] LT [မှာ]',
	            nextDay: '[မနက်ဖြန်] LT [မှာ]',
	            nextWeek: 'dddd LT [မှာ]',
	            lastDay: '[မနေ.က] LT [မှာ]',
	            lastWeek: '[ပြီးခဲ့သော] dddd LT [မှာ]',
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: 'လာမည့် %s မှာ',
	            past: 'လွန်ခဲ့သော %s က',
	            s: 'စက္ကန်.အနည်းငယ်',
	            m: 'တစ်မိနစ်',
	            mm: '%d မိနစ်',
	            h: 'တစ်နာရီ',
	            hh: '%d နာရီ',
	            d: 'တစ်ရက်',
	            dd: '%d ရက်',
	            M: 'တစ်လ',
	            MM: '%d လ',
	            y: 'တစ်နှစ်',
	            yy: '%d နှစ်'
	        },
	        preparse: function (string) {
	            return string.replace(/[၁၂၃၄၅၆၇၈၉၀]/g, function (match) {
	                return numberMap[match];
	            });
	        },
	        postformat: function (string) {
	            return string.replace(/\d/g, function (match) {
	                return symbolMap[match];
	            });
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4 // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	
	    return my;
	
	}));

/***/ },
/* 78 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : norwegian bokmål (nb)
	//! authors : Espen Hovlandsdal : https://github.com/rexxars
	//!           Sigurd Gartmann : https://github.com/sigurdga
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(10)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var nb = moment.defineLocale('nb', {
	        months : 'januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember'.split('_'),
	        monthsShort : 'jan._feb._mars_april_mai_juni_juli_aug._sep._okt._nov._des.'.split('_'),
	        monthsParseExact : true,
	        weekdays : 'søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag'.split('_'),
	        weekdaysShort : 'sø._ma._ti._on._to._fr._lø.'.split('_'),
	        weekdaysMin : 'sø_ma_ti_on_to_fr_lø'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D. MMMM YYYY',
	            LLL : 'D. MMMM YYYY [kl.] HH:mm',
	            LLLL : 'dddd D. MMMM YYYY [kl.] HH:mm'
	        },
	        calendar : {
	            sameDay: '[i dag kl.] LT',
	            nextDay: '[i morgen kl.] LT',
	            nextWeek: 'dddd [kl.] LT',
	            lastDay: '[i går kl.] LT',
	            lastWeek: '[forrige] dddd [kl.] LT',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'om %s',
	            past : '%s siden',
	            s : 'noen sekunder',
	            m : 'ett minutt',
	            mm : '%d minutter',
	            h : 'en time',
	            hh : '%d timer',
	            d : 'en dag',
	            dd : '%d dager',
	            M : 'en måned',
	            MM : '%d måneder',
	            y : 'ett år',
	            yy : '%d år'
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    return nb;
	
	}));

/***/ },
/* 79 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : nepali/nepalese
	//! author : suvash : https://github.com/suvash
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(10)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var symbolMap = {
	        '1': '१',
	        '2': '२',
	        '3': '३',
	        '4': '४',
	        '5': '५',
	        '6': '६',
	        '7': '७',
	        '8': '८',
	        '9': '९',
	        '0': '०'
	    },
	    numberMap = {
	        '१': '1',
	        '२': '2',
	        '३': '3',
	        '४': '4',
	        '५': '5',
	        '६': '6',
	        '७': '7',
	        '८': '8',
	        '९': '9',
	        '०': '0'
	    };
	
	    var ne = moment.defineLocale('ne', {
	        months : 'जनवरी_फेब्रुवरी_मार्च_अप्रिल_मई_जुन_जुलाई_अगष्ट_सेप्टेम्बर_अक्टोबर_नोभेम्बर_डिसेम्बर'.split('_'),
	        monthsShort : 'जन._फेब्रु._मार्च_अप्रि._मई_जुन_जुलाई._अग._सेप्ट._अक्टो._नोभे._डिसे.'.split('_'),
	        monthsParseExact : true,
	        weekdays : 'आइतबार_सोमबार_मङ्गलबार_बुधबार_बिहिबार_शुक्रबार_शनिबार'.split('_'),
	        weekdaysShort : 'आइत._सोम._मङ्गल._बुध._बिहि._शुक्र._शनि.'.split('_'),
	        weekdaysMin : 'आ._सो._मं._बु._बि._शु._श.'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat : {
	            LT : 'Aको h:mm बजे',
	            LTS : 'Aको h:mm:ss बजे',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY, Aको h:mm बजे',
	            LLLL : 'dddd, D MMMM YYYY, Aको h:mm बजे'
	        },
	        preparse: function (string) {
	            return string.replace(/[१२३४५६७८९०]/g, function (match) {
	                return numberMap[match];
	            });
	        },
	        postformat: function (string) {
	            return string.replace(/\d/g, function (match) {
	                return symbolMap[match];
	            });
	        },
	        meridiemParse: /राति|बिहान|दिउँसो|साँझ/,
	        meridiemHour : function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === 'राति') {
	                return hour < 4 ? hour : hour + 12;
	            } else if (meridiem === 'बिहान') {
	                return hour;
	            } else if (meridiem === 'दिउँसो') {
	                return hour >= 10 ? hour : hour + 12;
	            } else if (meridiem === 'साँझ') {
	                return hour + 12;
	            }
	        },
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 3) {
	                return 'राति';
	            } else if (hour < 12) {
	                return 'बिहान';
	            } else if (hour < 16) {
	                return 'दिउँसो';
	            } else if (hour < 20) {
	                return 'साँझ';
	            } else {
	                return 'राति';
	            }
	        },
	        calendar : {
	            sameDay : '[आज] LT',
	            nextDay : '[भोलि] LT',
	            nextWeek : '[आउँदो] dddd[,] LT',
	            lastDay : '[हिजो] LT',
	            lastWeek : '[गएको] dddd[,] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : '%sमा',
	            past : '%s अगाडि',
	            s : 'केही क्षण',
	            m : 'एक मिनेट',
	            mm : '%d मिनेट',
	            h : 'एक घण्टा',
	            hh : '%d घण्टा',
	            d : 'एक दिन',
	            dd : '%d दिन',
	            M : 'एक महिना',
	            MM : '%d महिना',
	            y : 'एक बर्ष',
	            yy : '%d बर्ष'
	        },
	        week : {
	            dow : 0, // Sunday is the first day of the week.
	            doy : 6  // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	
	    return ne;
	
	}));

/***/ },
/* 80 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : dutch (nl)
	//! author : Joris Röling : https://github.com/jjupiter
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(10)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var monthsShortWithDots = 'jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.'.split('_'),
	        monthsShortWithoutDots = 'jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec'.split('_');
	
	    var nl = moment.defineLocale('nl', {
	        months : 'januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december'.split('_'),
	        monthsShort : function (m, format) {
	            if (/-MMM-/.test(format)) {
	                return monthsShortWithoutDots[m.month()];
	            } else {
	                return monthsShortWithDots[m.month()];
	            }
	        },
	        monthsParseExact : true,
	        weekdays : 'zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag'.split('_'),
	        weekdaysShort : 'zo._ma._di._wo._do._vr._za.'.split('_'),
	        weekdaysMin : 'Zo_Ma_Di_Wo_Do_Vr_Za'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD-MM-YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd D MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay: '[vandaag om] LT',
	            nextDay: '[morgen om] LT',
	            nextWeek: 'dddd [om] LT',
	            lastDay: '[gisteren om] LT',
	            lastWeek: '[afgelopen] dddd [om] LT',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'over %s',
	            past : '%s geleden',
	            s : 'een paar seconden',
	            m : 'één minuut',
	            mm : '%d minuten',
	            h : 'één uur',
	            hh : '%d uur',
	            d : 'één dag',
	            dd : '%d dagen',
	            M : 'één maand',
	            MM : '%d maanden',
	            y : 'één jaar',
	            yy : '%d jaar'
	        },
	        ordinalParse: /\d{1,2}(ste|de)/,
	        ordinal : function (number) {
	            return number + ((number === 1 || number === 8 || number >= 20) ? 'ste' : 'de');
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    return nl;
	
	}));

/***/ },
/* 81 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : norwegian nynorsk (nn)
	//! author : https://github.com/mechuwind
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(10)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var nn = moment.defineLocale('nn', {
	        months : 'januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember'.split('_'),
	        monthsShort : 'jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des'.split('_'),
	        weekdays : 'sundag_måndag_tysdag_onsdag_torsdag_fredag_laurdag'.split('_'),
	        weekdaysShort : 'sun_mån_tys_ons_tor_fre_lau'.split('_'),
	        weekdaysMin : 'su_må_ty_on_to_fr_lø'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D. MMMM YYYY',
	            LLL : 'D. MMMM YYYY [kl.] H:mm',
	            LLLL : 'dddd D. MMMM YYYY [kl.] HH:mm'
	        },
	        calendar : {
	            sameDay: '[I dag klokka] LT',
	            nextDay: '[I morgon klokka] LT',
	            nextWeek: 'dddd [klokka] LT',
	            lastDay: '[I går klokka] LT',
	            lastWeek: '[Føregåande] dddd [klokka] LT',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'om %s',
	            past : '%s sidan',
	            s : 'nokre sekund',
	            m : 'eit minutt',
	            mm : '%d minutt',
	            h : 'ein time',
	            hh : '%d timar',
	            d : 'ein dag',
	            dd : '%d dagar',
	            M : 'ein månad',
	            MM : '%d månader',
	            y : 'eit år',
	            yy : '%d år'
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    return nn;
	
	}));

/***/ },
/* 82 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : punjabi india (pa-in)
	//! author : Harpreet Singh : https://github.com/harpreetkhalsagtbit
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(10)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var symbolMap = {
	        '1': '੧',
	        '2': '੨',
	        '3': '੩',
	        '4': '੪',
	        '5': '੫',
	        '6': '੬',
	        '7': '੭',
	        '8': '੮',
	        '9': '੯',
	        '0': '੦'
	    },
	    numberMap = {
	        '੧': '1',
	        '੨': '2',
	        '੩': '3',
	        '੪': '4',
	        '੫': '5',
	        '੬': '6',
	        '੭': '7',
	        '੮': '8',
	        '੯': '9',
	        '੦': '0'
	    };
	
	    var pa_in = moment.defineLocale('pa-in', {
	        // There are months name as per Nanakshahi Calender but they are not used as rigidly in modern Punjabi.
	        months : 'ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ'.split('_'),
	        monthsShort : 'ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ'.split('_'),
	        weekdays : 'ਐਤਵਾਰ_ਸੋਮਵਾਰ_ਮੰਗਲਵਾਰ_ਬੁਧਵਾਰ_ਵੀਰਵਾਰ_ਸ਼ੁੱਕਰਵਾਰ_ਸ਼ਨੀਚਰਵਾਰ'.split('_'),
	        weekdaysShort : 'ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ'.split('_'),
	        weekdaysMin : 'ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ'.split('_'),
	        longDateFormat : {
	            LT : 'A h:mm ਵਜੇ',
	            LTS : 'A h:mm:ss ਵਜੇ',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY, A h:mm ਵਜੇ',
	            LLLL : 'dddd, D MMMM YYYY, A h:mm ਵਜੇ'
	        },
	        calendar : {
	            sameDay : '[ਅਜ] LT',
	            nextDay : '[ਕਲ] LT',
	            nextWeek : 'dddd, LT',
	            lastDay : '[ਕਲ] LT',
	            lastWeek : '[ਪਿਛਲੇ] dddd, LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : '%s ਵਿੱਚ',
	            past : '%s ਪਿਛਲੇ',
	            s : 'ਕੁਝ ਸਕਿੰਟ',
	            m : 'ਇਕ ਮਿੰਟ',
	            mm : '%d ਮਿੰਟ',
	            h : 'ਇੱਕ ਘੰਟਾ',
	            hh : '%d ਘੰਟੇ',
	            d : 'ਇੱਕ ਦਿਨ',
	            dd : '%d ਦਿਨ',
	            M : 'ਇੱਕ ਮਹੀਨਾ',
	            MM : '%d ਮਹੀਨੇ',
	            y : 'ਇੱਕ ਸਾਲ',
	            yy : '%d ਸਾਲ'
	        },
	        preparse: function (string) {
	            return string.replace(/[੧੨੩੪੫੬੭੮੯੦]/g, function (match) {
	                return numberMap[match];
	            });
	        },
	        postformat: function (string) {
	            return string.replace(/\d/g, function (match) {
	                return symbolMap[match];
	            });
	        },
	        // Punjabi notation for meridiems are quite fuzzy in practice. While there exists
	        // a rigid notion of a 'Pahar' it is not used as rigidly in modern Punjabi.
	        meridiemParse: /ਰਾਤ|ਸਵੇਰ|ਦੁਪਹਿਰ|ਸ਼ਾਮ/,
	        meridiemHour : function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === 'ਰਾਤ') {
	                return hour < 4 ? hour : hour + 12;
	            } else if (meridiem === 'ਸਵੇਰ') {
	                return hour;
	            } else if (meridiem === 'ਦੁਪਹਿਰ') {
	                return hour >= 10 ? hour : hour + 12;
	            } else if (meridiem === 'ਸ਼ਾਮ') {
	                return hour + 12;
	            }
	        },
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 4) {
	                return 'ਰਾਤ';
	            } else if (hour < 10) {
	                return 'ਸਵੇਰ';
	            } else if (hour < 17) {
	                return 'ਦੁਪਹਿਰ';
	            } else if (hour < 20) {
	                return 'ਸ਼ਾਮ';
	            } else {
	                return 'ਰਾਤ';
	            }
	        },
	        week : {
	            dow : 0, // Sunday is the first day of the week.
	            doy : 6  // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	
	    return pa_in;
	
	}));

/***/ },
/* 83 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : polish (pl)
	//! author : Rafal Hirsz : https://github.com/evoL
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(10)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var monthsNominative = 'styczeń_luty_marzec_kwiecień_maj_czerwiec_lipiec_sierpień_wrzesień_październik_listopad_grudzień'.split('_'),
	        monthsSubjective = 'stycznia_lutego_marca_kwietnia_maja_czerwca_lipca_sierpnia_września_października_listopada_grudnia'.split('_');
	    function plural(n) {
	        return (n % 10 < 5) && (n % 10 > 1) && ((~~(n / 10) % 10) !== 1);
	    }
	    function translate(number, withoutSuffix, key) {
	        var result = number + ' ';
	        switch (key) {
	        case 'm':
	            return withoutSuffix ? 'minuta' : 'minutę';
	        case 'mm':
	            return result + (plural(number) ? 'minuty' : 'minut');
	        case 'h':
	            return withoutSuffix  ? 'godzina'  : 'godzinę';
	        case 'hh':
	            return result + (plural(number) ? 'godziny' : 'godzin');
	        case 'MM':
	            return result + (plural(number) ? 'miesiące' : 'miesięcy');
	        case 'yy':
	            return result + (plural(number) ? 'lata' : 'lat');
	        }
	    }
	
	    var pl = moment.defineLocale('pl', {
	        months : function (momentToFormat, format) {
	            if (format === '') {
	                // Hack: if format empty we know this is used to generate
	                // RegExp by moment. Give then back both valid forms of months
	                // in RegExp ready format.
	                return '(' + monthsSubjective[momentToFormat.month()] + '|' + monthsNominative[momentToFormat.month()] + ')';
	            } else if (/D MMMM/.test(format)) {
	                return monthsSubjective[momentToFormat.month()];
	            } else {
	                return monthsNominative[momentToFormat.month()];
	            }
	        },
	        monthsShort : 'sty_lut_mar_kwi_maj_cze_lip_sie_wrz_paź_lis_gru'.split('_'),
	        weekdays : 'niedziela_poniedziałek_wtorek_środa_czwartek_piątek_sobota'.split('_'),
	        weekdaysShort : 'nie_pon_wt_śr_czw_pt_sb'.split('_'),
	        weekdaysMin : 'Nd_Pn_Wt_Śr_Cz_Pt_So'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd, D MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay: '[Dziś o] LT',
	            nextDay: '[Jutro o] LT',
	            nextWeek: '[W] dddd [o] LT',
	            lastDay: '[Wczoraj o] LT',
	            lastWeek: function () {
	                switch (this.day()) {
	                case 0:
	                    return '[W zeszłą niedzielę o] LT';
	                case 3:
	                    return '[W zeszłą środę o] LT';
	                case 6:
	                    return '[W zeszłą sobotę o] LT';
	                default:
	                    return '[W zeszły] dddd [o] LT';
	                }
	            },
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'za %s',
	            past : '%s temu',
	            s : 'kilka sekund',
	            m : translate,
	            mm : translate,
	            h : translate,
	            hh : translate,
	            d : '1 dzień',
	            dd : '%d dni',
	            M : 'miesiąc',
	            MM : translate,
	            y : 'rok',
	            yy : translate
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    return pl;
	
	}));

/***/ },
/* 84 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : portuguese (pt)
	//! author : Jefferson : https://github.com/jalex79
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(10)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var pt = moment.defineLocale('pt', {
	        months : 'Janeiro_Fevereiro_Março_Abril_Maio_Junho_Julho_Agosto_Setembro_Outubro_Novembro_Dezembro'.split('_'),
	        monthsShort : 'Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez'.split('_'),
	        weekdays : 'Domingo_Segunda-Feira_Terça-Feira_Quarta-Feira_Quinta-Feira_Sexta-Feira_Sábado'.split('_'),
	        weekdaysShort : 'Dom_Seg_Ter_Qua_Qui_Sex_Sáb'.split('_'),
	        weekdaysMin : 'Dom_2ª_3ª_4ª_5ª_6ª_Sáb'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D [de] MMMM [de] YYYY',
	            LLL : 'D [de] MMMM [de] YYYY HH:mm',
	            LLLL : 'dddd, D [de] MMMM [de] YYYY HH:mm'
	        },
	        calendar : {
	            sameDay: '[Hoje às] LT',
	            nextDay: '[Amanhã às] LT',
	            nextWeek: 'dddd [às] LT',
	            lastDay: '[Ontem às] LT',
	            lastWeek: function () {
	                return (this.day() === 0 || this.day() === 6) ?
	                    '[Último] dddd [às] LT' : // Saturday + Sunday
	                    '[Última] dddd [às] LT'; // Monday - Friday
	            },
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'em %s',
	            past : 'há %s',
	            s : 'segundos',
	            m : 'um minuto',
	            mm : '%d minutos',
	            h : 'uma hora',
	            hh : '%d horas',
	            d : 'um dia',
	            dd : '%d dias',
	            M : 'um mês',
	            MM : '%d meses',
	            y : 'um ano',
	            yy : '%d anos'
	        },
	        ordinalParse: /\d{1,2}º/,
	        ordinal : '%dº',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    return pt;
	
	}));

/***/ },
/* 85 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : brazilian portuguese (pt-br)
	//! author : Caio Ribeiro Pereira : https://github.com/caio-ribeiro-pereira
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(10)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var pt_br = moment.defineLocale('pt-br', {
	        months : 'Janeiro_Fevereiro_Março_Abril_Maio_Junho_Julho_Agosto_Setembro_Outubro_Novembro_Dezembro'.split('_'),
	        monthsShort : 'Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez'.split('_'),
	        weekdays : 'Domingo_Segunda-feira_Terça-feira_Quarta-feira_Quinta-feira_Sexta-feira_Sábado'.split('_'),
	        weekdaysShort : 'Dom_Seg_Ter_Qua_Qui_Sex_Sáb'.split('_'),
	        weekdaysMin : 'Dom_2ª_3ª_4ª_5ª_6ª_Sáb'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D [de] MMMM [de] YYYY',
	            LLL : 'D [de] MMMM [de] YYYY [às] HH:mm',
	            LLLL : 'dddd, D [de] MMMM [de] YYYY [às] HH:mm'
	        },
	        calendar : {
	            sameDay: '[Hoje às] LT',
	            nextDay: '[Amanhã às] LT',
	            nextWeek: 'dddd [às] LT',
	            lastDay: '[Ontem às] LT',
	            lastWeek: function () {
	                return (this.day() === 0 || this.day() === 6) ?
	                    '[Último] dddd [às] LT' : // Saturday + Sunday
	                    '[Última] dddd [às] LT'; // Monday - Friday
	            },
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'em %s',
	            past : '%s atrás',
	            s : 'poucos segundos',
	            m : 'um minuto',
	            mm : '%d minutos',
	            h : 'uma hora',
	            hh : '%d horas',
	            d : 'um dia',
	            dd : '%d dias',
	            M : 'um mês',
	            MM : '%d meses',
	            y : 'um ano',
	            yy : '%d anos'
	        },
	        ordinalParse: /\d{1,2}º/,
	        ordinal : '%dº'
	    });
	
	    return pt_br;
	
	}));

/***/ },
/* 86 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : romanian (ro)
	//! author : Vlad Gurdiga : https://github.com/gurdiga
	//! author : Valentin Agachi : https://github.com/avaly
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(10)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    function relativeTimeWithPlural(number, withoutSuffix, key) {
	        var format = {
	                'mm': 'minute',
	                'hh': 'ore',
	                'dd': 'zile',
	                'MM': 'luni',
	                'yy': 'ani'
	            },
	            separator = ' ';
	        if (number % 100 >= 20 || (number >= 100 && number % 100 === 0)) {
	            separator = ' de ';
	        }
	        return number + separator + format[key];
	    }
	
	    var ro = moment.defineLocale('ro', {
	        months : 'ianuarie_februarie_martie_aprilie_mai_iunie_iulie_august_septembrie_octombrie_noiembrie_decembrie'.split('_'),
	        monthsShort : 'ian._febr._mart._apr._mai_iun._iul._aug._sept._oct._nov._dec.'.split('_'),
	        monthsParseExact: true,
	        weekdays : 'duminică_luni_marți_miercuri_joi_vineri_sâmbătă'.split('_'),
	        weekdaysShort : 'Dum_Lun_Mar_Mie_Joi_Vin_Sâm'.split('_'),
	        weekdaysMin : 'Du_Lu_Ma_Mi_Jo_Vi_Sâ'.split('_'),
	        longDateFormat : {
	            LT : 'H:mm',
	            LTS : 'H:mm:ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY H:mm',
	            LLLL : 'dddd, D MMMM YYYY H:mm'
	        },
	        calendar : {
	            sameDay: '[azi la] LT',
	            nextDay: '[mâine la] LT',
	            nextWeek: 'dddd [la] LT',
	            lastDay: '[ieri la] LT',
	            lastWeek: '[fosta] dddd [la] LT',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'peste %s',
	            past : '%s în urmă',
	            s : 'câteva secunde',
	            m : 'un minut',
	            mm : relativeTimeWithPlural,
	            h : 'o oră',
	            hh : relativeTimeWithPlural,
	            d : 'o zi',
	            dd : relativeTimeWithPlural,
	            M : 'o lună',
	            MM : relativeTimeWithPlural,
	            y : 'un an',
	            yy : relativeTimeWithPlural
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	
	    return ro;
	
	}));

/***/ },
/* 87 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : russian (ru)
	//! author : Viktorminator : https://github.com/Viktorminator
	//! Author : Menelion Elensúle : https://github.com/Oire
	//! author : Коренберг Марк : https://github.com/socketpair
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(10)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    function plural(word, num) {
	        var forms = word.split('_');
	        return num % 10 === 1 && num % 100 !== 11 ? forms[0] : (num % 10 >= 2 && num % 10 <= 4 && (num % 100 < 10 || num % 100 >= 20) ? forms[1] : forms[2]);
	    }
	    function relativeTimeWithPlural(number, withoutSuffix, key) {
	        var format = {
	            'mm': withoutSuffix ? 'минута_минуты_минут' : 'минуту_минуты_минут',
	            'hh': 'час_часа_часов',
	            'dd': 'день_дня_дней',
	            'MM': 'месяц_месяца_месяцев',
	            'yy': 'год_года_лет'
	        };
	        if (key === 'm') {
	            return withoutSuffix ? 'минута' : 'минуту';
	        }
	        else {
	            return number + ' ' + plural(format[key], +number);
	        }
	    }
	    var monthsParse = [/^янв/i, /^фев/i, /^мар/i, /^апр/i, /^ма[йя]/i, /^июн/i, /^июл/i, /^авг/i, /^сен/i, /^окт/i, /^ноя/i, /^дек/i];
	
	    // http://new.gramota.ru/spravka/rules/139-prop : § 103
	    // Сокращения месяцев: http://new.gramota.ru/spravka/buro/search-answer?s=242637
	    // CLDR data:          http://www.unicode.org/cldr/charts/28/summary/ru.html#1753
	    var ru = moment.defineLocale('ru', {
	        months : {
	            format: 'января_февраля_марта_апреля_мая_июня_июля_августа_сентября_октября_ноября_декабря'.split('_'),
	            standalone: 'январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь'.split('_')
	        },
	        monthsShort : {
	            // по CLDR именно "июл." и "июн.", но какой смысл менять букву на точку ?
	            format: 'янв._февр._мар._апр._мая_июня_июля_авг._сент._окт._нояб._дек.'.split('_'),
	            standalone: 'янв._февр._март_апр._май_июнь_июль_авг._сент._окт._нояб._дек.'.split('_')
	        },
	        weekdays : {
	            standalone: 'воскресенье_понедельник_вторник_среда_четверг_пятница_суббота'.split('_'),
	            format: 'воскресенье_понедельник_вторник_среду_четверг_пятницу_субботу'.split('_'),
	            isFormat: /\[ ?[Вв] ?(?:прошлую|следующую|эту)? ?\] ?dddd/
	        },
	        weekdaysShort : 'вс_пн_вт_ср_чт_пт_сб'.split('_'),
	        weekdaysMin : 'вс_пн_вт_ср_чт_пт_сб'.split('_'),
	        monthsParse : monthsParse,
	        longMonthsParse : monthsParse,
	        shortMonthsParse : monthsParse,
	        monthsRegex: /^(сентябр[яь]|октябр[яь]|декабр[яь]|феврал[яь]|январ[яь]|апрел[яь]|августа?|ноябр[яь]|сент\.|февр\.|нояб\.|июнь|янв.|июль|дек.|авг.|апр.|марта|мар[.т]|окт.|июн[яь]|июл[яь]|ма[яй])/i,
	        monthsShortRegex: /^(сентябр[яь]|октябр[яь]|декабр[яь]|феврал[яь]|январ[яь]|апрел[яь]|августа?|ноябр[яь]|сент\.|февр\.|нояб\.|июнь|янв.|июль|дек.|авг.|апр.|марта|мар[.т]|окт.|июн[яь]|июл[яь]|ма[яй])/i,
	        monthsStrictRegex: /^(сентябр[яь]|октябр[яь]|декабр[яь]|феврал[яь]|январ[яь]|апрел[яь]|августа?|ноябр[яь]|марта?|июн[яь]|июл[яь]|ма[яй])/i,
	        monthsShortStrictRegex: /^(нояб\.|февр\.|сент\.|июль|янв\.|июн[яь]|мар[.т]|авг\.|апр\.|окт\.|дек\.|ма[яй])/i,
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D MMMM YYYY г.',
	            LLL : 'D MMMM YYYY г., HH:mm',
	            LLLL : 'dddd, D MMMM YYYY г., HH:mm'
	        },
	        calendar : {
	            sameDay: '[Сегодня в] LT',
	            nextDay: '[Завтра в] LT',
	            lastDay: '[Вчера в] LT',
	            nextWeek: function (now) {
	                if (now.week() !== this.week()) {
	                    switch (this.day()) {
	                    case 0:
	                        return '[В следующее] dddd [в] LT';
	                    case 1:
	                    case 2:
	                    case 4:
	                        return '[В следующий] dddd [в] LT';
	                    case 3:
	                    case 5:
	                    case 6:
	                        return '[В следующую] dddd [в] LT';
	                    }
	                } else {
	                    if (this.day() === 2) {
	                        return '[Во] dddd [в] LT';
	                    } else {
	                        return '[В] dddd [в] LT';
	                    }
	                }
	            },
	            lastWeek: function (now) {
	                if (now.week() !== this.week()) {
	                    switch (this.day()) {
	                    case 0:
	                        return '[В прошлое] dddd [в] LT';
	                    case 1:
	                    case 2:
	                    case 4:
	                        return '[В прошлый] dddd [в] LT';
	                    case 3:
	                    case 5:
	                    case 6:
	                        return '[В прошлую] dddd [в] LT';
	                    }
	                } else {
	                    if (this.day() === 2) {
	                        return '[Во] dddd [в] LT';
	                    } else {
	                        return '[В] dddd [в] LT';
	                    }
	                }
	            },
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'через %s',
	            past : '%s назад',
	            s : 'несколько секунд',
	            m : relativeTimeWithPlural,
	            mm : relativeTimeWithPlural,
	            h : 'час',
	            hh : relativeTimeWithPlural,
	            d : 'день',
	            dd : relativeTimeWithPlural,
	            M : 'месяц',
	            MM : relativeTimeWithPlural,
	            y : 'год',
	            yy : relativeTimeWithPlural
	        },
	        meridiemParse: /ночи|утра|дня|вечера/i,
	        isPM : function (input) {
	            return /^(дня|вечера)$/.test(input);
	        },
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 4) {
	                return 'ночи';
	            } else if (hour < 12) {
	                return 'утра';
	            } else if (hour < 17) {
	                return 'дня';
	            } else {
	                return 'вечера';
	            }
	        },
	        ordinalParse: /\d{1,2}-(й|го|я)/,
	        ordinal: function (number, period) {
	            switch (period) {
	            case 'M':
	            case 'd':
	            case 'DDD':
	                return number + '-й';
	            case 'D':
	                return number + '-го';
	            case 'w':
	            case 'W':
	                return number + '-я';
	            default:
	                return number;
	            }
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	
	    return ru;
	
	}));

/***/ },
/* 88 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Northern Sami (se)
	//! authors : Bård Rolstad Henriksen : https://github.com/karamell
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(10)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	
	    var se = moment.defineLocale('se', {
	        months : 'ođđajagemánnu_guovvamánnu_njukčamánnu_cuoŋománnu_miessemánnu_geassemánnu_suoidnemánnu_borgemánnu_čakčamánnu_golggotmánnu_skábmamánnu_juovlamánnu'.split('_'),
	        monthsShort : 'ođđj_guov_njuk_cuo_mies_geas_suoi_borg_čakč_golg_skáb_juov'.split('_'),
	        weekdays : 'sotnabeaivi_vuossárga_maŋŋebárga_gaskavahkku_duorastat_bearjadat_lávvardat'.split('_'),
	        weekdaysShort : 'sotn_vuos_maŋ_gask_duor_bear_láv'.split('_'),
	        weekdaysMin : 's_v_m_g_d_b_L'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD.MM.YYYY',
	            LL : 'MMMM D. [b.] YYYY',
	            LLL : 'MMMM D. [b.] YYYY [ti.] HH:mm',
	            LLLL : 'dddd, MMMM D. [b.] YYYY [ti.] HH:mm'
	        },
	        calendar : {
	            sameDay: '[otne ti] LT',
	            nextDay: '[ihttin ti] LT',
	            nextWeek: 'dddd [ti] LT',
	            lastDay: '[ikte ti] LT',
	            lastWeek: '[ovddit] dddd [ti] LT',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : '%s geažes',
	            past : 'maŋit %s',
	            s : 'moadde sekunddat',
	            m : 'okta minuhta',
	            mm : '%d minuhtat',
	            h : 'okta diimmu',
	            hh : '%d diimmut',
	            d : 'okta beaivi',
	            dd : '%d beaivvit',
	            M : 'okta mánnu',
	            MM : '%d mánut',
	            y : 'okta jahki',
	            yy : '%d jagit'
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    return se;
	
	}));

/***/ },
/* 89 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Sinhalese (si)
	//! author : Sampath Sitinamaluwa : https://github.com/sampathsris
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(10)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    /*jshint -W100*/
	    var si = moment.defineLocale('si', {
	        months : 'ජනවාරි_පෙබරවාරි_මාර්තු_අප්‍රේල්_මැයි_ජූනි_ජූලි_අගෝස්තු_සැප්තැම්බර්_ඔක්තෝබර්_නොවැම්බර්_දෙසැම්බර්'.split('_'),
	        monthsShort : 'ජන_පෙබ_මාර්_අප්_මැයි_ජූනි_ජූලි_අගෝ_සැප්_ඔක්_නොවැ_දෙසැ'.split('_'),
	        weekdays : 'ඉරිදා_සඳුදා_අඟහරුවාදා_බදාදා_බ්‍රහස්පතින්දා_සිකුරාදා_සෙනසුරාදා'.split('_'),
	        weekdaysShort : 'ඉරි_සඳු_අඟ_බදා_බ්‍රහ_සිකු_සෙන'.split('_'),
	        weekdaysMin : 'ඉ_ස_අ_බ_බ්‍ර_සි_සෙ'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat : {
	            LT : 'a h:mm',
	            LTS : 'a h:mm:ss',
	            L : 'YYYY/MM/DD',
	            LL : 'YYYY MMMM D',
	            LLL : 'YYYY MMMM D, a h:mm',
	            LLLL : 'YYYY MMMM D [වැනි] dddd, a h:mm:ss'
	        },
	        calendar : {
	            sameDay : '[අද] LT[ට]',
	            nextDay : '[හෙට] LT[ට]',
	            nextWeek : 'dddd LT[ට]',
	            lastDay : '[ඊයේ] LT[ට]',
	            lastWeek : '[පසුගිය] dddd LT[ට]',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : '%sකින්',
	            past : '%sකට පෙර',
	            s : 'තත්පර කිහිපය',
	            m : 'මිනිත්තුව',
	            mm : 'මිනිත්තු %d',
	            h : 'පැය',
	            hh : 'පැය %d',
	            d : 'දිනය',
	            dd : 'දින %d',
	            M : 'මාසය',
	            MM : 'මාස %d',
	            y : 'වසර',
	            yy : 'වසර %d'
	        },
	        ordinalParse: /\d{1,2} වැනි/,
	        ordinal : function (number) {
	            return number + ' වැනි';
	        },
	        meridiemParse : /පෙර වරු|පස් වරු|පෙ.ව|ප.ව./,
	        isPM : function (input) {
	            return input === 'ප.ව.' || input === 'පස් වරු';
	        },
	        meridiem : function (hours, minutes, isLower) {
	            if (hours > 11) {
	                return isLower ? 'ප.ව.' : 'පස් වරු';
	            } else {
	                return isLower ? 'පෙ.ව.' : 'පෙර වරු';
	            }
	        }
	    });
	
	    return si;
	
	}));

/***/ },
/* 90 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : slovak (sk)
	//! author : Martin Minka : https://github.com/k2s
	//! based on work of petrbela : https://github.com/petrbela
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(10)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var months = 'január_február_marec_apríl_máj_jún_júl_august_september_október_november_december'.split('_'),
	        monthsShort = 'jan_feb_mar_apr_máj_jún_júl_aug_sep_okt_nov_dec'.split('_');
	    function plural(n) {
	        return (n > 1) && (n < 5);
	    }
	    function translate(number, withoutSuffix, key, isFuture) {
	        var result = number + ' ';
	        switch (key) {
	        case 's':  // a few seconds / in a few seconds / a few seconds ago
	            return (withoutSuffix || isFuture) ? 'pár sekúnd' : 'pár sekundami';
	        case 'm':  // a minute / in a minute / a minute ago
	            return withoutSuffix ? 'minúta' : (isFuture ? 'minútu' : 'minútou');
	        case 'mm': // 9 minutes / in 9 minutes / 9 minutes ago
	            if (withoutSuffix || isFuture) {
	                return result + (plural(number) ? 'minúty' : 'minút');
	            } else {
	                return result + 'minútami';
	            }
	            break;
	        case 'h':  // an hour / in an hour / an hour ago
	            return withoutSuffix ? 'hodina' : (isFuture ? 'hodinu' : 'hodinou');
	        case 'hh': // 9 hours / in 9 hours / 9 hours ago
	            if (withoutSuffix || isFuture) {
	                return result + (plural(number) ? 'hodiny' : 'hodín');
	            } else {
	                return result + 'hodinami';
	            }
	            break;
	        case 'd':  // a day / in a day / a day ago
	            return (withoutSuffix || isFuture) ? 'deň' : 'dňom';
	        case 'dd': // 9 days / in 9 days / 9 days ago
	            if (withoutSuffix || isFuture) {
	                return result + (plural(number) ? 'dni' : 'dní');
	            } else {
	                return result + 'dňami';
	            }
	            break;
	        case 'M':  // a month / in a month / a month ago
	            return (withoutSuffix || isFuture) ? 'mesiac' : 'mesiacom';
	        case 'MM': // 9 months / in 9 months / 9 months ago
	            if (withoutSuffix || isFuture) {
	                return result + (plural(number) ? 'mesiace' : 'mesiacov');
	            } else {
	                return result + 'mesiacmi';
	            }
	            break;
	        case 'y':  // a year / in a year / a year ago
	            return (withoutSuffix || isFuture) ? 'rok' : 'rokom';
	        case 'yy': // 9 years / in 9 years / 9 years ago
	            if (withoutSuffix || isFuture) {
	                return result + (plural(number) ? 'roky' : 'rokov');
	            } else {
	                return result + 'rokmi';
	            }
	            break;
	        }
	    }
	
	    var sk = moment.defineLocale('sk', {
	        months : months,
	        monthsShort : monthsShort,
	        weekdays : 'nedeľa_pondelok_utorok_streda_štvrtok_piatok_sobota'.split('_'),
	        weekdaysShort : 'ne_po_ut_st_št_pi_so'.split('_'),
	        weekdaysMin : 'ne_po_ut_st_št_pi_so'.split('_'),
	        longDateFormat : {
	            LT: 'H:mm',
	            LTS : 'H:mm:ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D. MMMM YYYY',
	            LLL : 'D. MMMM YYYY H:mm',
	            LLLL : 'dddd D. MMMM YYYY H:mm'
	        },
	        calendar : {
	            sameDay: '[dnes o] LT',
	            nextDay: '[zajtra o] LT',
	            nextWeek: function () {
	                switch (this.day()) {
	                case 0:
	                    return '[v nedeľu o] LT';
	                case 1:
	                case 2:
	                    return '[v] dddd [o] LT';
	                case 3:
	                    return '[v stredu o] LT';
	                case 4:
	                    return '[vo štvrtok o] LT';
	                case 5:
	                    return '[v piatok o] LT';
	                case 6:
	                    return '[v sobotu o] LT';
	                }
	            },
	            lastDay: '[včera o] LT',
	            lastWeek: function () {
	                switch (this.day()) {
	                case 0:
	                    return '[minulú nedeľu o] LT';
	                case 1:
	                case 2:
	                    return '[minulý] dddd [o] LT';
	                case 3:
	                    return '[minulú stredu o] LT';
	                case 4:
	                case 5:
	                    return '[minulý] dddd [o] LT';
	                case 6:
	                    return '[minulú sobotu o] LT';
	                }
	            },
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'za %s',
	            past : 'pred %s',
	            s : translate,
	            m : translate,
	            mm : translate,
	            h : translate,
	            hh : translate,
	            d : translate,
	            dd : translate,
	            M : translate,
	            MM : translate,
	            y : translate,
	            yy : translate
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    return sk;
	
	}));

/***/ },
/* 91 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : slovenian (sl)
	//! author : Robert Sedovšek : https://github.com/sedovsek
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(10)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    function processRelativeTime(number, withoutSuffix, key, isFuture) {
	        var result = number + ' ';
	        switch (key) {
	        case 's':
	            return withoutSuffix || isFuture ? 'nekaj sekund' : 'nekaj sekundami';
	        case 'm':
	            return withoutSuffix ? 'ena minuta' : 'eno minuto';
	        case 'mm':
	            if (number === 1) {
	                result += withoutSuffix ? 'minuta' : 'minuto';
	            } else if (number === 2) {
	                result += withoutSuffix || isFuture ? 'minuti' : 'minutama';
	            } else if (number < 5) {
	                result += withoutSuffix || isFuture ? 'minute' : 'minutami';
	            } else {
	                result += withoutSuffix || isFuture ? 'minut' : 'minutami';
	            }
	            return result;
	        case 'h':
	            return withoutSuffix ? 'ena ura' : 'eno uro';
	        case 'hh':
	            if (number === 1) {
	                result += withoutSuffix ? 'ura' : 'uro';
	            } else if (number === 2) {
	                result += withoutSuffix || isFuture ? 'uri' : 'urama';
	            } else if (number < 5) {
	                result += withoutSuffix || isFuture ? 'ure' : 'urami';
	            } else {
	                result += withoutSuffix || isFuture ? 'ur' : 'urami';
	            }
	            return result;
	        case 'd':
	            return withoutSuffix || isFuture ? 'en dan' : 'enim dnem';
	        case 'dd':
	            if (number === 1) {
	                result += withoutSuffix || isFuture ? 'dan' : 'dnem';
	            } else if (number === 2) {
	                result += withoutSuffix || isFuture ? 'dni' : 'dnevoma';
	            } else {
	                result += withoutSuffix || isFuture ? 'dni' : 'dnevi';
	            }
	            return result;
	        case 'M':
	            return withoutSuffix || isFuture ? 'en mesec' : 'enim mesecem';
	        case 'MM':
	            if (number === 1) {
	                result += withoutSuffix || isFuture ? 'mesec' : 'mesecem';
	            } else if (number === 2) {
	                result += withoutSuffix || isFuture ? 'meseca' : 'mesecema';
	            } else if (number < 5) {
	                result += withoutSuffix || isFuture ? 'mesece' : 'meseci';
	            } else {
	                result += withoutSuffix || isFuture ? 'mesecev' : 'meseci';
	            }
	            return result;
	        case 'y':
	            return withoutSuffix || isFuture ? 'eno leto' : 'enim letom';
	        case 'yy':
	            if (number === 1) {
	                result += withoutSuffix || isFuture ? 'leto' : 'letom';
	            } else if (number === 2) {
	                result += withoutSuffix || isFuture ? 'leti' : 'letoma';
	            } else if (number < 5) {
	                result += withoutSuffix || isFuture ? 'leta' : 'leti';
	            } else {
	                result += withoutSuffix || isFuture ? 'let' : 'leti';
	            }
	            return result;
	        }
	    }
	
	    var sl = moment.defineLocale('sl', {
	        months : 'januar_februar_marec_april_maj_junij_julij_avgust_september_oktober_november_december'.split('_'),
	        monthsShort : 'jan._feb._mar._apr._maj._jun._jul._avg._sep._okt._nov._dec.'.split('_'),
	        monthsParseExact: true,
	        weekdays : 'nedelja_ponedeljek_torek_sreda_četrtek_petek_sobota'.split('_'),
	        weekdaysShort : 'ned._pon._tor._sre._čet._pet._sob.'.split('_'),
	        weekdaysMin : 'ne_po_to_sr_če_pe_so'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat : {
	            LT : 'H:mm',
	            LTS : 'H:mm:ss',
	            L : 'DD. MM. YYYY',
	            LL : 'D. MMMM YYYY',
	            LLL : 'D. MMMM YYYY H:mm',
	            LLLL : 'dddd, D. MMMM YYYY H:mm'
	        },
	        calendar : {
	            sameDay  : '[danes ob] LT',
	            nextDay  : '[jutri ob] LT',
	
	            nextWeek : function () {
	                switch (this.day()) {
	                case 0:
	                    return '[v] [nedeljo] [ob] LT';
	                case 3:
	                    return '[v] [sredo] [ob] LT';
	                case 6:
	                    return '[v] [soboto] [ob] LT';
	                case 1:
	                case 2:
	                case 4:
	                case 5:
	                    return '[v] dddd [ob] LT';
	                }
	            },
	            lastDay  : '[včeraj ob] LT',
	            lastWeek : function () {
	                switch (this.day()) {
	                case 0:
	                    return '[prejšnjo] [nedeljo] [ob] LT';
	                case 3:
	                    return '[prejšnjo] [sredo] [ob] LT';
	                case 6:
	                    return '[prejšnjo] [soboto] [ob] LT';
	                case 1:
	                case 2:
	                case 4:
	                case 5:
	                    return '[prejšnji] dddd [ob] LT';
	                }
	            },
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'čez %s',
	            past   : 'pred %s',
	            s      : processRelativeTime,
	            m      : processRelativeTime,
	            mm     : processRelativeTime,
	            h      : processRelativeTime,
	            hh     : processRelativeTime,
	            d      : processRelativeTime,
	            dd     : processRelativeTime,
	            M      : processRelativeTime,
	            MM     : processRelativeTime,
	            y      : processRelativeTime,
	            yy     : processRelativeTime
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	
	    return sl;
	
	}));

/***/ },
/* 92 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Albanian (sq)
	//! author : Flakërim Ismani : https://github.com/flakerimi
	//! author: Menelion Elensúle: https://github.com/Oire (tests)
	//! author : Oerd Cukalla : https://github.com/oerd (fixes)
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(10)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var sq = moment.defineLocale('sq', {
	        months : 'Janar_Shkurt_Mars_Prill_Maj_Qershor_Korrik_Gusht_Shtator_Tetor_Nëntor_Dhjetor'.split('_'),
	        monthsShort : 'Jan_Shk_Mar_Pri_Maj_Qer_Kor_Gus_Sht_Tet_Nën_Dhj'.split('_'),
	        weekdays : 'E Diel_E Hënë_E Martë_E Mërkurë_E Enjte_E Premte_E Shtunë'.split('_'),
	        weekdaysShort : 'Die_Hën_Mar_Mër_Enj_Pre_Sht'.split('_'),
	        weekdaysMin : 'D_H_Ma_Më_E_P_Sh'.split('_'),
	        weekdaysParseExact : true,
	        meridiemParse: /PD|MD/,
	        isPM: function (input) {
	            return input.charAt(0) === 'M';
	        },
	        meridiem : function (hours, minutes, isLower) {
	            return hours < 12 ? 'PD' : 'MD';
	        },
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd, D MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay : '[Sot në] LT',
	            nextDay : '[Nesër në] LT',
	            nextWeek : 'dddd [në] LT',
	            lastDay : '[Dje në] LT',
	            lastWeek : 'dddd [e kaluar në] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'në %s',
	            past : '%s më parë',
	            s : 'disa sekonda',
	            m : 'një minutë',
	            mm : '%d minuta',
	            h : 'një orë',
	            hh : '%d orë',
	            d : 'një ditë',
	            dd : '%d ditë',
	            M : 'një muaj',
	            MM : '%d muaj',
	            y : 'një vit',
	            yy : '%d vite'
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    return sq;
	
	}));

/***/ },
/* 93 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Serbian-latin (sr)
	//! author : Milan Janačković<milanjanackovic@gmail.com> : https://github.com/milan-j
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(10)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var translator = {
	        words: { //Different grammatical cases
	            m: ['jedan minut', 'jedne minute'],
	            mm: ['minut', 'minute', 'minuta'],
	            h: ['jedan sat', 'jednog sata'],
	            hh: ['sat', 'sata', 'sati'],
	            dd: ['dan', 'dana', 'dana'],
	            MM: ['mesec', 'meseca', 'meseci'],
	            yy: ['godina', 'godine', 'godina']
	        },
	        correctGrammaticalCase: function (number, wordKey) {
	            return number === 1 ? wordKey[0] : (number >= 2 && number <= 4 ? wordKey[1] : wordKey[2]);
	        },
	        translate: function (number, withoutSuffix, key) {
	            var wordKey = translator.words[key];
	            if (key.length === 1) {
	                return withoutSuffix ? wordKey[0] : wordKey[1];
	            } else {
	                return number + ' ' + translator.correctGrammaticalCase(number, wordKey);
	            }
	        }
	    };
	
	    var sr = moment.defineLocale('sr', {
	        months: 'januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar'.split('_'),
	        monthsShort: 'jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.'.split('_'),
	        monthsParseExact: true,
	        weekdays: 'nedelja_ponedeljak_utorak_sreda_četvrtak_petak_subota'.split('_'),
	        weekdaysShort: 'ned._pon._uto._sre._čet._pet._sub.'.split('_'),
	        weekdaysMin: 'ne_po_ut_sr_če_pe_su'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat: {
	            LT: 'H:mm',
	            LTS : 'H:mm:ss',
	            L: 'DD. MM. YYYY',
	            LL: 'D. MMMM YYYY',
	            LLL: 'D. MMMM YYYY H:mm',
	            LLLL: 'dddd, D. MMMM YYYY H:mm'
	        },
	        calendar: {
	            sameDay: '[danas u] LT',
	            nextDay: '[sutra u] LT',
	            nextWeek: function () {
	                switch (this.day()) {
	                case 0:
	                    return '[u] [nedelju] [u] LT';
	                case 3:
	                    return '[u] [sredu] [u] LT';
	                case 6:
	                    return '[u] [subotu] [u] LT';
	                case 1:
	                case 2:
	                case 4:
	                case 5:
	                    return '[u] dddd [u] LT';
	                }
	            },
	            lastDay  : '[juče u] LT',
	            lastWeek : function () {
	                var lastWeekDays = [
	                    '[prošle] [nedelje] [u] LT',
	                    '[prošlog] [ponedeljka] [u] LT',
	                    '[prošlog] [utorka] [u] LT',
	                    '[prošle] [srede] [u] LT',
	                    '[prošlog] [četvrtka] [u] LT',
	                    '[prošlog] [petka] [u] LT',
	                    '[prošle] [subote] [u] LT'
	                ];
	                return lastWeekDays[this.day()];
	            },
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'za %s',
	            past   : 'pre %s',
	            s      : 'nekoliko sekundi',
	            m      : translator.translate,
	            mm     : translator.translate,
	            h      : translator.translate,
	            hh     : translator.translate,
	            d      : 'dan',
	            dd     : translator.translate,
	            M      : 'mesec',
	            MM     : translator.translate,
	            y      : 'godinu',
	            yy     : translator.translate
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	
	    return sr;
	
	}));

/***/ },
/* 94 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Serbian-cyrillic (sr-cyrl)
	//! author : Milan Janačković<milanjanackovic@gmail.com> : https://github.com/milan-j
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(10)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var translator = {
	        words: { //Different grammatical cases
	            m: ['један минут', 'једне минуте'],
	            mm: ['минут', 'минуте', 'минута'],
	            h: ['један сат', 'једног сата'],
	            hh: ['сат', 'сата', 'сати'],
	            dd: ['дан', 'дана', 'дана'],
	            MM: ['месец', 'месеца', 'месеци'],
	            yy: ['година', 'године', 'година']
	        },
	        correctGrammaticalCase: function (number, wordKey) {
	            return number === 1 ? wordKey[0] : (number >= 2 && number <= 4 ? wordKey[1] : wordKey[2]);
	        },
	        translate: function (number, withoutSuffix, key) {
	            var wordKey = translator.words[key];
	            if (key.length === 1) {
	                return withoutSuffix ? wordKey[0] : wordKey[1];
	            } else {
	                return number + ' ' + translator.correctGrammaticalCase(number, wordKey);
	            }
	        }
	    };
	
	    var sr_cyrl = moment.defineLocale('sr-cyrl', {
	        months: 'јануар_фебруар_март_април_мај_јун_јул_август_септембар_октобар_новембар_децембар'.split('_'),
	        monthsShort: 'јан._феб._мар._апр._мај_јун_јул_авг._сеп._окт._нов._дец.'.split('_'),
	        monthsParseExact: true,
	        weekdays: 'недеља_понедељак_уторак_среда_четвртак_петак_субота'.split('_'),
	        weekdaysShort: 'нед._пон._уто._сре._чет._пет._суб.'.split('_'),
	        weekdaysMin: 'не_по_ут_ср_че_пе_су'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat: {
	            LT: 'H:mm',
	            LTS : 'H:mm:ss',
	            L: 'DD. MM. YYYY',
	            LL: 'D. MMMM YYYY',
	            LLL: 'D. MMMM YYYY H:mm',
	            LLLL: 'dddd, D. MMMM YYYY H:mm'
	        },
	        calendar: {
	            sameDay: '[данас у] LT',
	            nextDay: '[сутра у] LT',
	            nextWeek: function () {
	                switch (this.day()) {
	                case 0:
	                    return '[у] [недељу] [у] LT';
	                case 3:
	                    return '[у] [среду] [у] LT';
	                case 6:
	                    return '[у] [суботу] [у] LT';
	                case 1:
	                case 2:
	                case 4:
	                case 5:
	                    return '[у] dddd [у] LT';
	                }
	            },
	            lastDay  : '[јуче у] LT',
	            lastWeek : function () {
	                var lastWeekDays = [
	                    '[прошле] [недеље] [у] LT',
	                    '[прошлог] [понедељка] [у] LT',
	                    '[прошлог] [уторка] [у] LT',
	                    '[прошле] [среде] [у] LT',
	                    '[прошлог] [четвртка] [у] LT',
	                    '[прошлог] [петка] [у] LT',
	                    '[прошле] [суботе] [у] LT'
	                ];
	                return lastWeekDays[this.day()];
	            },
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'за %s',
	            past   : 'пре %s',
	            s      : 'неколико секунди',
	            m      : translator.translate,
	            mm     : translator.translate,
	            h      : translator.translate,
	            hh     : translator.translate,
	            d      : 'дан',
	            dd     : translator.translate,
	            M      : 'месец',
	            MM     : translator.translate,
	            y      : 'годину',
	            yy     : translator.translate
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	
	    return sr_cyrl;
	
	}));

/***/ },
/* 95 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : siSwati (ss)
	//! author : Nicolai Davies<mail@nicolai.io> : https://github.com/nicolaidavies
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(10)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	
	    var ss = moment.defineLocale('ss', {
	        months : "Bhimbidvwane_Indlovana_Indlov'lenkhulu_Mabasa_Inkhwekhweti_Inhlaba_Kholwane_Ingci_Inyoni_Imphala_Lweti_Ingongoni".split('_'),
	        monthsShort : 'Bhi_Ina_Inu_Mab_Ink_Inh_Kho_Igc_Iny_Imp_Lwe_Igo'.split('_'),
	        weekdays : 'Lisontfo_Umsombuluko_Lesibili_Lesitsatfu_Lesine_Lesihlanu_Umgcibelo'.split('_'),
	        weekdaysShort : 'Lis_Umb_Lsb_Les_Lsi_Lsh_Umg'.split('_'),
	        weekdaysMin : 'Li_Us_Lb_Lt_Ls_Lh_Ug'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat : {
	            LT : 'h:mm A',
	            LTS : 'h:mm:ss A',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY h:mm A',
	            LLLL : 'dddd, D MMMM YYYY h:mm A'
	        },
	        calendar : {
	            sameDay : '[Namuhla nga] LT',
	            nextDay : '[Kusasa nga] LT',
	            nextWeek : 'dddd [nga] LT',
	            lastDay : '[Itolo nga] LT',
	            lastWeek : 'dddd [leliphelile] [nga] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'nga %s',
	            past : 'wenteka nga %s',
	            s : 'emizuzwana lomcane',
	            m : 'umzuzu',
	            mm : '%d emizuzu',
	            h : 'lihora',
	            hh : '%d emahora',
	            d : 'lilanga',
	            dd : '%d emalanga',
	            M : 'inyanga',
	            MM : '%d tinyanga',
	            y : 'umnyaka',
	            yy : '%d iminyaka'
	        },
	        meridiemParse: /ekuseni|emini|entsambama|ebusuku/,
	        meridiem : function (hours, minutes, isLower) {
	            if (hours < 11) {
	                return 'ekuseni';
	            } else if (hours < 15) {
	                return 'emini';
	            } else if (hours < 19) {
	                return 'entsambama';
	            } else {
	                return 'ebusuku';
	            }
	        },
	        meridiemHour : function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === 'ekuseni') {
	                return hour;
	            } else if (meridiem === 'emini') {
	                return hour >= 11 ? hour : hour + 12;
	            } else if (meridiem === 'entsambama' || meridiem === 'ebusuku') {
	                if (hour === 0) {
	                    return 0;
	                }
	                return hour + 12;
	            }
	        },
	        ordinalParse: /\d{1,2}/,
	        ordinal : '%d',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    return ss;
	
	}));

/***/ },
/* 96 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : swedish (sv)
	//! author : Jens Alm : https://github.com/ulmus
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(10)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var sv = moment.defineLocale('sv', {
	        months : 'januari_februari_mars_april_maj_juni_juli_augusti_september_oktober_november_december'.split('_'),
	        monthsShort : 'jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec'.split('_'),
	        weekdays : 'söndag_måndag_tisdag_onsdag_torsdag_fredag_lördag'.split('_'),
	        weekdaysShort : 'sön_mån_tis_ons_tor_fre_lör'.split('_'),
	        weekdaysMin : 'sö_må_ti_on_to_fr_lö'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'YYYY-MM-DD',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY [kl.] HH:mm',
	            LLLL : 'dddd D MMMM YYYY [kl.] HH:mm',
	            lll : 'D MMM YYYY HH:mm',
	            llll : 'ddd D MMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay: '[Idag] LT',
	            nextDay: '[Imorgon] LT',
	            lastDay: '[Igår] LT',
	            nextWeek: '[På] dddd LT',
	            lastWeek: '[I] dddd[s] LT',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'om %s',
	            past : 'för %s sedan',
	            s : 'några sekunder',
	            m : 'en minut',
	            mm : '%d minuter',
	            h : 'en timme',
	            hh : '%d timmar',
	            d : 'en dag',
	            dd : '%d dagar',
	            M : 'en månad',
	            MM : '%d månader',
	            y : 'ett år',
	            yy : '%d år'
	        },
	        ordinalParse: /\d{1,2}(e|a)/,
	        ordinal : function (number) {
	            var b = number % 10,
	                output = (~~(number % 100 / 10) === 1) ? 'e' :
	                (b === 1) ? 'a' :
	                (b === 2) ? 'a' :
	                (b === 3) ? 'e' : 'e';
	            return number + output;
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    return sv;
	
	}));

/***/ },
/* 97 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : swahili (sw)
	//! author : Fahad Kassim : https://github.com/fadsel
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(10)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var sw = moment.defineLocale('sw', {
	        months : 'Januari_Februari_Machi_Aprili_Mei_Juni_Julai_Agosti_Septemba_Oktoba_Novemba_Desemba'.split('_'),
	        monthsShort : 'Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ago_Sep_Okt_Nov_Des'.split('_'),
	        weekdays : 'Jumapili_Jumatatu_Jumanne_Jumatano_Alhamisi_Ijumaa_Jumamosi'.split('_'),
	        weekdaysShort : 'Jpl_Jtat_Jnne_Jtan_Alh_Ijm_Jmos'.split('_'),
	        weekdaysMin : 'J2_J3_J4_J5_Al_Ij_J1'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd, D MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay : '[leo saa] LT',
	            nextDay : '[kesho saa] LT',
	            nextWeek : '[wiki ijayo] dddd [saat] LT',
	            lastDay : '[jana] LT',
	            lastWeek : '[wiki iliyopita] dddd [saat] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : '%s baadaye',
	            past : 'tokea %s',
	            s : 'hivi punde',
	            m : 'dakika moja',
	            mm : 'dakika %d',
	            h : 'saa limoja',
	            hh : 'masaa %d',
	            d : 'siku moja',
	            dd : 'masiku %d',
	            M : 'mwezi mmoja',
	            MM : 'miezi %d',
	            y : 'mwaka mmoja',
	            yy : 'miaka %d'
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	
	    return sw;
	
	}));

/***/ },
/* 98 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : tamil (ta)
	//! author : Arjunkumar Krishnamoorthy : https://github.com/tk120404
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(10)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var symbolMap = {
	        '1': '௧',
	        '2': '௨',
	        '3': '௩',
	        '4': '௪',
	        '5': '௫',
	        '6': '௬',
	        '7': '௭',
	        '8': '௮',
	        '9': '௯',
	        '0': '௦'
	    }, numberMap = {
	        '௧': '1',
	        '௨': '2',
	        '௩': '3',
	        '௪': '4',
	        '௫': '5',
	        '௬': '6',
	        '௭': '7',
	        '௮': '8',
	        '௯': '9',
	        '௦': '0'
	    };
	
	    var ta = moment.defineLocale('ta', {
	        months : 'ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்'.split('_'),
	        monthsShort : 'ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்'.split('_'),
	        weekdays : 'ஞாயிற்றுக்கிழமை_திங்கட்கிழமை_செவ்வாய்கிழமை_புதன்கிழமை_வியாழக்கிழமை_வெள்ளிக்கிழமை_சனிக்கிழமை'.split('_'),
	        weekdaysShort : 'ஞாயிறு_திங்கள்_செவ்வாய்_புதன்_வியாழன்_வெள்ளி_சனி'.split('_'),
	        weekdaysMin : 'ஞா_தி_செ_பு_வி_வெ_ச'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY, HH:mm',
	            LLLL : 'dddd, D MMMM YYYY, HH:mm'
	        },
	        calendar : {
	            sameDay : '[இன்று] LT',
	            nextDay : '[நாளை] LT',
	            nextWeek : 'dddd, LT',
	            lastDay : '[நேற்று] LT',
	            lastWeek : '[கடந்த வாரம்] dddd, LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : '%s இல்',
	            past : '%s முன்',
	            s : 'ஒரு சில விநாடிகள்',
	            m : 'ஒரு நிமிடம்',
	            mm : '%d நிமிடங்கள்',
	            h : 'ஒரு மணி நேரம்',
	            hh : '%d மணி நேரம்',
	            d : 'ஒரு நாள்',
	            dd : '%d நாட்கள்',
	            M : 'ஒரு மாதம்',
	            MM : '%d மாதங்கள்',
	            y : 'ஒரு வருடம்',
	            yy : '%d ஆண்டுகள்'
	        },
	        ordinalParse: /\d{1,2}வது/,
	        ordinal : function (number) {
	            return number + 'வது';
	        },
	        preparse: function (string) {
	            return string.replace(/[௧௨௩௪௫௬௭௮௯௦]/g, function (match) {
	                return numberMap[match];
	            });
	        },
	        postformat: function (string) {
	            return string.replace(/\d/g, function (match) {
	                return symbolMap[match];
	            });
	        },
	        // refer http://ta.wikipedia.org/s/1er1
	        meridiemParse: /யாமம்|வைகறை|காலை|நண்பகல்|எற்பாடு|மாலை/,
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 2) {
	                return ' யாமம்';
	            } else if (hour < 6) {
	                return ' வைகறை';  // வைகறை
	            } else if (hour < 10) {
	                return ' காலை'; // காலை
	            } else if (hour < 14) {
	                return ' நண்பகல்'; // நண்பகல்
	            } else if (hour < 18) {
	                return ' எற்பாடு'; // எற்பாடு
	            } else if (hour < 22) {
	                return ' மாலை'; // மாலை
	            } else {
	                return ' யாமம்';
	            }
	        },
	        meridiemHour : function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === 'யாமம்') {
	                return hour < 2 ? hour : hour + 12;
	            } else if (meridiem === 'வைகறை' || meridiem === 'காலை') {
	                return hour;
	            } else if (meridiem === 'நண்பகல்') {
	                return hour >= 10 ? hour : hour + 12;
	            } else {
	                return hour + 12;
	            }
	        },
	        week : {
	            dow : 0, // Sunday is the first day of the week.
	            doy : 6  // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	
	    return ta;
	
	}));

/***/ },
/* 99 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : telugu (te)
	//! author : Krishna Chaitanya Thota : https://github.com/kcthota
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(10)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var te = moment.defineLocale('te', {
	        months : 'జనవరి_ఫిబ్రవరి_మార్చి_ఏప్రిల్_మే_జూన్_జూలై_ఆగస్టు_సెప్టెంబర్_అక్టోబర్_నవంబర్_డిసెంబర్'.split('_'),
	        monthsShort : 'జన._ఫిబ్ర._మార్చి_ఏప్రి._మే_జూన్_జూలై_ఆగ._సెప్._అక్టో._నవ._డిసె.'.split('_'),
	        monthsParseExact : true,
	        weekdays : 'ఆదివారం_సోమవారం_మంగళవారం_బుధవారం_గురువారం_శుక్రవారం_శనివారం'.split('_'),
	        weekdaysShort : 'ఆది_సోమ_మంగళ_బుధ_గురు_శుక్ర_శని'.split('_'),
	        weekdaysMin : 'ఆ_సో_మం_బు_గు_శు_శ'.split('_'),
	        longDateFormat : {
	            LT : 'A h:mm',
	            LTS : 'A h:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY, A h:mm',
	            LLLL : 'dddd, D MMMM YYYY, A h:mm'
	        },
	        calendar : {
	            sameDay : '[నేడు] LT',
	            nextDay : '[రేపు] LT',
	            nextWeek : 'dddd, LT',
	            lastDay : '[నిన్న] LT',
	            lastWeek : '[గత] dddd, LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : '%s లో',
	            past : '%s క్రితం',
	            s : 'కొన్ని క్షణాలు',
	            m : 'ఒక నిమిషం',
	            mm : '%d నిమిషాలు',
	            h : 'ఒక గంట',
	            hh : '%d గంటలు',
	            d : 'ఒక రోజు',
	            dd : '%d రోజులు',
	            M : 'ఒక నెల',
	            MM : '%d నెలలు',
	            y : 'ఒక సంవత్సరం',
	            yy : '%d సంవత్సరాలు'
	        },
	        ordinalParse : /\d{1,2}వ/,
	        ordinal : '%dవ',
	        meridiemParse: /రాత్రి|ఉదయం|మధ్యాహ్నం|సాయంత్రం/,
	        meridiemHour : function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === 'రాత్రి') {
	                return hour < 4 ? hour : hour + 12;
	            } else if (meridiem === 'ఉదయం') {
	                return hour;
	            } else if (meridiem === 'మధ్యాహ్నం') {
	                return hour >= 10 ? hour : hour + 12;
	            } else if (meridiem === 'సాయంత్రం') {
	                return hour + 12;
	            }
	        },
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 4) {
	                return 'రాత్రి';
	            } else if (hour < 10) {
	                return 'ఉదయం';
	            } else if (hour < 17) {
	                return 'మధ్యాహ్నం';
	            } else if (hour < 20) {
	                return 'సాయంత్రం';
	            } else {
	                return 'రాత్రి';
	            }
	        },
	        week : {
	            dow : 0, // Sunday is the first day of the week.
	            doy : 6  // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	
	    return te;
	
	}));

/***/ },
/* 100 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : thai (th)
	//! author : Kridsada Thanabulpong : https://github.com/sirn
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(10)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var th = moment.defineLocale('th', {
	        months : 'มกราคม_กุมภาพันธ์_มีนาคม_เมษายน_พฤษภาคม_มิถุนายน_กรกฎาคม_สิงหาคม_กันยายน_ตุลาคม_พฤศจิกายน_ธันวาคม'.split('_'),
	        monthsShort : 'มกรา_กุมภา_มีนา_เมษา_พฤษภา_มิถุนา_กรกฎา_สิงหา_กันยา_ตุลา_พฤศจิกา_ธันวา'.split('_'),
	        monthsParseExact: true,
	        weekdays : 'อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัสบดี_ศุกร์_เสาร์'.split('_'),
	        weekdaysShort : 'อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัส_ศุกร์_เสาร์'.split('_'), // yes, three characters difference
	        weekdaysMin : 'อา._จ._อ._พ._พฤ._ศ._ส.'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat : {
	            LT : 'H นาฬิกา m นาที',
	            LTS : 'H นาฬิกา m นาที s วินาที',
	            L : 'YYYY/MM/DD',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY เวลา H นาฬิกา m นาที',
	            LLLL : 'วันddddที่ D MMMM YYYY เวลา H นาฬิกา m นาที'
	        },
	        meridiemParse: /ก่อนเที่ยง|หลังเที่ยง/,
	        isPM: function (input) {
	            return input === 'หลังเที่ยง';
	        },
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 12) {
	                return 'ก่อนเที่ยง';
	            } else {
	                return 'หลังเที่ยง';
	            }
	        },
	        calendar : {
	            sameDay : '[วันนี้ เวลา] LT',
	            nextDay : '[พรุ่งนี้ เวลา] LT',
	            nextWeek : 'dddd[หน้า เวลา] LT',
	            lastDay : '[เมื่อวานนี้ เวลา] LT',
	            lastWeek : '[วัน]dddd[ที่แล้ว เวลา] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'อีก %s',
	            past : '%sที่แล้ว',
	            s : 'ไม่กี่วินาที',
	            m : '1 นาที',
	            mm : '%d นาที',
	            h : '1 ชั่วโมง',
	            hh : '%d ชั่วโมง',
	            d : '1 วัน',
	            dd : '%d วัน',
	            M : '1 เดือน',
	            MM : '%d เดือน',
	            y : '1 ปี',
	            yy : '%d ปี'
	        }
	    });
	
	    return th;
	
	}));

/***/ },
/* 101 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Tagalog/Filipino (tl-ph)
	//! author : Dan Hagman
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(10)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var tl_ph = moment.defineLocale('tl-ph', {
	        months : 'Enero_Pebrero_Marso_Abril_Mayo_Hunyo_Hulyo_Agosto_Setyembre_Oktubre_Nobyembre_Disyembre'.split('_'),
	        monthsShort : 'Ene_Peb_Mar_Abr_May_Hun_Hul_Ago_Set_Okt_Nob_Dis'.split('_'),
	        weekdays : 'Linggo_Lunes_Martes_Miyerkules_Huwebes_Biyernes_Sabado'.split('_'),
	        weekdaysShort : 'Lin_Lun_Mar_Miy_Huw_Biy_Sab'.split('_'),
	        weekdaysMin : 'Li_Lu_Ma_Mi_Hu_Bi_Sab'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'MM/D/YYYY',
	            LL : 'MMMM D, YYYY',
	            LLL : 'MMMM D, YYYY HH:mm',
	            LLLL : 'dddd, MMMM DD, YYYY HH:mm'
	        },
	        calendar : {
	            sameDay: '[Ngayon sa] LT',
	            nextDay: '[Bukas sa] LT',
	            nextWeek: 'dddd [sa] LT',
	            lastDay: '[Kahapon sa] LT',
	            lastWeek: 'dddd [huling linggo] LT',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'sa loob ng %s',
	            past : '%s ang nakalipas',
	            s : 'ilang segundo',
	            m : 'isang minuto',
	            mm : '%d minuto',
	            h : 'isang oras',
	            hh : '%d oras',
	            d : 'isang araw',
	            dd : '%d araw',
	            M : 'isang buwan',
	            MM : '%d buwan',
	            y : 'isang taon',
	            yy : '%d taon'
	        },
	        ordinalParse: /\d{1,2}/,
	        ordinal : function (number) {
	            return number;
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    return tl_ph;
	
	}));

/***/ },
/* 102 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Klingon (tlh)
	//! author : Dominika Kruk : https://github.com/amaranthrose
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(10)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var numbersNouns = 'pagh_wa’_cha’_wej_loS_vagh_jav_Soch_chorgh_Hut'.split('_');
	
	    function translateFuture(output) {
	        var time = output;
	        time = (output.indexOf('jaj') !== -1) ?
	    	time.slice(0, -3) + 'leS' :
	    	(output.indexOf('jar') !== -1) ?
	    	time.slice(0, -3) + 'waQ' :
	    	(output.indexOf('DIS') !== -1) ?
	    	time.slice(0, -3) + 'nem' :
	    	time + ' pIq';
	        return time;
	    }
	
	    function translatePast(output) {
	        var time = output;
	        time = (output.indexOf('jaj') !== -1) ?
	    	time.slice(0, -3) + 'Hu’' :
	    	(output.indexOf('jar') !== -1) ?
	    	time.slice(0, -3) + 'wen' :
	    	(output.indexOf('DIS') !== -1) ?
	    	time.slice(0, -3) + 'ben' :
	    	time + ' ret';
	        return time;
	    }
	
	    function translate(number, withoutSuffix, string, isFuture) {
	        var numberNoun = numberAsNoun(number);
	        switch (string) {
	            case 'mm':
	                return numberNoun + ' tup';
	            case 'hh':
	                return numberNoun + ' rep';
	            case 'dd':
	                return numberNoun + ' jaj';
	            case 'MM':
	                return numberNoun + ' jar';
	            case 'yy':
	                return numberNoun + ' DIS';
	        }
	    }
	
	    function numberAsNoun(number) {
	        var hundred = Math.floor((number % 1000) / 100),
	    	ten = Math.floor((number % 100) / 10),
	    	one = number % 10,
	    	word = '';
	        if (hundred > 0) {
	            word += numbersNouns[hundred] + 'vatlh';
	        }
	        if (ten > 0) {
	            word += ((word !== '') ? ' ' : '') + numbersNouns[ten] + 'maH';
	        }
	        if (one > 0) {
	            word += ((word !== '') ? ' ' : '') + numbersNouns[one];
	        }
	        return (word === '') ? 'pagh' : word;
	    }
	
	    var tlh = moment.defineLocale('tlh', {
	        months : 'tera’ jar wa’_tera’ jar cha’_tera’ jar wej_tera’ jar loS_tera’ jar vagh_tera’ jar jav_tera’ jar Soch_tera’ jar chorgh_tera’ jar Hut_tera’ jar wa’maH_tera’ jar wa’maH wa’_tera’ jar wa’maH cha’'.split('_'),
	        monthsShort : 'jar wa’_jar cha’_jar wej_jar loS_jar vagh_jar jav_jar Soch_jar chorgh_jar Hut_jar wa’maH_jar wa’maH wa’_jar wa’maH cha’'.split('_'),
	        monthsParseExact : true,
	        weekdays : 'lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj'.split('_'),
	        weekdaysShort : 'lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj'.split('_'),
	        weekdaysMin : 'lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd, D MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay: '[DaHjaj] LT',
	            nextDay: '[wa’leS] LT',
	            nextWeek: 'LLL',
	            lastDay: '[wa’Hu’] LT',
	            lastWeek: 'LLL',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : translateFuture,
	            past : translatePast,
	            s : 'puS lup',
	            m : 'wa’ tup',
	            mm : translate,
	            h : 'wa’ rep',
	            hh : translate,
	            d : 'wa’ jaj',
	            dd : translate,
	            M : 'wa’ jar',
	            MM : translate,
	            y : 'wa’ DIS',
	            yy : translate
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    return tlh;
	
	}));

/***/ },
/* 103 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : turkish (tr)
	//! authors : Erhan Gundogan : https://github.com/erhangundogan,
	//!           Burak Yiğit Kaya: https://github.com/BYK
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(10)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var suffixes = {
	        1: '\'inci',
	        5: '\'inci',
	        8: '\'inci',
	        70: '\'inci',
	        80: '\'inci',
	        2: '\'nci',
	        7: '\'nci',
	        20: '\'nci',
	        50: '\'nci',
	        3: '\'üncü',
	        4: '\'üncü',
	        100: '\'üncü',
	        6: '\'ncı',
	        9: '\'uncu',
	        10: '\'uncu',
	        30: '\'uncu',
	        60: '\'ıncı',
	        90: '\'ıncı'
	    };
	
	    var tr = moment.defineLocale('tr', {
	        months : 'Ocak_Şubat_Mart_Nisan_Mayıs_Haziran_Temmuz_Ağustos_Eylül_Ekim_Kasım_Aralık'.split('_'),
	        monthsShort : 'Oca_Şub_Mar_Nis_May_Haz_Tem_Ağu_Eyl_Eki_Kas_Ara'.split('_'),
	        weekdays : 'Pazar_Pazartesi_Salı_Çarşamba_Perşembe_Cuma_Cumartesi'.split('_'),
	        weekdaysShort : 'Paz_Pts_Sal_Çar_Per_Cum_Cts'.split('_'),
	        weekdaysMin : 'Pz_Pt_Sa_Ça_Pe_Cu_Ct'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd, D MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay : '[bugün saat] LT',
	            nextDay : '[yarın saat] LT',
	            nextWeek : '[haftaya] dddd [saat] LT',
	            lastDay : '[dün] LT',
	            lastWeek : '[geçen hafta] dddd [saat] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : '%s sonra',
	            past : '%s önce',
	            s : 'birkaç saniye',
	            m : 'bir dakika',
	            mm : '%d dakika',
	            h : 'bir saat',
	            hh : '%d saat',
	            d : 'bir gün',
	            dd : '%d gün',
	            M : 'bir ay',
	            MM : '%d ay',
	            y : 'bir yıl',
	            yy : '%d yıl'
	        },
	        ordinalParse: /\d{1,2}'(inci|nci|üncü|ncı|uncu|ıncı)/,
	        ordinal : function (number) {
	            if (number === 0) {  // special case for zero
	                return number + '\'ıncı';
	            }
	            var a = number % 10,
	                b = number % 100 - a,
	                c = number >= 100 ? 100 : null;
	            return number + (suffixes[a] || suffixes[b] || suffixes[c]);
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	
	    return tr;
	
	}));

/***/ },
/* 104 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : talossan (tzl)
	//! author : Robin van der Vliet : https://github.com/robin0van0der0v with the help of Iustì Canun
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(10)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	
	    // After the year there should be a slash and the amount of years since December 26, 1979 in Roman numerals.
	    // This is currently too difficult (maybe even impossible) to add.
	    var tzl = moment.defineLocale('tzl', {
	        months : 'Januar_Fevraglh_Març_Avrïu_Mai_Gün_Julia_Guscht_Setemvar_Listopäts_Noemvar_Zecemvar'.split('_'),
	        monthsShort : 'Jan_Fev_Mar_Avr_Mai_Gün_Jul_Gus_Set_Lis_Noe_Zec'.split('_'),
	        weekdays : 'Súladi_Lúneçi_Maitzi_Márcuri_Xhúadi_Viénerçi_Sáturi'.split('_'),
	        weekdaysShort : 'Súl_Lún_Mai_Már_Xhú_Vié_Sát'.split('_'),
	        weekdaysMin : 'Sú_Lú_Ma_Má_Xh_Vi_Sá'.split('_'),
	        longDateFormat : {
	            LT : 'HH.mm',
	            LTS : 'HH.mm.ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D. MMMM [dallas] YYYY',
	            LLL : 'D. MMMM [dallas] YYYY HH.mm',
	            LLLL : 'dddd, [li] D. MMMM [dallas] YYYY HH.mm'
	        },
	        meridiemParse: /d\'o|d\'a/i,
	        isPM : function (input) {
	            return 'd\'o' === input.toLowerCase();
	        },
	        meridiem : function (hours, minutes, isLower) {
	            if (hours > 11) {
	                return isLower ? 'd\'o' : 'D\'O';
	            } else {
	                return isLower ? 'd\'a' : 'D\'A';
	            }
	        },
	        calendar : {
	            sameDay : '[oxhi à] LT',
	            nextDay : '[demà à] LT',
	            nextWeek : 'dddd [à] LT',
	            lastDay : '[ieiri à] LT',
	            lastWeek : '[sür el] dddd [lasteu à] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'osprei %s',
	            past : 'ja%s',
	            s : processRelativeTime,
	            m : processRelativeTime,
	            mm : processRelativeTime,
	            h : processRelativeTime,
	            hh : processRelativeTime,
	            d : processRelativeTime,
	            dd : processRelativeTime,
	            M : processRelativeTime,
	            MM : processRelativeTime,
	            y : processRelativeTime,
	            yy : processRelativeTime
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    function processRelativeTime(number, withoutSuffix, key, isFuture) {
	        var format = {
	            's': ['viensas secunds', '\'iensas secunds'],
	            'm': ['\'n míut', '\'iens míut'],
	            'mm': [number + ' míuts', '' + number + ' míuts'],
	            'h': ['\'n þora', '\'iensa þora'],
	            'hh': [number + ' þoras', '' + number + ' þoras'],
	            'd': ['\'n ziua', '\'iensa ziua'],
	            'dd': [number + ' ziuas', '' + number + ' ziuas'],
	            'M': ['\'n mes', '\'iens mes'],
	            'MM': [number + ' mesen', '' + number + ' mesen'],
	            'y': ['\'n ar', '\'iens ar'],
	            'yy': [number + ' ars', '' + number + ' ars']
	        };
	        return isFuture ? format[key][0] : (withoutSuffix ? format[key][0] : format[key][1]);
	    }
	
	    return tzl;
	
	}));

/***/ },
/* 105 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Morocco Central Atlas Tamaziɣt (tzm)
	//! author : Abdel Said : https://github.com/abdelsaid
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(10)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var tzm = moment.defineLocale('tzm', {
	        months : 'ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ'.split('_'),
	        monthsShort : 'ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ'.split('_'),
	        weekdays : 'ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ'.split('_'),
	        weekdaysShort : 'ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ'.split('_'),
	        weekdaysMin : 'ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd D MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay: '[ⴰⵙⴷⵅ ⴴ] LT',
	            nextDay: '[ⴰⵙⴽⴰ ⴴ] LT',
	            nextWeek: 'dddd [ⴴ] LT',
	            lastDay: '[ⴰⵚⴰⵏⵜ ⴴ] LT',
	            lastWeek: 'dddd [ⴴ] LT',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'ⴷⴰⴷⵅ ⵙ ⵢⴰⵏ %s',
	            past : 'ⵢⴰⵏ %s',
	            s : 'ⵉⵎⵉⴽ',
	            m : 'ⵎⵉⵏⵓⴺ',
	            mm : '%d ⵎⵉⵏⵓⴺ',
	            h : 'ⵙⴰⵄⴰ',
	            hh : '%d ⵜⴰⵙⵙⴰⵄⵉⵏ',
	            d : 'ⴰⵙⵙ',
	            dd : '%d oⵙⵙⴰⵏ',
	            M : 'ⴰⵢoⵓⵔ',
	            MM : '%d ⵉⵢⵢⵉⵔⵏ',
	            y : 'ⴰⵙⴳⴰⵙ',
	            yy : '%d ⵉⵙⴳⴰⵙⵏ'
	        },
	        week : {
	            dow : 6, // Saturday is the first day of the week.
	            doy : 12  // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	
	    return tzm;
	
	}));

/***/ },
/* 106 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Morocco Central Atlas Tamaziɣt in Latin (tzm-latn)
	//! author : Abdel Said : https://github.com/abdelsaid
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(10)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var tzm_latn = moment.defineLocale('tzm-latn', {
	        months : 'innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir'.split('_'),
	        monthsShort : 'innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir'.split('_'),
	        weekdays : 'asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas'.split('_'),
	        weekdaysShort : 'asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas'.split('_'),
	        weekdaysMin : 'asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd D MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay: '[asdkh g] LT',
	            nextDay: '[aska g] LT',
	            nextWeek: 'dddd [g] LT',
	            lastDay: '[assant g] LT',
	            lastWeek: 'dddd [g] LT',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'dadkh s yan %s',
	            past : 'yan %s',
	            s : 'imik',
	            m : 'minuḍ',
	            mm : '%d minuḍ',
	            h : 'saɛa',
	            hh : '%d tassaɛin',
	            d : 'ass',
	            dd : '%d ossan',
	            M : 'ayowr',
	            MM : '%d iyyirn',
	            y : 'asgas',
	            yy : '%d isgasn'
	        },
	        week : {
	            dow : 6, // Saturday is the first day of the week.
	            doy : 12  // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	
	    return tzm_latn;
	
	}));

/***/ },
/* 107 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : ukrainian (uk)
	//! author : zemlanin : https://github.com/zemlanin
	//! Author : Menelion Elensúle : https://github.com/Oire
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(10)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    function plural(word, num) {
	        var forms = word.split('_');
	        return num % 10 === 1 && num % 100 !== 11 ? forms[0] : (num % 10 >= 2 && num % 10 <= 4 && (num % 100 < 10 || num % 100 >= 20) ? forms[1] : forms[2]);
	    }
	    function relativeTimeWithPlural(number, withoutSuffix, key) {
	        var format = {
	            'mm': withoutSuffix ? 'хвилина_хвилини_хвилин' : 'хвилину_хвилини_хвилин',
	            'hh': withoutSuffix ? 'година_години_годин' : 'годину_години_годин',
	            'dd': 'день_дні_днів',
	            'MM': 'місяць_місяці_місяців',
	            'yy': 'рік_роки_років'
	        };
	        if (key === 'm') {
	            return withoutSuffix ? 'хвилина' : 'хвилину';
	        }
	        else if (key === 'h') {
	            return withoutSuffix ? 'година' : 'годину';
	        }
	        else {
	            return number + ' ' + plural(format[key], +number);
	        }
	    }
	    function weekdaysCaseReplace(m, format) {
	        var weekdays = {
	            'nominative': 'неділя_понеділок_вівторок_середа_четвер_п’ятниця_субота'.split('_'),
	            'accusative': 'неділю_понеділок_вівторок_середу_четвер_п’ятницю_суботу'.split('_'),
	            'genitive': 'неділі_понеділка_вівторка_середи_четверга_п’ятниці_суботи'.split('_')
	        },
	        nounCase = (/(\[[ВвУу]\]) ?dddd/).test(format) ?
	            'accusative' :
	            ((/\[?(?:минулої|наступної)? ?\] ?dddd/).test(format) ?
	                'genitive' :
	                'nominative');
	        return weekdays[nounCase][m.day()];
	    }
	    function processHoursFunction(str) {
	        return function () {
	            return str + 'о' + (this.hours() === 11 ? 'б' : '') + '] LT';
	        };
	    }
	
	    var uk = moment.defineLocale('uk', {
	        months : {
	            'format': 'січня_лютого_березня_квітня_травня_червня_липня_серпня_вересня_жовтня_листопада_грудня'.split('_'),
	            'standalone': 'січень_лютий_березень_квітень_травень_червень_липень_серпень_вересень_жовтень_листопад_грудень'.split('_')
	        },
	        monthsShort : 'січ_лют_бер_квіт_трав_черв_лип_серп_вер_жовт_лист_груд'.split('_'),
	        weekdays : weekdaysCaseReplace,
	        weekdaysShort : 'нд_пн_вт_ср_чт_пт_сб'.split('_'),
	        weekdaysMin : 'нд_пн_вт_ср_чт_пт_сб'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D MMMM YYYY р.',
	            LLL : 'D MMMM YYYY р., HH:mm',
	            LLLL : 'dddd, D MMMM YYYY р., HH:mm'
	        },
	        calendar : {
	            sameDay: processHoursFunction('[Сьогодні '),
	            nextDay: processHoursFunction('[Завтра '),
	            lastDay: processHoursFunction('[Вчора '),
	            nextWeek: processHoursFunction('[У] dddd ['),
	            lastWeek: function () {
	                switch (this.day()) {
	                case 0:
	                case 3:
	                case 5:
	                case 6:
	                    return processHoursFunction('[Минулої] dddd [').call(this);
	                case 1:
	                case 2:
	                case 4:
	                    return processHoursFunction('[Минулого] dddd [').call(this);
	                }
	            },
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'за %s',
	            past : '%s тому',
	            s : 'декілька секунд',
	            m : relativeTimeWithPlural,
	            mm : relativeTimeWithPlural,
	            h : 'годину',
	            hh : relativeTimeWithPlural,
	            d : 'день',
	            dd : relativeTimeWithPlural,
	            M : 'місяць',
	            MM : relativeTimeWithPlural,
	            y : 'рік',
	            yy : relativeTimeWithPlural
	        },
	        // M. E.: those two are virtually unused but a user might want to implement them for his/her website for some reason
	        meridiemParse: /ночі|ранку|дня|вечора/,
	        isPM: function (input) {
	            return /^(дня|вечора)$/.test(input);
	        },
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 4) {
	                return 'ночі';
	            } else if (hour < 12) {
	                return 'ранку';
	            } else if (hour < 17) {
	                return 'дня';
	            } else {
	                return 'вечора';
	            }
	        },
	        ordinalParse: /\d{1,2}-(й|го)/,
	        ordinal: function (number, period) {
	            switch (period) {
	            case 'M':
	            case 'd':
	            case 'DDD':
	            case 'w':
	            case 'W':
	                return number + '-й';
	            case 'D':
	                return number + '-го';
	            default:
	                return number;
	            }
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	
	    return uk;
	
	}));

/***/ },
/* 108 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : uzbek (uz)
	//! author : Sardor Muminov : https://github.com/muminoff
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(10)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var uz = moment.defineLocale('uz', {
	        months : 'январ_феврал_март_апрел_май_июн_июл_август_сентябр_октябр_ноябр_декабр'.split('_'),
	        monthsShort : 'янв_фев_мар_апр_май_июн_июл_авг_сен_окт_ноя_дек'.split('_'),
	        weekdays : 'Якшанба_Душанба_Сешанба_Чоршанба_Пайшанба_Жума_Шанба'.split('_'),
	        weekdaysShort : 'Якш_Душ_Сеш_Чор_Пай_Жум_Шан'.split('_'),
	        weekdaysMin : 'Як_Ду_Се_Чо_Па_Жу_Ша'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'D MMMM YYYY, dddd HH:mm'
	        },
	        calendar : {
	            sameDay : '[Бугун соат] LT [да]',
	            nextDay : '[Эртага] LT [да]',
	            nextWeek : 'dddd [куни соат] LT [да]',
	            lastDay : '[Кеча соат] LT [да]',
	            lastWeek : '[Утган] dddd [куни соат] LT [да]',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'Якин %s ичида',
	            past : 'Бир неча %s олдин',
	            s : 'фурсат',
	            m : 'бир дакика',
	            mm : '%d дакика',
	            h : 'бир соат',
	            hh : '%d соат',
	            d : 'бир кун',
	            dd : '%d кун',
	            M : 'бир ой',
	            MM : '%d ой',
	            y : 'бир йил',
	            yy : '%d йил'
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    return uz;
	
	}));

/***/ },
/* 109 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : vietnamese (vi)
	//! author : Bang Nguyen : https://github.com/bangnk
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(10)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var vi = moment.defineLocale('vi', {
	        months : 'tháng 1_tháng 2_tháng 3_tháng 4_tháng 5_tháng 6_tháng 7_tháng 8_tháng 9_tháng 10_tháng 11_tháng 12'.split('_'),
	        monthsShort : 'Th01_Th02_Th03_Th04_Th05_Th06_Th07_Th08_Th09_Th10_Th11_Th12'.split('_'),
	        monthsParseExact : true,
	        weekdays : 'chủ nhật_thứ hai_thứ ba_thứ tư_thứ năm_thứ sáu_thứ bảy'.split('_'),
	        weekdaysShort : 'CN_T2_T3_T4_T5_T6_T7'.split('_'),
	        weekdaysMin : 'CN_T2_T3_T4_T5_T6_T7'.split('_'),
	        weekdaysParseExact : true,
	        meridiemParse: /sa|ch/i,
	        isPM : function (input) {
	            return /^ch$/i.test(input);
	        },
	        meridiem : function (hours, minutes, isLower) {
	            if (hours < 12) {
	                return isLower ? 'sa' : 'SA';
	            } else {
	                return isLower ? 'ch' : 'CH';
	            }
	        },
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM [năm] YYYY',
	            LLL : 'D MMMM [năm] YYYY HH:mm',
	            LLLL : 'dddd, D MMMM [năm] YYYY HH:mm',
	            l : 'DD/M/YYYY',
	            ll : 'D MMM YYYY',
	            lll : 'D MMM YYYY HH:mm',
	            llll : 'ddd, D MMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay: '[Hôm nay lúc] LT',
	            nextDay: '[Ngày mai lúc] LT',
	            nextWeek: 'dddd [tuần tới lúc] LT',
	            lastDay: '[Hôm qua lúc] LT',
	            lastWeek: 'dddd [tuần rồi lúc] LT',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : '%s tới',
	            past : '%s trước',
	            s : 'vài giây',
	            m : 'một phút',
	            mm : '%d phút',
	            h : 'một giờ',
	            hh : '%d giờ',
	            d : 'một ngày',
	            dd : '%d ngày',
	            M : 'một tháng',
	            MM : '%d tháng',
	            y : 'một năm',
	            yy : '%d năm'
	        },
	        ordinalParse: /\d{1,2}/,
	        ordinal : function (number) {
	            return number;
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    return vi;
	
	}));

/***/ },
/* 110 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : pseudo (x-pseudo)
	//! author : Andrew Hood : https://github.com/andrewhood125
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(10)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var x_pseudo = moment.defineLocale('x-pseudo', {
	        months : 'J~áñúá~rý_F~ébrú~árý_~Márc~h_Áp~ríl_~Máý_~Júñé~_Júl~ý_Áú~gúst~_Sép~témb~ér_Ó~ctób~ér_Ñ~óvém~bér_~Décé~mbér'.split('_'),
	        monthsShort : 'J~áñ_~Féb_~Már_~Ápr_~Máý_~Júñ_~Júl_~Áúg_~Sép_~Óct_~Ñóv_~Déc'.split('_'),
	        monthsParseExact : true,
	        weekdays : 'S~úñdá~ý_Mó~ñdáý~_Túé~sdáý~_Wéd~ñésd~áý_T~húrs~dáý_~Fríd~áý_S~átúr~dáý'.split('_'),
	        weekdaysShort : 'S~úñ_~Móñ_~Túé_~Wéd_~Thú_~Frí_~Sát'.split('_'),
	        weekdaysMin : 'S~ú_Mó~_Tú_~Wé_T~h_Fr~_Sá'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat : {
	            LT : 'HH:mm',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd, D MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay : '[T~ódá~ý át] LT',
	            nextDay : '[T~ómó~rró~w át] LT',
	            nextWeek : 'dddd [át] LT',
	            lastDay : '[Ý~ést~érdá~ý át] LT',
	            lastWeek : '[L~ást] dddd [át] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'í~ñ %s',
	            past : '%s á~gó',
	            s : 'á ~féw ~sécó~ñds',
	            m : 'á ~míñ~úté',
	            mm : '%d m~íñú~tés',
	            h : 'á~ñ hó~úr',
	            hh : '%d h~óúrs',
	            d : 'á ~dáý',
	            dd : '%d d~áýs',
	            M : 'á ~móñ~th',
	            MM : '%d m~óñt~hs',
	            y : 'á ~ýéár',
	            yy : '%d ý~éárs'
	        },
	        ordinalParse: /\d{1,2}(th|st|nd|rd)/,
	        ordinal : function (number) {
	            var b = number % 10,
	                output = (~~(number % 100 / 10) === 1) ? 'th' :
	                (b === 1) ? 'st' :
	                (b === 2) ? 'nd' :
	                (b === 3) ? 'rd' : 'th';
	            return number + output;
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    return x_pseudo;
	
	}));

/***/ },
/* 111 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : chinese (zh-cn)
	//! author : suupic : https://github.com/suupic
	//! author : Zeno Zeng : https://github.com/zenozeng
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(10)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var zh_cn = moment.defineLocale('zh-cn', {
	        months : '一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月'.split('_'),
	        monthsShort : '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
	        weekdays : '星期日_星期一_星期二_星期三_星期四_星期五_星期六'.split('_'),
	        weekdaysShort : '周日_周一_周二_周三_周四_周五_周六'.split('_'),
	        weekdaysMin : '日_一_二_三_四_五_六'.split('_'),
	        longDateFormat : {
	            LT : 'Ah点mm分',
	            LTS : 'Ah点m分s秒',
	            L : 'YYYY-MM-DD',
	            LL : 'YYYY年MMMD日',
	            LLL : 'YYYY年MMMD日Ah点mm分',
	            LLLL : 'YYYY年MMMD日ddddAh点mm分',
	            l : 'YYYY-MM-DD',
	            ll : 'YYYY年MMMD日',
	            lll : 'YYYY年MMMD日Ah点mm分',
	            llll : 'YYYY年MMMD日ddddAh点mm分'
	        },
	        meridiemParse: /凌晨|早上|上午|中午|下午|晚上/,
	        meridiemHour: function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === '凌晨' || meridiem === '早上' ||
	                    meridiem === '上午') {
	                return hour;
	            } else if (meridiem === '下午' || meridiem === '晚上') {
	                return hour + 12;
	            } else {
	                // '中午'
	                return hour >= 11 ? hour : hour + 12;
	            }
	        },
	        meridiem : function (hour, minute, isLower) {
	            var hm = hour * 100 + minute;
	            if (hm < 600) {
	                return '凌晨';
	            } else if (hm < 900) {
	                return '早上';
	            } else if (hm < 1130) {
	                return '上午';
	            } else if (hm < 1230) {
	                return '中午';
	            } else if (hm < 1800) {
	                return '下午';
	            } else {
	                return '晚上';
	            }
	        },
	        calendar : {
	            sameDay : function () {
	                return this.minutes() === 0 ? '[今天]Ah[点整]' : '[今天]LT';
	            },
	            nextDay : function () {
	                return this.minutes() === 0 ? '[明天]Ah[点整]' : '[明天]LT';
	            },
	            lastDay : function () {
	                return this.minutes() === 0 ? '[昨天]Ah[点整]' : '[昨天]LT';
	            },
	            nextWeek : function () {
	                var startOfWeek, prefix;
	                startOfWeek = moment().startOf('week');
	                prefix = this.diff(startOfWeek, 'days') >= 7 ? '[下]' : '[本]';
	                return this.minutes() === 0 ? prefix + 'dddAh点整' : prefix + 'dddAh点mm';
	            },
	            lastWeek : function () {
	                var startOfWeek, prefix;
	                startOfWeek = moment().startOf('week');
	                prefix = this.unix() < startOfWeek.unix()  ? '[上]' : '[本]';
	                return this.minutes() === 0 ? prefix + 'dddAh点整' : prefix + 'dddAh点mm';
	            },
	            sameElse : 'LL'
	        },
	        ordinalParse: /\d{1,2}(日|月|周)/,
	        ordinal : function (number, period) {
	            switch (period) {
	            case 'd':
	            case 'D':
	            case 'DDD':
	                return number + '日';
	            case 'M':
	                return number + '月';
	            case 'w':
	            case 'W':
	                return number + '周';
	            default:
	                return number;
	            }
	        },
	        relativeTime : {
	            future : '%s内',
	            past : '%s前',
	            s : '几秒',
	            m : '1 分钟',
	            mm : '%d 分钟',
	            h : '1 小时',
	            hh : '%d 小时',
	            d : '1 天',
	            dd : '%d 天',
	            M : '1 个月',
	            MM : '%d 个月',
	            y : '1 年',
	            yy : '%d 年'
	        },
	        week : {
	            // GB/T 7408-1994《数据元和交换格式·信息交换·日期和时间表示法》与ISO 8601:1988等效
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	
	    return zh_cn;
	
	}));

/***/ },
/* 112 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : traditional chinese (zh-tw)
	//! author : Ben : https://github.com/ben-lin
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(10)) :
	   typeof define === 'function' && define.amd ? define(['moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';
	
	
	    var zh_tw = moment.defineLocale('zh-tw', {
	        months : '一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月'.split('_'),
	        monthsShort : '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
	        weekdays : '星期日_星期一_星期二_星期三_星期四_星期五_星期六'.split('_'),
	        weekdaysShort : '週日_週一_週二_週三_週四_週五_週六'.split('_'),
	        weekdaysMin : '日_一_二_三_四_五_六'.split('_'),
	        longDateFormat : {
	            LT : 'Ah點mm分',
	            LTS : 'Ah點m分s秒',
	            L : 'YYYY年MMMD日',
	            LL : 'YYYY年MMMD日',
	            LLL : 'YYYY年MMMD日Ah點mm分',
	            LLLL : 'YYYY年MMMD日ddddAh點mm分',
	            l : 'YYYY年MMMD日',
	            ll : 'YYYY年MMMD日',
	            lll : 'YYYY年MMMD日Ah點mm分',
	            llll : 'YYYY年MMMD日ddddAh點mm分'
	        },
	        meridiemParse: /早上|上午|中午|下午|晚上/,
	        meridiemHour : function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === '早上' || meridiem === '上午') {
	                return hour;
	            } else if (meridiem === '中午') {
	                return hour >= 11 ? hour : hour + 12;
	            } else if (meridiem === '下午' || meridiem === '晚上') {
	                return hour + 12;
	            }
	        },
	        meridiem : function (hour, minute, isLower) {
	            var hm = hour * 100 + minute;
	            if (hm < 900) {
	                return '早上';
	            } else if (hm < 1130) {
	                return '上午';
	            } else if (hm < 1230) {
	                return '中午';
	            } else if (hm < 1800) {
	                return '下午';
	            } else {
	                return '晚上';
	            }
	        },
	        calendar : {
	            sameDay : '[今天]LT',
	            nextDay : '[明天]LT',
	            nextWeek : '[下]ddddLT',
	            lastDay : '[昨天]LT',
	            lastWeek : '[上]ddddLT',
	            sameElse : 'L'
	        },
	        ordinalParse: /\d{1,2}(日|月|週)/,
	        ordinal : function (number, period) {
	            switch (period) {
	            case 'd' :
	            case 'D' :
	            case 'DDD' :
	                return number + '日';
	            case 'M' :
	                return number + '月';
	            case 'w' :
	            case 'W' :
	                return number + '週';
	            default :
	                return number;
	            }
	        },
	        relativeTime : {
	            future : '%s內',
	            past : '%s前',
	            s : '幾秒',
	            m : '1分鐘',
	            mm : '%d分鐘',
	            h : '1小時',
	            hh : '%d小時',
	            d : '1天',
	            dd : '%d天',
	            M : '1個月',
	            MM : '%d個月',
	            y : '1年',
	            yy : '%d年'
	        }
	    });
	
	    return zh_tw;
	
	}));

/***/ },
/* 113 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';var _typeof=typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"?function(obj){return typeof obj;}:function(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol?"symbol":typeof obj;};(function(global,factory){'use strict';var fnc;fnc=( false?'undefined':_typeof(exports))==='object'&&typeof module!=='undefined'?module.exports=factory(__webpack_require__(2),__webpack_require__(10)): true?!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(2),__webpack_require__(10)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)):factory(global.angular,global.moment);})(undefined,function(angular,moment){ //(function (global, factory) {
	//  'use strict';
	//  var fnc;
	//  fnc = (typeof exports === 'object' && typeof module !== 'undefined') ? module.exports = factory(require('angular'), require('moment')) :
	//        (typeof define === 'function' && define.amd) ? define(['angular', 'moment'], factory) :
	//        factory(global.angular, global.moment);
	//}(this, function (angular, moment) {
	var Module=angular.module('datePicker',[]);Module.constant('datePickerConfig',{template:'templates/datepicker.html',view:'month',views:['year','month','date','hours','minutes'],momentNames:{year:'year',month:'month',date:'day',hours:'hours',minutes:'minutes'},viewConfig:{year:['years','isSameYear'],month:['months','isSameMonth'],hours:['hours','isSameHour'],minutes:['minutes','isSameMinutes']},step:5}); //Moment format filter.
	Module.filter('mFormat',function(){return function(m,format,tz){if(!moment.isMoment(m)){return m?moment(m).format(format):'';}return tz?moment.tz(m,tz).format(format):m.format(format);};});Module.directive('datePicker',['datePickerConfig','datePickerUtils',function datePickerDirective(datePickerConfig,datePickerUtils){ //noinspection JSUnusedLocalSymbols
	return { // this is a bug ?
	require:'?ngModel',template:'<div ng-include="template"></div>',scope:{model:'=datePicker',after:'=?',before:'=?'},link:function link(scope,element,attrs,ngModel){function prepareViews(){scope.views=datePickerConfig.views.concat();scope.view=attrs.view||datePickerConfig.view;scope.views=scope.views.slice(scope.views.indexOf(attrs.maxView||'year'),scope.views.indexOf(attrs.minView||'minutes')+1);if(scope.views.length===1||scope.views.indexOf(scope.view)===-1){scope.view=scope.views[0];}}function getDate(name){return datePickerUtils.getDate(scope,attrs,name);}var arrowClick=false,tz=scope.tz=attrs.timezone,createMoment=datePickerUtils.createMoment,eventIsForPicker=datePickerUtils.eventIsForPicker,step=parseInt(attrs.step||datePickerConfig.step,10),partial=!!attrs.partial,minDate=getDate('minDate'),maxDate=getDate('maxDate'),pickerID=element[0].id,now=scope.now=createMoment(),selected=scope.date=createMoment(scope.model||now),autoclose=attrs.autoClose==='true', // Either gets the 1st day from the attributes, or asks moment.js to give it to us as it is localized.
	firstDay=attrs.firstDay&&attrs.firstDay>=0&&attrs.firstDay<=6?parseInt(attrs.firstDay,10):moment().weekday(0).day(),setDate,prepareViewData,isSame,clipDate,isNow,inValidRange;datePickerUtils.setParams(tz,firstDay);if(!scope.model){selected.minute(Math.ceil(selected.minute()/step)*step).second(0);}scope.template=attrs.template||datePickerConfig.template;scope.watchDirectChanges=attrs.watchDirectChanges!==undefined;scope.callbackOnSetDate=attrs.dateChange?datePickerUtils.findFunction(scope,attrs.dateChange):undefined;prepareViews();scope.setView=function(nextView){if(scope.views.indexOf(nextView)!==-1){scope.view=nextView;}};scope.selectDate=function(date){if(attrs.disabled){return false;}if(isSame(scope.date,date)){date=scope.date;}date=clipDate(date);if(!date){return false;}scope.date=date;var nextView=scope.views[scope.views.indexOf(scope.view)+1];if(!nextView||partial||scope.model){setDate(date);}if(nextView){scope.setView(nextView);}else if(autoclose){element.addClass('hidden');scope.$emit('hidePicker');}else {prepareViewData();}};setDate=function setDate(date){if(date){scope.model=date;if(ngModel){ngModel.$setViewValue(date);}}scope.$emit('setDate',scope.model,scope.view); //This is duplicated in the new functionality.
	if(scope.callbackOnSetDate){scope.callbackOnSetDate(attrs.datePicker,scope.date);}};function update(){var view=scope.view;datePickerUtils.setParams(tz,firstDay);if(scope.model&&!arrowClick){scope.date=createMoment(scope.model);arrowClick=false;}var date=scope.date;switch(view){case 'year':scope.years=datePickerUtils.getVisibleYears(date);break;case 'month':scope.months=datePickerUtils.getVisibleMonths(date);break;case 'date':scope.weekdays=scope.weekdays||datePickerUtils.getDaysOfWeek();scope.weeks=datePickerUtils.getVisibleWeeks(date);break;case 'hours':scope.hours=datePickerUtils.getVisibleHours(date);break;case 'minutes':scope.minutes=datePickerUtils.getVisibleMinutes(date,step);break;}prepareViewData();}function watch(){if(scope.view!=='date'){return scope.view;}return scope.date?scope.date.month():null;}scope.$watch(watch,update);if(scope.watchDirectChanges){scope.$watch('model',function(){arrowClick=false;update();});}prepareViewData=function prepareViewData(){var view=scope.view,date=scope.date,classes=[],classList='',i,j;datePickerUtils.setParams(tz,firstDay);if(view==='date'){var weeks=scope.weeks,week;for(i=0;i<weeks.length;i++){week=weeks[i];classes.push([]);for(j=0;j<week.length;j++){classList='';if(datePickerUtils.isSameDay(date,week[j])){classList+='active';}if(isNow(week[j],view)){classList+=' now';} //if (week[j].month() !== date.month()) classList += ' disabled';
	if(week[j].month()!==date.month()||!inValidRange(week[j])){classList+=' disabled';}classes[i].push(classList);}}}else {var params=datePickerConfig.viewConfig[view],dates=scope[params[0]],compareFunc=params[1];for(i=0;i<dates.length;i++){classList='';if(datePickerUtils[compareFunc](date,dates[i])){classList+='active';}if(isNow(dates[i],view)){classList+=' now';}if(!inValidRange(dates[i])){classList+=' disabled';}classes.push(classList);}}scope.classes=classes;};scope.next=function(delta){var date=moment(scope.date);delta=delta||1;switch(scope.view){case 'year': /*falls through*/case 'month':date.year(date.year()+delta);break;case 'date':date.month(date.month()+delta);break;case 'hours': /*falls through*/case 'minutes':date.hours(date.hours()+delta);break;}date=clipDate(date);if(date){scope.date=date;setDate(date);arrowClick=true;update();}};inValidRange=function inValidRange(date){var valid=true;if(minDate&&minDate.isAfter(date)){valid=isSame(minDate,date);}if(maxDate&&maxDate.isBefore(date)){valid&=isSame(maxDate,date);}return valid;};isSame=function isSame(date1,date2){return date1.isSame(date2,datePickerConfig.momentNames[scope.view])?true:false;};clipDate=function clipDate(date){if(minDate&&minDate.isAfter(date)){return minDate;}else if(maxDate&&maxDate.isBefore(date)){return maxDate;}else {return date;}};isNow=function isNow(date,view){var is=true;switch(view){case 'minutes':is&=~ ~(now.minutes()/step)===~ ~(date.minutes()/step); /* falls through */case 'hours':is&=now.hours()===date.hours(); /* falls through */case 'date':is&=now.date()===date.date(); /* falls through */case 'month':is&=now.month()===date.month(); /* falls through */case 'year':is&=now.year()===date.year();}return is;};scope.prev=function(delta){return scope.next(-delta||-1);};if(pickerID){scope.$on('pickerUpdate',function(event,pickerIDs,data){if(eventIsForPicker(pickerIDs,pickerID)){var updateViews=false,updateViewData=false;if(angular.isDefined(data.minDate)){minDate=data.minDate?data.minDate:false;updateViewData=true;}if(angular.isDefined(data.maxDate)){maxDate=data.maxDate?data.maxDate:false;updateViewData=true;}if(angular.isDefined(data.minView)){attrs.minView=data.minView;updateViews=true;}if(angular.isDefined(data.maxView)){attrs.maxView=data.maxView;updateViews=true;}attrs.view=data.view||attrs.view;if(updateViews){prepareViews();}if(updateViewData){update();}}});}}};}]); //}));
	//(function (global, factory) {
	//  'use strict';
	//  var fnc;
	//  fnc = (typeof exports === 'object' && typeof module !== 'undefined') ? module.exports = factory(require('angular'), require('moment')) :
	//    (typeof define === 'function' && define.amd) ? define(['angular', 'moment'], factory) :
	//      factory(global.angular, global.moment);
	//}(this, function (angular, moment) {
	angular.module('datePicker').factory('datePickerUtils',function(){var tz,firstDay;var createNewDate=function createNewDate(year,month,day,hour,minute){var utc=Date.UTC(year|0,month|0,day|0,hour|0,minute|0);return tz?moment.tz(utc,tz):moment(utc);};return {getVisibleMinutes:function getVisibleMinutes(m,step){var year=m.year(),month=m.month(),day=m.date(),hour=m.hours(),pushedDate,offset=m.utcOffset()/60,minutes=[],minute;for(minute=0;minute<60;minute+=step){pushedDate=createNewDate(year,month,day,hour-offset,minute);minutes.push(pushedDate);}return minutes;},getVisibleWeeks:function getVisibleWeeks(m){m=moment(m);var startYear=m.year(),startMonth=m.month(); //Set date to the first day of the month
	m.date(1); //Grab day of the week
	var day=m.day(); //Go back the required number of days to arrive at the previous week start
	m.date(firstDay-(day+(firstDay>=day?6:-1)));var weeks=[];while(weeks.length<6){if(m.year()===startYear&&m.month()>startMonth){break;}weeks.push(this.getDaysOfWeek(m));m.add(7,'d');}return weeks;},getVisibleYears:function getVisibleYears(d){var m=moment(d),year=m.year();m.year(year-year%10);year=m.year();var offset=m.utcOffset()/60,years=[],pushedDate,actualOffset;for(var i=0;i<12;i++){pushedDate=createNewDate(year,0,1,0-offset);actualOffset=pushedDate.utcOffset()/60;if(actualOffset!==offset){pushedDate=createNewDate(year,0,1,0-actualOffset);offset=actualOffset;}years.push(pushedDate);year++;}return years;},getDaysOfWeek:function getDaysOfWeek(m){m=m?m:tz?moment.tz(tz).day(firstDay):moment().day(firstDay);var year=m.year(),month=m.month(),day=m.date(),days=[],pushedDate,offset=m.utcOffset()/60,actualOffset;for(var i=0;i<7;i++){pushedDate=createNewDate(year,month,day,0-offset,0,false);actualOffset=pushedDate.utcOffset()/60;if(actualOffset!==offset){pushedDate=createNewDate(year,month,day,0-actualOffset,0,false);}days.push(pushedDate);day++;}return days;},getVisibleMonths:function getVisibleMonths(m){var year=m.year(),offset=m.utcOffset()/60,months=[],pushedDate,actualOffset;for(var month=0;month<12;month++){pushedDate=createNewDate(year,month,1,0-offset,0,false);actualOffset=pushedDate.utcOffset()/60;if(actualOffset!==offset){pushedDate=createNewDate(year,month,1,0-actualOffset,0,false);}months.push(pushedDate);}return months;},getVisibleHours:function getVisibleHours(m){var year=m.year(),month=m.month(),day=m.date(),hours=[],hour,pushedDate,actualOffset,offset=m.utcOffset()/60;for(hour=0;hour<24;hour++){pushedDate=createNewDate(year,month,day,hour-offset,0,false);actualOffset=pushedDate.utcOffset()/60;if(actualOffset!==offset){pushedDate=createNewDate(year,month,day,hour-actualOffset,0,false);}hours.push(pushedDate);}return hours;},isAfter:function isAfter(model,date){return model&&model.unix()>=date.unix();},isBefore:function isBefore(model,date){return model.unix()<=date.unix();},isSameYear:function isSameYear(model,date){return model&&model.year()===date.year();},isSameMonth:function isSameMonth(model,date){return this.isSameYear(model,date)&&model.month()===date.month();},isSameDay:function isSameDay(model,date){return this.isSameMonth(model,date)&&model.date()===date.date();},isSameHour:function isSameHour(model,date){return this.isSameDay(model,date)&&model.hours()===date.hours();},isSameMinutes:function isSameMinutes(model,date){return this.isSameHour(model,date)&&model.minutes()===date.minutes();},setParams:function setParams(zone,fd){tz=zone;firstDay=fd;},scopeSearch:function scopeSearch(scope,name,comparisonFn){var parentScope=scope,nameArray=name.split('.'),target,i,j=nameArray.length;do {target=parentScope=parentScope.$parent; //Loop through provided names.
	for(i=0;i<j;i++){target=target[nameArray[i]];if(!target){continue;}} //If we reached the end of the list for this scope,
	//and something was found, trigger the comparison
	//function. If the comparison function is happy, return
	//found result. Otherwise, continue to the next parent scope
	if(target&&comparisonFn(target)){return target;}}while(parentScope.$parent);return false;},findFunction:function findFunction(scope,name){ //Search scope ancestors for a matching function.
	return this.scopeSearch(scope,name,function(target){ //Property must also be a function
	return angular.isFunction(target);});},findParam:function findParam(scope,name){ //Search scope ancestors for a matching parameter.
	return this.scopeSearch(scope,name,function(){ //As long as the property exists, we're good
	return true;});},createMoment:function createMoment(m){if(tz){return moment.tz(m,tz);}else { //If input is a moment, and we have no TZ info, we need to remove TZ
	//info from the moment, otherwise the newly created moment will take
	//the timezone of the input moment. The easiest way to do that is to
	//take the unix timestamp, and use that to create a new moment.
	//The new moment will use the local timezone of the user machine.
	return moment.isMoment(m)?moment.unix(m.unix()):moment(m);}},getDate:function getDate(scope,attrs,name){var result=false;if(attrs[name]){result=this.createMoment(attrs[name]);if(!result.isValid()){result=this.findParam(scope,attrs[name]);if(result){result=this.createMoment(result);}}}return result;},eventIsForPicker:function eventIsForPicker(targetIDs,pickerID){ //Checks if an event targeted at a specific picker, via either a string name, or an array of strings.
	return angular.isArray(targetIDs)&&targetIDs.indexOf(pickerID)>-1||targetIDs===pickerID;}};}); //}));
	//(function (global, factory) {
	//  'use strict';
	//  var fnc;
	//  fnc = (typeof exports === 'object' && typeof module !== 'undefined') ? module.exports = factory(require('angular'), require('moment')) :
	//    (typeof define === 'function' && define.amd) ? define(['angular', 'moment'], factory) :
	//      factory(global.angular, global.moment);
	//}(this, function (angular, moment) {
	var Module=angular.module('datePicker');Module.directive('dateRange',['$compile','datePickerUtils','dateTimeConfig',function($compile,datePickerUtils,dateTimeConfig){function getTemplate(attrs,id,model,min,max){return dateTimeConfig.template(angular.extend(attrs,{ngModel:model,minDate:min&&moment.isMoment(min)?min.format():false,maxDate:max&&moment.isMoment(max)?max.format():false}),id);}function randomName(){return 'picker'+Math.random().toString().substr(2);}return {scope:{start:'=',end:'='},link:function link(scope,element,attrs){var dateChange=null,pickerRangeID=element[0].id,pickerIDs=[randomName(),randomName()],createMoment=datePickerUtils.createMoment,eventIsForPicker=datePickerUtils.eventIsForPicker;scope.dateChange=function(modelName,newDate){ //Notify user if callback exists.
	if(dateChange){dateChange(modelName,newDate);}};function setMax(date){scope.$broadcast('pickerUpdate',pickerIDs[0],{maxDate:date});}function setMin(date){scope.$broadcast('pickerUpdate',pickerIDs[1],{minDate:date});}if(pickerRangeID){scope.$on('pickerUpdate',function(event,targetIDs,data){if(eventIsForPicker(targetIDs,pickerRangeID)){ //If we received an update event, dispatch it to the inner pickers using their IDs.
	scope.$broadcast('pickerUpdate',pickerIDs,data);}});}datePickerUtils.setParams(attrs.timezone);scope.start=createMoment(scope.start);scope.end=createMoment(scope.end);scope.$watchGroup(['start','end'],function(dates){ //Scope data changed, update picker min/max
	setMin(dates[0]);setMax(dates[1]);});if(angular.isDefined(attrs.dateChange)){dateChange=datePickerUtils.findFunction(scope,attrs.dateChange);}attrs.onSetDate='dateChange';var template='<div><table class="date-range"><tr><td valign="top">'+getTemplate(attrs,pickerIDs[0],'start',false,scope.end)+'</td><td valign="top">'+getTemplate(attrs,pickerIDs[1],'end',scope.start,false)+'</td></tr></table></div>';var picker=$compile(template)(scope);element.append(picker);}};}]); //}));
	//(function (global, factory) {
	//  'use strict';
	//  var fnc;
	//  fnc = (typeof exports === 'object' && typeof module !== 'undefined') ? module.exports = factory(require('angular'), require('moment')) :
	//    (typeof define === 'function' && define.amd) ? define(['angular', 'moment'], factory) :
	//      factory(global.angular, global.moment);
	//}(this, function (angular, moment) {
	var PRISTINE_CLASS='ng-pristine',DIRTY_CLASS='ng-dirty';var Module=angular.module('datePicker');Module.constant('dateTimeConfig',{template:function template(attrs,id){return ''+'<div '+(id?'id="'+id+'" ':'')+'date-picker="'+attrs.ngModel+'" '+(attrs.view?'view="'+attrs.view+'" ':'')+(attrs.maxView?'max-view="'+attrs.maxView+'" ':'')+(attrs.maxDate?'max-date="'+attrs.maxDate+'" ':'')+(attrs.autoClose?'auto-close="'+attrs.autoClose+'" ':'')+(attrs.template?'template="'+attrs.template+'" ':'')+(attrs.minView?'min-view="'+attrs.minView+'" ':'')+(attrs.minDate?'min-date="'+attrs.minDate+'" ':'')+(attrs.partial?'partial="'+attrs.partial+'" ':'')+(attrs.step?'step="'+attrs.step+'" ':'')+(attrs.onSetDate?'date-change="'+attrs.onSetDate+'" ':'')+(attrs.ngModel?'ng-model="'+attrs.ngModel+'" ':'')+(attrs.firstDay?'first-day="'+attrs.firstDay+'" ':'')+(attrs.timezone?'timezone="'+attrs.timezone+'" ':'')+'class="date-picker-date-time"></div>';},format:'YYYY-MM-DD HH:mm',views:['date','year','month','hours','minutes'],autoClose:false,position:'relative'});Module.directive('dateTimeAppend',function(){return {link:function link(scope,element){element.bind('click',function(){element.find('input')[0].focus();});}};});Module.directive('dateTime',['$compile','$document','$filter','dateTimeConfig','$parse','datePickerUtils',function($compile,$document,$filter,dateTimeConfig,$parse,datePickerUtils){var body=$document.find('body');var dateFilter=$filter('mFormat');return {require:'ngModel',scope:true,link:function link(scope,element,attrs,ngModel){var format=attrs.format||dateTimeConfig.format,parentForm=element.inheritedData('$formController'),views=$parse(attrs.views)(scope)||dateTimeConfig.views.concat(),view=attrs.view||views[0],index=views.indexOf(view),dismiss=attrs.autoClose?$parse(attrs.autoClose)(scope):dateTimeConfig.autoClose,picker=null,pickerID=element[0].id,position=attrs.position||dateTimeConfig.position,container=null,minDate=null,minValid=null,maxDate=null,maxValid=null,timezone=attrs.timezone||false,eventIsForPicker=datePickerUtils.eventIsForPicker,dateChange=null,shownOnce=false,template;if(index===-1){views.splice(index,1);}views.unshift(view);function formatter(value){return dateFilter(value,format,timezone);}function parser(viewValue){if(viewValue.length===format.length){return viewValue;}return viewValue.length===0?viewValue:undefined;}function setMin(date){minDate=date;attrs.minDate=date?date.format():date;minValid=moment.isMoment(date);}function setMax(date){maxDate=date;attrs.maxDate=date?date.format():date;maxValid=moment.isMoment(date);}ngModel.$formatters.push(formatter);ngModel.$parsers.unshift(parser);if(angular.isDefined(attrs.minDate)){setMin(datePickerUtils.findParam(scope,attrs.minDate));ngModel.$validators.min=function(value){ //If we don't have a min / max value, then any value is valid.
	return minValid?moment.isMoment(value)&&(minDate.isSame(value)||minDate.isBefore(value)):true;};}if(angular.isDefined(attrs.maxDate)){setMax(datePickerUtils.findParam(scope,attrs.maxDate));ngModel.$validators.max=function(value){return maxValid?moment.isMoment(value)&&(maxDate.isSame(value)||maxDate.isAfter(value)):true;};}if(angular.isDefined(attrs.dateChange)){dateChange=datePickerUtils.findFunction(scope,attrs.dateChange);}function getTemplate(){template=dateTimeConfig.template(attrs);}function updateInput(event){event.stopPropagation();if(ngModel.$pristine){ngModel.$dirty=true;ngModel.$pristine=false;element.removeClass(PRISTINE_CLASS).addClass(DIRTY_CLASS);if(parentForm){parentForm.$setDirty();}ngModel.$render();}}function clear(){if(picker){picker.remove();picker=null;}if(container){container.remove();container=null;}}if(pickerID){scope.$on('pickerUpdate',function(event,pickerIDs,data){if(eventIsForPicker(pickerIDs,pickerID)){if(picker){ //Need to handle situation where the data changed but the picker is currently open.
	//To handle this, we can create the inner picker with a random ID, then forward
	//any events received to it.
	}else {var validateRequired=false;if(angular.isDefined(data.minDate)){setMin(data.minDate);validateRequired=true;}if(angular.isDefined(data.maxDate)){setMax(data.maxDate);validateRequired=true;}if(angular.isDefined(data.minView)){attrs.minView=data.minView;}if(angular.isDefined(data.maxView)){attrs.maxView=data.maxView;}attrs.view=data.view||attrs.view;if(validateRequired){ngModel.$validate();}if(angular.isDefined(data.format)){format=attrs.format=data.format||dateTimeConfig.format;ngModel.$modelValue=-1; //Triggers formatters. This value will be discarded.
	}getTemplate();}}});}function showPicker(){if(picker){return;} // create picker element
	picker=$compile(template)(scope);scope.$digest(); //If the picker has already been shown before then we shouldn't be binding to events, as these events are already bound to in this scope.
	if(!shownOnce){scope.$on('setDate',function(event,date,view){updateInput(event);if(dateChange){dateChange(attrs.ngModel,date);}if(dismiss&&views[views.length-1]===view){clear();}});scope.$on('hidePicker',function(){element.triggerHandler('blur');});scope.$on('$destroy',clear);shownOnce=true;} // move picker below input element
	if(position==='absolute'){var pos=element[0].getBoundingClientRect(); // Support IE8
	var height=pos.height||element[0].offsetHeight;picker.css({top:pos.top+height+'px',left:pos.left+'px',display:'block',position:position});body.append(picker);}else { // relative
	container=angular.element('<div date-picker-wrapper></div>');element[0].parentElement.insertBefore(container[0],element[0]);container.append(picker); //          this approach doesn't work
	//          element.before(picker);
	picker.css({top:element[0].offsetHeight+'px',display:'block'});}picker.bind('mousedown',function(evt){evt.preventDefault();});}element.bind('focus',showPicker);element.bind('click',showPicker);element.bind('blur',clear);getTemplate();}};}]); //}));
	angular.module('datePicker').run(['$templateCache',function($templateCache){$templateCache.put('templates/datepicker.html',"<div ng-switch=\"view\">\r"+"\n"+"  <div ng-switch-when=\"date\">\r"+"\n"+"    <table>\r"+"\n"+"      <thead>\r"+"\n"+"      <tr>\r"+"\n"+"        <th ng-click=\"prev()\">&lsaquo;</th>\r"+"\n"+"        <th colspan=\"5\" class=\"switch\" ng-click=\"setView('month')\" ng-bind=\"date|mFormat:'YYYY MMMM':tz\"></th>\r"+"\n"+"        <th ng-click=\"next()\">&rsaquo;</i></th>\r"+"\n"+"      </tr>\r"+"\n"+"      <tr>\r"+"\n"+"        <th ng-repeat=\"day in weekdays\" style=\"overflow: hidden\" ng-bind=\"day|mFormat:'ddd':tz\"></th>\r"+"\n"+"      </tr>\r"+"\n"+"      </thead>\r"+"\n"+"      <tbody>\r"+"\n"+"      <tr ng-repeat=\"week in weeks\" ng-init=\"$index2 = $index\">\r"+"\n"+"        <td ng-repeat=\"day in week\">\r"+"\n"+"          <span\r"+"\n"+"            ng-class=\"classes[$index2][$index]\"\r"+"\n"+"            ng-click=\"selectDate(day)\" ng-bind=\"day|mFormat:'DD':tz\"></span>\r"+"\n"+"        </td>\r"+"\n"+"      </tr>\r"+"\n"+"      </tbody>\r"+"\n"+"    </table>\r"+"\n"+"  </div>\r"+"\n"+"  <div ng-switch-when=\"year\">\r"+"\n"+"    <table>\r"+"\n"+"      <thead>\r"+"\n"+"      <tr>\r"+"\n"+"        <th ng-click=\"prev(10)\">&lsaquo;</th>\r"+"\n"+"        <th colspan=\"5\" class=\"switch\"ng-bind=\"years[0].year()+' - '+years[years.length-1].year()\"></th>\r"+"\n"+"        <th ng-click=\"next(10)\">&rsaquo;</i></th>\r"+"\n"+"      </tr>\r"+"\n"+"      </thead>\r"+"\n"+"      <tbody>\r"+"\n"+"      <tr>\r"+"\n"+"        <td colspan=\"7\">\r"+"\n"+"          <span ng-class=\"classes[$index]\"\r"+"\n"+"                ng-repeat=\"year in years\"\r"+"\n"+"                ng-click=\"selectDate(year)\" ng-bind=\"year.year()\"></span>\r"+"\n"+"        </td>\r"+"\n"+"      </tr>\r"+"\n"+"      </tbody>\r"+"\n"+"    </table>\r"+"\n"+"  </div>\r"+"\n"+"  <div ng-switch-when=\"month\">\r"+"\n"+"    <table>\r"+"\n"+"      <thead>\r"+"\n"+"      <tr>\r"+"\n"+"        <th ng-click=\"prev()\">&lsaquo;</th>\r"+"\n"+"        <th colspan=\"5\" class=\"switch\" ng-click=\"setView('year')\" ng-bind=\"date|mFormat:'YYYY':tz\"></th>\r"+"\n"+"        <th ng-click=\"next()\">&rsaquo;</i></th>\r"+"\n"+"      </tr>\r"+"\n"+"      </thead>\r"+"\n"+"      <tbody>\r"+"\n"+"      <tr>\r"+"\n"+"        <td colspan=\"7\">\r"+"\n"+"          <span ng-repeat=\"month in months\"\r"+"\n"+"                ng-class=\"classes[$index]\"\r"+"\n"+"                ng-click=\"selectDate(month)\"\r"+"\n"+"                ng-bind=\"month|mFormat:'MMM':tz\"></span>\r"+"\n"+"        </td>\r"+"\n"+"      </tr>\r"+"\n"+"      </tbody>\r"+"\n"+"    </table>\r"+"\n"+"  </div>\r"+"\n"+"  <div ng-switch-when=\"hours\">\r"+"\n"+"    <table>\r"+"\n"+"      <thead>\r"+"\n"+"      <tr>\r"+"\n"+"        <th ng-click=\"prev(24)\">&lsaquo;</th>\r"+"\n"+"        <th colspan=\"5\" class=\"switch\" ng-click=\"setView('date')\" ng-bind=\"date|mFormat:'DD MMMM YYYY':tz\"></th>\r"+"\n"+"        <th ng-click=\"next(24)\">&rsaquo;</i></th>\r"+"\n"+"      </tr>\r"+"\n"+"      </thead>\r"+"\n"+"      <tbody>\r"+"\n"+"      <tr>\r"+"\n"+"        <td colspan=\"7\">\r"+"\n"+"          <span ng-repeat=\"hour in hours\"\r"+"\n"+"                ng-class=\"classes[$index]\"\r"+"\n"+"                ng-click=\"selectDate(hour)\" ng-bind=\"hour|mFormat:'HH:mm':tz\"></span>\r"+"\n"+"        </td>\r"+"\n"+"      </tr>\r"+"\n"+"      </tbody>\r"+"\n"+"    </table>\r"+"\n"+"  </div>\r"+"\n"+"  <div ng-switch-when=\"minutes\">\r"+"\n"+"    <table>\r"+"\n"+"      <thead>\r"+"\n"+"      <tr>\r"+"\n"+"        <th ng-click=\"prev()\">&lsaquo;</th>\r"+"\n"+"        <th colspan=\"5\" class=\"switch\" ng-click=\"setView('hours')\" ng-bind=\"date|mFormat:'DD MMMM YYYY':tz\"></th>\r"+"\n"+"        <th ng-click=\"next()\">&rsaquo;</i></th>\r"+"\n"+"      </tr>\r"+"\n"+"      </thead>\r"+"\n"+"      <tbody>\r"+"\n"+"      <tr>\r"+"\n"+"        <td colspan=\"7\">\r"+"\n"+"          <span ng-repeat=\"minute in minutes\"\r"+"\n"+"                ng-class=\"classes[$index]\"\r"+"\n"+"                ng-click=\"selectDate(minute)\"\r"+"\n"+"                ng-bind=\"minute|mFormat:'HH:mm':tz\"></span>\r"+"\n"+"        </td>\r"+"\n"+"      </tr>\r"+"\n"+"      </tbody>\r"+"\n"+"    </table>\r"+"\n"+"  </div>\r"+"\n"+"</div>");}]);});

/***/ },
/* 114 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';var _typeof=typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"?function(obj){return typeof obj;}:function(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol?"symbol":typeof obj;}; /*!
	 * FullCalendar v2.6.1
	 * Docs & License: http://fullcalendar.io/
	 * (c) 2015 Adam Shaw
	 */(function(factory){if(true){!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1),__webpack_require__(10)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));}else if((typeof exports==='undefined'?'undefined':_typeof(exports))==='object'){ // Node/CommonJS
	module.exports=factory(require('jquery'),require('moment'));}else {factory(jQuery,moment);}})(function($,moment){;;var FC=$.fullCalendar={version:"2.6.1",internalApiVersion:3};var fcViews=FC.views={};$.fn.fullCalendar=function(options){var args=Array.prototype.slice.call(arguments,1); // for a possible method call
	var res=this; // what this function will return (this jQuery object by default)
	this.each(function(i,_element){ // loop each DOM element involved
	var element=$(_element);var calendar=element.data('fullCalendar'); // get the existing calendar object (if any)
	var singleRes; // the returned value of this single method call
	// a method call
	if(typeof options==='string'){if(calendar&&$.isFunction(calendar[options])){singleRes=calendar[options].apply(calendar,args);if(!i){res=singleRes; // record the first method call result
	}if(options==='destroy'){ // for the destroy method, must remove Calendar object data
	element.removeData('fullCalendar');}}} // a new calendar initialization
	else if(!calendar){ // don't initialize twice
	calendar=new Calendar(element,options);element.data('fullCalendar',calendar);calendar.render();}});return res;};var complexOptions=[ // names of options that are objects whose properties should be combined
	'header','buttonText','buttonIcons','themeButtonIcons']; // Merges an array of option objects into a single object
	function mergeOptions(optionObjs){return mergeProps(optionObjs,complexOptions);} // Given options specified for the calendar's constructor, massages any legacy options into a non-legacy form.
	// Converts View-Option-Hashes into the View-Specific-Options format.
	function massageOverrides(input){var overrides={views:input.views||{}}; // the output. ensure a `views` hash
	var subObj; // iterate through all option override properties (except `views`)
	$.each(input,function(name,val){if(name!='views'){ // could the value be a legacy View-Option-Hash?
	if($.isPlainObject(val)&&!/(time|duration|interval)$/i.test(name)&& // exclude duration options. might be given as objects
	$.inArray(name,complexOptions)==-1 // complex options aren't allowed to be View-Option-Hashes
	){subObj=null; // iterate through the properties of this possible View-Option-Hash value
	$.each(val,function(subName,subVal){ // is the property targeting a view?
	if(/^(month|week|day|default|basic(Week|Day)?|agenda(Week|Day)?)$/.test(subName)){if(!overrides.views[subName]){ // ensure the view-target entry exists
	overrides.views[subName]={};}overrides.views[subName][name]=subVal; // record the value in the `views` object
	}else { // a non-View-Option-Hash property
	if(!subObj){subObj={};}subObj[subName]=subVal; // accumulate these unrelated values for later
	}});if(subObj){ // non-View-Option-Hash properties? transfer them as-is
	overrides[name]=subObj;}}else {overrides[name]=val; // transfer normal options as-is
	}}});return overrides;};; // exports
	FC.intersectRanges=intersectRanges;FC.applyAll=applyAll;FC.debounce=debounce;FC.isInt=isInt;FC.htmlEscape=htmlEscape;FC.cssToStr=cssToStr;FC.proxy=proxy;FC.capitaliseFirstLetter=capitaliseFirstLetter; /* FullCalendar-specific DOM Utilities
	----------------------------------------------------------------------------------------------------------------------*/ // Given the scrollbar widths of some other container, create borders/margins on rowEls in order to match the left
	// and right space that was offset by the scrollbars. A 1-pixel border first, then margin beyond that.
	function compensateScroll(rowEls,scrollbarWidths){if(scrollbarWidths.left){rowEls.css({'border-left-width':1,'margin-left':scrollbarWidths.left-1});}if(scrollbarWidths.right){rowEls.css({'border-right-width':1,'margin-right':scrollbarWidths.right-1});}} // Undoes compensateScroll and restores all borders/margins
	function uncompensateScroll(rowEls){rowEls.css({'margin-left':'','margin-right':'','border-left-width':'','border-right-width':''});} // Make the mouse cursor express that an event is not allowed in the current area
	function disableCursor(){$('body').addClass('fc-not-allowed');} // Returns the mouse cursor to its original look
	function enableCursor(){$('body').removeClass('fc-not-allowed');} // Given a total available height to fill, have `els` (essentially child rows) expand to accomodate.
	// By default, all elements that are shorter than the recommended height are expanded uniformly, not considering
	// any other els that are already too tall. if `shouldRedistribute` is on, it considers these tall rows and 
	// reduces the available height.
	function distributeHeight(els,availableHeight,shouldRedistribute){ // *FLOORING NOTE*: we floor in certain places because zoom can give inaccurate floating-point dimensions,
	// and it is better to be shorter than taller, to avoid creating unnecessary scrollbars.
	var minOffset1=Math.floor(availableHeight/els.length); // for non-last element
	var minOffset2=Math.floor(availableHeight-minOffset1*(els.length-1)); // for last element *FLOORING NOTE*
	var flexEls=[]; // elements that are allowed to expand. array of DOM nodes
	var flexOffsets=[]; // amount of vertical space it takes up
	var flexHeights=[]; // actual css height
	var usedHeight=0;undistributeHeight(els); // give all elements their natural height
	// find elements that are below the recommended height (expandable).
	// important to query for heights in a single first pass (to avoid reflow oscillation).
	els.each(function(i,el){var minOffset=i===els.length-1?minOffset2:minOffset1;var naturalOffset=$(el).outerHeight(true);if(naturalOffset<minOffset){flexEls.push(el);flexOffsets.push(naturalOffset);flexHeights.push($(el).height());}else { // this element stretches past recommended height (non-expandable). mark the space as occupied.
	usedHeight+=naturalOffset;}}); // readjust the recommended height to only consider the height available to non-maxed-out rows.
	if(shouldRedistribute){availableHeight-=usedHeight;minOffset1=Math.floor(availableHeight/flexEls.length);minOffset2=Math.floor(availableHeight-minOffset1*(flexEls.length-1)); // *FLOORING NOTE*
	} // assign heights to all expandable elements
	$(flexEls).each(function(i,el){var minOffset=i===flexEls.length-1?minOffset2:minOffset1;var naturalOffset=flexOffsets[i];var naturalHeight=flexHeights[i];var newHeight=minOffset-(naturalOffset-naturalHeight); // subtract the margin/padding
	if(naturalOffset<minOffset){ // we check this again because redistribution might have changed things
	$(el).height(newHeight);}});} // Undoes distrubuteHeight, restoring all els to their natural height
	function undistributeHeight(els){els.height('');} // Given `els`, a jQuery set of <td> cells, find the cell with the largest natural width and set the widths of all the
	// cells to be that width.
	// PREREQUISITE: if you want a cell to take up width, it needs to have a single inner element w/ display:inline
	function matchCellWidths(els){var maxInnerWidth=0;els.find('> span').each(function(i,innerEl){var innerWidth=$(innerEl).outerWidth();if(innerWidth>maxInnerWidth){maxInnerWidth=innerWidth;}});maxInnerWidth++; // sometimes not accurate of width the text needs to stay on one line. insurance
	els.width(maxInnerWidth);return maxInnerWidth;} // Turns a container element into a scroller if its contents is taller than the allotted height.
	// Returns true if the element is now a scroller, false otherwise.
	// NOTE: this method is best because it takes weird zooming dimensions into account
	function setPotentialScroller(containerEl,height){containerEl.height(height).addClass('fc-scroller'); // are scrollbars needed?
	if(containerEl[0].scrollHeight-1>containerEl[0].clientHeight){ // !!! -1 because IE is often off-by-one :(
	return true;}unsetScroller(containerEl); // undo
	return false;} // Takes an element that might have been a scroller, and turns it back into a normal element.
	function unsetScroller(containerEl){containerEl.height('').removeClass('fc-scroller');} /* General DOM Utilities
	----------------------------------------------------------------------------------------------------------------------*/FC.getOuterRect=getOuterRect;FC.getClientRect=getClientRect;FC.getContentRect=getContentRect;FC.getScrollbarWidths=getScrollbarWidths; // borrowed from https://github.com/jquery/jquery-ui/blob/1.11.0/ui/core.js#L51
	function getScrollParent(el){var position=el.css('position'),scrollParent=el.parents().filter(function(){var parent=$(this);return (/(auto|scroll)/.test(parent.css('overflow')+parent.css('overflow-y')+parent.css('overflow-x')));}).eq(0);return position==='fixed'||!scrollParent.length?$(el[0].ownerDocument||document):scrollParent;} // Queries the outer bounding area of a jQuery element.
	// Returns a rectangle with absolute coordinates: left, right (exclusive), top, bottom (exclusive).
	function getOuterRect(el){var offset=el.offset();return {left:offset.left,right:offset.left+el.outerWidth(),top:offset.top,bottom:offset.top+el.outerHeight()};} // Queries the area within the margin/border/scrollbars of a jQuery element. Does not go within the padding.
	// Returns a rectangle with absolute coordinates: left, right (exclusive), top, bottom (exclusive).
	// NOTE: should use clientLeft/clientTop, but very unreliable cross-browser.
	function getClientRect(el){var offset=el.offset();var scrollbarWidths=getScrollbarWidths(el);var left=offset.left+getCssFloat(el,'border-left-width')+scrollbarWidths.left;var top=offset.top+getCssFloat(el,'border-top-width')+scrollbarWidths.top;return {left:left,right:left+el[0].clientWidth, // clientWidth includes padding but NOT scrollbars
	top:top,bottom:top+el[0].clientHeight // clientHeight includes padding but NOT scrollbars
	};} // Queries the area within the margin/border/padding of a jQuery element. Assumed not to have scrollbars.
	// Returns a rectangle with absolute coordinates: left, right (exclusive), top, bottom (exclusive).
	function getContentRect(el){var offset=el.offset(); // just outside of border, margin not included
	var left=offset.left+getCssFloat(el,'border-left-width')+getCssFloat(el,'padding-left');var top=offset.top+getCssFloat(el,'border-top-width')+getCssFloat(el,'padding-top');return {left:left,right:left+el.width(),top:top,bottom:top+el.height()};} // Returns the computed left/right/top/bottom scrollbar widths for the given jQuery element.
	// NOTE: should use clientLeft/clientTop, but very unreliable cross-browser.
	function getScrollbarWidths(el){var leftRightWidth=el.innerWidth()-el[0].clientWidth; // the paddings cancel out, leaving the scrollbars
	var widths={left:0,right:0,top:0,bottom:el.innerHeight()-el[0].clientHeight // the paddings cancel out, leaving the bottom scrollbar
	};if(getIsLeftRtlScrollbars()&&el.css('direction')=='rtl'){ // is the scrollbar on the left side?
	widths.left=leftRightWidth;}else {widths.right=leftRightWidth;}return widths;} // Logic for determining if, when the element is right-to-left, the scrollbar appears on the left side
	var _isLeftRtlScrollbars=null;function getIsLeftRtlScrollbars(){ // responsible for caching the computation
	if(_isLeftRtlScrollbars===null){_isLeftRtlScrollbars=computeIsLeftRtlScrollbars();}return _isLeftRtlScrollbars;}function computeIsLeftRtlScrollbars(){ // creates an offscreen test element, then removes it
	var el=$('<div><div/></div>').css({position:'absolute',top:-1000,left:0,border:0,padding:0,overflow:'scroll',direction:'rtl'}).appendTo('body');var innerEl=el.children();var res=innerEl.offset().left>el.offset().left; // is the inner div shifted to accommodate a left scrollbar?
	el.remove();return res;} // Retrieves a jQuery element's computed CSS value as a floating-point number.
	// If the queried value is non-numeric (ex: IE can return "medium" for border width), will just return zero.
	function getCssFloat(el,prop){return parseFloat(el.css(prop))||0;} // Returns a boolean whether this was a left mouse click and no ctrl key (which means right click on Mac)
	function isPrimaryMouseButton(ev){return ev.which==1&&!ev.ctrlKey;} /* Geometry
	----------------------------------------------------------------------------------------------------------------------*/FC.intersectRects=intersectRects; // Returns a new rectangle that is the intersection of the two rectangles. If they don't intersect, returns false
	function intersectRects(rect1,rect2){var res={left:Math.max(rect1.left,rect2.left),right:Math.min(rect1.right,rect2.right),top:Math.max(rect1.top,rect2.top),bottom:Math.min(rect1.bottom,rect2.bottom)};if(res.left<res.right&&res.top<res.bottom){return res;}return false;} // Returns a new point that will have been moved to reside within the given rectangle
	function constrainPoint(point,rect){return {left:Math.min(Math.max(point.left,rect.left),rect.right),top:Math.min(Math.max(point.top,rect.top),rect.bottom)};} // Returns a point that is the center of the given rectangle
	function getRectCenter(rect){return {left:(rect.left+rect.right)/2,top:(rect.top+rect.bottom)/2};} // Subtracts point2's coordinates from point1's coordinates, returning a delta
	function diffPoints(point1,point2){return {left:point1.left-point2.left,top:point1.top-point2.top};} /* Object Ordering by Field
	----------------------------------------------------------------------------------------------------------------------*/FC.parseFieldSpecs=parseFieldSpecs;FC.compareByFieldSpecs=compareByFieldSpecs;FC.compareByFieldSpec=compareByFieldSpec;FC.flexibleCompare=flexibleCompare;function parseFieldSpecs(input){var specs=[];var tokens=[];var i,token;if(typeof input==='string'){tokens=input.split(/\s*,\s*/);}else if(typeof input==='function'){tokens=[input];}else if($.isArray(input)){tokens=input;}for(i=0;i<tokens.length;i++){token=tokens[i];if(typeof token==='string'){specs.push(token.charAt(0)=='-'?{field:token.substring(1),order:-1}:{field:token,order:1});}else if(typeof token==='function'){specs.push({func:token});}}return specs;}function compareByFieldSpecs(obj1,obj2,fieldSpecs){var i;var cmp;for(i=0;i<fieldSpecs.length;i++){cmp=compareByFieldSpec(obj1,obj2,fieldSpecs[i]);if(cmp){return cmp;}}return 0;}function compareByFieldSpec(obj1,obj2,fieldSpec){if(fieldSpec.func){return fieldSpec.func(obj1,obj2);}return flexibleCompare(obj1[fieldSpec.field],obj2[fieldSpec.field])*(fieldSpec.order||1);}function flexibleCompare(a,b){if(!a&&!b){return 0;}if(b==null){return -1;}if(a==null){return 1;}if($.type(a)==='string'||$.type(b)==='string'){return String(a).localeCompare(String(b));}return a-b;} /* FullCalendar-specific Misc Utilities
	----------------------------------------------------------------------------------------------------------------------*/ // Computes the intersection of the two ranges. Returns undefined if no intersection.
	// Expects all dates to be normalized to the same timezone beforehand.
	// TODO: move to date section?
	function intersectRanges(subjectRange,constraintRange){var subjectStart=subjectRange.start;var subjectEnd=subjectRange.end;var constraintStart=constraintRange.start;var constraintEnd=constraintRange.end;var segStart,segEnd;var isStart,isEnd;if(subjectEnd>constraintStart&&subjectStart<constraintEnd){ // in bounds at all?
	if(subjectStart>=constraintStart){segStart=subjectStart.clone();isStart=true;}else {segStart=constraintStart.clone();isStart=false;}if(subjectEnd<=constraintEnd){segEnd=subjectEnd.clone();isEnd=true;}else {segEnd=constraintEnd.clone();isEnd=false;}return {start:segStart,end:segEnd,isStart:isStart,isEnd:isEnd};}} /* Date Utilities
	----------------------------------------------------------------------------------------------------------------------*/FC.computeIntervalUnit=computeIntervalUnit;FC.divideRangeByDuration=divideRangeByDuration;FC.divideDurationByDuration=divideDurationByDuration;FC.multiplyDuration=multiplyDuration;FC.durationHasTime=durationHasTime;var dayIDs=['sun','mon','tue','wed','thu','fri','sat'];var intervalUnits=['year','month','week','day','hour','minute','second','millisecond']; // Diffs the two moments into a Duration where full-days are recorded first, then the remaining time.
	// Moments will have their timezones normalized.
	function diffDayTime(a,b){return moment.duration({days:a.clone().stripTime().diff(b.clone().stripTime(),'days'),ms:a.time()-b.time() // time-of-day from day start. disregards timezone
	});} // Diffs the two moments via their start-of-day (regardless of timezone). Produces whole-day durations.
	function diffDay(a,b){return moment.duration({days:a.clone().stripTime().diff(b.clone().stripTime(),'days')});} // Diffs two moments, producing a duration, made of a whole-unit-increment of the given unit. Uses rounding.
	function diffByUnit(a,b,unit){return moment.duration(Math.round(a.diff(b,unit,true)), // returnFloat=true
	unit);} // Computes the unit name of the largest whole-unit period of time.
	// For example, 48 hours will be "days" whereas 49 hours will be "hours".
	// Accepts start/end, a range object, or an original duration object.
	function computeIntervalUnit(start,end){var i,unit;var val;for(i=0;i<intervalUnits.length;i++){unit=intervalUnits[i];val=computeRangeAs(unit,start,end);if(val>=1&&isInt(val)){break;}}return unit; // will be "milliseconds" if nothing else matches
	} // Computes the number of units (like "hours") in the given range.
	// Range can be a {start,end} object, separate start/end args, or a Duration.
	// Results are based on Moment's .as() and .diff() methods, so results can depend on internal handling
	// of month-diffing logic (which tends to vary from version to version).
	function computeRangeAs(unit,start,end){if(end!=null){ // given start, end
	return end.diff(start,unit,true);}else if(moment.isDuration(start)){ // given duration
	return start.as(unit);}else { // given { start, end } range object
	return start.end.diff(start.start,unit,true);}} // Intelligently divides a range (specified by a start/end params) by a duration
	function divideRangeByDuration(start,end,dur){var months;if(durationHasTime(dur)){return (end-start)/dur;}months=dur.asMonths();if(Math.abs(months)>=1&&isInt(months)){return end.diff(start,'months',true)/months;}return end.diff(start,'days',true)/dur.asDays();} // Intelligently divides one duration by another
	function divideDurationByDuration(dur1,dur2){var months1,months2;if(durationHasTime(dur1)||durationHasTime(dur2)){return dur1/dur2;}months1=dur1.asMonths();months2=dur2.asMonths();if(Math.abs(months1)>=1&&isInt(months1)&&Math.abs(months2)>=1&&isInt(months2)){return months1/months2;}return dur1.asDays()/dur2.asDays();} // Intelligently multiplies a duration by a number
	function multiplyDuration(dur,n){var months;if(durationHasTime(dur)){return moment.duration(dur*n);}months=dur.asMonths();if(Math.abs(months)>=1&&isInt(months)){return moment.duration({months:months*n});}return moment.duration({days:dur.asDays()*n});} // Returns a boolean about whether the given duration has any time parts (hours/minutes/seconds/ms)
	function durationHasTime(dur){return Boolean(dur.hours()||dur.minutes()||dur.seconds()||dur.milliseconds());}function isNativeDate(input){return Object.prototype.toString.call(input)==='[object Date]'||input instanceof Date;} // Returns a boolean about whether the given input is a time string, like "06:40:00" or "06:00"
	function isTimeString(str){return (/^\d+\:\d+(?:\:\d+\.?(?:\d{3})?)?$/.test(str));} /* Logging and Debug
	----------------------------------------------------------------------------------------------------------------------*/FC.log=function(){var console=window.console;if(console&&console.log){return console.log.apply(console,arguments);}};FC.warn=function(){var console=window.console;if(console&&console.warn){return console.warn.apply(console,arguments);}else {return FC.log.apply(FC,arguments);}}; /* General Utilities
	----------------------------------------------------------------------------------------------------------------------*/var hasOwnPropMethod={}.hasOwnProperty; // Merges an array of objects into a single object.
	// The second argument allows for an array of property names who's object values will be merged together.
	function mergeProps(propObjs,complexProps){var dest={};var i,name;var complexObjs;var j,val;var props;if(complexProps){for(i=0;i<complexProps.length;i++){name=complexProps[i];complexObjs=[]; // collect the trailing object values, stopping when a non-object is discovered
	for(j=propObjs.length-1;j>=0;j--){val=propObjs[j][name];if((typeof val==='undefined'?'undefined':_typeof(val))==='object'){complexObjs.unshift(val);}else if(val!==undefined){dest[name]=val; // if there were no objects, this value will be used
	break;}} // if the trailing values were objects, use the merged value
	if(complexObjs.length){dest[name]=mergeProps(complexObjs);}}} // copy values into the destination, going from last to first
	for(i=propObjs.length-1;i>=0;i--){props=propObjs[i];for(name in props){if(!(name in dest)){ // if already assigned by previous props or complex props, don't reassign
	dest[name]=props[name];}}}return dest;} // Create an object that has the given prototype. Just like Object.create
	function createObject(proto){var f=function f(){};f.prototype=proto;return new f();}function copyOwnProps(src,dest){for(var name in src){if(hasOwnProp(src,name)){dest[name]=src[name];}}} // Copies over certain methods with the same names as Object.prototype methods. Overcomes an IE<=8 bug:
	// https://developer.mozilla.org/en-US/docs/ECMAScript_DontEnum_attribute#JScript_DontEnum_Bug
	function copyNativeMethods(src,dest){var names=['constructor','toString','valueOf'];var i,name;for(i=0;i<names.length;i++){name=names[i];if(src[name]!==Object.prototype[name]){dest[name]=src[name];}}}function hasOwnProp(obj,name){return hasOwnPropMethod.call(obj,name);} // Is the given value a non-object non-function value?
	function isAtomic(val){return (/undefined|null|boolean|number|string/.test($.type(val)));}function applyAll(functions,thisObj,args){if($.isFunction(functions)){functions=[functions];}if(functions){var i;var ret;for(i=0;i<functions.length;i++){ret=functions[i].apply(thisObj,args)||ret;}return ret;}}function firstDefined(){for(var i=0;i<arguments.length;i++){if(arguments[i]!==undefined){return arguments[i];}}}function htmlEscape(s){return (s+'').replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;').replace(/'/g,'&#039;').replace(/"/g,'&quot;').replace(/\n/g,'<br />');}function stripHtmlEntities(text){return text.replace(/&.*?;/g,'');} // Given a hash of CSS properties, returns a string of CSS.
	// Uses property names as-is (no camel-case conversion). Will not make statements for null/undefined values.
	function cssToStr(cssProps){var statements=[];$.each(cssProps,function(name,val){if(val!=null){statements.push(name+':'+val);}});return statements.join(';');}function capitaliseFirstLetter(str){return str.charAt(0).toUpperCase()+str.slice(1);}function compareNumbers(a,b){ // for .sort()
	return a-b;}function isInt(n){return n%1===0;} // Returns a method bound to the given object context.
	// Just like one of the jQuery.proxy signatures, but without the undesired behavior of treating the same method with
	// different contexts as identical when binding/unbinding events.
	function proxy(obj,methodName){var method=obj[methodName];return function(){return method.apply(obj,arguments);};} // Returns a function, that, as long as it continues to be invoked, will not
	// be triggered. The function will be called after it stops being called for
	// N milliseconds.
	// https://github.com/jashkenas/underscore/blob/1.6.0/underscore.js#L714
	function debounce(func,wait){var timeoutId;var args;var context;var timestamp; // of most recent call
	var later=function later(){var last=+new Date()-timestamp;if(last<wait&&last>0){timeoutId=setTimeout(later,wait-last);}else {timeoutId=null;func.apply(context,args);if(!timeoutId){context=args=null;}}};return function(){context=this;args=arguments;timestamp=+new Date();if(!timeoutId){timeoutId=setTimeout(later,wait);}};};;var ambigDateOfMonthRegex=/^\s*\d{4}-\d\d$/;var ambigTimeOrZoneRegex=/^\s*\d{4}-(?:(\d\d-\d\d)|(W\d\d$)|(W\d\d-\d)|(\d\d\d))((T| )(\d\d(:\d\d(:\d\d(\.\d+)?)?)?)?)?$/;var newMomentProto=moment.fn; // where we will attach our new methods
	var oldMomentProto=$.extend({},newMomentProto); // copy of original moment methods
	var allowValueOptimization;var setUTCValues; // function defined below
	var setLocalValues; // function defined below
	// Creating
	// -------------------------------------------------------------------------------------------------
	// Creates a new moment, similar to the vanilla moment(...) constructor, but with
	// extra features (ambiguous time, enhanced formatting). When given an existing moment,
	// it will function as a clone (and retain the zone of the moment). Anything else will
	// result in a moment in the local zone.
	FC.moment=function(){return makeMoment(arguments);}; // Sames as FC.moment, but forces the resulting moment to be in the UTC timezone.
	FC.moment.utc=function(){var mom=makeMoment(arguments,true); // Force it into UTC because makeMoment doesn't guarantee it
	// (if given a pre-existing moment for example)
	if(mom.hasTime()){ // don't give ambiguously-timed moments a UTC zone
	mom.utc();}return mom;}; // Same as FC.moment, but when given an ISO8601 string, the timezone offset is preserved.
	// ISO8601 strings with no timezone offset will become ambiguously zoned.
	FC.moment.parseZone=function(){return makeMoment(arguments,true,true);}; // Builds an enhanced moment from args. When given an existing moment, it clones. When given a
	// native Date, or called with no arguments (the current time), the resulting moment will be local.
	// Anything else needs to be "parsed" (a string or an array), and will be affected by:
	//    parseAsUTC - if there is no zone information, should we parse the input in UTC?
	//    parseZone - if there is zone information, should we force the zone of the moment?
	function makeMoment(args,parseAsUTC,parseZone){var input=args[0];var isSingleString=args.length==1&&typeof input==='string';var isAmbigTime;var isAmbigZone;var ambigMatch;var mom;if(moment.isMoment(input)){mom=moment.apply(null,args); // clone it
	transferAmbigs(input,mom); // the ambig flags weren't transfered with the clone
	}else if(isNativeDate(input)||input===undefined){mom=moment.apply(null,args); // will be local
	}else { // "parsing" is required
	isAmbigTime=false;isAmbigZone=false;if(isSingleString){if(ambigDateOfMonthRegex.test(input)){ // accept strings like '2014-05', but convert to the first of the month
	input+='-01';args=[input]; // for when we pass it on to moment's constructor
	isAmbigTime=true;isAmbigZone=true;}else if(ambigMatch=ambigTimeOrZoneRegex.exec(input)){isAmbigTime=!ambigMatch[5]; // no time part?
	isAmbigZone=true;}}else if($.isArray(input)){ // arrays have no timezone information, so assume ambiguous zone
	isAmbigZone=true;} // otherwise, probably a string with a format
	if(parseAsUTC||isAmbigTime){mom=moment.utc.apply(moment,args);}else {mom=moment.apply(null,args);}if(isAmbigTime){mom._ambigTime=true;mom._ambigZone=true; // ambiguous time always means ambiguous zone
	}else if(parseZone){ // let's record the inputted zone somehow
	if(isAmbigZone){mom._ambigZone=true;}else if(isSingleString){if(mom.utcOffset){mom.utcOffset(input); // if not a valid zone, will assign UTC
	}else {mom.zone(input); // for moment-pre-2.9
	}}}}mom._fullCalendar=true; // flag for extended functionality
	return mom;} // A clone method that works with the flags related to our enhanced functionality.
	// In the future, use moment.momentProperties
	newMomentProto.clone=function(){var mom=oldMomentProto.clone.apply(this,arguments); // these flags weren't transfered with the clone
	transferAmbigs(this,mom);if(this._fullCalendar){mom._fullCalendar=true;}return mom;}; // Week Number
	// -------------------------------------------------------------------------------------------------
	// Returns the week number, considering the locale's custom week number calcuation
	// `weeks` is an alias for `week`
	newMomentProto.week=newMomentProto.weeks=function(input){var weekCalc=(this._locale||this._lang). // works pre-moment-2.8
	_fullCalendar_weekCalc;if(input==null&&typeof weekCalc==='function'){ // custom function only works for getter
	return weekCalc(this);}else if(weekCalc==='ISO'){return oldMomentProto.isoWeek.apply(this,arguments); // ISO getter/setter
	}return oldMomentProto.week.apply(this,arguments); // local getter/setter
	}; // Time-of-day
	// -------------------------------------------------------------------------------------------------
	// GETTER
	// Returns a Duration with the hours/minutes/seconds/ms values of the moment.
	// If the moment has an ambiguous time, a duration of 00:00 will be returned.
	//
	// SETTER
	// You can supply a Duration, a Moment, or a Duration-like argument.
	// When setting the time, and the moment has an ambiguous time, it then becomes unambiguous.
	newMomentProto.time=function(time){ // Fallback to the original method (if there is one) if this moment wasn't created via FullCalendar.
	// `time` is a generic enough method name where this precaution is necessary to avoid collisions w/ other plugins.
	if(!this._fullCalendar){return oldMomentProto.time.apply(this,arguments);}if(time==null){ // getter
	return moment.duration({hours:this.hours(),minutes:this.minutes(),seconds:this.seconds(),milliseconds:this.milliseconds()});}else { // setter
	this._ambigTime=false; // mark that the moment now has a time
	if(!moment.isDuration(time)&&!moment.isMoment(time)){time=moment.duration(time);} // The day value should cause overflow (so 24 hours becomes 00:00:00 of next day).
	// Only for Duration times, not Moment times.
	var dayHours=0;if(moment.isDuration(time)){dayHours=Math.floor(time.asDays())*24;} // We need to set the individual fields.
	// Can't use startOf('day') then add duration. In case of DST at start of day.
	return this.hours(dayHours+time.hours()).minutes(time.minutes()).seconds(time.seconds()).milliseconds(time.milliseconds());}}; // Converts the moment to UTC, stripping out its time-of-day and timezone offset,
	// but preserving its YMD. A moment with a stripped time will display no time
	// nor timezone offset when .format() is called.
	newMomentProto.stripTime=function(){var a;if(!this._ambigTime){ // get the values before any conversion happens
	a=this.toArray(); // array of y/m/d/h/m/s/ms
	// TODO: use keepLocalTime in the future
	this.utc(); // set the internal UTC flag (will clear the ambig flags)
	setUTCValues(this,a.slice(0,3)); // set the year/month/date. time will be zero
	// Mark the time as ambiguous. This needs to happen after the .utc() call, which might call .utcOffset(),
	// which clears all ambig flags. Same with setUTCValues with moment-timezone.
	this._ambigTime=true;this._ambigZone=true; // if ambiguous time, also ambiguous timezone offset
	}return this; // for chaining
	}; // Returns if the moment has a non-ambiguous time (boolean)
	newMomentProto.hasTime=function(){return !this._ambigTime;}; // Timezone
	// -------------------------------------------------------------------------------------------------
	// Converts the moment to UTC, stripping out its timezone offset, but preserving its
	// YMD and time-of-day. A moment with a stripped timezone offset will display no
	// timezone offset when .format() is called.
	// TODO: look into Moment's keepLocalTime functionality
	newMomentProto.stripZone=function(){var a,wasAmbigTime;if(!this._ambigZone){ // get the values before any conversion happens
	a=this.toArray(); // array of y/m/d/h/m/s/ms
	wasAmbigTime=this._ambigTime;this.utc(); // set the internal UTC flag (might clear the ambig flags, depending on Moment internals)
	setUTCValues(this,a); // will set the year/month/date/hours/minutes/seconds/ms
	// the above call to .utc()/.utcOffset() unfortunately might clear the ambig flags, so restore
	this._ambigTime=wasAmbigTime||false; // Mark the zone as ambiguous. This needs to happen after the .utc() call, which might call .utcOffset(),
	// which clears the ambig flags. Same with setUTCValues with moment-timezone.
	this._ambigZone=true;}return this; // for chaining
	}; // Returns of the moment has a non-ambiguous timezone offset (boolean)
	newMomentProto.hasZone=function(){return !this._ambigZone;}; // this method implicitly marks a zone
	newMomentProto.local=function(){var a=this.toArray(); // year,month,date,hours,minutes,seconds,ms as an array
	var wasAmbigZone=this._ambigZone;oldMomentProto.local.apply(this,arguments); // ensure non-ambiguous
	// this probably already happened via local() -> utcOffset(), but don't rely on Moment's internals
	this._ambigTime=false;this._ambigZone=false;if(wasAmbigZone){ // If the moment was ambiguously zoned, the date fields were stored as UTC.
	// We want to preserve these, but in local time.
	// TODO: look into Moment's keepLocalTime functionality
	setLocalValues(this,a);}return this; // for chaining
	}; // implicitly marks a zone
	newMomentProto.utc=function(){oldMomentProto.utc.apply(this,arguments); // ensure non-ambiguous
	// this probably already happened via utc() -> utcOffset(), but don't rely on Moment's internals
	this._ambigTime=false;this._ambigZone=false;return this;}; // methods for arbitrarily manipulating timezone offset.
	// should clear time/zone ambiguity when called.
	$.each(['zone', // only in moment-pre-2.9. deprecated afterwards
	'utcOffset'],function(i,name){if(oldMomentProto[name]){ // original method exists?
	// this method implicitly marks a zone (will probably get called upon .utc() and .local())
	newMomentProto[name]=function(tzo){if(tzo!=null){ // setter
	// these assignments needs to happen before the original zone method is called.
	// I forget why, something to do with a browser crash.
	this._ambigTime=false;this._ambigZone=false;}return oldMomentProto[name].apply(this,arguments);};}}); // Formatting
	// -------------------------------------------------------------------------------------------------
	newMomentProto.format=function(){if(this._fullCalendar&&arguments[0]){ // an enhanced moment? and a format string provided?
	return formatDate(this,arguments[0]); // our extended formatting
	}if(this._ambigTime){return oldMomentFormat(this,'YYYY-MM-DD');}if(this._ambigZone){return oldMomentFormat(this,'YYYY-MM-DD[T]HH:mm:ss');}return oldMomentProto.format.apply(this,arguments);};newMomentProto.toISOString=function(){if(this._ambigTime){return oldMomentFormat(this,'YYYY-MM-DD');}if(this._ambigZone){return oldMomentFormat(this,'YYYY-MM-DD[T]HH:mm:ss');}return oldMomentProto.toISOString.apply(this,arguments);}; // Querying
	// -------------------------------------------------------------------------------------------------
	// Is the moment within the specified range? `end` is exclusive.
	// FYI, this method is not a standard Moment method, so always do our enhanced logic.
	newMomentProto.isWithin=function(start,end){var a=commonlyAmbiguate([this,start,end]);return a[0]>=a[1]&&a[0]<a[2];}; // When isSame is called with units, timezone ambiguity is normalized before the comparison happens.
	// If no units specified, the two moments must be identically the same, with matching ambig flags.
	newMomentProto.isSame=function(input,units){var a; // only do custom logic if this is an enhanced moment
	if(!this._fullCalendar){return oldMomentProto.isSame.apply(this,arguments);}if(units){a=commonlyAmbiguate([this,input],true); // normalize timezones but don't erase times
	return oldMomentProto.isSame.call(a[0],a[1],units);}else {input=FC.moment.parseZone(input); // normalize input
	return oldMomentProto.isSame.call(this,input)&&Boolean(this._ambigTime)===Boolean(input._ambigTime)&&Boolean(this._ambigZone)===Boolean(input._ambigZone);}}; // Make these query methods work with ambiguous moments
	$.each(['isBefore','isAfter'],function(i,methodName){newMomentProto[methodName]=function(input,units){var a; // only do custom logic if this is an enhanced moment
	if(!this._fullCalendar){return oldMomentProto[methodName].apply(this,arguments);}a=commonlyAmbiguate([this,input]);return oldMomentProto[methodName].call(a[0],a[1],units);};}); // Misc Internals
	// -------------------------------------------------------------------------------------------------
	// given an array of moment-like inputs, return a parallel array w/ moments similarly ambiguated.
	// for example, of one moment has ambig time, but not others, all moments will have their time stripped.
	// set `preserveTime` to `true` to keep times, but only normalize zone ambiguity.
	// returns the original moments if no modifications are necessary.
	function commonlyAmbiguate(inputs,preserveTime){var anyAmbigTime=false;var anyAmbigZone=false;var len=inputs.length;var moms=[];var i,mom; // parse inputs into real moments and query their ambig flags
	for(i=0;i<len;i++){mom=inputs[i];if(!moment.isMoment(mom)){mom=FC.moment.parseZone(mom);}anyAmbigTime=anyAmbigTime||mom._ambigTime;anyAmbigZone=anyAmbigZone||mom._ambigZone;moms.push(mom);} // strip each moment down to lowest common ambiguity
	// use clones to avoid modifying the original moments
	for(i=0;i<len;i++){mom=moms[i];if(!preserveTime&&anyAmbigTime&&!mom._ambigTime){moms[i]=mom.clone().stripTime();}else if(anyAmbigZone&&!mom._ambigZone){moms[i]=mom.clone().stripZone();}}return moms;} // Transfers all the flags related to ambiguous time/zone from the `src` moment to the `dest` moment
	// TODO: look into moment.momentProperties for this.
	function transferAmbigs(src,dest){if(src._ambigTime){dest._ambigTime=true;}else if(dest._ambigTime){dest._ambigTime=false;}if(src._ambigZone){dest._ambigZone=true;}else if(dest._ambigZone){dest._ambigZone=false;}} // Sets the year/month/date/etc values of the moment from the given array.
	// Inefficient because it calls each individual setter.
	function setMomentValues(mom,a){mom.year(a[0]||0).month(a[1]||0).date(a[2]||0).hours(a[3]||0).minutes(a[4]||0).seconds(a[5]||0).milliseconds(a[6]||0);} // Can we set the moment's internal date directly?
	allowValueOptimization='_d' in moment()&&'updateOffset' in moment; // Utility function. Accepts a moment and an array of the UTC year/month/date/etc values to set.
	// Assumes the given moment is already in UTC mode.
	setUTCValues=allowValueOptimization?function(mom,a){ // simlate what moment's accessors do
	mom._d.setTime(Date.UTC.apply(Date,a));moment.updateOffset(mom,false); // keepTime=false
	}:setMomentValues; // Utility function. Accepts a moment and an array of the local year/month/date/etc values to set.
	// Assumes the given moment is already in local mode.
	setLocalValues=allowValueOptimization?function(mom,a){ // simlate what moment's accessors do
	mom._d.setTime(+new Date( // FYI, there is now way to apply an array of args to a constructor
	a[0]||0,a[1]||0,a[2]||0,a[3]||0,a[4]||0,a[5]||0,a[6]||0));moment.updateOffset(mom,false); // keepTime=false
	}:setMomentValues;;; // Single Date Formatting
	// -------------------------------------------------------------------------------------------------
	// call this if you want Moment's original format method to be used
	function oldMomentFormat(mom,formatStr){return oldMomentProto.format.call(mom,formatStr); // oldMomentProto defined in moment-ext.js
	} // Formats `date` with a Moment formatting string, but allow our non-zero areas and
	// additional token.
	function formatDate(date,formatStr){return formatDateWithChunks(date,getFormatStringChunks(formatStr));}function formatDateWithChunks(date,chunks){var s='';var i;for(i=0;i<chunks.length;i++){s+=formatDateWithChunk(date,chunks[i]);}return s;} // addition formatting tokens we want recognized
	var tokenOverrides={t:function t(date){ // "a" or "p"
	return oldMomentFormat(date,'a').charAt(0);},T:function T(date){ // "A" or "P"
	return oldMomentFormat(date,'A').charAt(0);}};function formatDateWithChunk(date,chunk){var token;var maybeStr;if(typeof chunk==='string'){ // a literal string
	return chunk;}else if(token=chunk.token){ // a token, like "YYYY"
	if(tokenOverrides[token]){return tokenOverrides[token](date); // use our custom token
	}return oldMomentFormat(date,token);}else if(chunk.maybe){ // a grouping of other chunks that must be non-zero
	maybeStr=formatDateWithChunks(date,chunk.maybe);if(maybeStr.match(/[1-9]/)){return maybeStr;}}return '';} // Date Range Formatting
	// -------------------------------------------------------------------------------------------------
	// TODO: make it work with timezone offset
	// Using a formatting string meant for a single date, generate a range string, like
	// "Sep 2 - 9 2013", that intelligently inserts a separator where the dates differ.
	// If the dates are the same as far as the format string is concerned, just return a single
	// rendering of one date, without any separator.
	function _formatRange(date1,date2,formatStr,separator,isRTL){var localeData;date1=FC.moment.parseZone(date1);date2=FC.moment.parseZone(date2);localeData=(date1.localeData||date1.lang).call(date1); // works with moment-pre-2.8
	// Expand localized format strings, like "LL" -> "MMMM D YYYY"
	formatStr=localeData.longDateFormat(formatStr)||formatStr; // BTW, this is not important for `formatDate` because it is impossible to put custom tokens
	// or non-zero areas in Moment's localized format strings.
	separator=separator||' - ';return formatRangeWithChunks(date1,date2,getFormatStringChunks(formatStr),separator,isRTL);}FC.formatRange=_formatRange; // expose
	function formatRangeWithChunks(date1,date2,chunks,separator,isRTL){var unzonedDate1=date1.clone().stripZone(); // for formatSimilarChunk
	var unzonedDate2=date2.clone().stripZone(); // "
	var chunkStr; // the rendering of the chunk
	var leftI;var leftStr='';var rightI;var rightStr='';var middleI;var middleStr1='';var middleStr2='';var middleStr=''; // Start at the leftmost side of the formatting string and continue until you hit a token
	// that is not the same between dates.
	for(leftI=0;leftI<chunks.length;leftI++){chunkStr=formatSimilarChunk(date1,date2,unzonedDate1,unzonedDate2,chunks[leftI]);if(chunkStr===false){break;}leftStr+=chunkStr;} // Similarly, start at the rightmost side of the formatting string and move left
	for(rightI=chunks.length-1;rightI>leftI;rightI--){chunkStr=formatSimilarChunk(date1,date2,unzonedDate1,unzonedDate2,chunks[rightI]);if(chunkStr===false){break;}rightStr=chunkStr+rightStr;} // The area in the middle is different for both of the dates.
	// Collect them distinctly so we can jam them together later.
	for(middleI=leftI;middleI<=rightI;middleI++){middleStr1+=formatDateWithChunk(date1,chunks[middleI]);middleStr2+=formatDateWithChunk(date2,chunks[middleI]);}if(middleStr1||middleStr2){if(isRTL){middleStr=middleStr2+separator+middleStr1;}else {middleStr=middleStr1+separator+middleStr2;}}return leftStr+middleStr+rightStr;}var similarUnitMap={Y:'year',M:'month',D:'day', // day of month
	d:'day', // day of week
	// prevents a separator between anything time-related...
	A:'second', // AM/PM
	a:'second', // am/pm
	T:'second', // A/P
	t:'second', // a/p
	H:'second', // hour (24)
	h:'second', // hour (12)
	m:'second', // minute
	s:'second' // second
	}; // TODO: week maybe?
	// Given a formatting chunk, and given that both dates are similar in the regard the
	// formatting chunk is concerned, format date1 against `chunk`. Otherwise, return `false`.
	function formatSimilarChunk(date1,date2,unzonedDate1,unzonedDate2,chunk){var token;var unit;if(typeof chunk==='string'){ // a literal string
	return chunk;}else if(token=chunk.token){unit=similarUnitMap[token.charAt(0)]; // are the dates the same for this unit of measurement?
	// use the unzoned dates for this calculation because unreliable when near DST (bug #2396)
	if(unit&&unzonedDate1.isSame(unzonedDate2,unit)){return oldMomentFormat(date1,token); // would be the same if we used `date2`
	// BTW, don't support custom tokens
	}}return false; // the chunk is NOT the same for the two dates
	// BTW, don't support splitting on non-zero areas
	} // Chunking Utils
	// -------------------------------------------------------------------------------------------------
	var formatStringChunkCache={};function getFormatStringChunks(formatStr){if(formatStr in formatStringChunkCache){return formatStringChunkCache[formatStr];}return formatStringChunkCache[formatStr]=chunkFormatString(formatStr);} // Break the formatting string into an array of chunks
	function chunkFormatString(formatStr){var chunks=[];var chunker=/\[([^\]]*)\]|\(([^\)]*)\)|(LTS|LT|(\w)\4*o?)|([^\w\[\(]+)/g; // TODO: more descrimination
	var match;while(match=chunker.exec(formatStr)){if(match[1]){ // a literal string inside [ ... ]
	chunks.push(match[1]);}else if(match[2]){ // non-zero formatting inside ( ... )
	chunks.push({maybe:chunkFormatString(match[2])});}else if(match[3]){ // a formatting token
	chunks.push({token:match[3]});}else if(match[5]){ // an unenclosed literal string
	chunks.push(match[5]);}}return chunks;};;FC.Class=Class; // export
	// Class that all other classes will inherit from
	function Class(){} // Called on a class to create a subclass.
	// Last argument contains instance methods. Any argument before the last are considered mixins.
	Class.extend=function(){var len=arguments.length;var i;var members;for(i=0;i<len;i++){members=arguments[i];if(i<len-1){ // not the last argument?
	mixIntoClass(this,members);}}return extendClass(this,members||{}); // members will be undefined if no arguments
	}; // Adds new member variables/methods to the class's prototype.
	// Can be called with another class, or a plain object hash containing new members.
	Class.mixin=function(members){mixIntoClass(this,members);};function extendClass(superClass,members){var subClass; // ensure a constructor for the subclass, forwarding all arguments to the super-constructor if it doesn't exist
	if(hasOwnProp(members,'constructor')){subClass=members.constructor;}if(typeof subClass!=='function'){subClass=members.constructor=function(){superClass.apply(this,arguments);};} // build the base prototype for the subclass, which is an new object chained to the superclass's prototype
	subClass.prototype=createObject(superClass.prototype); // copy each member variable/method onto the the subclass's prototype
	copyOwnProps(members,subClass.prototype);copyNativeMethods(members,subClass.prototype); // hack for IE8
	// copy over all class variables/methods to the subclass, such as `extend` and `mixin`
	copyOwnProps(superClass,subClass);return subClass;}function mixIntoClass(theClass,members){copyOwnProps(members.prototype||members,theClass.prototype); // TODO: copyNativeMethods?
	};;var Emitter=FC.Emitter=Class.extend({callbackHash:null,on:function on(name,callback){this.getCallbacks(name).add(callback);return this; // for chaining
	},off:function off(name,callback){this.getCallbacks(name).remove(callback);return this; // for chaining
	},trigger:function trigger(name){ // args...
	var args=Array.prototype.slice.call(arguments,1);this.triggerWith(name,this,args);return this; // for chaining
	},triggerWith:function triggerWith(name,context,args){var callbacks=this.getCallbacks(name);callbacks.fireWith(context,args);return this; // for chaining
	},getCallbacks:function getCallbacks(name){var callbacks;if(!this.callbackHash){this.callbackHash={};}callbacks=this.callbackHash[name];if(!callbacks){callbacks=this.callbackHash[name]=$.Callbacks();}return callbacks;}});;; /* A rectangular panel that is absolutely positioned over other content
	------------------------------------------------------------------------------------------------------------------------
	Options:
		- className (string)
		- content (HTML string or jQuery element set)
		- parentEl
		- top
		- left
		- right (the x coord of where the right edge should be. not a "CSS" right)
		- autoHide (boolean)
		- show (callback)
		- hide (callback)
	*/var Popover=Class.extend({isHidden:true,options:null,el:null, // the container element for the popover. generated by this object
	documentMousedownProxy:null, // document mousedown handler bound to `this`
	margin:10, // the space required between the popover and the edges of the scroll container
	constructor:function constructor(options){this.options=options||{};}, // Shows the popover on the specified position. Renders it if not already
	show:function show(){if(this.isHidden){if(!this.el){this.render();}this.el.show();this.position();this.isHidden=false;this.trigger('show');}}, // Hides the popover, through CSS, but does not remove it from the DOM
	hide:function hide(){if(!this.isHidden){this.el.hide();this.isHidden=true;this.trigger('hide');}}, // Creates `this.el` and renders content inside of it
	render:function render(){var _this=this;var options=this.options;this.el=$('<div class="fc-popover"/>').addClass(options.className||'').css({ // position initially to the top left to avoid creating scrollbars
	top:0,left:0}).append(options.content).appendTo(options.parentEl); // when a click happens on anything inside with a 'fc-close' className, hide the popover
	this.el.on('click','.fc-close',function(){_this.hide();});if(options.autoHide){$(document).on('mousedown',this.documentMousedownProxy=proxy(this,'documentMousedown'));}}, // Triggered when the user clicks *anywhere* in the document, for the autoHide feature
	documentMousedown:function documentMousedown(ev){ // only hide the popover if the click happened outside the popover
	if(this.el&&!$(ev.target).closest(this.el).length){this.hide();}}, // Hides and unregisters any handlers
	removeElement:function removeElement(){this.hide();if(this.el){this.el.remove();this.el=null;}$(document).off('mousedown',this.documentMousedownProxy);}, // Positions the popover optimally, using the top/left/right options
	position:function position(){var options=this.options;var origin=this.el.offsetParent().offset();var width=this.el.outerWidth();var height=this.el.outerHeight();var windowEl=$(window);var viewportEl=getScrollParent(this.el);var viewportTop;var viewportLeft;var viewportOffset;var top; // the "position" (not "offset") values for the popover
	var left; //
	// compute top and left
	top=options.top||0;if(options.left!==undefined){left=options.left;}else if(options.right!==undefined){left=options.right-width; // derive the left value from the right value
	}else {left=0;}if(viewportEl.is(window)||viewportEl.is(document)){ // normalize getScrollParent's result
	viewportEl=windowEl;viewportTop=0; // the window is always at the top left
	viewportLeft=0; // (and .offset() won't work if called here)
	}else {viewportOffset=viewportEl.offset();viewportTop=viewportOffset.top;viewportLeft=viewportOffset.left;} // if the window is scrolled, it causes the visible area to be further down
	viewportTop+=windowEl.scrollTop();viewportLeft+=windowEl.scrollLeft(); // constrain to the view port. if constrained by two edges, give precedence to top/left
	if(options.viewportConstrain!==false){top=Math.min(top,viewportTop+viewportEl.outerHeight()-height-this.margin);top=Math.max(top,viewportTop+this.margin);left=Math.min(left,viewportLeft+viewportEl.outerWidth()-width-this.margin);left=Math.max(left,viewportLeft+this.margin);}this.el.css({top:top-origin.top,left:left-origin.left});}, // Triggers a callback. Calls a function in the option hash of the same name.
	// Arguments beyond the first `name` are forwarded on.
	// TODO: better code reuse for this. Repeat code
	trigger:function trigger(name){if(this.options[name]){this.options[name].apply(this,Array.prototype.slice.call(arguments,1));}}});;; /*
	A cache for the left/right/top/bottom/width/height values for one or more elements.
	Works with both offset (from topleft document) and position (from offsetParent).
	
	options:
	- els
	- isHorizontal
	- isVertical
	*/var CoordCache=FC.CoordCache=Class.extend({els:null, // jQuery set (assumed to be siblings)
	forcedOffsetParentEl:null, // options can override the natural offsetParent
	origin:null, // {left,top} position of offsetParent of els
	boundingRect:null, // constrain cordinates to this rectangle. {left,right,top,bottom} or null
	isHorizontal:false, // whether to query for left/right/width
	isVertical:false, // whether to query for top/bottom/height
	// arrays of coordinates (offsets from topleft of document)
	lefts:null,rights:null,tops:null,bottoms:null,constructor:function constructor(options){this.els=$(options.els);this.isHorizontal=options.isHorizontal;this.isVertical=options.isVertical;this.forcedOffsetParentEl=options.offsetParent?$(options.offsetParent):null;}, // Queries the els for coordinates and stores them.
	// Call this method before using and of the get* methods below.
	build:function build(){var offsetParentEl=this.forcedOffsetParentEl||this.els.eq(0).offsetParent();this.origin=offsetParentEl.offset();this.boundingRect=this.queryBoundingRect();if(this.isHorizontal){this.buildElHorizontals();}if(this.isVertical){this.buildElVerticals();}}, // Destroys all internal data about coordinates, freeing memory
	clear:function clear(){this.origin=null;this.boundingRect=null;this.lefts=null;this.rights=null;this.tops=null;this.bottoms=null;}, // When called, if coord caches aren't built, builds them
	ensureBuilt:function ensureBuilt(){if(!this.origin){this.build();}}, // Compute and return what the elements' bounding rectangle is, from the user's perspective.
	// Right now, only returns a rectangle if constrained by an overflow:scroll element.
	queryBoundingRect:function queryBoundingRect(){var scrollParentEl=getScrollParent(this.els.eq(0));if(!scrollParentEl.is(document)){return getClientRect(scrollParentEl);}}, // Populates the left/right internal coordinate arrays
	buildElHorizontals:function buildElHorizontals(){var lefts=[];var rights=[];this.els.each(function(i,node){var el=$(node);var left=el.offset().left;var width=el.outerWidth();lefts.push(left);rights.push(left+width);});this.lefts=lefts;this.rights=rights;}, // Populates the top/bottom internal coordinate arrays
	buildElVerticals:function buildElVerticals(){var tops=[];var bottoms=[];this.els.each(function(i,node){var el=$(node);var top=el.offset().top;var height=el.outerHeight();tops.push(top);bottoms.push(top+height);});this.tops=tops;this.bottoms=bottoms;}, // Given a left offset (from document left), returns the index of the el that it horizontally intersects.
	// If no intersection is made, or outside of the boundingRect, returns undefined.
	getHorizontalIndex:function getHorizontalIndex(leftOffset){this.ensureBuilt();var boundingRect=this.boundingRect;var lefts=this.lefts;var rights=this.rights;var len=lefts.length;var i;if(!boundingRect||leftOffset>=boundingRect.left&&leftOffset<boundingRect.right){for(i=0;i<len;i++){if(leftOffset>=lefts[i]&&leftOffset<rights[i]){return i;}}}}, // Given a top offset (from document top), returns the index of the el that it vertically intersects.
	// If no intersection is made, or outside of the boundingRect, returns undefined.
	getVerticalIndex:function getVerticalIndex(topOffset){this.ensureBuilt();var boundingRect=this.boundingRect;var tops=this.tops;var bottoms=this.bottoms;var len=tops.length;var i;if(!boundingRect||topOffset>=boundingRect.top&&topOffset<boundingRect.bottom){for(i=0;i<len;i++){if(topOffset>=tops[i]&&topOffset<bottoms[i]){return i;}}}}, // Gets the left offset (from document left) of the element at the given index
	getLeftOffset:function getLeftOffset(leftIndex){this.ensureBuilt();return this.lefts[leftIndex];}, // Gets the left position (from offsetParent left) of the element at the given index
	getLeftPosition:function getLeftPosition(leftIndex){this.ensureBuilt();return this.lefts[leftIndex]-this.origin.left;}, // Gets the right offset (from document left) of the element at the given index.
	// This value is NOT relative to the document's right edge, like the CSS concept of "right" would be.
	getRightOffset:function getRightOffset(leftIndex){this.ensureBuilt();return this.rights[leftIndex];}, // Gets the right position (from offsetParent left) of the element at the given index.
	// This value is NOT relative to the offsetParent's right edge, like the CSS concept of "right" would be.
	getRightPosition:function getRightPosition(leftIndex){this.ensureBuilt();return this.rights[leftIndex]-this.origin.left;}, // Gets the width of the element at the given index
	getWidth:function getWidth(leftIndex){this.ensureBuilt();return this.rights[leftIndex]-this.lefts[leftIndex];}, // Gets the top offset (from document top) of the element at the given index
	getTopOffset:function getTopOffset(topIndex){this.ensureBuilt();return this.tops[topIndex];}, // Gets the top position (from offsetParent top) of the element at the given position
	getTopPosition:function getTopPosition(topIndex){this.ensureBuilt();return this.tops[topIndex]-this.origin.top;}, // Gets the bottom offset (from the document top) of the element at the given index.
	// This value is NOT relative to the offsetParent's bottom edge, like the CSS concept of "bottom" would be.
	getBottomOffset:function getBottomOffset(topIndex){this.ensureBuilt();return this.bottoms[topIndex];}, // Gets the bottom position (from the offsetParent top) of the element at the given index.
	// This value is NOT relative to the offsetParent's bottom edge, like the CSS concept of "bottom" would be.
	getBottomPosition:function getBottomPosition(topIndex){this.ensureBuilt();return this.bottoms[topIndex]-this.origin.top;}, // Gets the height of the element at the given index
	getHeight:function getHeight(topIndex){this.ensureBuilt();return this.bottoms[topIndex]-this.tops[topIndex];}});;; /* Tracks a drag's mouse movement, firing various handlers
	----------------------------------------------------------------------------------------------------------------------*/ // TODO: use Emitter
	var DragListener=FC.DragListener=Class.extend({options:null,isListening:false,isDragging:false, // coordinates of the initial mousedown
	originX:null,originY:null, // handler attached to the document, bound to the DragListener's `this`
	mousemoveProxy:null,mouseupProxy:null, // for IE8 bug-fighting behavior, for now
	subjectEl:null, // the element being draged. optional
	subjectHref:null,scrollEl:null,scrollBounds:null, // { top, bottom, left, right }
	scrollTopVel:null, // pixels per second
	scrollLeftVel:null, // pixels per second
	scrollIntervalId:null, // ID of setTimeout for scrolling animation loop
	scrollHandlerProxy:null, // this-scoped function for handling when scrollEl is scrolled
	scrollSensitivity:30, // pixels from edge for scrolling to start
	scrollSpeed:200, // pixels per second, at maximum speed
	scrollIntervalMs:50, // millisecond wait between scroll increment
	constructor:function constructor(options){options=options||{};this.options=options;this.subjectEl=options.subjectEl;}, // Call this when the user does a mousedown. Will probably lead to startListening
	mousedown:function mousedown(ev){if(isPrimaryMouseButton(ev)){ev.preventDefault(); // prevents native selection in most browsers
	this.startListening(ev); // start the drag immediately if there is no minimum distance for a drag start
	if(!this.options.distance){this.startDrag(ev);}}}, // Call this to start tracking mouse movements
	startListening:function startListening(ev){var scrollParent;if(!this.isListening){ // grab scroll container and attach handler
	if(ev&&this.options.scroll){scrollParent=getScrollParent($(ev.target));if(!scrollParent.is(window)&&!scrollParent.is(document)){this.scrollEl=scrollParent; // scope to `this`, and use `debounce` to make sure rapid calls don't happen
	this.scrollHandlerProxy=debounce(proxy(this,'scrollHandler'),100);this.scrollEl.on('scroll',this.scrollHandlerProxy);}}$(document).on('mousemove',this.mousemoveProxy=proxy(this,'mousemove')).on('mouseup',this.mouseupProxy=proxy(this,'mouseup')).on('selectstart',this.preventDefault); // prevents native selection in IE<=8
	if(ev){this.originX=ev.pageX;this.originY=ev.pageY;}else { // if no starting information was given, origin will be the topleft corner of the screen.
	// if so, dx/dy in the future will be the absolute coordinates.
	this.originX=0;this.originY=0;}this.isListening=true;this.listenStart(ev);}}, // Called when drag listening has started (but a real drag has not necessarily began)
	listenStart:function listenStart(ev){this.trigger('listenStart',ev);}, // Called when the user moves the mouse
	mousemove:function mousemove(ev){var dx=ev.pageX-this.originX;var dy=ev.pageY-this.originY;var minDistance;var distanceSq; // current distance from the origin, squared
	if(!this.isDragging){ // if not already dragging...
	// then start the drag if the minimum distance criteria is met
	minDistance=this.options.distance||1;distanceSq=dx*dx+dy*dy;if(distanceSq>=minDistance*minDistance){ // use pythagorean theorem
	this.startDrag(ev);}}if(this.isDragging){this.drag(dx,dy,ev); // report a drag, even if this mousemove initiated the drag
	}}, // Call this to initiate a legitimate drag.
	// This function is called internally from this class, but can also be called explicitly from outside
	startDrag:function startDrag(ev){if(!this.isListening){ // startDrag must have manually initiated
	this.startListening();}if(!this.isDragging){this.isDragging=true;this.dragStart(ev);}}, // Called when the actual drag has started (went beyond minDistance)
	dragStart:function dragStart(ev){var subjectEl=this.subjectEl;this.trigger('dragStart',ev); // remove a mousedown'd <a>'s href so it is not visited (IE8 bug)
	if(this.subjectHref=subjectEl?subjectEl.attr('href'):null){subjectEl.removeAttr('href');}}, // Called while the mouse is being moved and when we know a legitimate drag is taking place
	drag:function drag(dx,dy,ev){this.trigger('drag',dx,dy,ev);this.updateScroll(ev); // will possibly cause scrolling
	}, // Called when the user does a mouseup
	mouseup:function mouseup(ev){this.stopListening(ev);}, // Called when the drag is over. Will not cause listening to stop however.
	// A concluding 'cellOut' event will NOT be triggered.
	stopDrag:function stopDrag(ev){if(this.isDragging){this.stopScrolling();this.dragStop(ev);this.isDragging=false;}}, // Called when dragging has been stopped
	dragStop:function dragStop(ev){var _this=this;this.trigger('dragStop',ev); // restore a mousedown'd <a>'s href (for IE8 bug)
	setTimeout(function(){ // must be outside of the click's execution
	if(_this.subjectHref){_this.subjectEl.attr('href',_this.subjectHref);}},0);}, // Call this to stop listening to the user's mouse events
	stopListening:function stopListening(ev){this.stopDrag(ev); // if there's a current drag, kill it
	if(this.isListening){ // remove the scroll handler if there is a scrollEl
	if(this.scrollEl){this.scrollEl.off('scroll',this.scrollHandlerProxy);this.scrollHandlerProxy=null;}$(document).off('mousemove',this.mousemoveProxy).off('mouseup',this.mouseupProxy).off('selectstart',this.preventDefault);this.mousemoveProxy=null;this.mouseupProxy=null;this.isListening=false;this.listenStop(ev);}}, // Called when drag listening has stopped
	listenStop:function listenStop(ev){this.trigger('listenStop',ev);}, // Triggers a callback. Calls a function in the option hash of the same name.
	// Arguments beyond the first `name` are forwarded on.
	trigger:function trigger(name){if(this.options[name]){this.options[name].apply(this,Array.prototype.slice.call(arguments,1));}}, // Stops a given mouse event from doing it's native browser action. In our case, text selection.
	preventDefault:function preventDefault(ev){ev.preventDefault();}, /* Scrolling
		------------------------------------------------------------------------------------------------------------------*/ // Computes and stores the bounding rectangle of scrollEl
	computeScrollBounds:function computeScrollBounds(){var el=this.scrollEl;this.scrollBounds=el?getOuterRect(el):null; // TODO: use getClientRect in future. but prevents auto scrolling when on top of scrollbars
	}, // Called when the dragging is in progress and scrolling should be updated
	updateScroll:function updateScroll(ev){var sensitivity=this.scrollSensitivity;var bounds=this.scrollBounds;var topCloseness,bottomCloseness;var leftCloseness,rightCloseness;var topVel=0;var leftVel=0;if(bounds){ // only scroll if scrollEl exists
	// compute closeness to edges. valid range is from 0.0 - 1.0
	topCloseness=(sensitivity-(ev.pageY-bounds.top))/sensitivity;bottomCloseness=(sensitivity-(bounds.bottom-ev.pageY))/sensitivity;leftCloseness=(sensitivity-(ev.pageX-bounds.left))/sensitivity;rightCloseness=(sensitivity-(bounds.right-ev.pageX))/sensitivity; // translate vertical closeness into velocity.
	// mouse must be completely in bounds for velocity to happen.
	if(topCloseness>=0&&topCloseness<=1){topVel=topCloseness*this.scrollSpeed*-1; // negative. for scrolling up
	}else if(bottomCloseness>=0&&bottomCloseness<=1){topVel=bottomCloseness*this.scrollSpeed;} // translate horizontal closeness into velocity
	if(leftCloseness>=0&&leftCloseness<=1){leftVel=leftCloseness*this.scrollSpeed*-1; // negative. for scrolling left
	}else if(rightCloseness>=0&&rightCloseness<=1){leftVel=rightCloseness*this.scrollSpeed;}}this.setScrollVel(topVel,leftVel);}, // Sets the speed-of-scrolling for the scrollEl
	setScrollVel:function setScrollVel(topVel,leftVel){this.scrollTopVel=topVel;this.scrollLeftVel=leftVel;this.constrainScrollVel(); // massages into realistic values
	// if there is non-zero velocity, and an animation loop hasn't already started, then START
	if((this.scrollTopVel||this.scrollLeftVel)&&!this.scrollIntervalId){this.scrollIntervalId=setInterval(proxy(this,'scrollIntervalFunc'), // scope to `this`
	this.scrollIntervalMs);}}, // Forces scrollTopVel and scrollLeftVel to be zero if scrolling has already gone all the way
	constrainScrollVel:function constrainScrollVel(){var el=this.scrollEl;if(this.scrollTopVel<0){ // scrolling up?
	if(el.scrollTop()<=0){ // already scrolled all the way up?
	this.scrollTopVel=0;}}else if(this.scrollTopVel>0){ // scrolling down?
	if(el.scrollTop()+el[0].clientHeight>=el[0].scrollHeight){ // already scrolled all the way down?
	this.scrollTopVel=0;}}if(this.scrollLeftVel<0){ // scrolling left?
	if(el.scrollLeft()<=0){ // already scrolled all the left?
	this.scrollLeftVel=0;}}else if(this.scrollLeftVel>0){ // scrolling right?
	if(el.scrollLeft()+el[0].clientWidth>=el[0].scrollWidth){ // already scrolled all the way right?
	this.scrollLeftVel=0;}}}, // This function gets called during every iteration of the scrolling animation loop
	scrollIntervalFunc:function scrollIntervalFunc(){var el=this.scrollEl;var frac=this.scrollIntervalMs/1000; // considering animation frequency, what the vel should be mult'd by
	// change the value of scrollEl's scroll
	if(this.scrollTopVel){el.scrollTop(el.scrollTop()+this.scrollTopVel*frac);}if(this.scrollLeftVel){el.scrollLeft(el.scrollLeft()+this.scrollLeftVel*frac);}this.constrainScrollVel(); // since the scroll values changed, recompute the velocities
	// if scrolled all the way, which causes the vels to be zero, stop the animation loop
	if(!this.scrollTopVel&&!this.scrollLeftVel){this.stopScrolling();}}, // Kills any existing scrolling animation loop
	stopScrolling:function stopScrolling(){if(this.scrollIntervalId){clearInterval(this.scrollIntervalId);this.scrollIntervalId=null; // when all done with scrolling, recompute positions since they probably changed
	this.scrollStop();}}, // Get called when the scrollEl is scrolled (NOTE: this is delayed via debounce)
	scrollHandler:function scrollHandler(){ // recompute all coordinates, but *only* if this is *not* part of our scrolling animation
	if(!this.scrollIntervalId){this.scrollStop();}}, // Called when scrolling has stopped, whether through auto scroll, or the user scrolling
	scrollStop:function scrollStop(){}});;; /* Tracks mouse movements over a component and raises events about which hit the mouse is over.
	------------------------------------------------------------------------------------------------------------------------
	options:
	- subjectEl
	- subjectCenter
	*/var HitDragListener=DragListener.extend({component:null, // converts coordinates to hits
	// methods: prepareHits, releaseHits, queryHit
	origHit:null, // the hit the mouse was over when listening started
	hit:null, // the hit the mouse is over
	coordAdjust:null, // delta that will be added to the mouse coordinates when computing collisions
	constructor:function constructor(component,options){DragListener.call(this,options); // call the super-constructor
	this.component=component;}, // Called when drag listening starts (but a real drag has not necessarily began).
	// ev might be undefined if dragging was started manually.
	listenStart:function listenStart(ev){var subjectEl=this.subjectEl;var subjectRect;var origPoint;var point;DragListener.prototype.listenStart.apply(this,arguments); // call the super-method
	this.computeCoords();if(ev){origPoint={left:ev.pageX,top:ev.pageY};point=origPoint; // constrain the point to bounds of the element being dragged
	if(subjectEl){subjectRect=getOuterRect(subjectEl); // used for centering as well
	point=constrainPoint(point,subjectRect);}this.origHit=this.queryHit(point.left,point.top); // treat the center of the subject as the collision point?
	if(subjectEl&&this.options.subjectCenter){ // only consider the area the subject overlaps the hit. best for large subjects.
	// TODO: skip this if hit didn't supply left/right/top/bottom
	if(this.origHit){subjectRect=intersectRects(this.origHit,subjectRect)||subjectRect; // in case there is no intersection
	}point=getRectCenter(subjectRect);}this.coordAdjust=diffPoints(point,origPoint); // point - origPoint
	}else {this.origHit=null;this.coordAdjust=null;}}, // Recomputes the drag-critical positions of elements
	computeCoords:function computeCoords(){this.component.prepareHits();this.computeScrollBounds(); // why is this here???
	}, // Called when the actual drag has started
	dragStart:function dragStart(ev){var hit;DragListener.prototype.dragStart.apply(this,arguments); // call the super-method
	// might be different from this.origHit if the min-distance is large
	hit=this.queryHit(ev.pageX,ev.pageY); // report the initial hit the mouse is over
	// especially important if no min-distance and drag starts immediately
	if(hit){this.hitOver(hit);}}, // Called when the drag moves
	drag:function drag(dx,dy,ev){var hit;DragListener.prototype.drag.apply(this,arguments); // call the super-method
	hit=this.queryHit(ev.pageX,ev.pageY);if(!isHitsEqual(hit,this.hit)){ // a different hit than before?
	if(this.hit){this.hitOut();}if(hit){this.hitOver(hit);}}}, // Called when dragging has been stopped
	dragStop:function dragStop(){this.hitDone();DragListener.prototype.dragStop.apply(this,arguments); // call the super-method
	}, // Called when a the mouse has just moved over a new hit
	hitOver:function hitOver(hit){var isOrig=isHitsEqual(hit,this.origHit);this.hit=hit;this.trigger('hitOver',this.hit,isOrig,this.origHit);}, // Called when the mouse has just moved out of a hit
	hitOut:function hitOut(){if(this.hit){this.trigger('hitOut',this.hit);this.hitDone();this.hit=null;}}, // Called after a hitOut. Also called before a dragStop
	hitDone:function hitDone(){if(this.hit){this.trigger('hitDone',this.hit);}}, // Called when drag listening has stopped
	listenStop:function listenStop(){DragListener.prototype.listenStop.apply(this,arguments); // call the super-method
	this.origHit=null;this.hit=null;this.component.releaseHits();}, // Called when scrolling has stopped, whether through auto scroll, or the user scrolling
	scrollStop:function scrollStop(){DragListener.prototype.scrollStop.apply(this,arguments); // call the super-method
	this.computeCoords(); // hits' absolute positions will be in new places. recompute
	}, // Gets the hit underneath the coordinates for the given mouse event
	queryHit:function queryHit(left,top){if(this.coordAdjust){left+=this.coordAdjust.left;top+=this.coordAdjust.top;}return this.component.queryHit(left,top);}}); // Returns `true` if the hits are identically equal. `false` otherwise. Must be from the same component.
	// Two null values will be considered equal, as two "out of the component" states are the same.
	function isHitsEqual(hit0,hit1){if(!hit0&&!hit1){return true;}if(hit0&&hit1){return hit0.component===hit1.component&&isHitPropsWithin(hit0,hit1)&&isHitPropsWithin(hit1,hit0); // ensures all props are identical
	}return false;} // Returns true if all of subHit's non-standard properties are within superHit
	function isHitPropsWithin(subHit,superHit){for(var propName in subHit){if(!/^(component|left|right|top|bottom)$/.test(propName)){if(subHit[propName]!==superHit[propName]){return false;}}}return true;};; /* Creates a clone of an element and lets it track the mouse as it moves
	----------------------------------------------------------------------------------------------------------------------*/var MouseFollower=Class.extend({options:null,sourceEl:null, // the element that will be cloned and made to look like it is dragging
	el:null, // the clone of `sourceEl` that will track the mouse
	parentEl:null, // the element that `el` (the clone) will be attached to
	// the initial position of el, relative to the offset parent. made to match the initial offset of sourceEl
	top0:null,left0:null, // the initial position of the mouse
	mouseY0:null,mouseX0:null, // the number of pixels the mouse has moved from its initial position
	topDelta:null,leftDelta:null,mousemoveProxy:null, // document mousemove handler, bound to the MouseFollower's `this`
	isFollowing:false,isHidden:false,isAnimating:false, // doing the revert animation?
	constructor:function constructor(sourceEl,options){this.options=options=options||{};this.sourceEl=sourceEl;this.parentEl=options.parentEl?$(options.parentEl):sourceEl.parent(); // default to sourceEl's parent
	}, // Causes the element to start following the mouse
	start:function start(ev){if(!this.isFollowing){this.isFollowing=true;this.mouseY0=ev.pageY;this.mouseX0=ev.pageX;this.topDelta=0;this.leftDelta=0;if(!this.isHidden){this.updatePosition();}$(document).on('mousemove',this.mousemoveProxy=proxy(this,'mousemove'));}}, // Causes the element to stop following the mouse. If shouldRevert is true, will animate back to original position.
	// `callback` gets invoked when the animation is complete. If no animation, it is invoked immediately.
	stop:function stop(shouldRevert,callback){var _this=this;var revertDuration=this.options.revertDuration;function complete(){this.isAnimating=false;_this.removeElement();this.top0=this.left0=null; // reset state for future updatePosition calls
	if(callback){callback();}}if(this.isFollowing&&!this.isAnimating){ // disallow more than one stop animation at a time
	this.isFollowing=false;$(document).off('mousemove',this.mousemoveProxy);if(shouldRevert&&revertDuration&&!this.isHidden){ // do a revert animation?
	this.isAnimating=true;this.el.animate({top:this.top0,left:this.left0},{duration:revertDuration,complete:complete});}else {complete();}}}, // Gets the tracking element. Create it if necessary
	getEl:function getEl(){var el=this.el;if(!el){this.sourceEl.width(); // hack to force IE8 to compute correct bounding box
	el=this.el=this.sourceEl.clone().css({position:'absolute',visibility:'', // in case original element was hidden (commonly through hideEvents())
	display:this.isHidden?'none':'', // for when initially hidden
	margin:0,right:'auto', // erase and set width instead
	bottom:'auto', // erase and set height instead
	width:this.sourceEl.width(), // explicit height in case there was a 'right' value
	height:this.sourceEl.height(), // explicit width in case there was a 'bottom' value
	opacity:this.options.opacity||'',zIndex:this.options.zIndex}).appendTo(this.parentEl);}return el;}, // Removes the tracking element if it has already been created
	removeElement:function removeElement(){if(this.el){this.el.remove();this.el=null;}}, // Update the CSS position of the tracking element
	updatePosition:function updatePosition(){var sourceOffset;var origin;this.getEl(); // ensure this.el
	// make sure origin info was computed
	if(this.top0===null){this.sourceEl.width(); // hack to force IE8 to compute correct bounding box
	sourceOffset=this.sourceEl.offset();origin=this.el.offsetParent().offset();this.top0=sourceOffset.top-origin.top;this.left0=sourceOffset.left-origin.left;}this.el.css({top:this.top0+this.topDelta,left:this.left0+this.leftDelta});}, // Gets called when the user moves the mouse
	mousemove:function mousemove(ev){this.topDelta=ev.pageY-this.mouseY0;this.leftDelta=ev.pageX-this.mouseX0;if(!this.isHidden){this.updatePosition();}}, // Temporarily makes the tracking element invisible. Can be called before following starts
	hide:function hide(){if(!this.isHidden){this.isHidden=true;if(this.el){this.el.hide();}}}, // Show the tracking element after it has been temporarily hidden
	show:function show(){if(this.isHidden){this.isHidden=false;this.updatePosition();this.getEl().show();}}});;; /* An abstract class comprised of a "grid" of areas that each represent a specific datetime
	----------------------------------------------------------------------------------------------------------------------*/var Grid=FC.Grid=Class.extend({view:null, // a View object
	isRTL:null, // shortcut to the view's isRTL option
	start:null,end:null,el:null, // the containing element
	elsByFill:null, // a hash of jQuery element sets used for rendering each fill. Keyed by fill name.
	externalDragStartProxy:null, // binds the Grid's scope to externalDragStart (in DayGrid.events)
	// derived from options
	eventTimeFormat:null,displayEventTime:null,displayEventEnd:null,minResizeDuration:null, // TODO: hack. set by subclasses. minumum event resize duration
	// if defined, holds the unit identified (ex: "year" or "month") that determines the level of granularity
	// of the date areas. if not defined, assumes to be day and time granularity.
	// TODO: port isTimeScale into same system?
	largeUnit:null,constructor:function constructor(view){this.view=view;this.isRTL=view.opt('isRTL');this.elsByFill={};this.externalDragStartProxy=proxy(this,'externalDragStart');}, /* Options
		------------------------------------------------------------------------------------------------------------------*/ // Generates the format string used for event time text, if not explicitly defined by 'timeFormat'
	computeEventTimeFormat:function computeEventTimeFormat(){return this.view.opt('smallTimeFormat');}, // Determines whether events should have their end times displayed, if not explicitly defined by 'displayEventTime'.
	// Only applies to non-all-day events.
	computeDisplayEventTime:function computeDisplayEventTime(){return true;}, // Determines whether events should have their end times displayed, if not explicitly defined by 'displayEventEnd'
	computeDisplayEventEnd:function computeDisplayEventEnd(){return true;}, /* Dates
		------------------------------------------------------------------------------------------------------------------*/ // Tells the grid about what period of time to display.
	// Any date-related internal data should be generated.
	setRange:function setRange(range){this.start=range.start.clone();this.end=range.end.clone();this.rangeUpdated();this.processRangeOptions();}, // Called when internal variables that rely on the range should be updated
	rangeUpdated:function rangeUpdated(){}, // Updates values that rely on options and also relate to range
	processRangeOptions:function processRangeOptions(){var view=this.view;var displayEventTime;var displayEventEnd;this.eventTimeFormat=view.opt('eventTimeFormat')||view.opt('timeFormat')|| // deprecated
	this.computeEventTimeFormat();displayEventTime=view.opt('displayEventTime');if(displayEventTime==null){displayEventTime=this.computeDisplayEventTime(); // might be based off of range
	}displayEventEnd=view.opt('displayEventEnd');if(displayEventEnd==null){displayEventEnd=this.computeDisplayEventEnd(); // might be based off of range
	}this.displayEventTime=displayEventTime;this.displayEventEnd=displayEventEnd;}, // Converts a span (has unzoned start/end and any other grid-specific location information)
	// into an array of segments (pieces of events whose format is decided by the grid).
	spanToSegs:function spanToSegs(span){ // subclasses must implement
	}, // Diffs the two dates, returning a duration, based on granularity of the grid
	// TODO: port isTimeScale into this system?
	diffDates:function diffDates(a,b){if(this.largeUnit){return diffByUnit(a,b,this.largeUnit);}else {return diffDayTime(a,b);}}, /* Hit Area
		------------------------------------------------------------------------------------------------------------------*/ // Called before one or more queryHit calls might happen. Should prepare any cached coordinates for queryHit
	prepareHits:function prepareHits(){}, // Called when queryHit calls have subsided. Good place to clear any coordinate caches.
	releaseHits:function releaseHits(){}, // Given coordinates from the topleft of the document, return data about the date-related area underneath.
	// Can return an object with arbitrary properties (although top/right/left/bottom are encouraged).
	// Must have a `grid` property, a reference to this current grid. TODO: avoid this
	// The returned object will be processed by getHitSpan and getHitEl.
	queryHit:function queryHit(leftOffset,topOffset){}, // Given position-level information about a date-related area within the grid,
	// should return an object with at least a start/end date. Can provide other information as well.
	getHitSpan:function getHitSpan(hit){}, // Given position-level information about a date-related area within the grid,
	// should return a jQuery element that best represents it. passed to dayClick callback.
	getHitEl:function getHitEl(hit){}, /* Rendering
		------------------------------------------------------------------------------------------------------------------*/ // Sets the container element that the grid should render inside of.
	// Does other DOM-related initializations.
	setElement:function setElement(el){var _this=this;this.el=el; // attach a handler to the grid's root element.
	// jQuery will take care of unregistering them when removeElement gets called.
	el.on('mousedown',function(ev){if(!$(ev.target).is('.fc-event-container *, .fc-more')&& // not an an event element, or "more.." link
	!$(ev.target).closest('.fc-popover').length // not on a popover (like the "more.." events one)
	){_this.dayMousedown(ev);}}); // attach event-element-related handlers. in Grid.events
	// same garbage collection note as above.
	this.bindSegHandlers();this.bindGlobalHandlers();}, // Removes the grid's container element from the DOM. Undoes any other DOM-related attachments.
	// DOES NOT remove any content beforehand (doesn't clear events or call unrenderDates), unlike View
	removeElement:function removeElement(){this.unbindGlobalHandlers();this.el.remove(); // NOTE: we don't null-out this.el for the same reasons we don't do it within View::removeElement
	}, // Renders the basic structure of grid view before any content is rendered
	renderSkeleton:function renderSkeleton(){ // subclasses should implement
	}, // Renders the grid's date-related content (like areas that represent days/times).
	// Assumes setRange has already been called and the skeleton has already been rendered.
	renderDates:function renderDates(){ // subclasses should implement
	}, // Unrenders the grid's date-related content
	unrenderDates:function unrenderDates(){ // subclasses should implement
	}, /* Handlers
		------------------------------------------------------------------------------------------------------------------*/ // Binds DOM handlers to elements that reside outside the grid, such as the document
	bindGlobalHandlers:function bindGlobalHandlers(){$(document).on('dragstart sortstart',this.externalDragStartProxy); // jqui
	}, // Unbinds DOM handlers from elements that reside outside the grid
	unbindGlobalHandlers:function unbindGlobalHandlers(){$(document).off('dragstart sortstart',this.externalDragStartProxy); // jqui
	}, // Process a mousedown on an element that represents a day. For day clicking and selecting.
	dayMousedown:function dayMousedown(ev){var _this=this;var view=this.view;var isSelectable=view.opt('selectable');var dayClickHit; // null if invalid dayClick
	var selectionSpan; // null if invalid selection
	// this listener tracks a mousedown on a day element, and a subsequent drag.
	// if the drag ends on the same day, it is a 'dayClick'.
	// if 'selectable' is enabled, this listener also detects selections.
	var dragListener=new HitDragListener(this,{ //distance: 5, // needs more work if we want dayClick to fire correctly
	scroll:view.opt('dragScroll'),dragStart:function dragStart(){view.unselect(); // since we could be rendering a new selection, we want to clear any old one
	},hitOver:function hitOver(hit,isOrig,origHit){if(origHit){ // click needs to have started on a hit
	dayClickHit=isOrig?hit:null; // single-hit selection is a day click
	if(isSelectable){selectionSpan=_this.computeSelection(_this.getHitSpan(origHit),_this.getHitSpan(hit));if(selectionSpan){_this.renderSelection(selectionSpan);}else if(selectionSpan===false){disableCursor();}}}},hitOut:function hitOut(){dayClickHit=null;selectionSpan=null;_this.unrenderSelection();enableCursor();},listenStop:function listenStop(ev){if(dayClickHit){view.triggerDayClick(_this.getHitSpan(dayClickHit),_this.getHitEl(dayClickHit),ev);}if(selectionSpan){ // the selection will already have been rendered. just report it
	view.reportSelection(selectionSpan,ev);}enableCursor();}});dragListener.mousedown(ev); // start listening, which will eventually initiate a dragStart
	}, /* Event Helper
		------------------------------------------------------------------------------------------------------------------*/ // TODO: should probably move this to Grid.events, like we did event dragging / resizing
	// Renders a mock event at the given event location, which contains zoned start/end properties.
	renderEventLocationHelper:function renderEventLocationHelper(eventLocation,sourceSeg){var fakeEvent=this.fabricateHelperEvent(eventLocation,sourceSeg);this.renderHelper(fakeEvent,sourceSeg); // do the actual rendering
	}, // Builds a fake event given zoned event date properties and a segment is should be inspired from.
	// The range's end can be null, in which case the mock event that is rendered will have a null end time.
	// `sourceSeg` is the internal segment object involved in the drag. If null, something external is dragging.
	fabricateHelperEvent:function fabricateHelperEvent(eventLocation,sourceSeg){var fakeEvent=sourceSeg?createObject(sourceSeg.event):{}; // mask the original event object if possible
	fakeEvent.start=eventLocation.start.clone();fakeEvent.end=eventLocation.end?eventLocation.end.clone():null;fakeEvent.allDay=null; // force it to be freshly computed by normalizeEventDates
	this.view.calendar.normalizeEventDates(fakeEvent); // this extra className will be useful for differentiating real events from mock events in CSS
	fakeEvent.className=(fakeEvent.className||[]).concat('fc-helper'); // if something external is being dragged in, don't render a resizer
	if(!sourceSeg){fakeEvent.editable=false;}return fakeEvent;}, // Renders a mock event. Given zoned event date properties.
	renderHelper:function renderHelper(eventLocation,sourceSeg){ // subclasses must implement
	}, // Unrenders a mock event
	unrenderHelper:function unrenderHelper(){ // subclasses must implement
	}, /* Selection
		------------------------------------------------------------------------------------------------------------------*/ // Renders a visual indication of a selection. Will highlight by default but can be overridden by subclasses.
	// Given a span (unzoned start/end and other misc data)
	renderSelection:function renderSelection(span){this.renderHighlight(span);}, // Unrenders any visual indications of a selection. Will unrender a highlight by default.
	unrenderSelection:function unrenderSelection(){this.unrenderHighlight();}, // Given the first and last date-spans of a selection, returns another date-span object.
	// Subclasses can override and provide additional data in the span object. Will be passed to renderSelection().
	// Will return false if the selection is invalid and this should be indicated to the user.
	// Will return null/undefined if a selection invalid but no error should be reported.
	computeSelection:function computeSelection(span0,span1){var span=this.computeSelectionSpan(span0,span1);if(span&&!this.view.calendar.isSelectionSpanAllowed(span)){return false;}return span;}, // Given two spans, must return the combination of the two.
	// TODO: do this separation of concerns (combining VS validation) for event dnd/resize too.
	computeSelectionSpan:function computeSelectionSpan(span0,span1){var dates=[span0.start,span0.end,span1.start,span1.end];dates.sort(compareNumbers); // sorts chronologically. works with Moments
	return {start:dates[0].clone(),end:dates[3].clone()};}, /* Highlight
		------------------------------------------------------------------------------------------------------------------*/ // Renders an emphasis on the given date range. Given a span (unzoned start/end and other misc data)
	renderHighlight:function renderHighlight(span){this.renderFill('highlight',this.spanToSegs(span));}, // Unrenders the emphasis on a date range
	unrenderHighlight:function unrenderHighlight(){this.unrenderFill('highlight');}, // Generates an array of classNames for rendering the highlight. Used by the fill system.
	highlightSegClasses:function highlightSegClasses(){return ['fc-highlight'];}, /* Business Hours
		------------------------------------------------------------------------------------------------------------------*/renderBusinessHours:function renderBusinessHours(){},unrenderBusinessHours:function unrenderBusinessHours(){}, /* Now Indicator
		------------------------------------------------------------------------------------------------------------------*/getNowIndicatorUnit:function getNowIndicatorUnit(){},renderNowIndicator:function renderNowIndicator(date){},unrenderNowIndicator:function unrenderNowIndicator(){}, /* Fill System (highlight, background events, business hours)
		--------------------------------------------------------------------------------------------------------------------
		TODO: remove this system. like we did in TimeGrid
		*/ // Renders a set of rectangles over the given segments of time.
	// MUST RETURN a subset of segs, the segs that were actually rendered.
	// Responsible for populating this.elsByFill. TODO: better API for expressing this requirement
	renderFill:function renderFill(type,segs){ // subclasses must implement
	}, // Unrenders a specific type of fill that is currently rendered on the grid
	unrenderFill:function unrenderFill(type){var el=this.elsByFill[type];if(el){el.remove();delete this.elsByFill[type];}}, // Renders and assigns an `el` property for each fill segment. Generic enough to work with different types.
	// Only returns segments that successfully rendered.
	// To be harnessed by renderFill (implemented by subclasses).
	// Analagous to renderFgSegEls.
	renderFillSegEls:function renderFillSegEls(type,segs){var _this=this;var segElMethod=this[type+'SegEl'];var html='';var renderedSegs=[];var i;if(segs.length){ // build a large concatenation of segment HTML
	for(i=0;i<segs.length;i++){html+=this.fillSegHtml(type,segs[i]);} // Grab individual elements from the combined HTML string. Use each as the default rendering.
	// Then, compute the 'el' for each segment.
	$(html).each(function(i,node){var seg=segs[i];var el=$(node); // allow custom filter methods per-type
	if(segElMethod){el=segElMethod.call(_this,seg,el);}if(el){ // custom filters did not cancel the render
	el=$(el); // allow custom filter to return raw DOM node
	// correct element type? (would be bad if a non-TD were inserted into a table for example)
	if(el.is(_this.fillSegTag)){seg.el=el;renderedSegs.push(seg);}}});}return renderedSegs;},fillSegTag:'div', // subclasses can override
	// Builds the HTML needed for one fill segment. Generic enought o work with different types.
	fillSegHtml:function fillSegHtml(type,seg){ // custom hooks per-type
	var classesMethod=this[type+'SegClasses'];var cssMethod=this[type+'SegCss'];var classes=classesMethod?classesMethod.call(this,seg):[];var css=cssToStr(cssMethod?cssMethod.call(this,seg):{});return '<'+this.fillSegTag+(classes.length?' class="'+classes.join(' ')+'"':'')+(css?' style="'+css+'"':'')+' />';}, /* Generic rendering utilities for subclasses
		------------------------------------------------------------------------------------------------------------------*/ // Computes HTML classNames for a single-day element
	getDayClasses:function getDayClasses(date){var view=this.view;var today=view.calendar.getNow();var classes=['fc-'+dayIDs[date.day()]];if(view.intervalDuration.as('months')==1&&date.month()!=view.intervalStart.month()){classes.push('fc-other-month');}if(date.isSame(today,'day')){classes.push('fc-today',view.highlightStateClass);}else if(date<today){classes.push('fc-past');}else {classes.push('fc-future');}return classes;}});;; /* Event-rendering and event-interaction methods for the abstract Grid class
	----------------------------------------------------------------------------------------------------------------------*/Grid.mixin({mousedOverSeg:null, // the segment object the user's mouse is over. null if over nothing
	isDraggingSeg:false, // is a segment being dragged? boolean
	isResizingSeg:false, // is a segment being resized? boolean
	isDraggingExternal:false, // jqui-dragging an external element? boolean
	segs:null, // the *event* segments currently rendered in the grid. TODO: rename to `eventSegs`
	// Renders the given events onto the grid
	renderEvents:function renderEvents(events){var bgEvents=[];var fgEvents=[];var i;for(i=0;i<events.length;i++){(isBgEvent(events[i])?bgEvents:fgEvents).push(events[i]);}this.segs=[].concat( // record all segs
	this.renderBgEvents(bgEvents),this.renderFgEvents(fgEvents));},renderBgEvents:function renderBgEvents(events){var segs=this.eventsToSegs(events); // renderBgSegs might return a subset of segs, segs that were actually rendered
	return this.renderBgSegs(segs)||segs;},renderFgEvents:function renderFgEvents(events){var segs=this.eventsToSegs(events); // renderFgSegs might return a subset of segs, segs that were actually rendered
	return this.renderFgSegs(segs)||segs;}, // Unrenders all events currently rendered on the grid
	unrenderEvents:function unrenderEvents(){this.triggerSegMouseout(); // trigger an eventMouseout if user's mouse is over an event
	this.unrenderFgSegs();this.unrenderBgSegs();this.segs=null;}, // Retrieves all rendered segment objects currently rendered on the grid
	getEventSegs:function getEventSegs(){return this.segs||[];}, /* Foreground Segment Rendering
		------------------------------------------------------------------------------------------------------------------*/ // Renders foreground event segments onto the grid. May return a subset of segs that were rendered.
	renderFgSegs:function renderFgSegs(segs){ // subclasses must implement
	}, // Unrenders all currently rendered foreground segments
	unrenderFgSegs:function unrenderFgSegs(){ // subclasses must implement
	}, // Renders and assigns an `el` property for each foreground event segment.
	// Only returns segments that successfully rendered.
	// A utility that subclasses may use.
	renderFgSegEls:function renderFgSegEls(segs,disableResizing){var view=this.view;var html='';var renderedSegs=[];var i;if(segs.length){ // don't build an empty html string
	// build a large concatenation of event segment HTML
	for(i=0;i<segs.length;i++){html+=this.fgSegHtml(segs[i],disableResizing);} // Grab individual elements from the combined HTML string. Use each as the default rendering.
	// Then, compute the 'el' for each segment. An el might be null if the eventRender callback returned false.
	$(html).each(function(i,node){var seg=segs[i];var el=view.resolveEventEl(seg.event,$(node));if(el){el.data('fc-seg',seg); // used by handlers
	seg.el=el;renderedSegs.push(seg);}});}return renderedSegs;}, // Generates the HTML for the default rendering of a foreground event segment. Used by renderFgSegEls()
	fgSegHtml:function fgSegHtml(seg,disableResizing){ // subclasses should implement
	}, /* Background Segment Rendering
		------------------------------------------------------------------------------------------------------------------*/ // Renders the given background event segments onto the grid.
	// Returns a subset of the segs that were actually rendered.
	renderBgSegs:function renderBgSegs(segs){return this.renderFill('bgEvent',segs);}, // Unrenders all the currently rendered background event segments
	unrenderBgSegs:function unrenderBgSegs(){this.unrenderFill('bgEvent');}, // Renders a background event element, given the default rendering. Called by the fill system.
	bgEventSegEl:function bgEventSegEl(seg,el){return this.view.resolveEventEl(seg.event,el); // will filter through eventRender
	}, // Generates an array of classNames to be used for the default rendering of a background event.
	// Called by the fill system.
	bgEventSegClasses:function bgEventSegClasses(seg){var event=seg.event;var source=event.source||{};return ['fc-bgevent'].concat(event.className,source.className||[]);}, // Generates a semicolon-separated CSS string to be used for the default rendering of a background event.
	// Called by the fill system.
	bgEventSegCss:function bgEventSegCss(seg){return {'background-color':this.getSegSkinCss(seg)['background-color']};}, // Generates an array of classNames to be used for the rendering business hours overlay. Called by the fill system.
	businessHoursSegClasses:function businessHoursSegClasses(seg){return ['fc-nonbusiness','fc-bgevent'];}, /* Handlers
		------------------------------------------------------------------------------------------------------------------*/ // Attaches event-element-related handlers to the container element and leverage bubbling
	bindSegHandlers:function bindSegHandlers(){var _this=this;var view=this.view;$.each({mouseenter:function mouseenter(seg,ev){_this.triggerSegMouseover(seg,ev);},mouseleave:function mouseleave(seg,ev){_this.triggerSegMouseout(seg,ev);},click:function click(seg,ev){return view.trigger('eventClick',this,seg.event,ev); // can return `false` to cancel
	},mousedown:function mousedown(seg,ev){if($(ev.target).is('.fc-resizer')&&view.isEventResizable(seg.event)){_this.segResizeMousedown(seg,ev,$(ev.target).is('.fc-start-resizer'));}else if(view.isEventDraggable(seg.event)){_this.segDragMousedown(seg,ev);}}},function(name,func){ // attach the handler to the container element and only listen for real event elements via bubbling
	_this.el.on(name,'.fc-event-container > *',function(ev){var seg=$(this).data('fc-seg'); // grab segment data. put there by View::renderEvents
	// only call the handlers if there is not a drag/resize in progress
	if(seg&&!_this.isDraggingSeg&&!_this.isResizingSeg){return func.call(this,seg,ev); // `this` will be the event element
	}});});}, // Updates internal state and triggers handlers for when an event element is moused over
	triggerSegMouseover:function triggerSegMouseover(seg,ev){if(!this.mousedOverSeg){this.mousedOverSeg=seg;this.view.trigger('eventMouseover',seg.el[0],seg.event,ev);}}, // Updates internal state and triggers handlers for when an event element is moused out.
	// Can be given no arguments, in which case it will mouseout the segment that was previously moused over.
	triggerSegMouseout:function triggerSegMouseout(seg,ev){ev=ev||{}; // if given no args, make a mock mouse event
	if(this.mousedOverSeg){seg=seg||this.mousedOverSeg; // if given no args, use the currently moused-over segment
	this.mousedOverSeg=null;this.view.trigger('eventMouseout',seg.el[0],seg.event,ev);}}, /* Event Dragging
		------------------------------------------------------------------------------------------------------------------*/ // Called when the user does a mousedown on an event, which might lead to dragging.
	// Generic enough to work with any type of Grid.
	segDragMousedown:function segDragMousedown(seg,ev){var _this=this;var view=this.view;var calendar=view.calendar;var el=seg.el;var event=seg.event;var dropLocation; // zoned event date properties
	// A clone of the original element that will move with the mouse
	var mouseFollower=new MouseFollower(seg.el,{parentEl:view.el,opacity:view.opt('dragOpacity'),revertDuration:view.opt('dragRevertDuration'),zIndex:2 // one above the .fc-view
	}); // Tracks mouse movement over the *view's* coordinate map. Allows dragging and dropping between subcomponents
	// of the view.
	var dragListener=new HitDragListener(view,{distance:5,scroll:view.opt('dragScroll'),subjectEl:el,subjectCenter:true,listenStart:function listenStart(ev){mouseFollower.hide(); // don't show until we know this is a real drag
	mouseFollower.start(ev);},dragStart:function dragStart(ev){_this.triggerSegMouseout(seg,ev); // ensure a mouseout on the manipulated event has been reported
	_this.segDragStart(seg,ev);view.hideEvent(event); // hide all event segments. our mouseFollower will take over
	},hitOver:function hitOver(hit,isOrig,origHit){ // starting hit could be forced (DayGrid.limit)
	if(seg.hit){origHit=seg.hit;} // since we are querying the parent view, might not belong to this grid
	dropLocation=_this.computeEventDrop(origHit.component.getHitSpan(origHit),hit.component.getHitSpan(hit),event);if(dropLocation&&!calendar.isEventSpanAllowed(_this.eventToSpan(dropLocation),event)){disableCursor();dropLocation=null;} // if a valid drop location, have the subclass render a visual indication
	if(dropLocation&&view.renderDrag(dropLocation,seg)){mouseFollower.hide(); // if the subclass is already using a mock event "helper", hide our own
	}else {mouseFollower.show(); // otherwise, have the helper follow the mouse (no snapping)
	}if(isOrig){dropLocation=null; // needs to have moved hits to be a valid drop
	}},hitOut:function hitOut(){ // called before mouse moves to a different hit OR moved out of all hits
	view.unrenderDrag(); // unrender whatever was done in renderDrag
	mouseFollower.show(); // show in case we are moving out of all hits
	dropLocation=null;},hitDone:function hitDone(){ // Called after a hitOut OR before a dragStop
	enableCursor();},dragStop:function dragStop(ev){ // do revert animation if hasn't changed. calls a callback when finished (whether animation or not)
	mouseFollower.stop(!dropLocation,function(){view.unrenderDrag();view.showEvent(event);_this.segDragStop(seg,ev);if(dropLocation){view.reportEventDrop(event,dropLocation,this.largeUnit,el,ev);}});},listenStop:function listenStop(){mouseFollower.stop(); // put in listenStop in case there was a mousedown but the drag never started
	}});dragListener.mousedown(ev); // start listening, which will eventually lead to a dragStart
	}, // Called before event segment dragging starts
	segDragStart:function segDragStart(seg,ev){this.isDraggingSeg=true;this.view.trigger('eventDragStart',seg.el[0],seg.event,ev,{}); // last argument is jqui dummy
	}, // Called after event segment dragging stops
	segDragStop:function segDragStop(seg,ev){this.isDraggingSeg=false;this.view.trigger('eventDragStop',seg.el[0],seg.event,ev,{}); // last argument is jqui dummy
	}, // Given the spans an event drag began, and the span event was dropped, calculates the new zoned start/end/allDay
	// values for the event. Subclasses may override and set additional properties to be used by renderDrag.
	// A falsy returned value indicates an invalid drop.
	// DOES NOT consider overlap/constraint.
	computeEventDrop:function computeEventDrop(startSpan,endSpan,event){var calendar=this.view.calendar;var dragStart=startSpan.start;var dragEnd=endSpan.start;var delta;var dropLocation; // zoned event date properties
	if(dragStart.hasTime()===dragEnd.hasTime()){delta=this.diffDates(dragEnd,dragStart); // if an all-day event was in a timed area and it was dragged to a different time,
	// guarantee an end and adjust start/end to have times
	if(event.allDay&&durationHasTime(delta)){dropLocation={start:event.start.clone(),end:calendar.getEventEnd(event), // will be an ambig day
	allDay:false // for normalizeEventTimes
	};calendar.normalizeEventTimes(dropLocation);} // othewise, work off existing values
	else {dropLocation={start:event.start.clone(),end:event.end?event.end.clone():null,allDay:event.allDay // keep it the same
	};}dropLocation.start.add(delta);if(dropLocation.end){dropLocation.end.add(delta);}}else { // if switching from day <-> timed, start should be reset to the dropped date, and the end cleared
	dropLocation={start:dragEnd.clone(),end:null, // end should be cleared
	allDay:!dragEnd.hasTime()};}return dropLocation;}, // Utility for apply dragOpacity to a jQuery set
	applyDragOpacity:function applyDragOpacity(els){var opacity=this.view.opt('dragOpacity');if(opacity!=null){els.each(function(i,node){ // Don't use jQuery (will set an IE filter), do it the old fashioned way.
	// In IE8, a helper element will disappears if there's a filter.
	node.style.opacity=opacity;});}}, /* External Element Dragging
		------------------------------------------------------------------------------------------------------------------*/ // Called when a jQuery UI drag is initiated anywhere in the DOM
	externalDragStart:function externalDragStart(ev,ui){var view=this.view;var el;var accept;if(view.opt('droppable')){ // only listen if this setting is on
	el=$((ui?ui.item:null)||ev.target); // Test that the dragged element passes the dropAccept selector or filter function.
	// FYI, the default is "*" (matches all)
	accept=view.opt('dropAccept');if($.isFunction(accept)?accept.call(el[0],el):el.is(accept)){if(!this.isDraggingExternal){ // prevent double-listening if fired twice
	this.listenToExternalDrag(el,ev,ui);}}}}, // Called when a jQuery UI drag starts and it needs to be monitored for dropping
	listenToExternalDrag:function listenToExternalDrag(el,ev,ui){var _this=this;var calendar=this.view.calendar;var meta=getDraggedElMeta(el); // extra data about event drop, including possible event to create
	var dropLocation; // a null value signals an unsuccessful drag
	// listener that tracks mouse movement over date-associated pixel regions
	var dragListener=new HitDragListener(this,{listenStart:function listenStart(){_this.isDraggingExternal=true;},hitOver:function hitOver(hit){dropLocation=_this.computeExternalDrop(hit.component.getHitSpan(hit), // since we are querying the parent view, might not belong to this grid
	meta);if( // invalid hit?
	dropLocation&&!calendar.isExternalSpanAllowed(_this.eventToSpan(dropLocation),dropLocation,meta.eventProps)){disableCursor();dropLocation=null;}if(dropLocation){_this.renderDrag(dropLocation); // called without a seg parameter
	}},hitOut:function hitOut(){dropLocation=null; // signal unsuccessful
	},hitDone:function hitDone(){ // Called after a hitOut OR before a dragStop
	enableCursor();_this.unrenderDrag();},dragStop:function dragStop(){if(dropLocation){ // element was dropped on a valid hit
	_this.view.reportExternalDrop(meta,dropLocation,el,ev,ui);}},listenStop:function listenStop(){_this.isDraggingExternal=false;}});dragListener.startDrag(ev); // start listening immediately
	}, // Given a hit to be dropped upon, and misc data associated with the jqui drag (guaranteed to be a plain object),
	// returns the zoned start/end dates for the event that would result from the hypothetical drop. end might be null.
	// Returning a null value signals an invalid drop hit.
	// DOES NOT consider overlap/constraint.
	computeExternalDrop:function computeExternalDrop(span,meta){var calendar=this.view.calendar;var dropLocation={start:calendar.applyTimezone(span.start), // simulate a zoned event start date
	end:null}; // if dropped on an all-day span, and element's metadata specified a time, set it
	if(meta.startTime&&!dropLocation.start.hasTime()){dropLocation.start.time(meta.startTime);}if(meta.duration){dropLocation.end=dropLocation.start.clone().add(meta.duration);}return dropLocation;}, /* Drag Rendering (for both events and an external elements)
		------------------------------------------------------------------------------------------------------------------*/ // Renders a visual indication of an event or external element being dragged.
	// `dropLocation` contains hypothetical start/end/allDay values the event would have if dropped. end can be null.
	// `seg` is the internal segment object that is being dragged. If dragging an external element, `seg` is null.
	// A truthy returned value indicates this method has rendered a helper element.
	renderDrag:function renderDrag(dropLocation,seg){ // subclasses must implement
	}, // Unrenders a visual indication of an event or external element being dragged
	unrenderDrag:function unrenderDrag(){ // subclasses must implement
	}, /* Resizing
		------------------------------------------------------------------------------------------------------------------*/ // Called when the user does a mousedown on an event's resizer, which might lead to resizing.
	// Generic enough to work with any type of Grid.
	segResizeMousedown:function segResizeMousedown(seg,ev,isStart){var _this=this;var view=this.view;var calendar=view.calendar;var el=seg.el;var event=seg.event;var eventEnd=calendar.getEventEnd(event);var resizeLocation; // zoned event date properties. falsy if invalid resize
	// Tracks mouse movement over the *grid's* coordinate map
	var dragListener=new HitDragListener(this,{distance:5,scroll:view.opt('dragScroll'),subjectEl:el,dragStart:function dragStart(ev){_this.triggerSegMouseout(seg,ev); // ensure a mouseout on the manipulated event has been reported
	_this.segResizeStart(seg,ev);},hitOver:function hitOver(hit,isOrig,origHit){var origHitSpan=_this.getHitSpan(origHit);var hitSpan=_this.getHitSpan(hit);resizeLocation=isStart?_this.computeEventStartResize(origHitSpan,hitSpan,event):_this.computeEventEndResize(origHitSpan,hitSpan,event);if(resizeLocation){if(!calendar.isEventSpanAllowed(_this.eventToSpan(resizeLocation),event)){disableCursor();resizeLocation=null;} // no change? (TODO: how does this work with timezones?)
	else if(resizeLocation.start.isSame(event.start)&&resizeLocation.end.isSame(eventEnd)){resizeLocation=null;}}if(resizeLocation){view.hideEvent(event);_this.renderEventResize(resizeLocation,seg);}},hitOut:function hitOut(){ // called before mouse moves to a different hit OR moved out of all hits
	resizeLocation=null;},hitDone:function hitDone(){ // resets the rendering to show the original event
	_this.unrenderEventResize();view.showEvent(event);enableCursor();},dragStop:function dragStop(ev){_this.segResizeStop(seg,ev);if(resizeLocation){ // valid date to resize to?
	view.reportEventResize(event,resizeLocation,this.largeUnit,el,ev);}}});dragListener.mousedown(ev); // start listening, which will eventually lead to a dragStart
	}, // Called before event segment resizing starts
	segResizeStart:function segResizeStart(seg,ev){this.isResizingSeg=true;this.view.trigger('eventResizeStart',seg.el[0],seg.event,ev,{}); // last argument is jqui dummy
	}, // Called after event segment resizing stops
	segResizeStop:function segResizeStop(seg,ev){this.isResizingSeg=false;this.view.trigger('eventResizeStop',seg.el[0],seg.event,ev,{}); // last argument is jqui dummy
	}, // Returns new date-information for an event segment being resized from its start
	computeEventStartResize:function computeEventStartResize(startSpan,endSpan,event){return this.computeEventResize('start',startSpan,endSpan,event);}, // Returns new date-information for an event segment being resized from its end
	computeEventEndResize:function computeEventEndResize(startSpan,endSpan,event){return this.computeEventResize('end',startSpan,endSpan,event);}, // Returns new zoned date information for an event segment being resized from its start OR end
	// `type` is either 'start' or 'end'.
	// DOES NOT consider overlap/constraint.
	computeEventResize:function computeEventResize(type,startSpan,endSpan,event){var calendar=this.view.calendar;var delta=this.diffDates(endSpan[type],startSpan[type]);var resizeLocation; // zoned event date properties
	var defaultDuration; // build original values to work from, guaranteeing a start and end
	resizeLocation={start:event.start.clone(),end:calendar.getEventEnd(event),allDay:event.allDay}; // if an all-day event was in a timed area and was resized to a time, adjust start/end to have times
	if(resizeLocation.allDay&&durationHasTime(delta)){resizeLocation.allDay=false;calendar.normalizeEventTimes(resizeLocation);}resizeLocation[type].add(delta); // apply delta to start or end
	// if the event was compressed too small, find a new reasonable duration for it
	if(!resizeLocation.start.isBefore(resizeLocation.end)){defaultDuration=this.minResizeDuration||( // TODO: hack
	event.allDay?calendar.defaultAllDayEventDuration:calendar.defaultTimedEventDuration);if(type=='start'){ // resizing the start?
	resizeLocation.start=resizeLocation.end.clone().subtract(defaultDuration);}else { // resizing the end?
	resizeLocation.end=resizeLocation.start.clone().add(defaultDuration);}}return resizeLocation;}, // Renders a visual indication of an event being resized.
	// `range` has the updated dates of the event. `seg` is the original segment object involved in the drag.
	renderEventResize:function renderEventResize(range,seg){ // subclasses must implement
	}, // Unrenders a visual indication of an event being resized.
	unrenderEventResize:function unrenderEventResize(){ // subclasses must implement
	}, /* Rendering Utils
		------------------------------------------------------------------------------------------------------------------*/ // Compute the text that should be displayed on an event's element.
	// `range` can be the Event object itself, or something range-like, with at least a `start`.
	// If event times are disabled, or the event has no time, will return a blank string.
	// If not specified, formatStr will default to the eventTimeFormat setting,
	// and displayEnd will default to the displayEventEnd setting.
	getEventTimeText:function getEventTimeText(range,formatStr,displayEnd){if(formatStr==null){formatStr=this.eventTimeFormat;}if(displayEnd==null){displayEnd=this.displayEventEnd;}if(this.displayEventTime&&range.start.hasTime()){if(displayEnd&&range.end){return this.view.formatRange(range,formatStr);}else {return range.start.format(formatStr);}}return '';}, // Generic utility for generating the HTML classNames for an event segment's element
	getSegClasses:function getSegClasses(seg,isDraggable,isResizable){var event=seg.event;var classes=['fc-event',seg.isStart?'fc-start':'fc-not-start',seg.isEnd?'fc-end':'fc-not-end'].concat(event.className,event.source?event.source.className:[]);if(isDraggable){classes.push('fc-draggable');}if(isResizable){classes.push('fc-resizable');}return classes;}, // Utility for generating event skin-related CSS properties
	getSegSkinCss:function getSegSkinCss(seg){var event=seg.event;var view=this.view;var source=event.source||{};var eventColor=event.color;var sourceColor=source.color;var optionColor=view.opt('eventColor');return {'background-color':event.backgroundColor||eventColor||source.backgroundColor||sourceColor||view.opt('eventBackgroundColor')||optionColor,'border-color':event.borderColor||eventColor||source.borderColor||sourceColor||view.opt('eventBorderColor')||optionColor,color:event.textColor||source.textColor||view.opt('eventTextColor')};}, /* Converting events -> eventRange -> eventSpan -> eventSegs
		------------------------------------------------------------------------------------------------------------------*/ // Generates an array of segments for the given single event
	// Can accept an event "location" as well (which only has start/end and no allDay)
	eventToSegs:function eventToSegs(event){return this.eventsToSegs([event]);},eventToSpan:function eventToSpan(event){return this.eventToSpans(event)[0];}, // Generates spans (always unzoned) for the given event.
	// Does not do any inverting for inverse-background events.
	// Can accept an event "location" as well (which only has start/end and no allDay)
	eventToSpans:function eventToSpans(event){var range=this.eventToRange(event);return this.eventRangeToSpans(range,event);}, // Converts an array of event objects into an array of event segment objects.
	// A custom `segSliceFunc` may be given for arbitrarily slicing up events.
	// Doesn't guarantee an order for the resulting array.
	eventsToSegs:function eventsToSegs(allEvents,segSliceFunc){var _this=this;var eventsById=groupEventsById(allEvents);var segs=[];$.each(eventsById,function(id,events){var ranges=[];var i;for(i=0;i<events.length;i++){ranges.push(_this.eventToRange(events[i]));} // inverse-background events (utilize only the first event in calculations)
	if(isInverseBgEvent(events[0])){ranges=_this.invertRanges(ranges);for(i=0;i<ranges.length;i++){segs.push.apply(segs, // append to
	_this.eventRangeToSegs(ranges[i],events[0],segSliceFunc));}} // normal event ranges
	else {for(i=0;i<ranges.length;i++){segs.push.apply(segs, // append to
	_this.eventRangeToSegs(ranges[i],events[i],segSliceFunc));}}});return segs;}, // Generates the unzoned start/end dates an event appears to occupy
	// Can accept an event "location" as well (which only has start/end and no allDay)
	eventToRange:function eventToRange(event){return {start:event.start.clone().stripZone(),end:(event.end?event.end.clone(): // derive the end from the start and allDay. compute allDay if necessary
	this.view.calendar.getDefaultEventEnd(event.allDay!=null?event.allDay:!event.start.hasTime(),event.start)).stripZone()};}, // Given an event's range (unzoned start/end), and the event itself,
	// slice into segments (using the segSliceFunc function if specified)
	eventRangeToSegs:function eventRangeToSegs(range,event,segSliceFunc){var spans=this.eventRangeToSpans(range,event);var segs=[];var i;for(i=0;i<spans.length;i++){segs.push.apply(segs, // append to
	this.eventSpanToSegs(spans[i],event,segSliceFunc));}return segs;}, // Given an event's unzoned date range, return an array of "span" objects.
	// Subclasses can override.
	eventRangeToSpans:function eventRangeToSpans(range,event){return [$.extend({},range)]; // copy into a single-item array
	}, // Given an event's span (unzoned start/end and other misc data), and the event itself,
	// slices into segments and attaches event-derived properties to them.
	eventSpanToSegs:function eventSpanToSegs(span,event,segSliceFunc){var segs=segSliceFunc?segSliceFunc(span):this.spanToSegs(span);var i,seg;for(i=0;i<segs.length;i++){seg=segs[i];seg.event=event;seg.eventStartMS=+span.start; // TODO: not the best name after making spans unzoned
	seg.eventDurationMS=span.end-span.start;}return segs;}, // Produces a new array of range objects that will cover all the time NOT covered by the given ranges.
	// SIDE EFFECT: will mutate the given array and will use its date references.
	invertRanges:function invertRanges(ranges){var view=this.view;var viewStart=view.start.clone(); // need a copy
	var viewEnd=view.end.clone(); // need a copy
	var inverseRanges=[];var start=viewStart; // the end of the previous range. the start of the new range
	var i,range; // ranges need to be in order. required for our date-walking algorithm
	ranges.sort(compareRanges);for(i=0;i<ranges.length;i++){range=ranges[i]; // add the span of time before the event (if there is any)
	if(range.start>start){ // compare millisecond time (skip any ambig logic)
	inverseRanges.push({start:start,end:range.start});}start=range.end;} // add the span of time after the last event (if there is any)
	if(start<viewEnd){ // compare millisecond time (skip any ambig logic)
	inverseRanges.push({start:start,end:viewEnd});}return inverseRanges;},sortEventSegs:function sortEventSegs(segs){segs.sort(proxy(this,'compareEventSegs'));}, // A cmp function for determining which segments should take visual priority
	compareEventSegs:function compareEventSegs(seg1,seg2){return seg1.eventStartMS-seg2.eventStartMS|| // earlier events go first
	seg2.eventDurationMS-seg1.eventDurationMS|| // tie? longer events go first
	seg2.event.allDay-seg1.event.allDay|| // tie? put all-day events first (booleans cast to 0/1)
	compareByFieldSpecs(seg1.event,seg2.event,this.view.eventOrderSpecs);}}); /* Utilities
	----------------------------------------------------------------------------------------------------------------------*/function isBgEvent(event){ // returns true if background OR inverse-background
	var rendering=getEventRendering(event);return rendering==='background'||rendering==='inverse-background';}FC.isBgEvent=isBgEvent; // export
	function isInverseBgEvent(event){return getEventRendering(event)==='inverse-background';}function getEventRendering(event){return firstDefined((event.source||{}).rendering,event.rendering);}function groupEventsById(events){var eventsById={};var i,event;for(i=0;i<events.length;i++){event=events[i];(eventsById[event._id]||(eventsById[event._id]=[])).push(event);}return eventsById;} // A cmp function for determining which non-inverted "ranges" (see above) happen earlier
	function compareRanges(range1,range2){return range1.start-range2.start; // earlier ranges go first
	} /* External-Dragging-Element Data
	----------------------------------------------------------------------------------------------------------------------*/ // Require all HTML5 data-* attributes used by FullCalendar to have this prefix.
	// A value of '' will query attributes like data-event. A value of 'fc' will query attributes like data-fc-event.
	FC.dataAttrPrefix=''; // Given a jQuery element that might represent a dragged FullCalendar event, returns an intermediate data structure
	// to be used for Event Object creation.
	// A defined `.eventProps`, even when empty, indicates that an event should be created.
	function getDraggedElMeta(el){var prefix=FC.dataAttrPrefix;var eventProps; // properties for creating the event, not related to date/time
	var startTime; // a Duration
	var duration;var stick;if(prefix){prefix+='-';}eventProps=el.data(prefix+'event')||null;if(eventProps){if((typeof eventProps==='undefined'?'undefined':_typeof(eventProps))==='object'){eventProps=$.extend({},eventProps); // make a copy
	}else { // something like 1 or true. still signal event creation
	eventProps={};} // pluck special-cased date/time properties
	startTime=eventProps.start;if(startTime==null){startTime=eventProps.time;} // accept 'time' as well
	duration=eventProps.duration;stick=eventProps.stick;delete eventProps.start;delete eventProps.time;delete eventProps.duration;delete eventProps.stick;} // fallback to standalone attribute values for each of the date/time properties
	if(startTime==null){startTime=el.data(prefix+'start');}if(startTime==null){startTime=el.data(prefix+'time');} // accept 'time' as well
	if(duration==null){duration=el.data(prefix+'duration');}if(stick==null){stick=el.data(prefix+'stick');} // massage into correct data types
	startTime=startTime!=null?moment.duration(startTime):null;duration=duration!=null?moment.duration(duration):null;stick=Boolean(stick);return {eventProps:eventProps,startTime:startTime,duration:duration,stick:stick};};; /*
	A set of rendering and date-related methods for a visual component comprised of one or more rows of day columns.
	Prerequisite: the object being mixed into needs to be a *Grid*
	*/var DayTableMixin=FC.DayTableMixin={breakOnWeeks:false, // should create a new row for each week?
	dayDates:null, // whole-day dates for each column. left to right
	dayIndices:null, // for each day from start, the offset
	daysPerRow:null,rowCnt:null,colCnt:null,colHeadFormat:null, // Populates internal variables used for date calculation and rendering
	updateDayTable:function updateDayTable(){var view=this.view;var date=this.start.clone();var dayIndex=-1;var dayIndices=[];var dayDates=[];var daysPerRow;var firstDay;var rowCnt;while(date.isBefore(this.end)){ // loop each day from start to end
	if(view.isHiddenDay(date)){dayIndices.push(dayIndex+0.5); // mark that it's between indices
	}else {dayIndex++;dayIndices.push(dayIndex);dayDates.push(date.clone());}date.add(1,'days');}if(this.breakOnWeeks){ // count columns until the day-of-week repeats
	firstDay=dayDates[0].day();for(daysPerRow=1;daysPerRow<dayDates.length;daysPerRow++){if(dayDates[daysPerRow].day()==firstDay){break;}}rowCnt=Math.ceil(dayDates.length/daysPerRow);}else {rowCnt=1;daysPerRow=dayDates.length;}this.dayDates=dayDates;this.dayIndices=dayIndices;this.daysPerRow=daysPerRow;this.rowCnt=rowCnt;this.updateDayTableCols();}, // Computes and assigned the colCnt property and updates any options that may be computed from it
	updateDayTableCols:function updateDayTableCols(){this.colCnt=this.computeColCnt();this.colHeadFormat=this.view.opt('columnFormat')||this.computeColHeadFormat();}, // Determines how many columns there should be in the table
	computeColCnt:function computeColCnt(){return this.daysPerRow;}, // Computes the ambiguously-timed moment for the given cell
	getCellDate:function getCellDate(row,col){return this.dayDates[this.getCellDayIndex(row,col)].clone();}, // Computes the ambiguously-timed date range for the given cell
	getCellRange:function getCellRange(row,col){var start=this.getCellDate(row,col);var end=start.clone().add(1,'days');return {start:start,end:end};}, // Returns the number of day cells, chronologically, from the first of the grid (0-based)
	getCellDayIndex:function getCellDayIndex(row,col){return row*this.daysPerRow+this.getColDayIndex(col);}, // Returns the numner of day cells, chronologically, from the first cell in *any given row*
	getColDayIndex:function getColDayIndex(col){if(this.isRTL){return this.colCnt-1-col;}else {return col;}}, // Given a date, returns its chronolocial cell-index from the first cell of the grid.
	// If the date lies between cells (because of hiddenDays), returns a floating-point value between offsets.
	// If before the first offset, returns a negative number.
	// If after the last offset, returns an offset past the last cell offset.
	// Only works for *start* dates of cells. Will not work for exclusive end dates for cells.
	getDateDayIndex:function getDateDayIndex(date){var dayIndices=this.dayIndices;var dayOffset=date.diff(this.start,'days');if(dayOffset<0){return dayIndices[0]-1;}else if(dayOffset>=dayIndices.length){return dayIndices[dayIndices.length-1]+1;}else {return dayIndices[dayOffset];}}, /* Options
		------------------------------------------------------------------------------------------------------------------*/ // Computes a default column header formatting string if `colFormat` is not explicitly defined
	computeColHeadFormat:function computeColHeadFormat(){ // if more than one week row, or if there are a lot of columns with not much space,
	// put just the day numbers will be in each cell
	if(this.rowCnt>1||this.colCnt>10){return 'ddd'; // "Sat"
	} // multiple days, so full single date string WON'T be in title text
	else if(this.colCnt>1){return this.view.opt('dayOfMonthFormat'); // "Sat 12/10"
	} // single day, so full single date string will probably be in title text
	else {return 'dddd'; // "Saturday"
	}}, /* Slicing
		------------------------------------------------------------------------------------------------------------------*/ // Slices up a date range into a segment for every week-row it intersects with
	sliceRangeByRow:function sliceRangeByRow(range){var daysPerRow=this.daysPerRow;var normalRange=this.view.computeDayRange(range); // make whole-day range, considering nextDayThreshold
	var rangeFirst=this.getDateDayIndex(normalRange.start); // inclusive first index
	var rangeLast=this.getDateDayIndex(normalRange.end.clone().subtract(1,'days')); // inclusive last index
	var segs=[];var row;var rowFirst,rowLast; // inclusive day-index range for current row
	var segFirst,segLast; // inclusive day-index range for segment
	for(row=0;row<this.rowCnt;row++){rowFirst=row*daysPerRow;rowLast=rowFirst+daysPerRow-1; // intersect segment's offset range with the row's
	segFirst=Math.max(rangeFirst,rowFirst);segLast=Math.min(rangeLast,rowLast); // deal with in-between indices
	segFirst=Math.ceil(segFirst); // in-between starts round to next cell
	segLast=Math.floor(segLast); // in-between ends round to prev cell
	if(segFirst<=segLast){ // was there any intersection with the current row?
	segs.push({row:row, // normalize to start of row
	firstRowDayIndex:segFirst-rowFirst,lastRowDayIndex:segLast-rowFirst, // must be matching integers to be the segment's start/end
	isStart:segFirst===rangeFirst,isEnd:segLast===rangeLast});}}return segs;}, // Slices up a date range into a segment for every day-cell it intersects with.
	// TODO: make more DRY with sliceRangeByRow somehow.
	sliceRangeByDay:function sliceRangeByDay(range){var daysPerRow=this.daysPerRow;var normalRange=this.view.computeDayRange(range); // make whole-day range, considering nextDayThreshold
	var rangeFirst=this.getDateDayIndex(normalRange.start); // inclusive first index
	var rangeLast=this.getDateDayIndex(normalRange.end.clone().subtract(1,'days')); // inclusive last index
	var segs=[];var row;var rowFirst,rowLast; // inclusive day-index range for current row
	var i;var segFirst,segLast; // inclusive day-index range for segment
	for(row=0;row<this.rowCnt;row++){rowFirst=row*daysPerRow;rowLast=rowFirst+daysPerRow-1;for(i=rowFirst;i<=rowLast;i++){ // intersect segment's offset range with the row's
	segFirst=Math.max(rangeFirst,i);segLast=Math.min(rangeLast,i); // deal with in-between indices
	segFirst=Math.ceil(segFirst); // in-between starts round to next cell
	segLast=Math.floor(segLast); // in-between ends round to prev cell
	if(segFirst<=segLast){ // was there any intersection with the current row?
	segs.push({row:row, // normalize to start of row
	firstRowDayIndex:segFirst-rowFirst,lastRowDayIndex:segLast-rowFirst, // must be matching integers to be the segment's start/end
	isStart:segFirst===rangeFirst,isEnd:segLast===rangeLast});}}}return segs;}, /* Header Rendering
		------------------------------------------------------------------------------------------------------------------*/renderHeadHtml:function renderHeadHtml(){var view=this.view;return ''+'<div class="fc-row '+view.widgetHeaderClass+'">'+'<table>'+'<thead>'+this.renderHeadTrHtml()+'</thead>'+'</table>'+'</div>';},renderHeadIntroHtml:function renderHeadIntroHtml(){return this.renderIntroHtml(); // fall back to generic
	},renderHeadTrHtml:function renderHeadTrHtml(){return ''+'<tr>'+(this.isRTL?'':this.renderHeadIntroHtml())+this.renderHeadDateCellsHtml()+(this.isRTL?this.renderHeadIntroHtml():'')+'</tr>';},renderHeadDateCellsHtml:function renderHeadDateCellsHtml(){var htmls=[];var col,date;for(col=0;col<this.colCnt;col++){date=this.getCellDate(0,col);htmls.push(this.renderHeadDateCellHtml(date));}return htmls.join('');}, // TODO: when internalApiVersion, accept an object for HTML attributes
	// (colspan should be no different)
	renderHeadDateCellHtml:function renderHeadDateCellHtml(date,colspan,otherAttrs){var view=this.view;return ''+'<th class="fc-day-header '+view.widgetHeaderClass+' fc-'+dayIDs[date.day()]+'"'+(this.rowCnt==1?' data-date="'+date.format('YYYY-MM-DD')+'"':'')+(colspan>1?' colspan="'+colspan+'"':'')+(otherAttrs?' '+otherAttrs:'')+'>'+htmlEscape(date.format(this.colHeadFormat))+'</th>';}, /* Background Rendering
		------------------------------------------------------------------------------------------------------------------*/renderBgTrHtml:function renderBgTrHtml(row){return ''+'<tr>'+(this.isRTL?'':this.renderBgIntroHtml(row))+this.renderBgCellsHtml(row)+(this.isRTL?this.renderBgIntroHtml(row):'')+'</tr>';},renderBgIntroHtml:function renderBgIntroHtml(row){return this.renderIntroHtml(); // fall back to generic
	},renderBgCellsHtml:function renderBgCellsHtml(row){var htmls=[];var col,date;for(col=0;col<this.colCnt;col++){date=this.getCellDate(row,col);htmls.push(this.renderBgCellHtml(date));}return htmls.join('');},renderBgCellHtml:function renderBgCellHtml(date,otherAttrs){var view=this.view;var classes=this.getDayClasses(date);classes.unshift('fc-day',view.widgetContentClass);return '<td class="'+classes.join(' ')+'"'+' data-date="'+date.format('YYYY-MM-DD')+'"'+( // if date has a time, won't format it
	otherAttrs?' '+otherAttrs:'')+'></td>';}, /* Generic
		------------------------------------------------------------------------------------------------------------------*/ // Generates the default HTML intro for any row. User classes should override
	renderIntroHtml:function renderIntroHtml(){}, // TODO: a generic method for dealing with <tr>, RTL, intro
	// when increment internalApiVersion
	// wrapTr (scheduler)
	/* Utils
		------------------------------------------------------------------------------------------------------------------*/ // Applies the generic "intro" and "outro" HTML to the given cells.
	// Intro means the leftmost cell when the calendar is LTR and the rightmost cell when RTL. Vice-versa for outro.
	bookendCells:function bookendCells(trEl){var introHtml=this.renderIntroHtml();if(introHtml){if(this.isRTL){trEl.append(introHtml);}else {trEl.prepend(introHtml);}}}};;; /* A component that renders a grid of whole-days that runs horizontally. There can be multiple rows, one per week.
	----------------------------------------------------------------------------------------------------------------------*/var DayGrid=FC.DayGrid=Grid.extend(DayTableMixin,{numbersVisible:false, // should render a row for day/week numbers? set by outside view. TODO: make internal
	bottomCoordPadding:0, // hack for extending the hit area for the last row of the coordinate grid
	rowEls:null, // set of fake row elements
	cellEls:null, // set of whole-day elements comprising the row's background
	helperEls:null, // set of cell skeleton elements for rendering the mock event "helper"
	rowCoordCache:null,colCoordCache:null, // Renders the rows and columns into the component's `this.el`, which should already be assigned.
	// isRigid determins whether the individual rows should ignore the contents and be a constant height.
	// Relies on the view's colCnt and rowCnt. In the future, this component should probably be self-sufficient.
	renderDates:function renderDates(isRigid){var view=this.view;var rowCnt=this.rowCnt;var colCnt=this.colCnt;var html='';var row;var col;for(row=0;row<rowCnt;row++){html+=this.renderDayRowHtml(row,isRigid);}this.el.html(html);this.rowEls=this.el.find('.fc-row');this.cellEls=this.el.find('.fc-day');this.rowCoordCache=new CoordCache({els:this.rowEls,isVertical:true});this.colCoordCache=new CoordCache({els:this.cellEls.slice(0,this.colCnt), // only the first row
	isHorizontal:true}); // trigger dayRender with each cell's element
	for(row=0;row<rowCnt;row++){for(col=0;col<colCnt;col++){view.trigger('dayRender',null,this.getCellDate(row,col),this.getCellEl(row,col));}}},unrenderDates:function unrenderDates(){this.removeSegPopover();},renderBusinessHours:function renderBusinessHours(){var events=this.view.calendar.getBusinessHoursEvents(true); // wholeDay=true
	var segs=this.eventsToSegs(events);this.renderFill('businessHours',segs,'bgevent');}, // Generates the HTML for a single row, which is a div that wraps a table.
	// `row` is the row number.
	renderDayRowHtml:function renderDayRowHtml(row,isRigid){var view=this.view;var classes=['fc-row','fc-week',view.widgetContentClass];if(isRigid){classes.push('fc-rigid');}return ''+'<div class="'+classes.join(' ')+'">'+'<div class="fc-bg">'+'<table>'+this.renderBgTrHtml(row)+'</table>'+'</div>'+'<div class="fc-content-skeleton">'+'<table>'+(this.numbersVisible?'<thead>'+this.renderNumberTrHtml(row)+'</thead>':'')+'</table>'+'</div>'+'</div>';}, /* Grid Number Rendering
		------------------------------------------------------------------------------------------------------------------*/renderNumberTrHtml:function renderNumberTrHtml(row){return ''+'<tr>'+(this.isRTL?'':this.renderNumberIntroHtml(row))+this.renderNumberCellsHtml(row)+(this.isRTL?this.renderNumberIntroHtml(row):'')+'</tr>';},renderNumberIntroHtml:function renderNumberIntroHtml(row){return this.renderIntroHtml();},renderNumberCellsHtml:function renderNumberCellsHtml(row){var htmls=[];var col,date;for(col=0;col<this.colCnt;col++){date=this.getCellDate(row,col);htmls.push(this.renderNumberCellHtml(date));}return htmls.join('');}, // Generates the HTML for the <td>s of the "number" row in the DayGrid's content skeleton.
	// The number row will only exist if either day numbers or week numbers are turned on.
	renderNumberCellHtml:function renderNumberCellHtml(date){var classes;if(!this.view.dayNumbersVisible){ // if there are week numbers but not day numbers
	return '<td/>'; //  will create an empty space above events :(
	}classes=this.getDayClasses(date);classes.unshift('fc-day-number');return ''+'<td class="'+classes.join(' ')+'" data-date="'+date.format()+'">'+date.date()+'</td>';}, /* Options
		------------------------------------------------------------------------------------------------------------------*/ // Computes a default event time formatting string if `timeFormat` is not explicitly defined
	computeEventTimeFormat:function computeEventTimeFormat(){return this.view.opt('extraSmallTimeFormat'); // like "6p" or "6:30p"
	}, // Computes a default `displayEventEnd` value if one is not expliclty defined
	computeDisplayEventEnd:function computeDisplayEventEnd(){return this.colCnt==1; // we'll likely have space if there's only one day
	}, /* Dates
		------------------------------------------------------------------------------------------------------------------*/rangeUpdated:function rangeUpdated(){this.updateDayTable();}, // Slices up the given span (unzoned start/end with other misc data) into an array of segments
	spanToSegs:function spanToSegs(span){var segs=this.sliceRangeByRow(span);var i,seg;for(i=0;i<segs.length;i++){seg=segs[i];if(this.isRTL){seg.leftCol=this.daysPerRow-1-seg.lastRowDayIndex;seg.rightCol=this.daysPerRow-1-seg.firstRowDayIndex;}else {seg.leftCol=seg.firstRowDayIndex;seg.rightCol=seg.lastRowDayIndex;}}return segs;}, /* Hit System
		------------------------------------------------------------------------------------------------------------------*/prepareHits:function prepareHits(){this.colCoordCache.build();this.rowCoordCache.build();this.rowCoordCache.bottoms[this.rowCnt-1]+=this.bottomCoordPadding; // hack
	},releaseHits:function releaseHits(){this.colCoordCache.clear();this.rowCoordCache.clear();},queryHit:function queryHit(leftOffset,topOffset){var col=this.colCoordCache.getHorizontalIndex(leftOffset);var row=this.rowCoordCache.getVerticalIndex(topOffset);if(row!=null&&col!=null){return this.getCellHit(row,col);}},getHitSpan:function getHitSpan(hit){return this.getCellRange(hit.row,hit.col);},getHitEl:function getHitEl(hit){return this.getCellEl(hit.row,hit.col);}, /* Cell System
		------------------------------------------------------------------------------------------------------------------*/ // FYI: the first column is the leftmost column, regardless of date
	getCellHit:function getCellHit(row,col){return {row:row,col:col,component:this, // needed unfortunately :(
	left:this.colCoordCache.getLeftOffset(col),right:this.colCoordCache.getRightOffset(col),top:this.rowCoordCache.getTopOffset(row),bottom:this.rowCoordCache.getBottomOffset(row)};},getCellEl:function getCellEl(row,col){return this.cellEls.eq(row*this.colCnt+col);}, /* Event Drag Visualization
		------------------------------------------------------------------------------------------------------------------*/ // TODO: move to DayGrid.event, similar to what we did with Grid's drag methods
	// Renders a visual indication of an event or external element being dragged.
	// `eventLocation` has zoned start and end (optional)
	renderDrag:function renderDrag(eventLocation,seg){ // always render a highlight underneath
	this.renderHighlight(this.eventToSpan(eventLocation)); // if a segment from the same calendar but another component is being dragged, render a helper event
	if(seg&&!seg.el.closest(this.el).length){this.renderEventLocationHelper(eventLocation,seg);this.applyDragOpacity(this.helperEls);return true; // a helper has been rendered
	}}, // Unrenders any visual indication of a hovering event
	unrenderDrag:function unrenderDrag(){this.unrenderHighlight();this.unrenderHelper();}, /* Event Resize Visualization
		------------------------------------------------------------------------------------------------------------------*/ // Renders a visual indication of an event being resized
	renderEventResize:function renderEventResize(eventLocation,seg){this.renderHighlight(this.eventToSpan(eventLocation));this.renderEventLocationHelper(eventLocation,seg);}, // Unrenders a visual indication of an event being resized
	unrenderEventResize:function unrenderEventResize(){this.unrenderHighlight();this.unrenderHelper();}, /* Event Helper
		------------------------------------------------------------------------------------------------------------------*/ // Renders a mock "helper" event. `sourceSeg` is the associated internal segment object. It can be null.
	renderHelper:function renderHelper(event,sourceSeg){var helperNodes=[];var segs=this.eventToSegs(event);var rowStructs;segs=this.renderFgSegEls(segs); // assigns each seg's el and returns a subset of segs that were rendered
	rowStructs=this.renderSegRows(segs); // inject each new event skeleton into each associated row
	this.rowEls.each(function(row,rowNode){var rowEl=$(rowNode); // the .fc-row
	var skeletonEl=$('<div class="fc-helper-skeleton"><table/></div>'); // will be absolutely positioned
	var skeletonTop; // If there is an original segment, match the top position. Otherwise, put it at the row's top level
	if(sourceSeg&&sourceSeg.row===row){skeletonTop=sourceSeg.el.position().top;}else {skeletonTop=rowEl.find('.fc-content-skeleton tbody').position().top;}skeletonEl.css('top',skeletonTop).find('table').append(rowStructs[row].tbodyEl);rowEl.append(skeletonEl);helperNodes.push(skeletonEl[0]);});this.helperEls=$(helperNodes); // array -> jQuery set
	}, // Unrenders any visual indication of a mock helper event
	unrenderHelper:function unrenderHelper(){if(this.helperEls){this.helperEls.remove();this.helperEls=null;}}, /* Fill System (highlight, background events, business hours)
		------------------------------------------------------------------------------------------------------------------*/fillSegTag:'td', // override the default tag name
	// Renders a set of rectangles over the given segments of days.
	// Only returns segments that successfully rendered.
	renderFill:function renderFill(type,segs,className){var nodes=[];var i,seg;var skeletonEl;segs=this.renderFillSegEls(type,segs); // assignes `.el` to each seg. returns successfully rendered segs
	for(i=0;i<segs.length;i++){seg=segs[i];skeletonEl=this.renderFillRow(type,seg,className);this.rowEls.eq(seg.row).append(skeletonEl);nodes.push(skeletonEl[0]);}this.elsByFill[type]=$(nodes);return segs;}, // Generates the HTML needed for one row of a fill. Requires the seg's el to be rendered.
	renderFillRow:function renderFillRow(type,seg,className){var colCnt=this.colCnt;var startCol=seg.leftCol;var endCol=seg.rightCol+1;var skeletonEl;var trEl;className=className||type.toLowerCase();skeletonEl=$('<div class="fc-'+className+'-skeleton">'+'<table><tr/></table>'+'</div>');trEl=skeletonEl.find('tr');if(startCol>0){trEl.append('<td colspan="'+startCol+'"/>');}trEl.append(seg.el.attr('colspan',endCol-startCol));if(endCol<colCnt){trEl.append('<td colspan="'+(colCnt-endCol)+'"/>');}this.bookendCells(trEl);return skeletonEl;}});;; /* Event-rendering methods for the DayGrid class
	----------------------------------------------------------------------------------------------------------------------*/DayGrid.mixin({rowStructs:null, // an array of objects, each holding information about a row's foreground event-rendering
	// Unrenders all events currently rendered on the grid
	unrenderEvents:function unrenderEvents(){this.removeSegPopover(); // removes the "more.." events popover
	Grid.prototype.unrenderEvents.apply(this,arguments); // calls the super-method
	}, // Retrieves all rendered segment objects currently rendered on the grid
	getEventSegs:function getEventSegs(){return Grid.prototype.getEventSegs.call(this) // get the segments from the super-method
	.concat(this.popoverSegs||[]); // append the segments from the "more..." popover
	}, // Renders the given background event segments onto the grid
	renderBgSegs:function renderBgSegs(segs){ // don't render timed background events
	var allDaySegs=$.grep(segs,function(seg){return seg.event.allDay;});return Grid.prototype.renderBgSegs.call(this,allDaySegs); // call the super-method
	}, // Renders the given foreground event segments onto the grid
	renderFgSegs:function renderFgSegs(segs){var rowStructs; // render an `.el` on each seg
	// returns a subset of the segs. segs that were actually rendered
	segs=this.renderFgSegEls(segs);rowStructs=this.rowStructs=this.renderSegRows(segs); // append to each row's content skeleton
	this.rowEls.each(function(i,rowNode){$(rowNode).find('.fc-content-skeleton > table').append(rowStructs[i].tbodyEl);});return segs; // return only the segs that were actually rendered
	}, // Unrenders all currently rendered foreground event segments
	unrenderFgSegs:function unrenderFgSegs(){var rowStructs=this.rowStructs||[];var rowStruct;while(rowStruct=rowStructs.pop()){rowStruct.tbodyEl.remove();}this.rowStructs=null;}, // Uses the given events array to generate <tbody> elements that should be appended to each row's content skeleton.
	// Returns an array of rowStruct objects (see the bottom of `renderSegRow`).
	// PRECONDITION: each segment shoud already have a rendered and assigned `.el`
	renderSegRows:function renderSegRows(segs){var rowStructs=[];var segRows;var row;segRows=this.groupSegRows(segs); // group into nested arrays
	// iterate each row of segment groupings
	for(row=0;row<segRows.length;row++){rowStructs.push(this.renderSegRow(row,segRows[row]));}return rowStructs;}, // Builds the HTML to be used for the default element for an individual segment
	fgSegHtml:function fgSegHtml(seg,disableResizing){var view=this.view;var event=seg.event;var isDraggable=view.isEventDraggable(event);var isResizableFromStart=!disableResizing&&event.allDay&&seg.isStart&&view.isEventResizableFromStart(event);var isResizableFromEnd=!disableResizing&&event.allDay&&seg.isEnd&&view.isEventResizableFromEnd(event);var classes=this.getSegClasses(seg,isDraggable,isResizableFromStart||isResizableFromEnd);var skinCss=cssToStr(this.getSegSkinCss(seg));var timeHtml='';var timeText;var titleHtml;classes.unshift('fc-day-grid-event','fc-h-event'); // Only display a timed events time if it is the starting segment
	if(seg.isStart){timeText=this.getEventTimeText(event);if(timeText){timeHtml='<span class="fc-time">'+htmlEscape(timeText)+'</span>';}}titleHtml='<span class="fc-title">'+(htmlEscape(event.title||'')||'&nbsp;')+ // we always want one line of height
	'</span>';return '<a class="'+classes.join(' ')+'"'+(event.url?' href="'+htmlEscape(event.url)+'"':'')+(skinCss?' style="'+skinCss+'"':'')+'>'+'<div class="fc-content">'+(this.isRTL?titleHtml+' '+timeHtml: // put a natural space in between
	timeHtml+' '+titleHtml //
	)+'</div>'+(isResizableFromStart?'<div class="fc-resizer fc-start-resizer" />':'')+(isResizableFromEnd?'<div class="fc-resizer fc-end-resizer" />':'')+'</a>';}, // Given a row # and an array of segments all in the same row, render a <tbody> element, a skeleton that contains
	// the segments. Returns object with a bunch of internal data about how the render was calculated.
	// NOTE: modifies rowSegs
	renderSegRow:function renderSegRow(row,rowSegs){var colCnt=this.colCnt;var segLevels=this.buildSegLevels(rowSegs); // group into sub-arrays of levels
	var levelCnt=Math.max(1,segLevels.length); // ensure at least one level
	var tbody=$('<tbody/>');var segMatrix=[]; // lookup for which segments are rendered into which level+col cells
	var cellMatrix=[]; // lookup for all <td> elements of the level+col matrix
	var loneCellMatrix=[]; // lookup for <td> elements that only take up a single column
	var i,levelSegs;var col;var tr;var j,seg;var td; // populates empty cells from the current column (`col`) to `endCol`
	function emptyCellsUntil(endCol){while(col<endCol){ // try to grab a cell from the level above and extend its rowspan. otherwise, create a fresh cell
	td=(loneCellMatrix[i-1]||[])[col];if(td){td.attr('rowspan',parseInt(td.attr('rowspan')||1,10)+1);}else {td=$('<td/>');tr.append(td);}cellMatrix[i][col]=td;loneCellMatrix[i][col]=td;col++;}}for(i=0;i<levelCnt;i++){ // iterate through all levels
	levelSegs=segLevels[i];col=0;tr=$('<tr/>');segMatrix.push([]);cellMatrix.push([]);loneCellMatrix.push([]); // levelCnt might be 1 even though there are no actual levels. protect against this.
	// this single empty row is useful for styling.
	if(levelSegs){for(j=0;j<levelSegs.length;j++){ // iterate through segments in level
	seg=levelSegs[j];emptyCellsUntil(seg.leftCol); // create a container that occupies or more columns. append the event element.
	td=$('<td class="fc-event-container"/>').append(seg.el);if(seg.leftCol!=seg.rightCol){td.attr('colspan',seg.rightCol-seg.leftCol+1);}else { // a single-column segment
	loneCellMatrix[i][col]=td;}while(col<=seg.rightCol){cellMatrix[i][col]=td;segMatrix[i][col]=seg;col++;}tr.append(td);}}emptyCellsUntil(colCnt); // finish off the row
	this.bookendCells(tr);tbody.append(tr);}return { // a "rowStruct"
	row:row, // the row number
	tbodyEl:tbody,cellMatrix:cellMatrix,segMatrix:segMatrix,segLevels:segLevels,segs:rowSegs};}, // Stacks a flat array of segments, which are all assumed to be in the same row, into subarrays of vertical levels.
	// NOTE: modifies segs
	buildSegLevels:function buildSegLevels(segs){var levels=[];var i,seg;var j; // Give preference to elements with certain criteria, so they have
	// a chance to be closer to the top.
	this.sortEventSegs(segs);for(i=0;i<segs.length;i++){seg=segs[i]; // loop through levels, starting with the topmost, until the segment doesn't collide with other segments
	for(j=0;j<levels.length;j++){if(!isDaySegCollision(seg,levels[j])){break;}} // `j` now holds the desired subrow index
	seg.level=j; // create new level array if needed and append segment
	(levels[j]||(levels[j]=[])).push(seg);} // order segments left-to-right. very important if calendar is RTL
	for(j=0;j<levels.length;j++){levels[j].sort(compareDaySegCols);}return levels;}, // Given a flat array of segments, return an array of sub-arrays, grouped by each segment's row
	groupSegRows:function groupSegRows(segs){var segRows=[];var i;for(i=0;i<this.rowCnt;i++){segRows.push([]);}for(i=0;i<segs.length;i++){segRows[segs[i].row].push(segs[i]);}return segRows;}}); // Computes whether two segments' columns collide. They are assumed to be in the same row.
	function isDaySegCollision(seg,otherSegs){var i,otherSeg;for(i=0;i<otherSegs.length;i++){otherSeg=otherSegs[i];if(otherSeg.leftCol<=seg.rightCol&&otherSeg.rightCol>=seg.leftCol){return true;}}return false;} // A cmp function for determining the leftmost event
	function compareDaySegCols(a,b){return a.leftCol-b.leftCol;};; /* Methods relate to limiting the number events for a given day on a DayGrid
	----------------------------------------------------------------------------------------------------------------------*/ // NOTE: all the segs being passed around in here are foreground segs
	DayGrid.mixin({segPopover:null, // the Popover that holds events that can't fit in a cell. null when not visible
	popoverSegs:null, // an array of segment objects that the segPopover holds. null when not visible
	removeSegPopover:function removeSegPopover(){if(this.segPopover){this.segPopover.hide(); // in handler, will call segPopover's removeElement
	}}, // Limits the number of "levels" (vertically stacking layers of events) for each row of the grid.
	// `levelLimit` can be false (don't limit), a number, or true (should be computed).
	limitRows:function limitRows(levelLimit){var rowStructs=this.rowStructs||[];var row; // row #
	var rowLevelLimit;for(row=0;row<rowStructs.length;row++){this.unlimitRow(row);if(!levelLimit){rowLevelLimit=false;}else if(typeof levelLimit==='number'){rowLevelLimit=levelLimit;}else {rowLevelLimit=this.computeRowLevelLimit(row);}if(rowLevelLimit!==false){this.limitRow(row,rowLevelLimit);}}}, // Computes the number of levels a row will accomodate without going outside its bounds.
	// Assumes the row is "rigid" (maintains a constant height regardless of what is inside).
	// `row` is the row number.
	computeRowLevelLimit:function computeRowLevelLimit(row){var rowEl=this.rowEls.eq(row); // the containing "fake" row div
	var rowHeight=rowEl.height(); // TODO: cache somehow?
	var trEls=this.rowStructs[row].tbodyEl.children();var i,trEl;var trHeight;function iterInnerHeights(i,childNode){trHeight=Math.max(trHeight,$(childNode).outerHeight());} // Reveal one level <tr> at a time and stop when we find one out of bounds
	for(i=0;i<trEls.length;i++){trEl=trEls.eq(i).removeClass('fc-limited'); // reset to original state (reveal)
	// with rowspans>1 and IE8, trEl.outerHeight() would return the height of the largest cell,
	// so instead, find the tallest inner content element.
	trHeight=0;trEl.find('> td > :first-child').each(iterInnerHeights);if(trEl.position().top+trHeight>rowHeight){return i;}}return false; // should not limit at all
	}, // Limits the given grid row to the maximum number of levels and injects "more" links if necessary.
	// `row` is the row number.
	// `levelLimit` is a number for the maximum (inclusive) number of levels allowed.
	limitRow:function limitRow(row,levelLimit){var _this=this;var rowStruct=this.rowStructs[row];var moreNodes=[]; // array of "more" <a> links and <td> DOM nodes
	var col=0; // col #, left-to-right (not chronologically)
	var levelSegs; // array of segment objects in the last allowable level, ordered left-to-right
	var cellMatrix; // a matrix (by level, then column) of all <td> jQuery elements in the row
	var limitedNodes; // array of temporarily hidden level <tr> and segment <td> DOM nodes
	var i,seg;var segsBelow; // array of segment objects below `seg` in the current `col`
	var totalSegsBelow; // total number of segments below `seg` in any of the columns `seg` occupies
	var colSegsBelow; // array of segment arrays, below seg, one for each column (offset from segs's first column)
	var td,rowspan;var segMoreNodes; // array of "more" <td> cells that will stand-in for the current seg's cell
	var j;var moreTd,moreWrap,moreLink; // Iterates through empty level cells and places "more" links inside if need be
	function emptyCellsUntil(endCol){ // goes from current `col` to `endCol`
	while(col<endCol){segsBelow=_this.getCellSegs(row,col,levelLimit);if(segsBelow.length){td=cellMatrix[levelLimit-1][col];moreLink=_this.renderMoreLink(row,col,segsBelow);moreWrap=$('<div/>').append(moreLink);td.append(moreWrap);moreNodes.push(moreWrap[0]);}col++;}}if(levelLimit&&levelLimit<rowStruct.segLevels.length){ // is it actually over the limit?
	levelSegs=rowStruct.segLevels[levelLimit-1];cellMatrix=rowStruct.cellMatrix;limitedNodes=rowStruct.tbodyEl.children().slice(levelLimit) // get level <tr> elements past the limit
	.addClass('fc-limited').get(); // hide elements and get a simple DOM-nodes array
	// iterate though segments in the last allowable level
	for(i=0;i<levelSegs.length;i++){seg=levelSegs[i];emptyCellsUntil(seg.leftCol); // process empty cells before the segment
	// determine *all* segments below `seg` that occupy the same columns
	colSegsBelow=[];totalSegsBelow=0;while(col<=seg.rightCol){segsBelow=this.getCellSegs(row,col,levelLimit);colSegsBelow.push(segsBelow);totalSegsBelow+=segsBelow.length;col++;}if(totalSegsBelow){ // do we need to replace this segment with one or many "more" links?
	td=cellMatrix[levelLimit-1][seg.leftCol]; // the segment's parent cell
	rowspan=td.attr('rowspan')||1;segMoreNodes=[]; // make a replacement <td> for each column the segment occupies. will be one for each colspan
	for(j=0;j<colSegsBelow.length;j++){moreTd=$('<td class="fc-more-cell"/>').attr('rowspan',rowspan);segsBelow=colSegsBelow[j];moreLink=this.renderMoreLink(row,seg.leftCol+j,[seg].concat(segsBelow) // count seg as hidden too
	);moreWrap=$('<div/>').append(moreLink);moreTd.append(moreWrap);segMoreNodes.push(moreTd[0]);moreNodes.push(moreTd[0]);}td.addClass('fc-limited').after($(segMoreNodes)); // hide original <td> and inject replacements
	limitedNodes.push(td[0]);}}emptyCellsUntil(this.colCnt); // finish off the level
	rowStruct.moreEls=$(moreNodes); // for easy undoing later
	rowStruct.limitedEls=$(limitedNodes); // for easy undoing later
	}}, // Reveals all levels and removes all "more"-related elements for a grid's row.
	// `row` is a row number.
	unlimitRow:function unlimitRow(row){var rowStruct=this.rowStructs[row];if(rowStruct.moreEls){rowStruct.moreEls.remove();rowStruct.moreEls=null;}if(rowStruct.limitedEls){rowStruct.limitedEls.removeClass('fc-limited');rowStruct.limitedEls=null;}}, // Renders an <a> element that represents hidden event element for a cell.
	// Responsible for attaching click handler as well.
	renderMoreLink:function renderMoreLink(row,col,hiddenSegs){var _this=this;var view=this.view;return $('<a class="fc-more"/>').text(this.getMoreLinkText(hiddenSegs.length)).on('click',function(ev){var clickOption=view.opt('eventLimitClick');var date=_this.getCellDate(row,col);var moreEl=$(this);var dayEl=_this.getCellEl(row,col);var allSegs=_this.getCellSegs(row,col); // rescope the segments to be within the cell's date
	var reslicedAllSegs=_this.resliceDaySegs(allSegs,date);var reslicedHiddenSegs=_this.resliceDaySegs(hiddenSegs,date);if(typeof clickOption==='function'){ // the returned value can be an atomic option
	clickOption=view.trigger('eventLimitClick',null,{date:date,dayEl:dayEl,moreEl:moreEl,segs:reslicedAllSegs,hiddenSegs:reslicedHiddenSegs},ev);}if(clickOption==='popover'){_this.showSegPopover(row,col,moreEl,reslicedAllSegs);}else if(typeof clickOption==='string'){ // a view name
	view.calendar.zoomTo(date,clickOption);}});}, // Reveals the popover that displays all events within a cell
	showSegPopover:function showSegPopover(row,col,moreLink,segs){var _this=this;var view=this.view;var moreWrap=moreLink.parent(); // the <div> wrapper around the <a>
	var topEl; // the element we want to match the top coordinate of
	var options;if(this.rowCnt==1){topEl=view.el; // will cause the popover to cover any sort of header
	}else {topEl=this.rowEls.eq(row); // will align with top of row
	}options={className:'fc-more-popover',content:this.renderSegPopoverContent(row,col,segs),parentEl:this.el,top:topEl.offset().top,autoHide:true, // when the user clicks elsewhere, hide the popover
	viewportConstrain:view.opt('popoverViewportConstrain'),hide:function hide(){ // kill everything when the popover is hidden
	_this.segPopover.removeElement();_this.segPopover=null;_this.popoverSegs=null;}}; // Determine horizontal coordinate.
	// We use the moreWrap instead of the <td> to avoid border confusion.
	if(this.isRTL){options.right=moreWrap.offset().left+moreWrap.outerWidth()+1; // +1 to be over cell border
	}else {options.left=moreWrap.offset().left-1; // -1 to be over cell border
	}this.segPopover=new Popover(options);this.segPopover.show();}, // Builds the inner DOM contents of the segment popover
	renderSegPopoverContent:function renderSegPopoverContent(row,col,segs){var view=this.view;var isTheme=view.opt('theme');var title=this.getCellDate(row,col).format(view.opt('dayPopoverFormat'));var content=$('<div class="fc-header '+view.widgetHeaderClass+'">'+'<span class="fc-close '+(isTheme?'ui-icon ui-icon-closethick':'fc-icon fc-icon-x')+'"></span>'+'<span class="fc-title">'+htmlEscape(title)+'</span>'+'<div class="fc-clear"/>'+'</div>'+'<div class="fc-body '+view.widgetContentClass+'">'+'<div class="fc-event-container"></div>'+'</div>');var segContainer=content.find('.fc-event-container');var i; // render each seg's `el` and only return the visible segs
	segs=this.renderFgSegEls(segs,true); // disableResizing=true
	this.popoverSegs=segs;for(i=0;i<segs.length;i++){ // because segments in the popover are not part of a grid coordinate system, provide a hint to any
	// grids that want to do drag-n-drop about which cell it came from
	this.prepareHits();segs[i].hit=this.getCellHit(row,col);this.releaseHits();segContainer.append(segs[i].el);}return content;}, // Given the events within an array of segment objects, reslice them to be in a single day
	resliceDaySegs:function resliceDaySegs(segs,dayDate){ // build an array of the original events
	var events=$.map(segs,function(seg){return seg.event;});var dayStart=dayDate.clone();var dayEnd=dayStart.clone().add(1,'days');var dayRange={start:dayStart,end:dayEnd}; // slice the events with a custom slicing function
	segs=this.eventsToSegs(events,function(range){var seg=intersectRanges(range,dayRange); // undefind if no intersection
	return seg?[seg]:[]; // must return an array of segments
	}); // force an order because eventsToSegs doesn't guarantee one
	this.sortEventSegs(segs);return segs;}, // Generates the text that should be inside a "more" link, given the number of events it represents
	getMoreLinkText:function getMoreLinkText(num){var opt=this.view.opt('eventLimitText');if(typeof opt==='function'){return opt(num);}else {return '+'+num+' '+opt;}}, // Returns segments within a given cell.
	// If `startLevel` is specified, returns only events including and below that level. Otherwise returns all segs.
	getCellSegs:function getCellSegs(row,col,startLevel){var segMatrix=this.rowStructs[row].segMatrix;var level=startLevel||0;var segs=[];var seg;while(level<segMatrix.length){seg=segMatrix[level][col];if(seg){segs.push(seg);}level++;}return segs;}});;; /* A component that renders one or more columns of vertical time slots
	----------------------------------------------------------------------------------------------------------------------*/ // We mixin DayTable, even though there is only a single row of days
	var TimeGrid=FC.TimeGrid=Grid.extend(DayTableMixin,{slotDuration:null, // duration of a "slot", a distinct time segment on given day, visualized by lines
	snapDuration:null, // granularity of time for dragging and selecting
	snapsPerSlot:null,minTime:null, // Duration object that denotes the first visible time of any given day
	maxTime:null, // Duration object that denotes the exclusive visible end time of any given day
	labelFormat:null, // formatting string for times running along vertical axis
	labelInterval:null, // duration of how often a label should be displayed for a slot
	colEls:null, // cells elements in the day-row background
	slatEls:null, // elements running horizontally across all columns
	nowIndicatorEls:null,colCoordCache:null,slatCoordCache:null,constructor:function constructor(){Grid.apply(this,arguments); // call the super-constructor
	this.processOptions();}, // Renders the time grid into `this.el`, which should already be assigned.
	// Relies on the view's colCnt. In the future, this component should probably be self-sufficient.
	renderDates:function renderDates(){this.el.html(this.renderHtml());this.colEls=this.el.find('.fc-day');this.slatEls=this.el.find('.fc-slats tr');this.colCoordCache=new CoordCache({els:this.colEls,isHorizontal:true});this.slatCoordCache=new CoordCache({els:this.slatEls,isVertical:true});this.renderContentSkeleton();}, // Renders the basic HTML skeleton for the grid
	renderHtml:function renderHtml(){return ''+'<div class="fc-bg">'+'<table>'+this.renderBgTrHtml(0)+ // row=0
	'</table>'+'</div>'+'<div class="fc-slats">'+'<table>'+this.renderSlatRowHtml()+'</table>'+'</div>';}, // Generates the HTML for the horizontal "slats" that run width-wise. Has a time axis on a side. Depends on RTL.
	renderSlatRowHtml:function renderSlatRowHtml(){var view=this.view;var isRTL=this.isRTL;var html='';var slotTime=moment.duration(+this.minTime); // wish there was .clone() for durations
	var slotDate; // will be on the view's first day, but we only care about its time
	var isLabeled;var axisHtml; // Calculate the time for each slot
	while(slotTime<this.maxTime){slotDate=this.start.clone().time(slotTime);isLabeled=isInt(divideDurationByDuration(slotTime,this.labelInterval));axisHtml='<td class="fc-axis fc-time '+view.widgetContentClass+'" '+view.axisStyleAttr()+'>'+(isLabeled?'<span>'+ // for matchCellWidths
	htmlEscape(slotDate.format(this.labelFormat))+'</span>':'')+'</td>';html+='<tr data-time="'+slotDate.format('HH:mm:ss')+'"'+(isLabeled?'':' class="fc-minor"')+'>'+(!isRTL?axisHtml:'')+'<td class="'+view.widgetContentClass+'"/>'+(isRTL?axisHtml:'')+"</tr>";slotTime.add(this.slotDuration);}return html;}, /* Options
		------------------------------------------------------------------------------------------------------------------*/ // Parses various options into properties of this object
	processOptions:function processOptions(){var view=this.view;var slotDuration=view.opt('slotDuration');var snapDuration=view.opt('snapDuration');var input;slotDuration=moment.duration(slotDuration);snapDuration=snapDuration?moment.duration(snapDuration):slotDuration;this.slotDuration=slotDuration;this.snapDuration=snapDuration;this.snapsPerSlot=slotDuration/snapDuration; // TODO: ensure an integer multiple?
	this.minResizeDuration=snapDuration; // hack
	this.minTime=moment.duration(view.opt('minTime'));this.maxTime=moment.duration(view.opt('maxTime')); // might be an array value (for TimelineView).
	// if so, getting the most granular entry (the last one probably).
	input=view.opt('slotLabelFormat');if($.isArray(input)){input=input[input.length-1];}this.labelFormat=input||view.opt('axisFormat')|| // deprecated
	view.opt('smallTimeFormat'); // the computed default
	input=view.opt('slotLabelInterval');this.labelInterval=input?moment.duration(input):this.computeLabelInterval(slotDuration);}, // Computes an automatic value for slotLabelInterval
	computeLabelInterval:function computeLabelInterval(slotDuration){var i;var labelInterval;var slotsPerLabel; // find the smallest stock label interval that results in more than one slots-per-label
	for(i=AGENDA_STOCK_SUB_DURATIONS.length-1;i>=0;i--){labelInterval=moment.duration(AGENDA_STOCK_SUB_DURATIONS[i]);slotsPerLabel=divideDurationByDuration(labelInterval,slotDuration);if(isInt(slotsPerLabel)&&slotsPerLabel>1){return labelInterval;}}return moment.duration(slotDuration); // fall back. clone
	}, // Computes a default event time formatting string if `timeFormat` is not explicitly defined
	computeEventTimeFormat:function computeEventTimeFormat(){return this.view.opt('noMeridiemTimeFormat'); // like "6:30" (no AM/PM)
	}, // Computes a default `displayEventEnd` value if one is not expliclty defined
	computeDisplayEventEnd:function computeDisplayEventEnd(){return true;}, /* Hit System
		------------------------------------------------------------------------------------------------------------------*/prepareHits:function prepareHits(){this.colCoordCache.build();this.slatCoordCache.build();},releaseHits:function releaseHits(){this.colCoordCache.clear(); // NOTE: don't clear slatCoordCache because we rely on it for computeTimeTop
	},queryHit:function queryHit(leftOffset,topOffset){var snapsPerSlot=this.snapsPerSlot;var colCoordCache=this.colCoordCache;var slatCoordCache=this.slatCoordCache;var colIndex=colCoordCache.getHorizontalIndex(leftOffset);var slatIndex=slatCoordCache.getVerticalIndex(topOffset);if(colIndex!=null&&slatIndex!=null){var slatTop=slatCoordCache.getTopOffset(slatIndex);var slatHeight=slatCoordCache.getHeight(slatIndex);var partial=(topOffset-slatTop)/slatHeight; // floating point number between 0 and 1
	var localSnapIndex=Math.floor(partial*snapsPerSlot); // the snap # relative to start of slat
	var snapIndex=slatIndex*snapsPerSlot+localSnapIndex;var snapTop=slatTop+localSnapIndex/snapsPerSlot*slatHeight;var snapBottom=slatTop+(localSnapIndex+1)/snapsPerSlot*slatHeight;return {col:colIndex,snap:snapIndex,component:this, // needed unfortunately :(
	left:colCoordCache.getLeftOffset(colIndex),right:colCoordCache.getRightOffset(colIndex),top:snapTop,bottom:snapBottom};}},getHitSpan:function getHitSpan(hit){var start=this.getCellDate(0,hit.col); // row=0
	var time=this.computeSnapTime(hit.snap); // pass in the snap-index
	var end;start.time(time);end=start.clone().add(this.snapDuration);return {start:start,end:end};},getHitEl:function getHitEl(hit){return this.colEls.eq(hit.col);}, /* Dates
		------------------------------------------------------------------------------------------------------------------*/rangeUpdated:function rangeUpdated(){this.updateDayTable();}, // Given a row number of the grid, representing a "snap", returns a time (Duration) from its start-of-day
	computeSnapTime:function computeSnapTime(snapIndex){return moment.duration(this.minTime+this.snapDuration*snapIndex);}, // Slices up the given span (unzoned start/end with other misc data) into an array of segments
	spanToSegs:function spanToSegs(span){var segs=this.sliceRangeByTimes(span);var i;for(i=0;i<segs.length;i++){if(this.isRTL){segs[i].col=this.daysPerRow-1-segs[i].dayIndex;}else {segs[i].col=segs[i].dayIndex;}}return segs;},sliceRangeByTimes:function sliceRangeByTimes(range){var segs=[];var seg;var dayIndex;var dayDate;var dayRange;for(dayIndex=0;dayIndex<this.daysPerRow;dayIndex++){dayDate=this.dayDates[dayIndex].clone(); // TODO: better API for this?
	dayRange={start:dayDate.clone().time(this.minTime),end:dayDate.clone().time(this.maxTime)};seg=intersectRanges(range,dayRange); // both will be ambig timezone
	if(seg){seg.dayIndex=dayIndex;segs.push(seg);}}return segs;}, /* Coordinates
		------------------------------------------------------------------------------------------------------------------*/updateSize:function updateSize(isResize){ // NOT a standard Grid method
	this.slatCoordCache.build();if(isResize){this.updateSegVerticals([].concat(this.fgSegs||[],this.bgSegs||[],this.businessSegs||[]));}}, // Computes the top coordinate, relative to the bounds of the grid, of the given date.
	// A `startOfDayDate` must be given for avoiding ambiguity over how to treat midnight.
	computeDateTop:function computeDateTop(date,startOfDayDate){return this.computeTimeTop(moment.duration(date-startOfDayDate.clone().stripTime()));}, // Computes the top coordinate, relative to the bounds of the grid, of the given time (a Duration).
	computeTimeTop:function computeTimeTop(time){var len=this.slatEls.length;var slatCoverage=(time-this.minTime)/this.slotDuration; // floating-point value of # of slots covered
	var slatIndex;var slatRemainder; // compute a floating-point number for how many slats should be progressed through.
	// from 0 to number of slats (inclusive)
	// constrained because minTime/maxTime might be customized.
	slatCoverage=Math.max(0,slatCoverage);slatCoverage=Math.min(len,slatCoverage); // an integer index of the furthest whole slat
	// from 0 to number slats (*exclusive*, so len-1)
	slatIndex=Math.floor(slatCoverage);slatIndex=Math.min(slatIndex,len-1); // how much further through the slatIndex slat (from 0.0-1.0) must be covered in addition.
	// could be 1.0 if slatCoverage is covering *all* the slots
	slatRemainder=slatCoverage-slatIndex;return this.slatCoordCache.getTopPosition(slatIndex)+this.slatCoordCache.getHeight(slatIndex)*slatRemainder;}, /* Event Drag Visualization
		------------------------------------------------------------------------------------------------------------------*/ // Renders a visual indication of an event being dragged over the specified date(s).
	// A returned value of `true` signals that a mock "helper" event has been rendered.
	renderDrag:function renderDrag(eventLocation,seg){if(seg){ // if there is event information for this drag, render a helper event
	this.renderEventLocationHelper(eventLocation,seg);for(var i=0;i<this.helperSegs.length;i++){this.applyDragOpacity(this.helperSegs[i].el);}return true; // signal that a helper has been rendered
	}else { // otherwise, just render a highlight
	this.renderHighlight(this.eventToSpan(eventLocation));}}, // Unrenders any visual indication of an event being dragged
	unrenderDrag:function unrenderDrag(){this.unrenderHelper();this.unrenderHighlight();}, /* Event Resize Visualization
		------------------------------------------------------------------------------------------------------------------*/ // Renders a visual indication of an event being resized
	renderEventResize:function renderEventResize(eventLocation,seg){this.renderEventLocationHelper(eventLocation,seg);}, // Unrenders any visual indication of an event being resized
	unrenderEventResize:function unrenderEventResize(){this.unrenderHelper();}, /* Event Helper
		------------------------------------------------------------------------------------------------------------------*/ // Renders a mock "helper" event. `sourceSeg` is the original segment object and might be null (an external drag)
	renderHelper:function renderHelper(event,sourceSeg){this.renderHelperSegs(this.eventToSegs(event),sourceSeg);}, // Unrenders any mock helper event
	unrenderHelper:function unrenderHelper(){this.unrenderHelperSegs();}, /* Business Hours
		------------------------------------------------------------------------------------------------------------------*/renderBusinessHours:function renderBusinessHours(){var events=this.view.calendar.getBusinessHoursEvents();var segs=this.eventsToSegs(events);this.renderBusinessSegs(segs);},unrenderBusinessHours:function unrenderBusinessHours(){this.unrenderBusinessSegs();}, /* Now Indicator
		------------------------------------------------------------------------------------------------------------------*/getNowIndicatorUnit:function getNowIndicatorUnit(){return 'minute'; // will refresh on the minute
	},renderNowIndicator:function renderNowIndicator(date){ // seg system might be overkill, but it handles scenario where line needs to be rendered
	//  more than once because of columns with the same date (resources columns for example)
	var segs=this.spanToSegs({start:date,end:date});var top=this.computeDateTop(date,date);var nodes=[];var i; // render lines within the columns
	for(i=0;i<segs.length;i++){nodes.push($('<div class="fc-now-indicator fc-now-indicator-line"></div>').css('top',top).appendTo(this.colContainerEls.eq(segs[i].col))[0]);} // render an arrow over the axis
	if(segs.length>0){ // is the current time in view?
	nodes.push($('<div class="fc-now-indicator fc-now-indicator-arrow"></div>').css('top',top).appendTo(this.el.find('.fc-content-skeleton'))[0]);}this.nowIndicatorEls=$(nodes);},unrenderNowIndicator:function unrenderNowIndicator(){if(this.nowIndicatorEls){this.nowIndicatorEls.remove();this.nowIndicatorEls=null;}}, /* Selection
		------------------------------------------------------------------------------------------------------------------*/ // Renders a visual indication of a selection. Overrides the default, which was to simply render a highlight.
	renderSelection:function renderSelection(span){if(this.view.opt('selectHelper')){ // this setting signals that a mock helper event should be rendered
	// normally acceps an eventLocation, span has a start/end, which is good enough
	this.renderEventLocationHelper(span);}else {this.renderHighlight(span);}}, // Unrenders any visual indication of a selection
	unrenderSelection:function unrenderSelection(){this.unrenderHelper();this.unrenderHighlight();}, /* Highlight
		------------------------------------------------------------------------------------------------------------------*/renderHighlight:function renderHighlight(span){this.renderHighlightSegs(this.spanToSegs(span));},unrenderHighlight:function unrenderHighlight(){this.unrenderHighlightSegs();}});;; /* Methods for rendering SEGMENTS, pieces of content that live on the view
	 ( this file is no longer just for events )
	----------------------------------------------------------------------------------------------------------------------*/TimeGrid.mixin({colContainerEls:null, // containers for each column
	// inner-containers for each column where different types of segs live
	fgContainerEls:null,bgContainerEls:null,helperContainerEls:null,highlightContainerEls:null,businessContainerEls:null, // arrays of different types of displayed segments
	fgSegs:null,bgSegs:null,helperSegs:null,highlightSegs:null,businessSegs:null, // Renders the DOM that the view's content will live in
	renderContentSkeleton:function renderContentSkeleton(){var cellHtml='';var i;var skeletonEl;for(i=0;i<this.colCnt;i++){cellHtml+='<td>'+'<div class="fc-content-col">'+'<div class="fc-event-container fc-helper-container"></div>'+'<div class="fc-event-container"></div>'+'<div class="fc-highlight-container"></div>'+'<div class="fc-bgevent-container"></div>'+'<div class="fc-business-container"></div>'+'</div>'+'</td>';}skeletonEl=$('<div class="fc-content-skeleton">'+'<table>'+'<tr>'+cellHtml+'</tr>'+'</table>'+'</div>');this.colContainerEls=skeletonEl.find('.fc-content-col');this.helperContainerEls=skeletonEl.find('.fc-helper-container');this.fgContainerEls=skeletonEl.find('.fc-event-container:not(.fc-helper-container)');this.bgContainerEls=skeletonEl.find('.fc-bgevent-container');this.highlightContainerEls=skeletonEl.find('.fc-highlight-container');this.businessContainerEls=skeletonEl.find('.fc-business-container');this.bookendCells(skeletonEl.find('tr')); // TODO: do this on string level
	this.el.append(skeletonEl);}, /* Foreground Events
		------------------------------------------------------------------------------------------------------------------*/renderFgSegs:function renderFgSegs(segs){segs=this.renderFgSegsIntoContainers(segs,this.fgContainerEls);this.fgSegs=segs;return segs; // needed for Grid::renderEvents
	},unrenderFgSegs:function unrenderFgSegs(){this.unrenderNamedSegs('fgSegs');}, /* Foreground Helper Events
		------------------------------------------------------------------------------------------------------------------*/renderHelperSegs:function renderHelperSegs(segs,sourceSeg){var i,seg;var sourceEl;segs=this.renderFgSegsIntoContainers(segs,this.helperContainerEls); // Try to make the segment that is in the same row as sourceSeg look the same
	for(i=0;i<segs.length;i++){seg=segs[i];if(sourceSeg&&sourceSeg.col===seg.col){sourceEl=sourceSeg.el;seg.el.css({left:sourceEl.css('left'),right:sourceEl.css('right'),'margin-left':sourceEl.css('margin-left'),'margin-right':sourceEl.css('margin-right')});}}this.helperSegs=segs;},unrenderHelperSegs:function unrenderHelperSegs(){this.unrenderNamedSegs('helperSegs');}, /* Background Events
		------------------------------------------------------------------------------------------------------------------*/renderBgSegs:function renderBgSegs(segs){segs=this.renderFillSegEls('bgEvent',segs); // TODO: old fill system
	this.updateSegVerticals(segs);this.attachSegsByCol(this.groupSegsByCol(segs),this.bgContainerEls);this.bgSegs=segs;return segs; // needed for Grid::renderEvents
	},unrenderBgSegs:function unrenderBgSegs(){this.unrenderNamedSegs('bgSegs');}, /* Highlight
		------------------------------------------------------------------------------------------------------------------*/renderHighlightSegs:function renderHighlightSegs(segs){segs=this.renderFillSegEls('highlight',segs); // TODO: old fill system
	this.updateSegVerticals(segs);this.attachSegsByCol(this.groupSegsByCol(segs),this.highlightContainerEls);this.highlightSegs=segs;},unrenderHighlightSegs:function unrenderHighlightSegs(){this.unrenderNamedSegs('highlightSegs');}, /* Business Hours
		------------------------------------------------------------------------------------------------------------------*/renderBusinessSegs:function renderBusinessSegs(segs){segs=this.renderFillSegEls('businessHours',segs); // TODO: old fill system
	this.updateSegVerticals(segs);this.attachSegsByCol(this.groupSegsByCol(segs),this.businessContainerEls);this.businessSegs=segs;},unrenderBusinessSegs:function unrenderBusinessSegs(){this.unrenderNamedSegs('businessSegs');}, /* Seg Rendering Utils
		------------------------------------------------------------------------------------------------------------------*/ // Given a flat array of segments, return an array of sub-arrays, grouped by each segment's col
	groupSegsByCol:function groupSegsByCol(segs){var segsByCol=[];var i;for(i=0;i<this.colCnt;i++){segsByCol.push([]);}for(i=0;i<segs.length;i++){segsByCol[segs[i].col].push(segs[i]);}return segsByCol;}, // Given segments grouped by column, insert the segments' elements into a parallel array of container
	// elements, each living within a column.
	attachSegsByCol:function attachSegsByCol(segsByCol,containerEls){var col;var segs;var i;for(col=0;col<this.colCnt;col++){ // iterate each column grouping
	segs=segsByCol[col];for(i=0;i<segs.length;i++){containerEls.eq(col).append(segs[i].el);}}}, // Given the name of a property of `this` object, assumed to be an array of segments,
	// loops through each segment and removes from DOM. Will null-out the property afterwards.
	unrenderNamedSegs:function unrenderNamedSegs(propName){var segs=this[propName];var i;if(segs){for(i=0;i<segs.length;i++){segs[i].el.remove();}this[propName]=null;}}, /* Foreground Event Rendering Utils
		------------------------------------------------------------------------------------------------------------------*/ // Given an array of foreground segments, render a DOM element for each, computes position,
	// and attaches to the column inner-container elements.
	renderFgSegsIntoContainers:function renderFgSegsIntoContainers(segs,containerEls){var segsByCol;var col;segs=this.renderFgSegEls(segs); // will call fgSegHtml
	segsByCol=this.groupSegsByCol(segs);for(col=0;col<this.colCnt;col++){this.updateFgSegCoords(segsByCol[col]);}this.attachSegsByCol(segsByCol,containerEls);return segs;}, // Renders the HTML for a single event segment's default rendering
	fgSegHtml:function fgSegHtml(seg,disableResizing){var view=this.view;var event=seg.event;var isDraggable=view.isEventDraggable(event);var isResizableFromStart=!disableResizing&&seg.isStart&&view.isEventResizableFromStart(event);var isResizableFromEnd=!disableResizing&&seg.isEnd&&view.isEventResizableFromEnd(event);var classes=this.getSegClasses(seg,isDraggable,isResizableFromStart||isResizableFromEnd);var skinCss=cssToStr(this.getSegSkinCss(seg));var timeText;var fullTimeText; // more verbose time text. for the print stylesheet
	var startTimeText; // just the start time text
	classes.unshift('fc-time-grid-event','fc-v-event');if(view.isMultiDayEvent(event)){ // if the event appears to span more than one day...
	// Don't display time text on segments that run entirely through a day.
	// That would appear as midnight-midnight and would look dumb.
	// Otherwise, display the time text for the *segment's* times (like 6pm-midnight or midnight-10am)
	if(seg.isStart||seg.isEnd){timeText=this.getEventTimeText(seg);fullTimeText=this.getEventTimeText(seg,'LT');startTimeText=this.getEventTimeText(seg,null,false); // displayEnd=false
	}}else { // Display the normal time text for the *event's* times
	timeText=this.getEventTimeText(event);fullTimeText=this.getEventTimeText(event,'LT');startTimeText=this.getEventTimeText(event,null,false); // displayEnd=false
	}return '<a class="'+classes.join(' ')+'"'+(event.url?' href="'+htmlEscape(event.url)+'"':'')+(skinCss?' style="'+skinCss+'"':'')+'>'+'<div class="fc-content">'+(timeText?'<div class="fc-time"'+' data-start="'+htmlEscape(startTimeText)+'"'+' data-full="'+htmlEscape(fullTimeText)+'"'+'>'+'<span>'+htmlEscape(timeText)+'</span>'+'</div>':'')+(event.title?'<div class="fc-title">'+htmlEscape(event.title)+'</div>':'')+'</div>'+'<div class="fc-bg"/>'+( /* TODO: write CSS for this
					(isResizableFromStart ?
						'<div class="fc-resizer fc-start-resizer" />' :
						''
						) +
					*/isResizableFromEnd?'<div class="fc-resizer fc-end-resizer" />':'')+'</a>';}, /* Seg Position Utils
		------------------------------------------------------------------------------------------------------------------*/ // Refreshes the CSS top/bottom coordinates for each segment element.
	// Works when called after initial render, after a window resize/zoom for example.
	updateSegVerticals:function updateSegVerticals(segs){this.computeSegVerticals(segs);this.assignSegVerticals(segs);}, // For each segment in an array, computes and assigns its top and bottom properties
	computeSegVerticals:function computeSegVerticals(segs){var i,seg;for(i=0;i<segs.length;i++){seg=segs[i];seg.top=this.computeDateTop(seg.start,seg.start);seg.bottom=this.computeDateTop(seg.end,seg.start);}}, // Given segments that already have their top/bottom properties computed, applies those values to
	// the segments' elements.
	assignSegVerticals:function assignSegVerticals(segs){var i,seg;for(i=0;i<segs.length;i++){seg=segs[i];seg.el.css(this.generateSegVerticalCss(seg));}}, // Generates an object with CSS properties for the top/bottom coordinates of a segment element
	generateSegVerticalCss:function generateSegVerticalCss(seg){return {top:seg.top,bottom:-seg.bottom // flipped because needs to be space beyond bottom edge of event container
	};}, /* Foreground Event Positioning Utils
		------------------------------------------------------------------------------------------------------------------*/ // Given segments that are assumed to all live in the *same column*,
	// compute their verical/horizontal coordinates and assign to their elements.
	updateFgSegCoords:function updateFgSegCoords(segs){this.computeSegVerticals(segs); // horizontals relies on this
	this.computeFgSegHorizontals(segs); // compute horizontal coordinates, z-index's, and reorder the array
	this.assignSegVerticals(segs);this.assignFgSegHorizontals(segs);}, // Given an array of segments that are all in the same column, sets the backwardCoord and forwardCoord on each.
	// NOTE: Also reorders the given array by date!
	computeFgSegHorizontals:function computeFgSegHorizontals(segs){var levels;var level0;var i;this.sortEventSegs(segs); // order by certain criteria
	levels=buildSlotSegLevels(segs);computeForwardSlotSegs(levels);if(level0=levels[0]){for(i=0;i<level0.length;i++){computeSlotSegPressures(level0[i]);}for(i=0;i<level0.length;i++){this.computeFgSegForwardBack(level0[i],0,0);}}}, // Calculate seg.forwardCoord and seg.backwardCoord for the segment, where both values range
	// from 0 to 1. If the calendar is left-to-right, the seg.backwardCoord maps to "left" and
	// seg.forwardCoord maps to "right" (via percentage). Vice-versa if the calendar is right-to-left.
	//
	// The segment might be part of a "series", which means consecutive segments with the same pressure
	// who's width is unknown until an edge has been hit. `seriesBackwardPressure` is the number of
	// segments behind this one in the current series, and `seriesBackwardCoord` is the starting
	// coordinate of the first segment in the series.
	computeFgSegForwardBack:function computeFgSegForwardBack(seg,seriesBackwardPressure,seriesBackwardCoord){var forwardSegs=seg.forwardSegs;var i;if(seg.forwardCoord===undefined){ // not already computed
	if(!forwardSegs.length){ // if there are no forward segments, this segment should butt up against the edge
	seg.forwardCoord=1;}else { // sort highest pressure first
	this.sortForwardSegs(forwardSegs); // this segment's forwardCoord will be calculated from the backwardCoord of the
	// highest-pressure forward segment.
	this.computeFgSegForwardBack(forwardSegs[0],seriesBackwardPressure+1,seriesBackwardCoord);seg.forwardCoord=forwardSegs[0].backwardCoord;} // calculate the backwardCoord from the forwardCoord. consider the series
	seg.backwardCoord=seg.forwardCoord-(seg.forwardCoord-seriesBackwardCoord)/( // available width for series
	seriesBackwardPressure+1); // # of segments in the series
	// use this segment's coordinates to computed the coordinates of the less-pressurized
	// forward segments
	for(i=0;i<forwardSegs.length;i++){this.computeFgSegForwardBack(forwardSegs[i],0,seg.forwardCoord);}}},sortForwardSegs:function sortForwardSegs(forwardSegs){forwardSegs.sort(proxy(this,'compareForwardSegs'));}, // A cmp function for determining which forward segment to rely on more when computing coordinates.
	compareForwardSegs:function compareForwardSegs(seg1,seg2){ // put higher-pressure first
	return seg2.forwardPressure-seg1.forwardPressure|| // put segments that are closer to initial edge first (and favor ones with no coords yet)
	(seg1.backwardCoord||0)-(seg2.backwardCoord||0)|| // do normal sorting...
	this.compareEventSegs(seg1,seg2);}, // Given foreground event segments that have already had their position coordinates computed,
	// assigns position-related CSS values to their elements.
	assignFgSegHorizontals:function assignFgSegHorizontals(segs){var i,seg;for(i=0;i<segs.length;i++){seg=segs[i];seg.el.css(this.generateFgSegHorizontalCss(seg)); // if the height is short, add a className for alternate styling
	if(seg.bottom-seg.top<30){seg.el.addClass('fc-short');}}}, // Generates an object with CSS properties/values that should be applied to an event segment element.
	// Contains important positioning-related properties that should be applied to any event element, customized or not.
	generateFgSegHorizontalCss:function generateFgSegHorizontalCss(seg){var shouldOverlap=this.view.opt('slotEventOverlap');var backwardCoord=seg.backwardCoord; // the left side if LTR. the right side if RTL. floating-point
	var forwardCoord=seg.forwardCoord; // the right side if LTR. the left side if RTL. floating-point
	var props=this.generateSegVerticalCss(seg); // get top/bottom first
	var left; // amount of space from left edge, a fraction of the total width
	var right; // amount of space from right edge, a fraction of the total width
	if(shouldOverlap){ // double the width, but don't go beyond the maximum forward coordinate (1.0)
	forwardCoord=Math.min(1,backwardCoord+(forwardCoord-backwardCoord)*2);}if(this.isRTL){left=1-forwardCoord;right=backwardCoord;}else {left=backwardCoord;right=1-forwardCoord;}props.zIndex=seg.level+1; // convert from 0-base to 1-based
	props.left=left*100+'%';props.right=right*100+'%';if(shouldOverlap&&seg.forwardPressure){ // add padding to the edge so that forward stacked events don't cover the resizer's icon
	props[this.isRTL?'marginLeft':'marginRight']=10*2; // 10 is a guesstimate of the icon's width
	}return props;}}); // Builds an array of segments "levels". The first level will be the leftmost tier of segments if the calendar is
	// left-to-right, or the rightmost if the calendar is right-to-left. Assumes the segments are already ordered by date.
	function buildSlotSegLevels(segs){var levels=[];var i,seg;var j;for(i=0;i<segs.length;i++){seg=segs[i]; // go through all the levels and stop on the first level where there are no collisions
	for(j=0;j<levels.length;j++){if(!computeSlotSegCollisions(seg,levels[j]).length){break;}}seg.level=j;(levels[j]||(levels[j]=[])).push(seg);}return levels;} // For every segment, figure out the other segments that are in subsequent
	// levels that also occupy the same vertical space. Accumulate in seg.forwardSegs
	function computeForwardSlotSegs(levels){var i,level;var j,seg;var k;for(i=0;i<levels.length;i++){level=levels[i];for(j=0;j<level.length;j++){seg=level[j];seg.forwardSegs=[];for(k=i+1;k<levels.length;k++){computeSlotSegCollisions(seg,levels[k],seg.forwardSegs);}}}} // Figure out which path forward (via seg.forwardSegs) results in the longest path until
	// the furthest edge is reached. The number of segments in this path will be seg.forwardPressure
	function computeSlotSegPressures(seg){var forwardSegs=seg.forwardSegs;var forwardPressure=0;var i,forwardSeg;if(seg.forwardPressure===undefined){ // not already computed
	for(i=0;i<forwardSegs.length;i++){forwardSeg=forwardSegs[i]; // figure out the child's maximum forward path
	computeSlotSegPressures(forwardSeg); // either use the existing maximum, or use the child's forward pressure
	// plus one (for the forwardSeg itself)
	forwardPressure=Math.max(forwardPressure,1+forwardSeg.forwardPressure);}seg.forwardPressure=forwardPressure;}} // Find all the segments in `otherSegs` that vertically collide with `seg`.
	// Append into an optionally-supplied `results` array and return.
	function computeSlotSegCollisions(seg,otherSegs,results){results=results||[];for(var i=0;i<otherSegs.length;i++){if(isSlotSegCollision(seg,otherSegs[i])){results.push(otherSegs[i]);}}return results;} // Do these segments occupy the same vertical space?
	function isSlotSegCollision(seg1,seg2){return seg1.bottom>seg2.top&&seg1.top<seg2.bottom;};; /* An abstract class from which other views inherit from
	----------------------------------------------------------------------------------------------------------------------*/var View=FC.View=Class.extend({type:null, // subclass' view name (string)
	name:null, // deprecated. use `type` instead
	title:null, // the text that will be displayed in the header's title
	calendar:null, // owner Calendar object
	options:null, // hash containing all options. already merged with view-specific-options
	el:null, // the view's containing element. set by Calendar
	displaying:null, // a promise representing the state of rendering. null if no render requested
	isSkeletonRendered:false,isEventsRendered:false, // range the view is actually displaying (moments)
	start:null,end:null, // exclusive
	// range the view is formally responsible for (moments)
	// may be different from start/end. for example, a month view might have 1st-31st, excluding padded dates
	intervalStart:null,intervalEnd:null, // exclusive
	intervalDuration:null,intervalUnit:null, // name of largest unit being displayed, like "month" or "week"
	isRTL:false,isSelected:false, // boolean whether a range of time is user-selected or not
	eventOrderSpecs:null, // criteria for ordering events when they have same date/time
	// subclasses can optionally use a scroll container
	scrollerEl:null, // the element that will most likely scroll when content is too tall
	scrollTop:null, // cached vertical scroll value
	// classNames styled by jqui themes
	widgetHeaderClass:null,widgetContentClass:null,highlightStateClass:null, // for date utils, computed from options
	nextDayThreshold:null,isHiddenDayHash:null, // document handlers, bound to `this` object
	documentMousedownProxy:null, // TODO: doesn't work with touch
	// now indicator
	isNowIndicatorRendered:null,initialNowDate:null, // result first getNow call
	initialNowQueriedMs:null, // ms time the getNow was called
	nowIndicatorTimeoutID:null, // for refresh timing of now indicator
	nowIndicatorIntervalID:null, // "
	constructor:function constructor(calendar,type,options,intervalDuration){this.calendar=calendar;this.type=this.name=type; // .name is deprecated
	this.options=options;this.intervalDuration=intervalDuration||moment.duration(1,'day');this.nextDayThreshold=moment.duration(this.opt('nextDayThreshold'));this.initThemingProps();this.initHiddenDays();this.isRTL=this.opt('isRTL');this.eventOrderSpecs=parseFieldSpecs(this.opt('eventOrder'));this.documentMousedownProxy=proxy(this,'documentMousedown');this.initialize();}, // A good place for subclasses to initialize member variables
	initialize:function initialize(){ // subclasses can implement
	}, // Retrieves an option with the given name
	opt:function opt(name){return this.options[name];}, // Triggers handlers that are view-related. Modifies args before passing to calendar.
	trigger:function trigger(name,thisObj){ // arguments beyond thisObj are passed along
	var calendar=this.calendar;return calendar.trigger.apply(calendar,[name,thisObj||this].concat(Array.prototype.slice.call(arguments,2), // arguments beyond thisObj
	[this] // always make the last argument a reference to the view. TODO: deprecate
	));}, /* Dates
		------------------------------------------------------------------------------------------------------------------*/ // Updates all internal dates to center around the given current unzoned date.
	setDate:function setDate(date){this.setRange(this.computeRange(date));}, // Updates all internal dates for displaying the given unzoned range.
	setRange:function setRange(range){$.extend(this,range); // assigns every property to this object's member variables
	this.updateTitle();}, // Given a single current unzoned date, produce information about what range to display.
	// Subclasses can override. Must return all properties.
	computeRange:function computeRange(date){var intervalUnit=computeIntervalUnit(this.intervalDuration);var intervalStart=date.clone().startOf(intervalUnit);var intervalEnd=intervalStart.clone().add(this.intervalDuration);var start,end; // normalize the range's time-ambiguity
	if(/year|month|week|day/.test(intervalUnit)){ // whole-days?
	intervalStart.stripTime();intervalEnd.stripTime();}else { // needs to have a time?
	if(!intervalStart.hasTime()){intervalStart=this.calendar.time(0); // give 00:00 time
	}if(!intervalEnd.hasTime()){intervalEnd=this.calendar.time(0); // give 00:00 time
	}}start=intervalStart.clone();start=this.skipHiddenDays(start);end=intervalEnd.clone();end=this.skipHiddenDays(end,-1,true); // exclusively move backwards
	return {intervalUnit:intervalUnit,intervalStart:intervalStart,intervalEnd:intervalEnd,start:start,end:end};}, // Computes the new date when the user hits the prev button, given the current date
	computePrevDate:function computePrevDate(date){return this.massageCurrentDate(date.clone().startOf(this.intervalUnit).subtract(this.intervalDuration),-1);}, // Computes the new date when the user hits the next button, given the current date
	computeNextDate:function computeNextDate(date){return this.massageCurrentDate(date.clone().startOf(this.intervalUnit).add(this.intervalDuration));}, // Given an arbitrarily calculated current date of the calendar, returns a date that is ensured to be completely
	// visible. `direction` is optional and indicates which direction the current date was being
	// incremented or decremented (1 or -1).
	massageCurrentDate:function massageCurrentDate(date,direction){if(this.intervalDuration.as('days')<=1){ // if the view displays a single day or smaller
	if(this.isHiddenDay(date)){date=this.skipHiddenDays(date,direction);date.startOf('day');}}return date;}, /* Title and Date Formatting
		------------------------------------------------------------------------------------------------------------------*/ // Sets the view's title property to the most updated computed value
	updateTitle:function updateTitle(){this.title=this.computeTitle();}, // Computes what the title at the top of the calendar should be for this view
	computeTitle:function computeTitle(){return this.formatRange({ // in case intervalStart/End has a time, make sure timezone is correct
	start:this.calendar.applyTimezone(this.intervalStart),end:this.calendar.applyTimezone(this.intervalEnd)},this.opt('titleFormat')||this.computeTitleFormat(),this.opt('titleRangeSeparator'));}, // Generates the format string that should be used to generate the title for the current date range.
	// Attempts to compute the most appropriate format if not explicitly specified with `titleFormat`.
	computeTitleFormat:function computeTitleFormat(){if(this.intervalUnit=='year'){return 'YYYY';}else if(this.intervalUnit=='month'){return this.opt('monthYearFormat'); // like "September 2014"
	}else if(this.intervalDuration.as('days')>1){return 'll'; // multi-day range. shorter, like "Sep 9 - 10 2014"
	}else {return 'LL'; // one day. longer, like "September 9 2014"
	}}, // Utility for formatting a range. Accepts a range object, formatting string, and optional separator.
	// Displays all-day ranges naturally, with an inclusive end. Takes the current isRTL into account.
	// The timezones of the dates within `range` will be respected.
	formatRange:function formatRange(range,formatStr,separator){var end=range.end;if(!end.hasTime()){ // all-day?
	end=end.clone().subtract(1); // convert to inclusive. last ms of previous day
	}return _formatRange(range.start,end,formatStr,separator,this.opt('isRTL'));}, /* Rendering
		------------------------------------------------------------------------------------------------------------------*/ // Sets the container element that the view should render inside of.
	// Does other DOM-related initializations.
	setElement:function setElement(el){this.el=el;this.bindGlobalHandlers();}, // Removes the view's container element from the DOM, clearing any content beforehand.
	// Undoes any other DOM-related attachments.
	removeElement:function removeElement(){this.clear(); // clears all content
	// clean up the skeleton
	if(this.isSkeletonRendered){this.unrenderSkeleton();this.isSkeletonRendered=false;}this.unbindGlobalHandlers();this.el.remove(); // NOTE: don't null-out this.el in case the View was destroyed within an API callback.
	// We don't null-out the View's other jQuery element references upon destroy,
	//  so we shouldn't kill this.el either.
	}, // Does everything necessary to display the view centered around the given unzoned date.
	// Does every type of rendering EXCEPT rendering events.
	// Is asychronous and returns a promise.
	display:function display(date){var _this=this;var scrollState=null;if(this.displaying){scrollState=this.queryScroll();}this.calendar.freezeContentHeight();return this.clear().then(function(){ // clear the content first (async)
	return _this.displaying=$.when(_this.displayView(date)) // displayView might return a promise
	.then(function(){_this.forceScroll(_this.computeInitialScroll(scrollState));_this.calendar.unfreezeContentHeight();_this.triggerRender();});});}, // Does everything necessary to clear the content of the view.
	// Clears dates and events. Does not clear the skeleton.
	// Is asychronous and returns a promise.
	clear:function clear(){var _this=this;var displaying=this.displaying;if(displaying){ // previously displayed, or in the process of being displayed?
	return displaying.then(function(){ // wait for the display to finish
	_this.displaying=null;_this.clearEvents();return _this.clearView(); // might return a promise. chain it
	});}else {return $.when(); // an immediately-resolved promise
	}}, // Displays the view's non-event content, such as date-related content or anything required by events.
	// Renders the view's non-content skeleton if necessary.
	// Can be asynchronous and return a promise.
	displayView:function displayView(date){if(!this.isSkeletonRendered){this.renderSkeleton();this.isSkeletonRendered=true;}if(date){this.setDate(date);}if(this.render){this.render(); // TODO: deprecate
	}this.renderDates();this.updateSize();this.renderBusinessHours(); // might need coordinates, so should go after updateSize()
	this.startNowIndicator();}, // Unrenders the view content that was rendered in displayView.
	// Can be asynchronous and return a promise.
	clearView:function clearView(){this.unselect();this.stopNowIndicator();this.triggerUnrender();this.unrenderBusinessHours();this.unrenderDates();if(this.destroy){this.destroy(); // TODO: deprecate
	}}, // Renders the basic structure of the view before any content is rendered
	renderSkeleton:function renderSkeleton(){ // subclasses should implement
	}, // Unrenders the basic structure of the view
	unrenderSkeleton:function unrenderSkeleton(){ // subclasses should implement
	}, // Renders the view's date-related content.
	// Assumes setRange has already been called and the skeleton has already been rendered.
	renderDates:function renderDates(){ // subclasses should implement
	}, // Unrenders the view's date-related content
	unrenderDates:function unrenderDates(){ // subclasses should override
	}, // Signals that the view's content has been rendered
	triggerRender:function triggerRender(){this.trigger('viewRender',this,this,this.el);}, // Signals that the view's content is about to be unrendered
	triggerUnrender:function triggerUnrender(){this.trigger('viewDestroy',this,this,this.el);}, // Binds DOM handlers to elements that reside outside the view container, such as the document
	bindGlobalHandlers:function bindGlobalHandlers(){$(document).on('mousedown',this.documentMousedownProxy);}, // Unbinds DOM handlers from elements that reside outside the view container
	unbindGlobalHandlers:function unbindGlobalHandlers(){$(document).off('mousedown',this.documentMousedownProxy);}, // Initializes internal variables related to theming
	initThemingProps:function initThemingProps(){var tm=this.opt('theme')?'ui':'fc';this.widgetHeaderClass=tm+'-widget-header';this.widgetContentClass=tm+'-widget-content';this.highlightStateClass=tm+'-state-highlight';}, /* Business Hours
		------------------------------------------------------------------------------------------------------------------*/ // Renders business-hours onto the view. Assumes updateSize has already been called.
	renderBusinessHours:function renderBusinessHours(){ // subclasses should implement
	}, // Unrenders previously-rendered business-hours
	unrenderBusinessHours:function unrenderBusinessHours(){ // subclasses should implement
	}, /* Now Indicator
		------------------------------------------------------------------------------------------------------------------*/ // Immediately render the current time indicator and begins re-rendering it at an interval,
	// which is defined by this.getNowIndicatorUnit().
	// TODO: somehow do this for the current whole day's background too
	startNowIndicator:function startNowIndicator(){var _this=this;var unit;var update;var delay; // ms wait value
	if(this.opt('nowIndicator')){unit=this.getNowIndicatorUnit();if(unit){update=proxy(this,'updateNowIndicator'); // bind to `this`
	this.initialNowDate=this.calendar.getNow();this.initialNowQueriedMs=+new Date();this.renderNowIndicator(this.initialNowDate);this.isNowIndicatorRendered=true; // wait until the beginning of the next interval
	delay=this.initialNowDate.clone().startOf(unit).add(1,unit)-this.initialNowDate;this.nowIndicatorTimeoutID=setTimeout(function(){_this.nowIndicatorTimeoutID=null;update();delay=+moment.duration(1,unit);delay=Math.max(100,delay); // prevent too frequent
	_this.nowIndicatorIntervalID=setInterval(update,delay); // update every interval
	},delay);}}}, // rerenders the now indicator, computing the new current time from the amount of time that has passed
	// since the initial getNow call.
	updateNowIndicator:function updateNowIndicator(){if(this.isNowIndicatorRendered){this.unrenderNowIndicator();this.renderNowIndicator(this.initialNowDate.clone().add(new Date()-this.initialNowQueriedMs) // add ms
	);}}, // Immediately unrenders the view's current time indicator and stops any re-rendering timers.
	// Won't cause side effects if indicator isn't rendered.
	stopNowIndicator:function stopNowIndicator(){if(this.isNowIndicatorRendered){if(this.nowIndicatorTimeoutID){clearTimeout(this.nowIndicatorTimeoutID);this.nowIndicatorTimeoutID=null;}if(this.nowIndicatorIntervalID){clearTimeout(this.nowIndicatorIntervalID);this.nowIndicatorIntervalID=null;}this.unrenderNowIndicator();this.isNowIndicatorRendered=false;}}, // Returns a string unit, like 'second' or 'minute' that defined how often the current time indicator
	// should be refreshed. If something falsy is returned, no time indicator is rendered at all.
	getNowIndicatorUnit:function getNowIndicatorUnit(){ // subclasses should implement
	}, // Renders a current time indicator at the given datetime
	renderNowIndicator:function renderNowIndicator(date){ // subclasses should implement
	}, // Undoes the rendering actions from renderNowIndicator
	unrenderNowIndicator:function unrenderNowIndicator(){ // subclasses should implement
	}, /* Dimensions
		------------------------------------------------------------------------------------------------------------------*/ // Refreshes anything dependant upon sizing of the container element of the grid
	updateSize:function updateSize(isResize){var scrollState;if(isResize){scrollState=this.queryScroll();}this.updateHeight(isResize);this.updateWidth(isResize);this.updateNowIndicator();if(isResize){this.setScroll(scrollState);}}, // Refreshes the horizontal dimensions of the calendar
	updateWidth:function updateWidth(isResize){ // subclasses should implement
	}, // Refreshes the vertical dimensions of the calendar
	updateHeight:function updateHeight(isResize){var calendar=this.calendar; // we poll the calendar for height information
	this.setHeight(calendar.getSuggestedViewHeight(),calendar.isHeightAuto());}, // Updates the vertical dimensions of the calendar to the specified height.
	// if `isAuto` is set to true, height becomes merely a suggestion and the view should use its "natural" height.
	setHeight:function setHeight(height,isAuto){ // subclasses should implement
	}, /* Scroller
		------------------------------------------------------------------------------------------------------------------*/ // Given the total height of the view, return the number of pixels that should be used for the scroller.
	// Utility for subclasses.
	computeScrollerHeight:function computeScrollerHeight(totalHeight){var scrollerEl=this.scrollerEl;var both;var otherHeight; // cumulative height of everything that is not the scrollerEl in the view (header+borders)
	both=this.el.add(scrollerEl); // fuckin IE8/9/10/11 sometimes returns 0 for dimensions. this weird hack was the only thing that worked
	both.css({position:'relative', // cause a reflow, which will force fresh dimension recalculation
	left:-1 // ensure reflow in case the el was already relative. negative is less likely to cause new scroll
	});otherHeight=this.el.outerHeight()-scrollerEl.height(); // grab the dimensions
	both.css({position:'',left:''}); // undo hack
	return totalHeight-otherHeight;}, // Computes the initial pre-configured scroll state prior to allowing the user to change it.
	// Given the scroll state from the previous rendering. If first time rendering, given null.
	computeInitialScroll:function computeInitialScroll(previousScrollState){return 0;}, // Retrieves the view's current natural scroll state. Can return an arbitrary format.
	queryScroll:function queryScroll(){if(this.scrollerEl){return this.scrollerEl.scrollTop(); // operates on scrollerEl by default
	}}, // Sets the view's scroll state. Will accept the same format computeInitialScroll and queryScroll produce.
	setScroll:function setScroll(scrollState){if(this.scrollerEl){return this.scrollerEl.scrollTop(scrollState); // operates on scrollerEl by default
	}}, // Sets the scroll state, making sure to overcome any predefined scroll value the browser has in mind
	forceScroll:function forceScroll(scrollState){var _this=this;this.setScroll(scrollState);setTimeout(function(){_this.setScroll(scrollState);},0);}, /* Event Elements / Segments
		------------------------------------------------------------------------------------------------------------------*/ // Does everything necessary to display the given events onto the current view
	displayEvents:function displayEvents(events){var scrollState=this.queryScroll();this.clearEvents();this.renderEvents(events);this.isEventsRendered=true;this.setScroll(scrollState);this.triggerEventRender();}, // Does everything necessary to clear the view's currently-rendered events
	clearEvents:function clearEvents(){var scrollState;if(this.isEventsRendered){ // TODO: optimize: if we know this is part of a displayEvents call, don't queryScroll/setScroll
	scrollState=this.queryScroll();this.triggerEventUnrender();if(this.destroyEvents){this.destroyEvents(); // TODO: deprecate
	}this.unrenderEvents();this.setScroll(scrollState);this.isEventsRendered=false;}}, // Renders the events onto the view.
	renderEvents:function renderEvents(events){ // subclasses should implement
	}, // Removes event elements from the view.
	unrenderEvents:function unrenderEvents(){ // subclasses should implement
	}, // Signals that all events have been rendered
	triggerEventRender:function triggerEventRender(){this.renderedEventSegEach(function(seg){this.trigger('eventAfterRender',seg.event,seg.event,seg.el);});this.trigger('eventAfterAllRender');}, // Signals that all event elements are about to be removed
	triggerEventUnrender:function triggerEventUnrender(){this.renderedEventSegEach(function(seg){this.trigger('eventDestroy',seg.event,seg.event,seg.el);});}, // Given an event and the default element used for rendering, returns the element that should actually be used.
	// Basically runs events and elements through the eventRender hook.
	resolveEventEl:function resolveEventEl(event,el){var custom=this.trigger('eventRender',event,event,el);if(custom===false){ // means don't render at all
	el=null;}else if(custom&&custom!==true){el=$(custom);}return el;}, // Hides all rendered event segments linked to the given event
	showEvent:function showEvent(event){this.renderedEventSegEach(function(seg){seg.el.css('visibility','');},event);}, // Shows all rendered event segments linked to the given event
	hideEvent:function hideEvent(event){this.renderedEventSegEach(function(seg){seg.el.css('visibility','hidden');},event);}, // Iterates through event segments that have been rendered (have an el). Goes through all by default.
	// If the optional `event` argument is specified, only iterates through segments linked to that event.
	// The `this` value of the callback function will be the view.
	renderedEventSegEach:function renderedEventSegEach(func,event){var segs=this.getEventSegs();var i;for(i=0;i<segs.length;i++){if(!event||segs[i].event._id===event._id){if(segs[i].el){func.call(this,segs[i]);}}}}, // Retrieves all the rendered segment objects for the view
	getEventSegs:function getEventSegs(){ // subclasses must implement
	return [];}, /* Event Drag-n-Drop
		------------------------------------------------------------------------------------------------------------------*/ // Computes if the given event is allowed to be dragged by the user
	isEventDraggable:function isEventDraggable(event){var source=event.source||{};return firstDefined(event.startEditable,source.startEditable,this.opt('eventStartEditable'),event.editable,source.editable,this.opt('editable'));}, // Must be called when an event in the view is dropped onto new location.
	// `dropLocation` is an object that contains the new zoned start/end/allDay values for the event.
	reportEventDrop:function reportEventDrop(event,dropLocation,largeUnit,el,ev){var calendar=this.calendar;var mutateResult=calendar.mutateEvent(event,dropLocation,largeUnit);var undoFunc=function undoFunc(){mutateResult.undo();calendar.reportEventChange();};this.triggerEventDrop(event,mutateResult.dateDelta,undoFunc,el,ev);calendar.reportEventChange(); // will rerender events
	}, // Triggers event-drop handlers that have subscribed via the API
	triggerEventDrop:function triggerEventDrop(event,dateDelta,undoFunc,el,ev){this.trigger('eventDrop',el[0],event,dateDelta,undoFunc,ev,{}); // {} = jqui dummy
	}, /* External Element Drag-n-Drop
		------------------------------------------------------------------------------------------------------------------*/ // Must be called when an external element, via jQuery UI, has been dropped onto the calendar.
	// `meta` is the parsed data that has been embedded into the dragging event.
	// `dropLocation` is an object that contains the new zoned start/end/allDay values for the event.
	reportExternalDrop:function reportExternalDrop(meta,dropLocation,el,ev,ui){var eventProps=meta.eventProps;var eventInput;var event; // Try to build an event object and render it. TODO: decouple the two
	if(eventProps){eventInput=$.extend({},eventProps,dropLocation);event=this.calendar.renderEvent(eventInput,meta.stick)[0]; // renderEvent returns an array
	}this.triggerExternalDrop(event,dropLocation,el,ev,ui);}, // Triggers external-drop handlers that have subscribed via the API
	triggerExternalDrop:function triggerExternalDrop(event,dropLocation,el,ev,ui){ // trigger 'drop' regardless of whether element represents an event
	this.trigger('drop',el[0],dropLocation.start,ev,ui);if(event){this.trigger('eventReceive',null,event); // signal an external event landed
	}}, /* Drag-n-Drop Rendering (for both events and external elements)
		------------------------------------------------------------------------------------------------------------------*/ // Renders a visual indication of a event or external-element drag over the given drop zone.
	// If an external-element, seg will be `null`
	renderDrag:function renderDrag(dropLocation,seg){ // subclasses must implement
	}, // Unrenders a visual indication of an event or external-element being dragged.
	unrenderDrag:function unrenderDrag(){ // subclasses must implement
	}, /* Event Resizing
		------------------------------------------------------------------------------------------------------------------*/ // Computes if the given event is allowed to be resized from its starting edge
	isEventResizableFromStart:function isEventResizableFromStart(event){return this.opt('eventResizableFromStart')&&this.isEventResizable(event);}, // Computes if the given event is allowed to be resized from its ending edge
	isEventResizableFromEnd:function isEventResizableFromEnd(event){return this.isEventResizable(event);}, // Computes if the given event is allowed to be resized by the user at all
	isEventResizable:function isEventResizable(event){var source=event.source||{};return firstDefined(event.durationEditable,source.durationEditable,this.opt('eventDurationEditable'),event.editable,source.editable,this.opt('editable'));}, // Must be called when an event in the view has been resized to a new length
	reportEventResize:function reportEventResize(event,resizeLocation,largeUnit,el,ev){var calendar=this.calendar;var mutateResult=calendar.mutateEvent(event,resizeLocation,largeUnit);var undoFunc=function undoFunc(){mutateResult.undo();calendar.reportEventChange();};this.triggerEventResize(event,mutateResult.durationDelta,undoFunc,el,ev);calendar.reportEventChange(); // will rerender events
	}, // Triggers event-resize handlers that have subscribed via the API
	triggerEventResize:function triggerEventResize(event,durationDelta,undoFunc,el,ev){this.trigger('eventResize',el[0],event,durationDelta,undoFunc,ev,{}); // {} = jqui dummy
	}, /* Selection
		------------------------------------------------------------------------------------------------------------------*/ // Selects a date span on the view. `start` and `end` are both Moments.
	// `ev` is the native mouse event that begin the interaction.
	select:function select(span,ev){this.unselect(ev);this.renderSelection(span);this.reportSelection(span,ev);}, // Renders a visual indication of the selection
	renderSelection:function renderSelection(span){ // subclasses should implement
	}, // Called when a new selection is made. Updates internal state and triggers handlers.
	reportSelection:function reportSelection(span,ev){this.isSelected=true;this.triggerSelect(span,ev);}, // Triggers handlers to 'select'
	triggerSelect:function triggerSelect(span,ev){this.trigger('select',null,this.calendar.applyTimezone(span.start), // convert to calendar's tz for external API
	this.calendar.applyTimezone(span.end), // "
	ev);}, // Undoes a selection. updates in the internal state and triggers handlers.
	// `ev` is the native mouse event that began the interaction.
	unselect:function unselect(ev){if(this.isSelected){this.isSelected=false;if(this.destroySelection){this.destroySelection(); // TODO: deprecate
	}this.unrenderSelection();this.trigger('unselect',null,ev);}}, // Unrenders a visual indication of selection
	unrenderSelection:function unrenderSelection(){ // subclasses should implement
	}, // Handler for unselecting when the user clicks something and the 'unselectAuto' setting is on
	documentMousedown:function documentMousedown(ev){var ignore; // is there a selection, and has the user made a proper left click?
	if(this.isSelected&&this.opt('unselectAuto')&&isPrimaryMouseButton(ev)){ // only unselect if the clicked element is not identical to or inside of an 'unselectCancel' element
	ignore=this.opt('unselectCancel');if(!ignore||!$(ev.target).closest(ignore).length){this.unselect(ev);}}}, /* Day Click
		------------------------------------------------------------------------------------------------------------------*/ // Triggers handlers to 'dayClick'
	// Span has start/end of the clicked area. Only the start is useful.
	triggerDayClick:function triggerDayClick(span,dayEl,ev){this.trigger('dayClick',dayEl,this.calendar.applyTimezone(span.start), // convert to calendar's timezone for external API
	ev);}, /* Date Utils
		------------------------------------------------------------------------------------------------------------------*/ // Initializes internal variables related to calculating hidden days-of-week
	initHiddenDays:function initHiddenDays(){var hiddenDays=this.opt('hiddenDays')||[]; // array of day-of-week indices that are hidden
	var isHiddenDayHash=[]; // is the day-of-week hidden? (hash with day-of-week-index -> bool)
	var dayCnt=0;var i;if(this.opt('weekends')===false){hiddenDays.push(0,6); // 0=sunday, 6=saturday
	}for(i=0;i<7;i++){if(!(isHiddenDayHash[i]=$.inArray(i,hiddenDays)!==-1)){dayCnt++;}}if(!dayCnt){throw 'invalid hiddenDays'; // all days were hidden? bad.
	}this.isHiddenDayHash=isHiddenDayHash;}, // Is the current day hidden?
	// `day` is a day-of-week index (0-6), or a Moment
	isHiddenDay:function isHiddenDay(day){if(moment.isMoment(day)){day=day.day();}return this.isHiddenDayHash[day];}, // Incrementing the current day until it is no longer a hidden day, returning a copy.
	// If the initial value of `date` is not a hidden day, don't do anything.
	// Pass `isExclusive` as `true` if you are dealing with an end date.
	// `inc` defaults to `1` (increment one day forward each time)
	skipHiddenDays:function skipHiddenDays(date,inc,isExclusive){var out=date.clone();inc=inc||1;while(this.isHiddenDayHash[(out.day()+(isExclusive?inc:0)+7)%7]){out.add(inc,'days');}return out;}, // Returns the date range of the full days the given range visually appears to occupy.
	// Returns a new range object.
	computeDayRange:function computeDayRange(range){var startDay=range.start.clone().stripTime(); // the beginning of the day the range starts
	var end=range.end;var endDay=null;var endTimeMS;if(end){endDay=end.clone().stripTime(); // the beginning of the day the range exclusively ends
	endTimeMS=+end.time(); // # of milliseconds into `endDay`
	// If the end time is actually inclusively part of the next day and is equal to or
	// beyond the next day threshold, adjust the end to be the exclusive end of `endDay`.
	// Otherwise, leaving it as inclusive will cause it to exclude `endDay`.
	if(endTimeMS&&endTimeMS>=this.nextDayThreshold){endDay.add(1,'days');}} // If no end was specified, or if it is within `startDay` but not past nextDayThreshold,
	// assign the default duration of one day.
	if(!end||endDay<=startDay){endDay=startDay.clone().add(1,'days');}return {start:startDay,end:endDay};}, // Does the given event visually appear to occupy more than one day?
	isMultiDayEvent:function isMultiDayEvent(event){var range=this.computeDayRange(event); // event is range-ish
	return range.end.diff(range.start,'days')>1;}});;;var Calendar=FC.Calendar=Class.extend({dirDefaults:null, // option defaults related to LTR or RTL
	langDefaults:null, // option defaults related to current locale
	overrides:null, // option overrides given to the fullCalendar constructor
	options:null, // all defaults combined with overrides
	viewSpecCache:null, // cache of view definitions
	view:null, // current View object
	header:null,loadingLevel:0, // number of simultaneous loading tasks
	// a lot of this class' OOP logic is scoped within this constructor function,
	// but in the future, write individual methods on the prototype.
	constructor:Calendar_constructor, // Subclasses can override this for initialization logic after the constructor has been called
	initialize:function initialize(){}, // Initializes `this.options` and other important options-related objects
	initOptions:function initOptions(overrides){var lang,langDefaults;var isRTL,dirDefaults; // converts legacy options into non-legacy ones.
	// in the future, when this is removed, don't use `overrides` reference. make a copy.
	overrides=massageOverrides(overrides);lang=overrides.lang;langDefaults=langOptionHash[lang];if(!langDefaults){lang=Calendar.defaults.lang;langDefaults=langOptionHash[lang]||{};}isRTL=firstDefined(overrides.isRTL,langDefaults.isRTL,Calendar.defaults.isRTL);dirDefaults=isRTL?Calendar.rtlDefaults:{};this.dirDefaults=dirDefaults;this.langDefaults=langDefaults;this.overrides=overrides;this.options=mergeOptions([ // merge defaults and overrides. lowest to highest precedence
	Calendar.defaults, // global defaults
	dirDefaults,langDefaults,overrides]);populateInstanceComputableOptions(this.options);this.viewSpecCache={}; // somewhat unrelated
	}, // Gets information about how to create a view. Will use a cache.
	getViewSpec:function getViewSpec(viewType){var cache=this.viewSpecCache;return cache[viewType]||(cache[viewType]=this.buildViewSpec(viewType));}, // Given a duration singular unit, like "week" or "day", finds a matching view spec.
	// Preference is given to views that have corresponding buttons.
	getUnitViewSpec:function getUnitViewSpec(unit){var viewTypes;var i;var spec;if($.inArray(unit,intervalUnits)!=-1){ // put views that have buttons first. there will be duplicates, but oh well
	viewTypes=this.header.getViewsWithButtons();$.each(FC.views,function(viewType){ // all views
	viewTypes.push(viewType);});for(i=0;i<viewTypes.length;i++){spec=this.getViewSpec(viewTypes[i]);if(spec){if(spec.singleUnit==unit){return spec;}}}}}, // Builds an object with information on how to create a given view
	buildViewSpec:function buildViewSpec(requestedViewType){var viewOverrides=this.overrides.views||{};var specChain=[]; // for the view. lowest to highest priority
	var defaultsChain=[]; // for the view. lowest to highest priority
	var overridesChain=[]; // for the view. lowest to highest priority
	var viewType=requestedViewType;var spec; // for the view
	var overrides; // for the view
	var duration;var unit; // iterate from the specific view definition to a more general one until we hit an actual View class
	while(viewType){spec=fcViews[viewType];overrides=viewOverrides[viewType];viewType=null; // clear. might repopulate for another iteration
	if(typeof spec==='function'){ // TODO: deprecate
	spec={'class':spec};}if(spec){specChain.unshift(spec);defaultsChain.unshift(spec.defaults||{});duration=duration||spec.duration;viewType=viewType||spec.type;}if(overrides){overridesChain.unshift(overrides); // view-specific option hashes have options at zero-level
	duration=duration||overrides.duration;viewType=viewType||overrides.type;}}spec=mergeProps(specChain);spec.type=requestedViewType;if(!spec['class']){return false;}if(duration){duration=moment.duration(duration);if(duration.valueOf()){ // valid?
	spec.duration=duration;unit=computeIntervalUnit(duration); // view is a single-unit duration, like "week" or "day"
	// incorporate options for this. lowest priority
	if(duration.as(unit)===1){spec.singleUnit=unit;overridesChain.unshift(viewOverrides[unit]||{});}}}spec.defaults=mergeOptions(defaultsChain);spec.overrides=mergeOptions(overridesChain);this.buildViewSpecOptions(spec);this.buildViewSpecButtonText(spec,requestedViewType);return spec;}, // Builds and assigns a view spec's options object from its already-assigned defaults and overrides
	buildViewSpecOptions:function buildViewSpecOptions(spec){spec.options=mergeOptions([ // lowest to highest priority
	Calendar.defaults, // global defaults
	spec.defaults, // view's defaults (from ViewSubclass.defaults)
	this.dirDefaults,this.langDefaults, // locale and dir take precedence over view's defaults!
	this.overrides, // calendar's overrides (options given to constructor)
	spec.overrides // view's overrides (view-specific options)
	]);populateInstanceComputableOptions(spec.options);}, // Computes and assigns a view spec's buttonText-related options
	buildViewSpecButtonText:function buildViewSpecButtonText(spec,requestedViewType){ // given an options object with a possible `buttonText` hash, lookup the buttonText for the
	// requested view, falling back to a generic unit entry like "week" or "day"
	function queryButtonText(options){var buttonText=options.buttonText||{};return buttonText[requestedViewType]||(spec.singleUnit?buttonText[spec.singleUnit]:null);} // highest to lowest priority
	spec.buttonTextOverride=queryButtonText(this.overrides)|| // constructor-specified buttonText lookup hash takes precedence
	spec.overrides.buttonText; // `buttonText` for view-specific options is a string
	// highest to lowest priority. mirrors buildViewSpecOptions
	spec.buttonTextDefault=queryButtonText(this.langDefaults)||queryButtonText(this.dirDefaults)||spec.defaults.buttonText|| // a single string. from ViewSubclass.defaults
	queryButtonText(Calendar.defaults)||(spec.duration?this.humanizeDuration(spec.duration):null)|| // like "3 days"
	requestedViewType; // fall back to given view name
	}, // Given a view name for a custom view or a standard view, creates a ready-to-go View object
	instantiateView:function instantiateView(viewType){var spec=this.getViewSpec(viewType);return new spec['class'](this,viewType,spec.options,spec.duration);}, // Returns a boolean about whether the view is okay to instantiate at some point
	isValidViewType:function isValidViewType(viewType){return Boolean(this.getViewSpec(viewType));}, // Should be called when any type of async data fetching begins
	pushLoading:function pushLoading(){if(! this.loadingLevel++){this.trigger('loading',null,true,this.view);}}, // Should be called when any type of async data fetching completes
	popLoading:function popLoading(){if(! --this.loadingLevel){this.trigger('loading',null,false,this.view);}}, // Given arguments to the select method in the API, returns a span (unzoned start/end and other info)
	buildSelectSpan:function buildSelectSpan(zonedStartInput,zonedEndInput){var start=this.moment(zonedStartInput).stripZone();var end;if(zonedEndInput){end=this.moment(zonedEndInput).stripZone();}else if(start.hasTime()){end=start.clone().add(this.defaultTimedEventDuration);}else {end=start.clone().add(this.defaultAllDayEventDuration);}return {start:start,end:end};}});Calendar.mixin(Emitter);function Calendar_constructor(element,overrides){var t=this;t.initOptions(overrides||{});var options=this.options; // Exports
	// -----------------------------------------------------------------------------------
	t.render=render;t.destroy=destroy;t.refetchEvents=refetchEvents;t.reportEvents=reportEvents;t.reportEventChange=reportEventChange;t.rerenderEvents=renderEvents; // `renderEvents` serves as a rerender. an API method
	t.changeView=renderView; // `renderView` will switch to another view
	t.select=select;t.unselect=unselect;t.prev=prev;t.next=next;t.prevYear=prevYear;t.nextYear=nextYear;t.today=today;t.gotoDate=gotoDate;t.incrementDate=incrementDate;t.zoomTo=zoomTo;t.getDate=getDate;t.getCalendar=getCalendar;t.getView=getView;t.option=option;t.trigger=trigger; // Language-data Internals
	// -----------------------------------------------------------------------------------
	// Apply overrides to the current language's data
	var localeData=createObject( // make a cheap copy
	getMomentLocaleData(options.lang) // will fall back to en
	);if(options.monthNames){localeData._months=options.monthNames;}if(options.monthNamesShort){localeData._monthsShort=options.monthNamesShort;}if(options.dayNames){localeData._weekdays=options.dayNames;}if(options.dayNamesShort){localeData._weekdaysShort=options.dayNamesShort;}if(options.firstDay!=null){var _week=createObject(localeData._week); // _week: { dow: # }
	_week.dow=options.firstDay;localeData._week=_week;} // assign a normalized value, to be used by our .week() moment extension
	localeData._fullCalendar_weekCalc=function(weekCalc){if(typeof weekCalc==='function'){return weekCalc;}else if(weekCalc==='local'){return weekCalc;}else if(weekCalc==='iso'||weekCalc==='ISO'){return 'ISO';}}(options.weekNumberCalculation); // Calendar-specific Date Utilities
	// -----------------------------------------------------------------------------------
	t.defaultAllDayEventDuration=moment.duration(options.defaultAllDayEventDuration);t.defaultTimedEventDuration=moment.duration(options.defaultTimedEventDuration); // Builds a moment using the settings of the current calendar: timezone and language.
	// Accepts anything the vanilla moment() constructor accepts.
	t.moment=function(){var mom;if(options.timezone==='local'){mom=FC.moment.apply(null,arguments); // Force the moment to be local, because FC.moment doesn't guarantee it.
	if(mom.hasTime()){ // don't give ambiguously-timed moments a local zone
	mom.local();}}else if(options.timezone==='UTC'){mom=FC.moment.utc.apply(null,arguments); // process as UTC
	}else {mom=FC.moment.parseZone.apply(null,arguments); // let the input decide the zone
	}if('_locale' in mom){ // moment 2.8 and above
	mom._locale=localeData;}else { // pre-moment-2.8
	mom._lang=localeData;}return mom;}; // Returns a boolean about whether or not the calendar knows how to calculate
	// the timezone offset of arbitrary dates in the current timezone.
	t.getIsAmbigTimezone=function(){return options.timezone!=='local'&&options.timezone!=='UTC';}; // Returns a copy of the given date in the current timezone. Has no effect on dates without times.
	t.applyTimezone=function(date){if(!date.hasTime()){return date.clone();}var zonedDate=t.moment(date.toArray());var timeAdjust=date.time()-zonedDate.time();var adjustedZonedDate; // Safari sometimes has problems with this coersion when near DST. Adjust if necessary. (bug #2396)
	if(timeAdjust){ // is the time result different than expected?
	adjustedZonedDate=zonedDate.clone().add(timeAdjust); // add milliseconds
	if(date.time()-adjustedZonedDate.time()===0){ // does it match perfectly now?
	zonedDate=adjustedZonedDate;}}return zonedDate;}; // Returns a moment for the current date, as defined by the client's computer or from the `now` option.
	// Will return an moment with an ambiguous timezone.
	t.getNow=function(){var now=options.now;if(typeof now==='function'){now=now();}return t.moment(now).stripZone();}; // Get an event's normalized end date. If not present, calculate it from the defaults.
	t.getEventEnd=function(event){if(event.end){return event.end.clone();}else {return t.getDefaultEventEnd(event.allDay,event.start);}}; // Given an event's allDay status and start date, return what its fallback end date should be.
	// TODO: rename to computeDefaultEventEnd
	t.getDefaultEventEnd=function(allDay,zonedStart){var end=zonedStart.clone();if(allDay){end.stripTime().add(t.defaultAllDayEventDuration);}else {end.add(t.defaultTimedEventDuration);}if(t.getIsAmbigTimezone()){end.stripZone(); // we don't know what the tzo should be
	}return end;}; // Produces a human-readable string for the given duration.
	// Side-effect: changes the locale of the given duration.
	t.humanizeDuration=function(duration){return (duration.locale||duration.lang).call(duration,options.lang) // works moment-pre-2.8
	.humanize();}; // Imports
	// -----------------------------------------------------------------------------------
	EventManager.call(t,options);var isFetchNeeded=t.isFetchNeeded;var fetchEvents=t.fetchEvents; // Locals
	// -----------------------------------------------------------------------------------
	var _element=element[0];var header;var headerElement;var content;var tm; // for making theme classes
	var currentView; // NOTE: keep this in sync with this.view
	var viewsByType={}; // holds all instantiated view instances, current or not
	var suggestedViewHeight;var windowResizeProxy; // wraps the windowResize function
	var ignoreWindowResize=0;var events=[];var date; // unzoned
	// Main Rendering
	// -----------------------------------------------------------------------------------
	// compute the initial ambig-timezone date
	if(options.defaultDate!=null){date=t.moment(options.defaultDate).stripZone();}else {date=t.getNow(); // getNow already returns unzoned
	}function render(){if(!content){initialRender();}else if(elementVisible()){ // mainly for the public API
	calcSize();renderView();}}function initialRender(){tm=options.theme?'ui':'fc';element.addClass('fc');if(options.isRTL){element.addClass('fc-rtl');}else {element.addClass('fc-ltr');}if(options.theme){element.addClass('ui-widget');}else {element.addClass('fc-unthemed');}content=$("<div class='fc-view-container'/>").prependTo(element);header=t.header=new Header(t,options);headerElement=header.render();if(headerElement){element.prepend(headerElement);}renderView(options.defaultView);if(options.handleWindowResize){windowResizeProxy=debounce(windowResize,options.windowResizeDelay); // prevents rapid calls
	$(window).resize(windowResizeProxy);}}function destroy(){if(currentView){currentView.removeElement(); // NOTE: don't null-out currentView/t.view in case API methods are called after destroy.
	// It is still the "current" view, just not rendered.
	}header.removeElement();content.remove();element.removeClass('fc fc-ltr fc-rtl fc-unthemed ui-widget');if(windowResizeProxy){$(window).unbind('resize',windowResizeProxy);}}function elementVisible(){return element.is(':visible');} // View Rendering
	// -----------------------------------------------------------------------------------
	// Renders a view because of a date change, view-type change, or for the first time.
	// If not given a viewType, keep the current view but render different dates.
	function renderView(viewType){ignoreWindowResize++; // if viewType is changing, remove the old view's rendering
	if(currentView&&viewType&&currentView.type!==viewType){header.deactivateButton(currentView.type);freezeContentHeight(); // prevent a scroll jump when view element is removed
	currentView.removeElement();currentView=t.view=null;} // if viewType changed, or the view was never created, create a fresh view
	if(!currentView&&viewType){currentView=t.view=viewsByType[viewType]||(viewsByType[viewType]=t.instantiateView(viewType));currentView.setElement($("<div class='fc-view fc-"+viewType+"-view' />").appendTo(content));header.activateButton(viewType);}if(currentView){ // in case the view should render a period of time that is completely hidden
	date=currentView.massageCurrentDate(date); // render or rerender the view
	if(!currentView.displaying||!date.isWithin(currentView.intervalStart,currentView.intervalEnd) // implicit date window change
	){if(elementVisible()){currentView.display(date); // will call freezeContentHeight
	unfreezeContentHeight(); // immediately unfreeze regardless of whether display is async
	// need to do this after View::render, so dates are calculated
	updateHeaderTitle();updateTodayButton();getAndRenderEvents();}}}unfreezeContentHeight(); // undo any lone freezeContentHeight calls
	ignoreWindowResize--;} // Resizing
	// -----------------------------------------------------------------------------------
	t.getSuggestedViewHeight=function(){if(suggestedViewHeight===undefined){calcSize();}return suggestedViewHeight;};t.isHeightAuto=function(){return options.contentHeight==='auto'||options.height==='auto';};function updateSize(shouldRecalc){if(elementVisible()){if(shouldRecalc){_calcSize();}ignoreWindowResize++;currentView.updateSize(true); // isResize=true. will poll getSuggestedViewHeight() and isHeightAuto()
	ignoreWindowResize--;return true; // signal success
	}}function calcSize(){if(elementVisible()){_calcSize();}}function _calcSize(){ // assumes elementVisible
	if(typeof options.contentHeight==='number'){ // exists and not 'auto'
	suggestedViewHeight=options.contentHeight;}else if(typeof options.height==='number'){ // exists and not 'auto'
	suggestedViewHeight=options.height-(headerElement?headerElement.outerHeight(true):0);}else {suggestedViewHeight=Math.round(content.width()/Math.max(options.aspectRatio,.5));}}function windowResize(ev){if(!ignoreWindowResize&&ev.target===window&& // so we don't process jqui "resize" events that have bubbled up
	currentView.start // view has already been rendered
	){if(updateSize(true)){currentView.trigger('windowResize',_element);}}} /* Event Fetching/Rendering
		-----------------------------------------------------------------------------*/ // TODO: going forward, most of this stuff should be directly handled by the view
	function refetchEvents(){ // can be called as an API method
	destroyEvents(); // so that events are cleared before user starts waiting for AJAX
	fetchAndRenderEvents();}function renderEvents(){ // destroys old events if previously rendered
	if(elementVisible()){freezeContentHeight();currentView.displayEvents(events);unfreezeContentHeight();}}function destroyEvents(){freezeContentHeight();currentView.clearEvents();unfreezeContentHeight();}function getAndRenderEvents(){if(!options.lazyFetching||isFetchNeeded(currentView.start,currentView.end)){fetchAndRenderEvents();}else {renderEvents();}}function fetchAndRenderEvents(){fetchEvents(currentView.start,currentView.end); // ... will call reportEvents
	// ... which will call renderEvents
	} // called when event data arrives
	function reportEvents(_events){events=_events;renderEvents();} // called when a single event's data has been changed
	function reportEventChange(){renderEvents();} /* Header Updating
		-----------------------------------------------------------------------------*/function updateHeaderTitle(){header.updateTitle(currentView.title);}function updateTodayButton(){var now=t.getNow();if(now.isWithin(currentView.intervalStart,currentView.intervalEnd)){header.disableButton('today');}else {header.enableButton('today');}} /* Selection
		-----------------------------------------------------------------------------*/ // this public method receives start/end dates in any format, with any timezone
	function select(zonedStartInput,zonedEndInput){currentView.select(t.buildSelectSpan.apply(t,arguments));}function unselect(){ // safe to be called before renderView
	if(currentView){currentView.unselect();}} /* Date
		-----------------------------------------------------------------------------*/function prev(){date=currentView.computePrevDate(date);renderView();}function next(){date=currentView.computeNextDate(date);renderView();}function prevYear(){date.add(-1,'years');renderView();}function nextYear(){date.add(1,'years');renderView();}function today(){date=t.getNow();renderView();}function gotoDate(zonedDateInput){date=t.moment(zonedDateInput).stripZone();renderView();}function incrementDate(delta){date.add(moment.duration(delta));renderView();} // Forces navigation to a view for the given date.
	// `viewType` can be a specific view name or a generic one like "week" or "day".
	function zoomTo(newDate,viewType){var spec;viewType=viewType||'day'; // day is default zoom
	spec=t.getViewSpec(viewType)||t.getUnitViewSpec(viewType);date=newDate.clone();renderView(spec?spec.type:null);} // for external API
	function getDate(){return t.applyTimezone(date); // infuse the calendar's timezone
	} /* Height "Freezing"
		-----------------------------------------------------------------------------*/ // TODO: move this into the view
	t.freezeContentHeight=freezeContentHeight;t.unfreezeContentHeight=unfreezeContentHeight;function freezeContentHeight(){content.css({width:'100%',height:content.height(),overflow:'hidden'});}function unfreezeContentHeight(){content.css({width:'',height:'',overflow:''});} /* Misc
		-----------------------------------------------------------------------------*/function getCalendar(){return t;}function getView(){return currentView;}function option(name,value){if(value===undefined){return options[name];}if(name=='height'||name=='contentHeight'||name=='aspectRatio'){options[name]=value;updateSize(true); // true = allow recalculation of height
	}}function trigger(name,thisObj){ // overrides the Emitter's trigger method :(
	var args=Array.prototype.slice.call(arguments,2);thisObj=thisObj||_element;this.triggerWith(name,thisObj,args); // Emitter's method
	if(options[name]){return options[name].apply(thisObj,args);}}t.initialize();};;Calendar.defaults={titleRangeSeparator:' — ', // emphasized dash
	monthYearFormat:'MMMM YYYY', // required for en. other languages rely on datepicker computable option
	defaultTimedEventDuration:'02:00:00',defaultAllDayEventDuration:{days:1},forceEventDuration:false,nextDayThreshold:'09:00:00', // 9am
	// display
	defaultView:'month',aspectRatio:1.35,header:{left:'title',center:'',right:'today prev,next'},weekends:true,weekNumbers:false,weekNumberTitle:'W',weekNumberCalculation:'local', //editable: false,
	//nowIndicator: false,
	scrollTime:'06:00:00', // event ajax
	lazyFetching:true,startParam:'start',endParam:'end',timezoneParam:'timezone',timezone:false, //allDayDefault: undefined,
	// locale
	isRTL:false,buttonText:{prev:"prev",next:"next",prevYear:"prev year",nextYear:"next year",year:'year', // TODO: locale files need to specify this
	today:'today',month:'month',week:'week',day:'day'},buttonIcons:{prev:'left-single-arrow',next:'right-single-arrow',prevYear:'left-double-arrow',nextYear:'right-double-arrow'}, // jquery-ui theming
	theme:false,themeButtonIcons:{prev:'circle-triangle-w',next:'circle-triangle-e',prevYear:'seek-prev',nextYear:'seek-next'}, //eventResizableFromStart: false,
	dragOpacity:.75,dragRevertDuration:500,dragScroll:true, //selectable: false,
	unselectAuto:true,dropAccept:'*',eventOrder:'title',eventLimit:false,eventLimitText:'more',eventLimitClick:'popover',dayPopoverFormat:'LL',handleWindowResize:true,windowResizeDelay:200 // milliseconds before an updateSize happens
	};Calendar.englishDefaults={ // used by lang.js
	dayPopoverFormat:'dddd, MMMM D'};Calendar.rtlDefaults={ // right-to-left defaults
	header:{ // TODO: smarter solution (first/center/last ?)
	left:'next,prev today',center:'',right:'title'},buttonIcons:{prev:'right-single-arrow',next:'left-single-arrow',prevYear:'right-double-arrow',nextYear:'left-double-arrow'},themeButtonIcons:{prev:'circle-triangle-e',next:'circle-triangle-w',nextYear:'seek-prev',prevYear:'seek-next'}};;;var langOptionHash=FC.langs={}; // initialize and expose
	// TODO: document the structure and ordering of a FullCalendar lang file
	// TODO: rename everything "lang" to "locale", like what the moment project did
	// Initialize jQuery UI datepicker translations while using some of the translations
	// Will set this as the default language for datepicker.
	FC.datepickerLang=function(langCode,dpLangCode,dpOptions){ // get the FullCalendar internal option hash for this language. create if necessary
	var fcOptions=langOptionHash[langCode]||(langOptionHash[langCode]={}); // transfer some simple options from datepicker to fc
	fcOptions.isRTL=dpOptions.isRTL;fcOptions.weekNumberTitle=dpOptions.weekHeader; // compute some more complex options from datepicker
	$.each(dpComputableOptions,function(name,func){fcOptions[name]=func(dpOptions);}); // is jQuery UI Datepicker is on the page?
	if($.datepicker){ // Register the language data.
	// FullCalendar and MomentJS use language codes like "pt-br" but Datepicker
	// does it like "pt-BR" or if it doesn't have the language, maybe just "pt".
	// Make an alias so the language can be referenced either way.
	$.datepicker.regional[dpLangCode]=$.datepicker.regional[langCode]= // alias
	dpOptions; // Alias 'en' to the default language data. Do this every time.
	$.datepicker.regional.en=$.datepicker.regional['']; // Set as Datepicker's global defaults.
	$.datepicker.setDefaults(dpOptions);}}; // Sets FullCalendar-specific translations. Will set the language as the global default.
	FC.lang=function(langCode,newFcOptions){var fcOptions;var momOptions; // get the FullCalendar internal option hash for this language. create if necessary
	fcOptions=langOptionHash[langCode]||(langOptionHash[langCode]={}); // provided new options for this language? merge them in
	if(newFcOptions){fcOptions=langOptionHash[langCode]=mergeOptions([fcOptions,newFcOptions]);} // compute language options that weren't defined.
	// always do this. newFcOptions can be undefined when initializing from i18n file,
	// so no way to tell if this is an initialization or a default-setting.
	momOptions=getMomentLocaleData(langCode); // will fall back to en
	$.each(momComputableOptions,function(name,func){if(fcOptions[name]==null){fcOptions[name]=func(momOptions,fcOptions);}}); // set it as the default language for FullCalendar
	Calendar.defaults.lang=langCode;}; // NOTE: can't guarantee any of these computations will run because not every language has datepicker
	// configs, so make sure there are English fallbacks for these in the defaults file.
	var dpComputableOptions={buttonText:function buttonText(dpOptions){return { // the translations sometimes wrongly contain HTML entities
	prev:stripHtmlEntities(dpOptions.prevText),next:stripHtmlEntities(dpOptions.nextText),today:stripHtmlEntities(dpOptions.currentText)};}, // Produces format strings like "MMMM YYYY" -> "September 2014"
	monthYearFormat:function monthYearFormat(dpOptions){return dpOptions.showMonthAfterYear?'YYYY['+dpOptions.yearSuffix+'] MMMM':'MMMM YYYY['+dpOptions.yearSuffix+']';}};var momComputableOptions={ // Produces format strings like "ddd M/D" -> "Fri 9/15"
	dayOfMonthFormat:function dayOfMonthFormat(momOptions,fcOptions){var format=momOptions.longDateFormat('l'); // for the format like "M/D/YYYY"
	// strip the year off the edge, as well as other misc non-whitespace chars
	format=format.replace(/^Y+[^\w\s]*|[^\w\s]*Y+$/g,'');if(fcOptions.isRTL){format+=' ddd'; // for RTL, add day-of-week to end
	}else {format='ddd '+format; // for LTR, add day-of-week to beginning
	}return format;}, // Produces format strings like "h:mma" -> "6:00pm"
	mediumTimeFormat:function mediumTimeFormat(momOptions){ // can't be called `timeFormat` because collides with option
	return momOptions.longDateFormat('LT').replace(/\s*a$/i,'a'); // convert AM/PM/am/pm to lowercase. remove any spaces beforehand
	}, // Produces format strings like "h(:mm)a" -> "6pm" / "6:30pm"
	smallTimeFormat:function smallTimeFormat(momOptions){return momOptions.longDateFormat('LT').replace(':mm','(:mm)').replace(/(\Wmm)$/,'($1)') // like above, but for foreign langs
	.replace(/\s*a$/i,'a'); // convert AM/PM/am/pm to lowercase. remove any spaces beforehand
	}, // Produces format strings like "h(:mm)t" -> "6p" / "6:30p"
	extraSmallTimeFormat:function extraSmallTimeFormat(momOptions){return momOptions.longDateFormat('LT').replace(':mm','(:mm)').replace(/(\Wmm)$/,'($1)') // like above, but for foreign langs
	.replace(/\s*a$/i,'t'); // convert to AM/PM/am/pm to lowercase one-letter. remove any spaces beforehand
	}, // Produces format strings like "ha" / "H" -> "6pm" / "18"
	hourFormat:function hourFormat(momOptions){return momOptions.longDateFormat('LT').replace(':mm','').replace(/(\Wmm)$/,'') // like above, but for foreign langs
	.replace(/\s*a$/i,'a'); // convert AM/PM/am/pm to lowercase. remove any spaces beforehand
	}, // Produces format strings like "h:mm" -> "6:30" (with no AM/PM)
	noMeridiemTimeFormat:function noMeridiemTimeFormat(momOptions){return momOptions.longDateFormat('LT').replace(/\s*a$/i,''); // remove trailing AM/PM
	}}; // options that should be computed off live calendar options (considers override options)
	// TODO: best place for this? related to lang?
	// TODO: flipping text based on isRTL is a bad idea because the CSS `direction` might want to handle it
	var instanceComputableOptions={ // Produces format strings for results like "Mo 16"
	smallDayDateFormat:function smallDayDateFormat(options){return options.isRTL?'D dd':'dd D';}, // Produces format strings for results like "Wk 5"
	weekFormat:function weekFormat(options){return options.isRTL?'w[ '+options.weekNumberTitle+']':'['+options.weekNumberTitle+' ]w';}, // Produces format strings for results like "Wk5"
	smallWeekFormat:function smallWeekFormat(options){return options.isRTL?'w['+options.weekNumberTitle+']':'['+options.weekNumberTitle+']w';}};function populateInstanceComputableOptions(options){$.each(instanceComputableOptions,function(name,func){if(options[name]==null){options[name]=func(options);}});} // Returns moment's internal locale data. If doesn't exist, returns English.
	// Works with moment-pre-2.8
	function getMomentLocaleData(langCode){var func=moment.localeData||moment.langData;return func.call(moment,langCode)||func.call(moment,'en'); // the newer localData could return null, so fall back to en
	} // Initialize English by forcing computation of moment-derived options.
	// Also, sets it as the default.
	FC.lang('en',Calendar.englishDefaults);;; /* Top toolbar area with buttons and title
	----------------------------------------------------------------------------------------------------------------------*/ // TODO: rename all header-related things to "toolbar"
	function Header(calendar,options){var t=this; // exports
	t.render=render;t.removeElement=removeElement;t.updateTitle=updateTitle;t.activateButton=activateButton;t.deactivateButton=deactivateButton;t.disableButton=disableButton;t.enableButton=enableButton;t.getViewsWithButtons=getViewsWithButtons; // locals
	var el=$();var viewsWithButtons=[];var tm;function render(){var sections=options.header;tm=options.theme?'ui':'fc';if(sections){el=$("<div class='fc-toolbar'/>").append(renderSection('left')).append(renderSection('right')).append(renderSection('center')).append('<div class="fc-clear"/>');return el;}}function removeElement(){el.remove();el=$();}function renderSection(position){var sectionEl=$('<div class="fc-'+position+'"/>');var buttonStr=options.header[position];if(buttonStr){$.each(buttonStr.split(' '),function(i){var groupChildren=$();var isOnlyButtons=true;var groupEl;$.each(this.split(','),function(j,buttonName){var customButtonProps;var viewSpec;var buttonClick;var overrideText; // text explicitly set by calendar's constructor options. overcomes icons
	var defaultText;var themeIcon;var normalIcon;var innerHtml;var classes;var button; // the element
	if(buttonName=='title'){groupChildren=groupChildren.add($('<h2>&nbsp;</h2>')); // we always want it to take up height
	isOnlyButtons=false;}else {if(customButtonProps=(calendar.options.customButtons||{})[buttonName]){buttonClick=function buttonClick(ev){if(customButtonProps.click){customButtonProps.click.call(button[0],ev);}};overrideText=''; // icons will override text
	defaultText=customButtonProps.text;}else if(viewSpec=calendar.getViewSpec(buttonName)){buttonClick=function buttonClick(){calendar.changeView(buttonName);};viewsWithButtons.push(buttonName);overrideText=viewSpec.buttonTextOverride;defaultText=viewSpec.buttonTextDefault;}else if(calendar[buttonName]){ // a calendar method
	buttonClick=function buttonClick(){calendar[buttonName]();};overrideText=(calendar.overrides.buttonText||{})[buttonName];defaultText=options.buttonText[buttonName]; // everything else is considered default
	}if(buttonClick){themeIcon=customButtonProps?customButtonProps.themeIcon:options.themeButtonIcons[buttonName];normalIcon=customButtonProps?customButtonProps.icon:options.buttonIcons[buttonName];if(overrideText){innerHtml=htmlEscape(overrideText);}else if(themeIcon&&options.theme){innerHtml="<span class='ui-icon ui-icon-"+themeIcon+"'></span>";}else if(normalIcon&&!options.theme){innerHtml="<span class='fc-icon fc-icon-"+normalIcon+"'></span>";}else {innerHtml=htmlEscape(defaultText);}classes=['fc-'+buttonName+'-button',tm+'-button',tm+'-state-default'];button=$( // type="button" so that it doesn't submit a form
	'<button type="button" class="'+classes.join(' ')+'">'+innerHtml+'</button>').click(function(ev){ // don't process clicks for disabled buttons
	if(!button.hasClass(tm+'-state-disabled')){buttonClick(ev); // after the click action, if the button becomes the "active" tab, or disabled,
	// it should never have a hover class, so remove it now.
	if(button.hasClass(tm+'-state-active')||button.hasClass(tm+'-state-disabled')){button.removeClass(tm+'-state-hover');}}}).mousedown(function(){ // the *down* effect (mouse pressed in).
	// only on buttons that are not the "active" tab, or disabled
	button.not('.'+tm+'-state-active').not('.'+tm+'-state-disabled').addClass(tm+'-state-down');}).mouseup(function(){ // undo the *down* effect
	button.removeClass(tm+'-state-down');}).hover(function(){ // the *hover* effect.
	// only on buttons that are not the "active" tab, or disabled
	button.not('.'+tm+'-state-active').not('.'+tm+'-state-disabled').addClass(tm+'-state-hover');},function(){ // undo the *hover* effect
	button.removeClass(tm+'-state-hover').removeClass(tm+'-state-down'); // if mouseleave happens before mouseup
	});groupChildren=groupChildren.add(button);}}});if(isOnlyButtons){groupChildren.first().addClass(tm+'-corner-left').end().last().addClass(tm+'-corner-right').end();}if(groupChildren.length>1){groupEl=$('<div/>');if(isOnlyButtons){groupEl.addClass('fc-button-group');}groupEl.append(groupChildren);sectionEl.append(groupEl);}else {sectionEl.append(groupChildren); // 1 or 0 children
	}});}return sectionEl;}function updateTitle(text){el.find('h2').text(text);}function activateButton(buttonName){el.find('.fc-'+buttonName+'-button').addClass(tm+'-state-active');}function deactivateButton(buttonName){el.find('.fc-'+buttonName+'-button').removeClass(tm+'-state-active');}function disableButton(buttonName){el.find('.fc-'+buttonName+'-button').attr('disabled','disabled').addClass(tm+'-state-disabled');}function enableButton(buttonName){el.find('.fc-'+buttonName+'-button').removeAttr('disabled').removeClass(tm+'-state-disabled');}function getViewsWithButtons(){return viewsWithButtons;}};;FC.sourceNormalizers=[];FC.sourceFetchers=[];var ajaxDefaults={dataType:'json',cache:false};var eventGUID=1;function EventManager(options){ // assumed to be a calendar
	var t=this; // exports
	t.isFetchNeeded=isFetchNeeded;t.fetchEvents=fetchEvents;t.addEventSource=addEventSource;t.removeEventSource=removeEventSource;t.updateEvent=updateEvent;t.renderEvent=renderEvent;t.removeEvents=removeEvents;t.clientEvents=clientEvents;t.mutateEvent=mutateEvent;t.normalizeEventDates=normalizeEventDates;t.normalizeEventTimes=normalizeEventTimes; // imports
	var reportEvents=t.reportEvents; // locals
	var stickySource={events:[]};var sources=[stickySource];var rangeStart,rangeEnd;var currentFetchID=0;var pendingSourceCnt=0;var cache=[]; // holds events that have already been expanded
	$.each((options.events?[options.events]:[]).concat(options.eventSources||[]),function(i,sourceInput){var source=buildEventSource(sourceInput);if(source){sources.push(source);}}); /* Fetching
		-----------------------------------------------------------------------------*/ // start and end are assumed to be unzoned
	function isFetchNeeded(start,end){return !rangeStart|| // nothing has been fetched yet?
	start<rangeStart||end>rangeEnd; // is part of the new range outside of the old range?
	}function fetchEvents(start,end){rangeStart=start;rangeEnd=end;cache=[];var fetchID=++currentFetchID;var len=sources.length;pendingSourceCnt=len;for(var i=0;i<len;i++){fetchEventSource(sources[i],fetchID);}}function fetchEventSource(source,fetchID){_fetchEventSource(source,function(eventInputs){var isArraySource=$.isArray(source.events);var i,eventInput;var abstractEvent;if(fetchID==currentFetchID){if(eventInputs){for(i=0;i<eventInputs.length;i++){eventInput=eventInputs[i];if(isArraySource){ // array sources have already been convert to Event Objects
	abstractEvent=eventInput;}else {abstractEvent=buildEventFromInput(eventInput,source);}if(abstractEvent){ // not false (an invalid event)
	cache.push.apply(cache,expandEvent(abstractEvent) // add individual expanded events to the cache
	);}}}pendingSourceCnt--;if(!pendingSourceCnt){reportEvents(cache);}}});}function _fetchEventSource(source,callback){var i;var fetchers=FC.sourceFetchers;var res;for(i=0;i<fetchers.length;i++){res=fetchers[i].call(t, // this, the Calendar object
	source,rangeStart.clone(),rangeEnd.clone(),options.timezone,callback);if(res===true){ // the fetcher is in charge. made its own async request
	return;}else if((typeof res==='undefined'?'undefined':_typeof(res))=='object'){ // the fetcher returned a new source. process it
	_fetchEventSource(res,callback);return;}}var events=source.events;if(events){if($.isFunction(events)){t.pushLoading();events.call(t, // this, the Calendar object
	rangeStart.clone(),rangeEnd.clone(),options.timezone,function(events){callback(events);t.popLoading();});}else if($.isArray(events)){callback(events);}else {callback();}}else {var url=source.url;if(url){var _success=source.success;var _error=source.error;var _complete=source.complete; // retrieve any outbound GET/POST $.ajax data from the options
	var customData;if($.isFunction(source.data)){ // supplied as a function that returns a key/value object
	customData=source.data();}else { // supplied as a straight key/value object
	customData=source.data;} // use a copy of the custom data so we can modify the parameters
	// and not affect the passed-in object.
	var data=$.extend({},customData||{});var startParam=firstDefined(source.startParam,options.startParam);var endParam=firstDefined(source.endParam,options.endParam);var timezoneParam=firstDefined(source.timezoneParam,options.timezoneParam);if(startParam){data[startParam]=rangeStart.format();}if(endParam){data[endParam]=rangeEnd.format();}if(options.timezone&&options.timezone!='local'){data[timezoneParam]=options.timezone;}t.pushLoading();$.ajax($.extend({},ajaxDefaults,source,{data:data,success:function success(events){events=events||[];var res=applyAll(_success,this,arguments);if($.isArray(res)){events=res;}callback(events);},error:function error(){applyAll(_error,this,arguments);callback();},complete:function complete(){applyAll(_complete,this,arguments);t.popLoading();}}));}else {callback();}}} /* Sources
		-----------------------------------------------------------------------------*/function addEventSource(sourceInput){var source=buildEventSource(sourceInput);if(source){sources.push(source);pendingSourceCnt++;fetchEventSource(source,currentFetchID); // will eventually call reportEvents
	}}function buildEventSource(sourceInput){ // will return undefined if invalid source
	var normalizers=FC.sourceNormalizers;var source;var i;if($.isFunction(sourceInput)||$.isArray(sourceInput)){source={events:sourceInput};}else if(typeof sourceInput==='string'){source={url:sourceInput};}else if((typeof sourceInput==='undefined'?'undefined':_typeof(sourceInput))==='object'){source=$.extend({},sourceInput); // shallow copy
	}if(source){ // TODO: repeat code, same code for event classNames
	if(source.className){if(typeof source.className==='string'){source.className=source.className.split(/\s+/);} // otherwise, assumed to be an array
	}else {source.className=[];} // for array sources, we convert to standard Event Objects up front
	if($.isArray(source.events)){source.origArray=source.events; // for removeEventSource
	source.events=$.map(source.events,function(eventInput){return buildEventFromInput(eventInput,source);});}for(i=0;i<normalizers.length;i++){normalizers[i].call(t,source);}return source;}}function removeEventSource(source){sources=$.grep(sources,function(src){return !isSourcesEqual(src,source);}); // remove all client events from that source
	cache=$.grep(cache,function(e){return !isSourcesEqual(e.source,source);});reportEvents(cache);}function isSourcesEqual(source1,source2){return source1&&source2&&getSourcePrimitive(source1)==getSourcePrimitive(source2);}function getSourcePrimitive(source){return ((typeof source==='undefined'?'undefined':_typeof(source))==='object'? // a normalized event source?
	source.origArray||source.googleCalendarId||source.url||source.events: // get the primitive
	null)||source; // the given argument *is* the primitive
	} /* Manipulation
		-----------------------------------------------------------------------------*/ // Only ever called from the externally-facing API
	function updateEvent(event){ // massage start/end values, even if date string values
	event.start=t.moment(event.start);if(event.end){event.end=t.moment(event.end);}else {event.end=null;}mutateEvent(event,getMiscEventProps(event)); // will handle start/end/allDay normalization
	reportEvents(cache); // reports event modifications (so we can redraw)
	} // Returns a hash of misc event properties that should be copied over to related events.
	function getMiscEventProps(event){var props={};$.each(event,function(name,val){if(isMiscEventPropName(name)){if(val!==undefined&&isAtomic(val)){ // a defined non-object
	props[name]=val;}}});return props;} // non-date-related, non-id-related, non-secret
	function isMiscEventPropName(name){return !/^_|^(id|allDay|start|end)$/.test(name);} // returns the expanded events that were created
	function renderEvent(eventInput,stick){var abstractEvent=buildEventFromInput(eventInput);var events;var i,event;if(abstractEvent){ // not false (a valid input)
	events=expandEvent(abstractEvent);for(i=0;i<events.length;i++){event=events[i];if(!event.source){if(stick){stickySource.events.push(event);event.source=stickySource;}cache.push(event);}}reportEvents(cache);return events;}return [];}function removeEvents(filter){var eventID;var i;if(filter==null){ // null or undefined. remove all events
	filter=function filter(){return true;}; // will always match
	}else if(!$.isFunction(filter)){ // an event ID
	eventID=filter+'';filter=function filter(event){return event._id==eventID;};} // Purge event(s) from our local cache
	cache=$.grep(cache,filter,true); // inverse=true
	// Remove events from array sources.
	// This works because they have been converted to official Event Objects up front.
	// (and as a result, event._id has been calculated).
	for(i=0;i<sources.length;i++){if($.isArray(sources[i].events)){sources[i].events=$.grep(sources[i].events,filter,true);}}reportEvents(cache);}function clientEvents(filter){if($.isFunction(filter)){return $.grep(cache,filter);}else if(filter!=null){ // not null, not undefined. an event ID
	filter+='';return $.grep(cache,function(e){return e._id==filter;});}return cache; // else, return all
	} /* Event Normalization
		-----------------------------------------------------------------------------*/ // Given a raw object with key/value properties, returns an "abstract" Event object.
	// An "abstract" event is an event that, if recurring, will not have been expanded yet.
	// Will return `false` when input is invalid.
	// `source` is optional
	function buildEventFromInput(input,source){var out={};var start,end;var allDay;if(options.eventDataTransform){input=options.eventDataTransform(input);}if(source&&source.eventDataTransform){input=source.eventDataTransform(input);} // Copy all properties over to the resulting object.
	// The special-case properties will be copied over afterwards.
	$.extend(out,input);if(source){out.source=source;}out._id=input._id||(input.id===undefined?'_fc'+eventGUID++:input.id+'');if(input.className){if(typeof input.className=='string'){out.className=input.className.split(/\s+/);}else { // assumed to be an array
	out.className=input.className;}}else {out.className=[];}start=input.start||input.date; // "date" is an alias for "start"
	end=input.end; // parse as a time (Duration) if applicable
	if(isTimeString(start)){start=moment.duration(start);}if(isTimeString(end)){end=moment.duration(end);}if(input.dow||moment.isDuration(start)||moment.isDuration(end)){ // the event is "abstract" (recurring) so don't calculate exact start/end dates just yet
	out.start=start?moment.duration(start):null; // will be a Duration or null
	out.end=end?moment.duration(end):null; // will be a Duration or null
	out._recurring=true; // our internal marker
	}else {if(start){start=t.moment(start);if(!start.isValid()){return false;}}if(end){end=t.moment(end);if(!end.isValid()){end=null; // let defaults take over
	}}allDay=input.allDay;if(allDay===undefined){ // still undefined? fallback to default
	allDay=firstDefined(source?source.allDayDefault:undefined,options.allDayDefault); // still undefined? normalizeEventDates will calculate it
	}assignDatesToEvent(start,end,allDay,out);}return out;} // Normalizes and assigns the given dates to the given partially-formed event object.
	// NOTE: mutates the given start/end moments. does not make a copy.
	function assignDatesToEvent(start,end,allDay,event){event.start=start;event.end=end;event.allDay=allDay;normalizeEventDates(event);backupEventDates(event);} // Ensures proper values for allDay/start/end. Accepts an Event object, or a plain object with event-ish properties.
	// NOTE: Will modify the given object.
	function normalizeEventDates(eventProps){normalizeEventTimes(eventProps);if(eventProps.end&&!eventProps.end.isAfter(eventProps.start)){eventProps.end=null;}if(!eventProps.end){if(options.forceEventDuration){eventProps.end=t.getDefaultEventEnd(eventProps.allDay,eventProps.start);}else {eventProps.end=null;}}} // Ensures the allDay property exists and the timeliness of the start/end dates are consistent
	function normalizeEventTimes(eventProps){if(eventProps.allDay==null){eventProps.allDay=!(eventProps.start.hasTime()||eventProps.end&&eventProps.end.hasTime());}if(eventProps.allDay){eventProps.start.stripTime();if(eventProps.end){ // TODO: consider nextDayThreshold here? If so, will require a lot of testing and adjustment
	eventProps.end.stripTime();}}else {if(!eventProps.start.hasTime()){eventProps.start=t.applyTimezone(eventProps.start.time(0)); // will assign a 00:00 time
	}if(eventProps.end&&!eventProps.end.hasTime()){eventProps.end=t.applyTimezone(eventProps.end.time(0)); // will assign a 00:00 time
	}}} // If the given event is a recurring event, break it down into an array of individual instances.
	// If not a recurring event, return an array with the single original event.
	// If given a falsy input (probably because of a failed buildEventFromInput call), returns an empty array.
	// HACK: can override the recurring window by providing custom rangeStart/rangeEnd (for businessHours).
	function expandEvent(abstractEvent,_rangeStart,_rangeEnd){var events=[];var dowHash;var dow;var i;var date;var startTime,endTime;var start,end;var event;_rangeStart=_rangeStart||rangeStart;_rangeEnd=_rangeEnd||rangeEnd;if(abstractEvent){if(abstractEvent._recurring){ // make a boolean hash as to whether the event occurs on each day-of-week
	if(dow=abstractEvent.dow){dowHash={};for(i=0;i<dow.length;i++){dowHash[dow[i]]=true;}} // iterate through every day in the current range
	date=_rangeStart.clone().stripTime(); // holds the date of the current day
	while(date.isBefore(_rangeEnd)){if(!dowHash||dowHash[date.day()]){ // if everyday, or this particular day-of-week
	startTime=abstractEvent.start; // the stored start and end properties are times (Durations)
	endTime=abstractEvent.end; // "
	start=date.clone();end=null;if(startTime){start=start.time(startTime);}if(endTime){end=date.clone().time(endTime);}event=$.extend({},abstractEvent); // make a copy of the original
	assignDatesToEvent(start,end,!startTime&&!endTime, // allDay?
	event);events.push(event);}date.add(1,'days');}}else {events.push(abstractEvent); // return the original event. will be a one-item array
	}}return events;} /* Event Modification Math
		-----------------------------------------------------------------------------------------*/ // Modifies an event and all related events by applying the given properties.
	// Special date-diffing logic is used for manipulation of dates.
	// If `props` does not contain start/end dates, the updated values are assumed to be the event's current start/end.
	// All date comparisons are done against the event's pristine _start and _end dates.
	// Returns an object with delta information and a function to undo all operations.
	// For making computations in a granularity greater than day/time, specify largeUnit.
	// NOTE: The given `newProps` might be mutated for normalization purposes.
	function mutateEvent(event,newProps,largeUnit){var miscProps={};var oldProps;var clearEnd;var startDelta;var endDelta;var durationDelta;var undoFunc; // diffs the dates in the appropriate way, returning a duration
	function diffDates(date1,date0){ // date1 - date0
	if(largeUnit){return diffByUnit(date1,date0,largeUnit);}else if(newProps.allDay){return diffDay(date1,date0);}else {return diffDayTime(date1,date0);}}newProps=newProps||{}; // normalize new date-related properties
	if(!newProps.start){newProps.start=event.start.clone();}if(newProps.end===undefined){newProps.end=event.end?event.end.clone():null;}if(newProps.allDay==null){ // is null or undefined?
	newProps.allDay=event.allDay;}normalizeEventDates(newProps); // create normalized versions of the original props to compare against
	// need a real end value, for diffing
	oldProps={start:event._start.clone(),end:event._end?event._end.clone():t.getDefaultEventEnd(event._allDay,event._start),allDay:newProps.allDay // normalize the dates in the same regard as the new properties
	};normalizeEventDates(oldProps); // need to clear the end date if explicitly changed to null
	clearEnd=event._end!==null&&newProps.end===null; // compute the delta for moving the start date
	startDelta=diffDates(newProps.start,oldProps.start); // compute the delta for moving the end date
	if(newProps.end){endDelta=diffDates(newProps.end,oldProps.end);durationDelta=endDelta.subtract(startDelta);}else {durationDelta=null;} // gather all non-date-related properties
	$.each(newProps,function(name,val){if(isMiscEventPropName(name)){if(val!==undefined){miscProps[name]=val;}}}); // apply the operations to the event and all related events
	undoFunc=mutateEvents(clientEvents(event._id), // get events with this ID
	clearEnd,newProps.allDay,startDelta,durationDelta,miscProps);return {dateDelta:startDelta,durationDelta:durationDelta,undo:undoFunc};} // Modifies an array of events in the following ways (operations are in order):
	// - clear the event's `end`
	// - convert the event to allDay
	// - add `dateDelta` to the start and end
	// - add `durationDelta` to the event's duration
	// - assign `miscProps` to the event
	//
	// Returns a function that can be called to undo all the operations.
	//
	// TODO: don't use so many closures. possible memory issues when lots of events with same ID.
	//
	function mutateEvents(events,clearEnd,allDay,dateDelta,durationDelta,miscProps){var isAmbigTimezone=t.getIsAmbigTimezone();var undoFunctions=[]; // normalize zero-length deltas to be null
	if(dateDelta&&!dateDelta.valueOf()){dateDelta=null;}if(durationDelta&&!durationDelta.valueOf()){durationDelta=null;}$.each(events,function(i,event){var oldProps;var newProps; // build an object holding all the old values, both date-related and misc.
	// for the undo function.
	oldProps={start:event.start.clone(),end:event.end?event.end.clone():null,allDay:event.allDay};$.each(miscProps,function(name){oldProps[name]=event[name];}); // new date-related properties. work off the original date snapshot.
	// ok to use references because they will be thrown away when backupEventDates is called.
	newProps={start:event._start,end:event._end,allDay:allDay // normalize the dates in the same regard as the new properties
	};normalizeEventDates(newProps); // massages start/end/allDay
	// strip or ensure the end date
	if(clearEnd){newProps.end=null;}else if(durationDelta&&!newProps.end){ // the duration translation requires an end date
	newProps.end=t.getDefaultEventEnd(newProps.allDay,newProps.start);}if(dateDelta){newProps.start.add(dateDelta);if(newProps.end){newProps.end.add(dateDelta);}}if(durationDelta){newProps.end.add(durationDelta); // end already ensured above
	} // if the dates have changed, and we know it is impossible to recompute the
	// timezone offsets, strip the zone.
	if(isAmbigTimezone&&!newProps.allDay&&(dateDelta||durationDelta)){newProps.start.stripZone();if(newProps.end){newProps.end.stripZone();}}$.extend(event,miscProps,newProps); // copy over misc props, then date-related props
	backupEventDates(event); // regenerate internal _start/_end/_allDay
	undoFunctions.push(function(){$.extend(event,oldProps);backupEventDates(event); // regenerate internal _start/_end/_allDay
	});});return function(){for(var i=0;i<undoFunctions.length;i++){undoFunctions[i]();}};} /* Business Hours
		-----------------------------------------------------------------------------------------*/t.getBusinessHoursEvents=getBusinessHoursEvents; // Returns an array of events as to when the business hours occur in the given view.
	// Abuse of our event system :(
	function getBusinessHoursEvents(wholeDay){var optionVal=options.businessHours;var defaultVal={className:'fc-nonbusiness',start:'09:00',end:'17:00',dow:[1,2,3,4,5], // monday - friday
	rendering:'inverse-background'};var view=t.getView();var eventInput;if(optionVal){ // `true` (which means "use the defaults") or an override object
	eventInput=$.extend({}, // copy to a new object in either case
	defaultVal,(typeof optionVal==='undefined'?'undefined':_typeof(optionVal))==='object'?optionVal:{} // override the defaults
	);}if(eventInput){ // if a whole-day series is requested, clear the start/end times
	if(wholeDay){eventInput.start=null;eventInput.end=null;}return expandEvent(buildEventFromInput(eventInput),view.start,view.end);}return [];} /* Overlapping / Constraining
		-----------------------------------------------------------------------------------------*/t.isEventSpanAllowed=isEventSpanAllowed;t.isExternalSpanAllowed=isExternalSpanAllowed;t.isSelectionSpanAllowed=isSelectionSpanAllowed; // Determines if the given event can be relocated to the given span (unzoned start/end with other misc data)
	function isEventSpanAllowed(span,event){var source=event.source||{};var constraint=firstDefined(event.constraint,source.constraint,options.eventConstraint);var overlap=firstDefined(event.overlap,source.overlap,options.eventOverlap);return isSpanAllowed(span,constraint,overlap,event);} // Determines if an external event can be relocated to the given span (unzoned start/end with other misc data)
	function isExternalSpanAllowed(eventSpan,eventLocation,eventProps){var eventInput;var event; // note: very similar logic is in View's reportExternalDrop
	if(eventProps){eventInput=$.extend({},eventProps,eventLocation);event=expandEvent(buildEventFromInput(eventInput))[0];}if(event){return isEventSpanAllowed(eventSpan,event);}else { // treat it as a selection
	return isSelectionSpanAllowed(eventSpan);}} // Determines the given span (unzoned start/end with other misc data) can be selected.
	function isSelectionSpanAllowed(span){return isSpanAllowed(span,options.selectConstraint,options.selectOverlap);} // Returns true if the given span (caused by an event drop/resize or a selection) is allowed to exist
	// according to the constraint/overlap settings.
	// `event` is not required if checking a selection.
	function isSpanAllowed(span,constraint,overlap,event){var constraintEvents;var anyContainment;var peerEvents;var i,peerEvent;var peerOverlap; // the range must be fully contained by at least one of produced constraint events
	if(constraint!=null){ // not treated as an event! intermediate data structure
	// TODO: use ranges in the future
	constraintEvents=constraintToEvents(constraint);anyContainment=false;for(i=0;i<constraintEvents.length;i++){if(eventContainsRange(constraintEvents[i],span)){anyContainment=true;break;}}if(!anyContainment){return false;}}peerEvents=t.getPeerEvents(span,event);for(i=0;i<peerEvents.length;i++){peerEvent=peerEvents[i]; // there needs to be an actual intersection before disallowing anything
	if(eventIntersectsRange(peerEvent,span)){ // evaluate overlap for the given range and short-circuit if necessary
	if(overlap===false){return false;} // if the event's overlap is a test function, pass the peer event in question as the first param
	else if(typeof overlap==='function'&&!overlap(peerEvent,event)){return false;} // if we are computing if the given range is allowable for an event, consider the other event's
	// EventObject-specific or Source-specific `overlap` property
	if(event){peerOverlap=firstDefined(peerEvent.overlap,(peerEvent.source||{}).overlap // we already considered the global `eventOverlap`
	);if(peerOverlap===false){return false;} // if the peer event's overlap is a test function, pass the subject event as the first param
	if(typeof peerOverlap==='function'&&!peerOverlap(event,peerEvent)){return false;}}}}return true;} // Given an event input from the API, produces an array of event objects. Possible event inputs:
	// 'businessHours'
	// An event ID (number or string)
	// An object with specific start/end dates or a recurring event (like what businessHours accepts)
	function constraintToEvents(constraintInput){if(constraintInput==='businessHours'){return getBusinessHoursEvents();}if((typeof constraintInput==='undefined'?'undefined':_typeof(constraintInput))==='object'){return expandEvent(buildEventFromInput(constraintInput));}return clientEvents(constraintInput); // probably an ID
	} // Does the event's date range fully contain the given range?
	// start/end already assumed to have stripped zones :(
	function eventContainsRange(event,range){var eventStart=event.start.clone().stripZone();var eventEnd=t.getEventEnd(event).stripZone();return range.start>=eventStart&&range.end<=eventEnd;} // Does the event's date range intersect with the given range?
	// start/end already assumed to have stripped zones :(
	function eventIntersectsRange(event,range){var eventStart=event.start.clone().stripZone();var eventEnd=t.getEventEnd(event).stripZone();return range.start<eventEnd&&range.end>eventStart;}t.getEventCache=function(){return cache;};} // Returns a list of events that the given event should be compared against when being considered for a move to
	// the specified span. Attached to the Calendar's prototype because EventManager is a mixin for a Calendar.
	Calendar.prototype.getPeerEvents=function(span,event){var cache=this.getEventCache();var peerEvents=[];var i,otherEvent;for(i=0;i<cache.length;i++){otherEvent=cache[i];if(!event||event._id!==otherEvent._id // don't compare the event to itself or other related [repeating] events
	){peerEvents.push(otherEvent);}}return peerEvents;}; // updates the "backup" properties, which are preserved in order to compute diffs later on.
	function backupEventDates(event){event._allDay=event.allDay;event._start=event.start.clone();event._end=event.end?event.end.clone():null;};; /* An abstract class for the "basic" views, as well as month view. Renders one or more rows of day cells.
	----------------------------------------------------------------------------------------------------------------------*/ // It is a manager for a DayGrid subcomponent, which does most of the heavy lifting.
	// It is responsible for managing width/height.
	var BasicView=FC.BasicView=View.extend({dayGridClass:DayGrid, // class the dayGrid will be instantiated from (overridable by subclasses)
	dayGrid:null, // the main subcomponent that does most of the heavy lifting
	dayNumbersVisible:false, // display day numbers on each day cell?
	weekNumbersVisible:false, // display week numbers along the side?
	weekNumberWidth:null, // width of all the week-number cells running down the side
	headContainerEl:null, // div that hold's the dayGrid's rendered date header
	headRowEl:null, // the fake row element of the day-of-week header
	initialize:function initialize(){this.dayGrid=this.instantiateDayGrid();}, // Generates the DayGrid object this view needs. Draws from this.dayGridClass
	instantiateDayGrid:function instantiateDayGrid(){ // generate a subclass on the fly with BasicView-specific behavior
	// TODO: cache this subclass
	var subclass=this.dayGridClass.extend(basicDayGridMethods);return new subclass(this);}, // Sets the display range and computes all necessary dates
	setRange:function setRange(range){View.prototype.setRange.call(this,range); // call the super-method
	this.dayGrid.breakOnWeeks=/year|month|week/.test(this.intervalUnit); // do before setRange
	this.dayGrid.setRange(range);}, // Compute the value to feed into setRange. Overrides superclass.
	computeRange:function computeRange(date){var range=View.prototype.computeRange.call(this,date); // get value from the super-method
	// year and month views should be aligned with weeks. this is already done for week
	if(/year|month/.test(range.intervalUnit)){range.start.startOf('week');range.start=this.skipHiddenDays(range.start); // make end-of-week if not already
	if(range.end.weekday()){range.end.add(1,'week').startOf('week');range.end=this.skipHiddenDays(range.end,-1,true); // exclusively move backwards
	}}return range;}, // Renders the view into `this.el`, which should already be assigned
	renderDates:function renderDates(){this.dayNumbersVisible=this.dayGrid.rowCnt>1; // TODO: make grid responsible
	this.weekNumbersVisible=this.opt('weekNumbers');this.dayGrid.numbersVisible=this.dayNumbersVisible||this.weekNumbersVisible;this.el.addClass('fc-basic-view').html(this.renderSkeletonHtml());this.renderHead();this.scrollerEl=this.el.find('.fc-day-grid-container');this.dayGrid.setElement(this.el.find('.fc-day-grid'));this.dayGrid.renderDates(this.hasRigidRows());}, // render the day-of-week headers
	renderHead:function renderHead(){this.headContainerEl=this.el.find('.fc-head-container').html(this.dayGrid.renderHeadHtml());this.headRowEl=this.headContainerEl.find('.fc-row');}, // Unrenders the content of the view. Since we haven't separated skeleton rendering from date rendering,
	// always completely kill the dayGrid's rendering.
	unrenderDates:function unrenderDates(){this.dayGrid.unrenderDates();this.dayGrid.removeElement();},renderBusinessHours:function renderBusinessHours(){this.dayGrid.renderBusinessHours();}, // Builds the HTML skeleton for the view.
	// The day-grid component will render inside of a container defined by this HTML.
	renderSkeletonHtml:function renderSkeletonHtml(){return ''+'<table>'+'<thead class="fc-head">'+'<tr>'+'<td class="fc-head-container '+this.widgetHeaderClass+'"></td>'+'</tr>'+'</thead>'+'<tbody class="fc-body">'+'<tr>'+'<td class="'+this.widgetContentClass+'">'+'<div class="fc-day-grid-container">'+'<div class="fc-day-grid"/>'+'</div>'+'</td>'+'</tr>'+'</tbody>'+'</table>';}, // Generates an HTML attribute string for setting the width of the week number column, if it is known
	weekNumberStyleAttr:function weekNumberStyleAttr(){if(this.weekNumberWidth!==null){return 'style="width:'+this.weekNumberWidth+'px"';}return '';}, // Determines whether each row should have a constant height
	hasRigidRows:function hasRigidRows(){var eventLimit=this.opt('eventLimit');return eventLimit&&typeof eventLimit!=='number';}, /* Dimensions
		------------------------------------------------------------------------------------------------------------------*/ // Refreshes the horizontal dimensions of the view
	updateWidth:function updateWidth(){if(this.weekNumbersVisible){ // Make sure all week number cells running down the side have the same width.
	// Record the width for cells created later.
	this.weekNumberWidth=matchCellWidths(this.el.find('.fc-week-number'));}}, // Adjusts the vertical dimensions of the view to the specified values
	setHeight:function setHeight(totalHeight,isAuto){var eventLimit=this.opt('eventLimit');var scrollerHeight; // reset all heights to be natural
	unsetScroller(this.scrollerEl);uncompensateScroll(this.headRowEl);this.dayGrid.removeSegPopover(); // kill the "more" popover if displayed
	// is the event limit a constant level number?
	if(eventLimit&&typeof eventLimit==='number'){this.dayGrid.limitRows(eventLimit); // limit the levels first so the height can redistribute after
	}scrollerHeight=this.computeScrollerHeight(totalHeight);this.setGridHeight(scrollerHeight,isAuto); // is the event limit dynamically calculated?
	if(eventLimit&&typeof eventLimit!=='number'){this.dayGrid.limitRows(eventLimit); // limit the levels after the grid's row heights have been set
	}if(!isAuto&&setPotentialScroller(this.scrollerEl,scrollerHeight)){ // using scrollbars?
	compensateScroll(this.headRowEl,getScrollbarWidths(this.scrollerEl)); // doing the scrollbar compensation might have created text overflow which created more height. redo
	scrollerHeight=this.computeScrollerHeight(totalHeight);this.scrollerEl.height(scrollerHeight);}}, // Sets the height of just the DayGrid component in this view
	setGridHeight:function setGridHeight(height,isAuto){if(isAuto){undistributeHeight(this.dayGrid.rowEls); // let the rows be their natural height with no expanding
	}else {distributeHeight(this.dayGrid.rowEls,height,true); // true = compensate for height-hogging rows
	}}, /* Hit Areas
		------------------------------------------------------------------------------------------------------------------*/ // forward all hit-related method calls to dayGrid
	prepareHits:function prepareHits(){this.dayGrid.prepareHits();},releaseHits:function releaseHits(){this.dayGrid.releaseHits();},queryHit:function queryHit(left,top){return this.dayGrid.queryHit(left,top);},getHitSpan:function getHitSpan(hit){return this.dayGrid.getHitSpan(hit);},getHitEl:function getHitEl(hit){return this.dayGrid.getHitEl(hit);}, /* Events
		------------------------------------------------------------------------------------------------------------------*/ // Renders the given events onto the view and populates the segments array
	renderEvents:function renderEvents(events){this.dayGrid.renderEvents(events);this.updateHeight(); // must compensate for events that overflow the row
	}, // Retrieves all segment objects that are rendered in the view
	getEventSegs:function getEventSegs(){return this.dayGrid.getEventSegs();}, // Unrenders all event elements and clears internal segment data
	unrenderEvents:function unrenderEvents(){this.dayGrid.unrenderEvents(); // we DON'T need to call updateHeight() because:
	// A) a renderEvents() call always happens after this, which will eventually call updateHeight()
	// B) in IE8, this causes a flash whenever events are rerendered
	}, /* Dragging (for both events and external elements)
		------------------------------------------------------------------------------------------------------------------*/ // A returned value of `true` signals that a mock "helper" event has been rendered.
	renderDrag:function renderDrag(dropLocation,seg){return this.dayGrid.renderDrag(dropLocation,seg);},unrenderDrag:function unrenderDrag(){this.dayGrid.unrenderDrag();}, /* Selection
		------------------------------------------------------------------------------------------------------------------*/ // Renders a visual indication of a selection
	renderSelection:function renderSelection(span){this.dayGrid.renderSelection(span);}, // Unrenders a visual indications of a selection
	unrenderSelection:function unrenderSelection(){this.dayGrid.unrenderSelection();}}); // Methods that will customize the rendering behavior of the BasicView's dayGrid
	var basicDayGridMethods={ // Generates the HTML that will go before the day-of week header cells
	renderHeadIntroHtml:function renderHeadIntroHtml(){var view=this.view;if(view.weekNumbersVisible){return ''+'<th class="fc-week-number '+view.widgetHeaderClass+'" '+view.weekNumberStyleAttr()+'>'+'<span>'+ // needed for matchCellWidths
	htmlEscape(view.opt('weekNumberTitle'))+'</span>'+'</th>';}return '';}, // Generates the HTML that will go before content-skeleton cells that display the day/week numbers
	renderNumberIntroHtml:function renderNumberIntroHtml(row){var view=this.view;if(view.weekNumbersVisible){return ''+'<td class="fc-week-number" '+view.weekNumberStyleAttr()+'>'+'<span>'+ // needed for matchCellWidths
	this.getCellDate(row,0).format('w')+'</span>'+'</td>';}return '';}, // Generates the HTML that goes before the day bg cells for each day-row
	renderBgIntroHtml:function renderBgIntroHtml(){var view=this.view;if(view.weekNumbersVisible){return '<td class="fc-week-number '+view.widgetContentClass+'" '+view.weekNumberStyleAttr()+'></td>';}return '';}, // Generates the HTML that goes before every other type of row generated by DayGrid.
	// Affects helper-skeleton and highlight-skeleton rows.
	renderIntroHtml:function renderIntroHtml(){var view=this.view;if(view.weekNumbersVisible){return '<td class="fc-week-number" '+view.weekNumberStyleAttr()+'></td>';}return '';}};;; /* A month view with day cells running in rows (one-per-week) and columns
	----------------------------------------------------------------------------------------------------------------------*/var MonthView=FC.MonthView=BasicView.extend({ // Produces information about what range to display
	computeRange:function computeRange(date){var range=BasicView.prototype.computeRange.call(this,date); // get value from super-method
	var rowCnt; // ensure 6 weeks
	if(this.isFixedWeeks()){rowCnt=Math.ceil(range.end.diff(range.start,'weeks',true)); // could be partial weeks due to hiddenDays
	range.end.add(6-rowCnt,'weeks');}return range;}, // Overrides the default BasicView behavior to have special multi-week auto-height logic
	setGridHeight:function setGridHeight(height,isAuto){isAuto=isAuto||this.opt('weekMode')==='variable'; // LEGACY: weekMode is deprecated
	// if auto, make the height of each row the height that it would be if there were 6 weeks
	if(isAuto){height*=this.rowCnt/6;}distributeHeight(this.dayGrid.rowEls,height,!isAuto); // if auto, don't compensate for height-hogging rows
	},isFixedWeeks:function isFixedWeeks(){var weekMode=this.opt('weekMode'); // LEGACY: weekMode is deprecated
	if(weekMode){return weekMode==='fixed'; // if any other type of weekMode, assume NOT fixed
	}return this.opt('fixedWeekCount');}});;;fcViews.basic={'class':BasicView};fcViews.basicDay={type:'basic',duration:{days:1}};fcViews.basicWeek={type:'basic',duration:{weeks:1}};fcViews.month={'class':MonthView,duration:{months:1}, // important for prev/next
	defaults:{fixedWeekCount:true}};;; /* An abstract class for all agenda-related views. Displays one more columns with time slots running vertically.
	----------------------------------------------------------------------------------------------------------------------*/ // Is a manager for the TimeGrid subcomponent and possibly the DayGrid subcomponent (if allDaySlot is on).
	// Responsible for managing width/height.
	var AgendaView=FC.AgendaView=View.extend({timeGridClass:TimeGrid, // class used to instantiate the timeGrid. subclasses can override
	timeGrid:null, // the main time-grid subcomponent of this view
	dayGridClass:DayGrid, // class used to instantiate the dayGrid. subclasses can override
	dayGrid:null, // the "all-day" subcomponent. if all-day is turned off, this will be null
	axisWidth:null, // the width of the time axis running down the side
	headContainerEl:null, // div that hold's the timeGrid's rendered date header
	noScrollRowEls:null, // set of fake row elements that must compensate when scrollerEl has scrollbars
	// when the time-grid isn't tall enough to occupy the given height, we render an <hr> underneath
	bottomRuleEl:null,bottomRuleHeight:null,initialize:function initialize(){this.timeGrid=this.instantiateTimeGrid();if(this.opt('allDaySlot')){ // should we display the "all-day" area?
	this.dayGrid=this.instantiateDayGrid(); // the all-day subcomponent of this view
	}}, // Instantiates the TimeGrid object this view needs. Draws from this.timeGridClass
	instantiateTimeGrid:function instantiateTimeGrid(){var subclass=this.timeGridClass.extend(agendaTimeGridMethods);return new subclass(this);}, // Instantiates the DayGrid object this view might need. Draws from this.dayGridClass
	instantiateDayGrid:function instantiateDayGrid(){var subclass=this.dayGridClass.extend(agendaDayGridMethods);return new subclass(this);}, /* Rendering
		------------------------------------------------------------------------------------------------------------------*/ // Sets the display range and computes all necessary dates
	setRange:function setRange(range){View.prototype.setRange.call(this,range); // call the super-method
	this.timeGrid.setRange(range);if(this.dayGrid){this.dayGrid.setRange(range);}}, // Renders the view into `this.el`, which has already been assigned
	renderDates:function renderDates(){this.el.addClass('fc-agenda-view').html(this.renderSkeletonHtml());this.renderHead(); // the element that wraps the time-grid that will probably scroll
	this.scrollerEl=this.el.find('.fc-time-grid-container');this.timeGrid.setElement(this.el.find('.fc-time-grid'));this.timeGrid.renderDates(); // the <hr> that sometimes displays under the time-grid
	this.bottomRuleEl=$('<hr class="fc-divider '+this.widgetHeaderClass+'"/>').appendTo(this.timeGrid.el); // inject it into the time-grid
	if(this.dayGrid){this.dayGrid.setElement(this.el.find('.fc-day-grid'));this.dayGrid.renderDates(); // have the day-grid extend it's coordinate area over the <hr> dividing the two grids
	this.dayGrid.bottomCoordPadding=this.dayGrid.el.next('hr').outerHeight();}this.noScrollRowEls=this.el.find('.fc-row:not(.fc-scroller *)'); // fake rows not within the scroller
	}, // render the day-of-week headers
	renderHead:function renderHead(){this.headContainerEl=this.el.find('.fc-head-container').html(this.timeGrid.renderHeadHtml());}, // Unrenders the content of the view. Since we haven't separated skeleton rendering from date rendering,
	// always completely kill each grid's rendering.
	unrenderDates:function unrenderDates(){this.timeGrid.unrenderDates();this.timeGrid.removeElement();if(this.dayGrid){this.dayGrid.unrenderDates();this.dayGrid.removeElement();}}, // Builds the HTML skeleton for the view.
	// The day-grid and time-grid components will render inside containers defined by this HTML.
	renderSkeletonHtml:function renderSkeletonHtml(){return ''+'<table>'+'<thead class="fc-head">'+'<tr>'+'<td class="fc-head-container '+this.widgetHeaderClass+'"></td>'+'</tr>'+'</thead>'+'<tbody class="fc-body">'+'<tr>'+'<td class="'+this.widgetContentClass+'">'+(this.dayGrid?'<div class="fc-day-grid"/>'+'<hr class="fc-divider '+this.widgetHeaderClass+'"/>':'')+'<div class="fc-time-grid-container">'+'<div class="fc-time-grid"/>'+'</div>'+'</td>'+'</tr>'+'</tbody>'+'</table>';}, // Generates an HTML attribute string for setting the width of the axis, if it is known
	axisStyleAttr:function axisStyleAttr(){if(this.axisWidth!==null){return 'style="width:'+this.axisWidth+'px"';}return '';}, /* Business Hours
		------------------------------------------------------------------------------------------------------------------*/renderBusinessHours:function renderBusinessHours(){this.timeGrid.renderBusinessHours();if(this.dayGrid){this.dayGrid.renderBusinessHours();}},unrenderBusinessHours:function unrenderBusinessHours(){this.timeGrid.unrenderBusinessHours();if(this.dayGrid){this.dayGrid.unrenderBusinessHours();}}, /* Now Indicator
		------------------------------------------------------------------------------------------------------------------*/getNowIndicatorUnit:function getNowIndicatorUnit(){return this.timeGrid.getNowIndicatorUnit();},renderNowIndicator:function renderNowIndicator(date){this.timeGrid.renderNowIndicator(date);},unrenderNowIndicator:function unrenderNowIndicator(){this.timeGrid.unrenderNowIndicator();}, /* Dimensions
		------------------------------------------------------------------------------------------------------------------*/updateSize:function updateSize(isResize){this.timeGrid.updateSize(isResize);View.prototype.updateSize.call(this,isResize); // call the super-method
	}, // Refreshes the horizontal dimensions of the view
	updateWidth:function updateWidth(){ // make all axis cells line up, and record the width so newly created axis cells will have it
	this.axisWidth=matchCellWidths(this.el.find('.fc-axis'));}, // Adjusts the vertical dimensions of the view to the specified values
	setHeight:function setHeight(totalHeight,isAuto){var eventLimit;var scrollerHeight;if(this.bottomRuleHeight===null){ // calculate the height of the rule the very first time
	this.bottomRuleHeight=this.bottomRuleEl.outerHeight();}this.bottomRuleEl.hide(); // .show() will be called later if this <hr> is necessary
	// reset all dimensions back to the original state
	this.scrollerEl.css('overflow','');unsetScroller(this.scrollerEl);uncompensateScroll(this.noScrollRowEls); // limit number of events in the all-day area
	if(this.dayGrid){this.dayGrid.removeSegPopover(); // kill the "more" popover if displayed
	eventLimit=this.opt('eventLimit');if(eventLimit&&typeof eventLimit!=='number'){eventLimit=AGENDA_ALL_DAY_EVENT_LIMIT; // make sure "auto" goes to a real number
	}if(eventLimit){this.dayGrid.limitRows(eventLimit);}}if(!isAuto){ // should we force dimensions of the scroll container, or let the contents be natural height?
	scrollerHeight=this.computeScrollerHeight(totalHeight);if(setPotentialScroller(this.scrollerEl,scrollerHeight)){ // using scrollbars?
	// make the all-day and header rows lines up
	compensateScroll(this.noScrollRowEls,getScrollbarWidths(this.scrollerEl)); // the scrollbar compensation might have changed text flow, which might affect height, so recalculate
	// and reapply the desired height to the scroller.
	scrollerHeight=this.computeScrollerHeight(totalHeight);this.scrollerEl.height(scrollerHeight);}else { // no scrollbars
	// still, force a height and display the bottom rule (marks the end of day)
	this.scrollerEl.height(scrollerHeight).css('overflow','hidden'); // in case <hr> goes outside
	this.bottomRuleEl.show();}}}, // Computes the initial pre-configured scroll state prior to allowing the user to change it
	computeInitialScroll:function computeInitialScroll(){var scrollTime=moment.duration(this.opt('scrollTime'));var top=this.timeGrid.computeTimeTop(scrollTime); // zoom can give weird floating-point values. rather scroll a little bit further
	top=Math.ceil(top);if(top){top++; // to overcome top border that slots beyond the first have. looks better
	}return top;}, /* Hit Areas
		------------------------------------------------------------------------------------------------------------------*/ // forward all hit-related method calls to the grids (dayGrid might not be defined)
	prepareHits:function prepareHits(){this.timeGrid.prepareHits();if(this.dayGrid){this.dayGrid.prepareHits();}},releaseHits:function releaseHits(){this.timeGrid.releaseHits();if(this.dayGrid){this.dayGrid.releaseHits();}},queryHit:function queryHit(left,top){var hit=this.timeGrid.queryHit(left,top);if(!hit&&this.dayGrid){hit=this.dayGrid.queryHit(left,top);}return hit;},getHitSpan:function getHitSpan(hit){ // TODO: hit.component is set as a hack to identify where the hit came from
	return hit.component.getHitSpan(hit);},getHitEl:function getHitEl(hit){ // TODO: hit.component is set as a hack to identify where the hit came from
	return hit.component.getHitEl(hit);}, /* Events
		------------------------------------------------------------------------------------------------------------------*/ // Renders events onto the view and populates the View's segment array
	renderEvents:function renderEvents(events){var dayEvents=[];var timedEvents=[];var daySegs=[];var timedSegs;var i; // separate the events into all-day and timed
	for(i=0;i<events.length;i++){if(events[i].allDay){dayEvents.push(events[i]);}else {timedEvents.push(events[i]);}} // render the events in the subcomponents
	timedSegs=this.timeGrid.renderEvents(timedEvents);if(this.dayGrid){daySegs=this.dayGrid.renderEvents(dayEvents);} // the all-day area is flexible and might have a lot of events, so shift the height
	this.updateHeight();}, // Retrieves all segment objects that are rendered in the view
	getEventSegs:function getEventSegs(){return this.timeGrid.getEventSegs().concat(this.dayGrid?this.dayGrid.getEventSegs():[]);}, // Unrenders all event elements and clears internal segment data
	unrenderEvents:function unrenderEvents(){ // unrender the events in the subcomponents
	this.timeGrid.unrenderEvents();if(this.dayGrid){this.dayGrid.unrenderEvents();} // we DON'T need to call updateHeight() because:
	// A) a renderEvents() call always happens after this, which will eventually call updateHeight()
	// B) in IE8, this causes a flash whenever events are rerendered
	}, /* Dragging (for events and external elements)
		------------------------------------------------------------------------------------------------------------------*/ // A returned value of `true` signals that a mock "helper" event has been rendered.
	renderDrag:function renderDrag(dropLocation,seg){if(dropLocation.start.hasTime()){return this.timeGrid.renderDrag(dropLocation,seg);}else if(this.dayGrid){return this.dayGrid.renderDrag(dropLocation,seg);}},unrenderDrag:function unrenderDrag(){this.timeGrid.unrenderDrag();if(this.dayGrid){this.dayGrid.unrenderDrag();}}, /* Selection
		------------------------------------------------------------------------------------------------------------------*/ // Renders a visual indication of a selection
	renderSelection:function renderSelection(span){if(span.start.hasTime()||span.end.hasTime()){this.timeGrid.renderSelection(span);}else if(this.dayGrid){this.dayGrid.renderSelection(span);}}, // Unrenders a visual indications of a selection
	unrenderSelection:function unrenderSelection(){this.timeGrid.unrenderSelection();if(this.dayGrid){this.dayGrid.unrenderSelection();}}}); // Methods that will customize the rendering behavior of the AgendaView's timeGrid
	// TODO: move into TimeGrid
	var agendaTimeGridMethods={ // Generates the HTML that will go before the day-of week header cells
	renderHeadIntroHtml:function renderHeadIntroHtml(){var view=this.view;var weekText;if(view.opt('weekNumbers')){weekText=this.start.format(view.opt('smallWeekFormat'));return ''+'<th class="fc-axis fc-week-number '+view.widgetHeaderClass+'" '+view.axisStyleAttr()+'>'+'<span>'+ // needed for matchCellWidths
	htmlEscape(weekText)+'</span>'+'</th>';}else {return '<th class="fc-axis '+view.widgetHeaderClass+'" '+view.axisStyleAttr()+'></th>';}}, // Generates the HTML that goes before the bg of the TimeGrid slot area. Long vertical column.
	renderBgIntroHtml:function renderBgIntroHtml(){var view=this.view;return '<td class="fc-axis '+view.widgetContentClass+'" '+view.axisStyleAttr()+'></td>';}, // Generates the HTML that goes before all other types of cells.
	// Affects content-skeleton, helper-skeleton, highlight-skeleton for both the time-grid and day-grid.
	renderIntroHtml:function renderIntroHtml(){var view=this.view;return '<td class="fc-axis" '+view.axisStyleAttr()+'></td>';}}; // Methods that will customize the rendering behavior of the AgendaView's dayGrid
	var agendaDayGridMethods={ // Generates the HTML that goes before the all-day cells
	renderBgIntroHtml:function renderBgIntroHtml(){var view=this.view;return ''+'<td class="fc-axis '+view.widgetContentClass+'" '+view.axisStyleAttr()+'>'+'<span>'+( // needed for matchCellWidths
	view.opt('allDayHtml')||htmlEscape(view.opt('allDayText')))+'</span>'+'</td>';}, // Generates the HTML that goes before all other types of cells.
	// Affects content-skeleton, helper-skeleton, highlight-skeleton for both the time-grid and day-grid.
	renderIntroHtml:function renderIntroHtml(){var view=this.view;return '<td class="fc-axis" '+view.axisStyleAttr()+'></td>';}};;;var AGENDA_ALL_DAY_EVENT_LIMIT=5; // potential nice values for the slot-duration and interval-duration
	// from largest to smallest
	var AGENDA_STOCK_SUB_DURATIONS=[{hours:1},{minutes:30},{minutes:15},{seconds:30},{seconds:15}];fcViews.agenda={'class':AgendaView,defaults:{allDaySlot:true,allDayText:'all-day',slotDuration:'00:30:00',minTime:'00:00:00',maxTime:'24:00:00',slotEventOverlap:true // a bad name. confused with overlap/constraint system
	}};fcViews.agendaDay={type:'agenda',duration:{days:1}};fcViews.agendaWeek={type:'agenda',duration:{weeks:1}};;;return FC; // export for Node/CommonJS
	});

/***/ },
/* 115 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function($) {'use strict'; /*
	*  AngularJs Fullcalendar Wrapper for the JQuery FullCalendar
	*  API @ http://arshaw.com/fullcalendar/
	*
	*  Angular Calendar Directive that takes in the [eventSources] nested array object as the ng-model and watches it deeply changes.
	*       Can also take in multiple event urls as a source object(s) and feed the events per view.
	*       The calendar will watch any eventSource array and update itself when a change is made.
	*
	*/angular.module('ui.calendar',[]).constant('uiCalendarConfig',{calendars:{}}).controller('uiCalendarCtrl',['$scope','$locale',function($scope,$locale){var sources=$scope.eventSources,extraEventSignature=$scope.calendarWatchEvent?$scope.calendarWatchEvent:angular.noop,wrapFunctionWithScopeApply=function wrapFunctionWithScopeApply(functionToWrap){return function(){ // This may happen outside of angular context, so create one if outside.
	if($scope.$root.$$phase){return functionToWrap.apply(this,arguments);}else {var args=arguments;var self=this;return $scope.$root.$apply(function(){return functionToWrap.apply(self,args);});}};};var eventSerialId=1; // @return {String} fingerprint of the event object and its properties
	this.eventFingerprint=function(e){if(!e._id){e._id=eventSerialId++;}var extraSignature=extraEventSignature({event:e})||'';var start=moment.isMoment(e.start)?e.start.unix():e.start?moment(e.start).unix():'';var end=moment.isMoment(e.end)?e.end.unix():e.end?moment(e.end).unix():''; // This extracts all the information we need from the event. http://jsperf.com/angular-calendar-events-fingerprint/3
	return ""+e._id+(e.id||'')+(e.title||'')+(e.url||'')+start+end+(e.allDay||'')+(e.className||'')+extraSignature;};var sourceSerialId=1,sourceEventsSerialId=1; // @return {String} fingerprint of the source object and its events array
	this.sourceFingerprint=function(source){var fp=''+(source.__id||(source.__id=sourceSerialId++)),events=angular.isObject(source)&&source.events;if(events){fp=fp+'-'+(events.__id||(events.__id=sourceEventsSerialId++));}return fp;}; // @return {Array} all events from all sources
	this.allEvents=function(){ // do sources.map(&:events).flatten(), but we don't have flatten
	var arraySources=[];for(var i=0,srcLen=sources.length;i<srcLen;i++){var source=sources[i];if(angular.isArray(source)){ // event source as array
	arraySources.push(source);}else if(angular.isObject(source)&&angular.isArray(source.events)){ // event source as object, ie extended form
	var extEvent={};for(var key in source){if(key!=='_id'&&key!=='events'){extEvent[key]=source[key];}}for(var eI=0;eI<source.events.length;eI++){angular.extend(source.events[eI],extEvent);}arraySources.push(source.events);}}return Array.prototype.concat.apply([],arraySources);}; // Track changes in array of objects by assigning id tokens to each element and watching the scope for changes in the tokens
	// @param {Array|Function} arraySource array of objects to watch
	// @param tokenFn {Function} that returns the token for a given object
	// @return {Object}
	//  subscribe: function(scope, function(newTokens, oldTokens))
	//    called when source has changed. return false to prevent individual callbacks from firing
	//  onAdded/Removed/Changed:
	//    when set to a callback, called each item where a respective change is detected
	this.changeWatcher=function(arraySource,tokenFn){var self;var getTokens=function getTokens(){var array=angular.isFunction(arraySource)?arraySource():arraySource;var result=[],token,el;for(var i=0,n=array.length;i<n;i++){el=array[i];token=tokenFn(el);map[token]=el;result.push(token);}return result;}; // @param {Array} a
	// @param {Array} b
	// @return {Array} elements in that are in a but not in b
	// @example
	//  subtractAsSets([6, 100, 4, 5], [4, 5, 7]) // [6, 100]
	var subtractAsSets=function subtractAsSets(a,b){var result=[],inB={},i,n;for(i=0,n=b.length;i<n;i++){inB[b[i]]=true;}for(i=0,n=a.length;i<n;i++){if(!inB[a[i]]){result.push(a[i]);}}return result;}; // Map objects to tokens and vice-versa
	var map={}; // Compare newTokens to oldTokens and call onAdded, onRemoved, and onChanged handlers for each affected event respectively.
	var applyChanges=function applyChanges(newTokens,oldTokens){var i,n,el,token;var replacedTokens={};var removedTokens=subtractAsSets(oldTokens,newTokens);for(i=0,n=removedTokens.length;i<n;i++){var removedToken=removedTokens[i];el=map[removedToken];delete map[removedToken];var newToken=tokenFn(el); // if the element wasn't removed but simply got a new token, its old token will be different from the current one
	if(newToken===removedToken){self.onRemoved(el);}else {replacedTokens[newToken]=removedToken;self.onChanged(el);}}var addedTokens=subtractAsSets(newTokens,oldTokens);for(i=0,n=addedTokens.length;i<n;i++){token=addedTokens[i];el=map[token];if(!replacedTokens[token]){self.onAdded(el);}}};return self={subscribe:function subscribe(scope,onArrayChanged){scope.$watch(getTokens,function(newTokens,oldTokens){var notify=!(onArrayChanged&&onArrayChanged(newTokens,oldTokens)===false);if(notify){applyChanges(newTokens,oldTokens);}},true);},onAdded:angular.noop,onChanged:angular.noop,onRemoved:angular.noop};};this.getFullCalendarConfig=function(calendarSettings,uiCalendarConfig){var config={};angular.extend(config,uiCalendarConfig);angular.extend(config,calendarSettings);angular.forEach(config,function(value,key){if(typeof value==='function'){config[key]=wrapFunctionWithScopeApply(config[key]);}});return config;};this.getLocaleConfig=function(fullCalendarConfig){if(!fullCalendarConfig.lang||fullCalendarConfig.useNgLocale){ // Configure to use locale names by default
	var tValues=function tValues(data){ // convert {0: "Jan", 1: "Feb", ...} to ["Jan", "Feb", ...]
	var r,k;r=[];for(k in data){r[k]=data[k];}return r;};var dtf=$locale.DATETIME_FORMATS;return {monthNames:tValues(dtf.MONTH),monthNamesShort:tValues(dtf.SHORTMONTH),dayNames:tValues(dtf.DAY),dayNamesShort:tValues(dtf.SHORTDAY)};}return {};};}]).directive('uiCalendar',['uiCalendarConfig',function(uiCalendarConfig){return {restrict:'A',scope:{eventSources:'=ngModel',calendarWatchEvent:'&'},controller:'uiCalendarCtrl',link:function link(scope,elm,attrs,controller){var sources=scope.eventSources,sourcesChanged=false,calendar,eventSourcesWatcher=controller.changeWatcher(sources,controller.sourceFingerprint),eventsWatcher=controller.changeWatcher(controller.allEvents,controller.eventFingerprint),options=null;function getOptions(){var calendarSettings=attrs.uiCalendar?scope.$parent.$eval(attrs.uiCalendar):{},fullCalendarConfig;fullCalendarConfig=controller.getFullCalendarConfig(calendarSettings,uiCalendarConfig);var localeFullCalendarConfig=controller.getLocaleConfig(fullCalendarConfig);angular.extend(localeFullCalendarConfig,fullCalendarConfig);options={eventSources:sources};angular.extend(options,localeFullCalendarConfig); //remove calendars from options
	options.calendars=null;var options2={};for(var o in options){if(o!=='eventSources'){options2[o]=options[o];}}return JSON.stringify(options2);}scope.destroyCalendar=function(){if(calendar&&calendar.fullCalendar){calendar.fullCalendar('destroy');}if(attrs.calendar){calendar=uiCalendarConfig.calendars[attrs.calendar]=$(elm).html('');}else {calendar=$(elm).html('');}};scope.initCalendar=function(){if(!calendar){calendar=angular.element(elm).html('');}calendar.fullCalendar(options);if(attrs.calendar){uiCalendarConfig.calendars[attrs.calendar]=calendar;}};scope.$on('$destroy',function(){scope.destroyCalendar();});eventSourcesWatcher.onAdded=function(source){if(calendar&&calendar.fullCalendar){calendar.fullCalendar(options);if(attrs.calendar){uiCalendarConfig.calendars[attrs.calendar]=calendar;}calendar.fullCalendar('addEventSource',source);sourcesChanged=true;}};eventSourcesWatcher.onRemoved=function(source){if(calendar&&calendar.fullCalendar){calendar.fullCalendar('removeEventSource',source);sourcesChanged=true;}};eventSourcesWatcher.onChanged=function(){if(calendar&&calendar.fullCalendar){calendar.fullCalendar('refetchEvents');sourcesChanged=true;}};eventsWatcher.onAdded=function(event){if(calendar&&calendar.fullCalendar){calendar.fullCalendar('renderEvent',event,event.stick?true:false);}};eventsWatcher.onRemoved=function(event){if(calendar&&calendar.fullCalendar){calendar.fullCalendar('removeEvents',event._id);}};eventsWatcher.onChanged=function(event){if(calendar&&calendar.fullCalendar){var clientEvents=calendar.fullCalendar('clientEvents',event._id);for(var i=0;i<clientEvents.length;i++){var clientEvent=clientEvents[i];clientEvent=angular.extend(clientEvent,event);calendar.fullCalendar('updateEvent',clientEvent);}}};eventSourcesWatcher.subscribe(scope);eventsWatcher.subscribe(scope,function(){if(sourcesChanged===true){sourcesChanged=false; // return false to prevent onAdded/Removed/Changed handlers from firing in this case
	return false;}});scope.$watch(getOptions,function(newValue,oldValue){if(newValue!==oldValue){scope.destroyCalendar();scope.initCalendar();}else if(newValue&&angular.isUndefined(calendar)){scope.initCalendar();}});}};}]);
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 116 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict'; /*
	 * ngDialog - easy modals and popup windows
	 * http://github.com/likeastore/ngDialog
	 * (c) 2013-2015 MIT License, https://likeastore.com
	 */(function(root,factory){if(typeof module!=='undefined'&&module.exports){ // CommonJS
	if(typeof angular==='undefined'){factory(__webpack_require__(2));}else {factory(angular);}module.exports='ngDialog';}else if(true){ // AMD
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(2)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));}else { // Global Variables
	factory(root.angular);}})(undefined,function(angular){'use strict';var m=angular.module('ngDialog',[]);var $el=angular.element;var isDef=angular.isDefined;var style=(document.body||document.documentElement).style;var animationEndSupport=isDef(style.animation)||isDef(style.WebkitAnimation)||isDef(style.MozAnimation)||isDef(style.MsAnimation)||isDef(style.OAnimation);var animationEndEvent='animationend webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend';var focusableElementSelector='a[href], area[href], input:not([disabled]), select:not([disabled]), textarea:not([disabled]), button:not([disabled]), iframe, object, embed, *[tabindex], *[contenteditable]';var disabledAnimationClass='ngdialog-disabled-animation';var forceElementsReload={html:false,body:false};var scopes={};var openIdStack=[];var keydownIsBound=false;var openOnePerName=false;m.provider('ngDialog',function(){var defaults=this.defaults={className:'ngdialog-theme-default',disableAnimation:false,plain:false,showClose:true,closeByDocument:true,closeByEscape:true,closeByNavigation:false,appendTo:false,preCloseCallback:false,overlay:true,cache:true,trapFocus:true,preserveFocus:true,ariaAuto:true,ariaRole:null,ariaLabelledById:null,ariaLabelledBySelector:null,ariaDescribedById:null,ariaDescribedBySelector:null};this.setForceHtmlReload=function(_useIt){forceElementsReload.html=_useIt||false;};this.setForceBodyReload=function(_useIt){forceElementsReload.body=_useIt||false;};this.setDefaults=function(newDefaults){angular.extend(defaults,newDefaults);};this.setOpenOnePerName=function(isOpenOne){openOnePerName=isOpenOne||false;};var globalID=0,dialogsCount=0,closeByDocumentHandler,defers={};this.$get=['$document','$templateCache','$compile','$q','$http','$rootScope','$timeout','$window','$controller','$injector',function($document,$templateCache,$compile,$q,$http,$rootScope,$timeout,$window,$controller,$injector){var $elements=[];var privateMethods={onDocumentKeydown:function onDocumentKeydown(event){if(event.keyCode===27){publicMethods.close('$escape');}},activate:function activate($dialog){var options=$dialog.data('$ngDialogOptions');if(options.trapFocus){$dialog.on('keydown',privateMethods.onTrapFocusKeydown); // Catch rogue changes (eg. after unfocusing everything by clicking a non-focusable element)
	$elements.body.on('keydown',privateMethods.onTrapFocusKeydown);}},deactivate:function deactivate($dialog){$dialog.off('keydown',privateMethods.onTrapFocusKeydown);$elements.body.off('keydown',privateMethods.onTrapFocusKeydown);},deactivateAll:function deactivateAll(els){angular.forEach(els,function(el){var $dialog=angular.element(el);privateMethods.deactivate($dialog);});},setBodyPadding:function setBodyPadding(width){var originalBodyPadding=parseInt($elements.body.css('padding-right')||0,10);$elements.body.css('padding-right',originalBodyPadding+width+'px');$elements.body.data('ng-dialog-original-padding',originalBodyPadding);$rootScope.$broadcast('ngDialog.setPadding',width);},resetBodyPadding:function resetBodyPadding(){var originalBodyPadding=$elements.body.data('ng-dialog-original-padding');if(originalBodyPadding){$elements.body.css('padding-right',originalBodyPadding+'px');}else {$elements.body.css('padding-right','');}$rootScope.$broadcast('ngDialog.setPadding',0);},performCloseDialog:function performCloseDialog($dialog,value){var options=$dialog.data('$ngDialogOptions');var id=$dialog.attr('id');var scope=scopes[id];if(!scope){ // Already closed
	return;}if(typeof $window.Hammer!=='undefined'){var hammerTime=scope.hammerTime;hammerTime.off('tap',closeByDocumentHandler);hammerTime.destroy&&hammerTime.destroy();delete scope.hammerTime;}else {$dialog.unbind('click');}if(dialogsCount===1){$elements.body.unbind('keydown',privateMethods.onDocumentKeydown);}if(!$dialog.hasClass('ngdialog-closing')){dialogsCount-=1;}var previousFocus=$dialog.data('$ngDialogPreviousFocus');if(previousFocus&&previousFocus.focus){previousFocus.focus();}$rootScope.$broadcast('ngDialog.closing',$dialog,value);dialogsCount=dialogsCount<0?0:dialogsCount;if(animationEndSupport&&!options.disableAnimation){scope.$destroy();$dialog.unbind(animationEndEvent).bind(animationEndEvent,function(){privateMethods.closeDialogElement($dialog,value);}).addClass('ngdialog-closing');}else {scope.$destroy();privateMethods.closeDialogElement($dialog,value);}if(defers[id]){defers[id].resolve({id:id,value:value,$dialog:$dialog,remainingDialogs:dialogsCount});delete defers[id];}if(scopes[id]){delete scopes[id];}openIdStack.splice(openIdStack.indexOf(id),1);if(!openIdStack.length){$elements.body.unbind('keydown',privateMethods.onDocumentKeydown);keydownIsBound=false;}},closeDialogElement:function closeDialogElement($dialog,value){$dialog.remove();if(dialogsCount===0){$elements.html.removeClass('ngdialog-open');$elements.body.removeClass('ngdialog-open');privateMethods.resetBodyPadding();}$rootScope.$broadcast('ngDialog.closed',$dialog,value);},closeDialog:function closeDialog($dialog,value){var preCloseCallback=$dialog.data('$ngDialogPreCloseCallback');if(preCloseCallback&&angular.isFunction(preCloseCallback)){var preCloseCallbackResult=preCloseCallback.call($dialog,value);if(angular.isObject(preCloseCallbackResult)){if(preCloseCallbackResult.closePromise){preCloseCallbackResult.closePromise.then(function(){privateMethods.performCloseDialog($dialog,value);});}else {preCloseCallbackResult.then(function(){privateMethods.performCloseDialog($dialog,value);},function(){return;});}}else if(preCloseCallbackResult!==false){privateMethods.performCloseDialog($dialog,value);}}else {privateMethods.performCloseDialog($dialog,value);}},onTrapFocusKeydown:function onTrapFocusKeydown(ev){var el=angular.element(ev.currentTarget);var $dialog;if(el.hasClass('ngdialog')){$dialog=el;}else {$dialog=privateMethods.getActiveDialog();if($dialog===null){return;}}var isTab=ev.keyCode===9;var backward=ev.shiftKey===true;if(isTab){privateMethods.handleTab($dialog,ev,backward);}},handleTab:function handleTab($dialog,ev,backward){var focusableElements=privateMethods.getFocusableElements($dialog);if(focusableElements.length===0){if(document.activeElement){document.activeElement.blur();}return;}var currentFocus=document.activeElement;var focusIndex=Array.prototype.indexOf.call(focusableElements,currentFocus);var isFocusIndexUnknown=focusIndex===-1;var isFirstElementFocused=focusIndex===0;var isLastElementFocused=focusIndex===focusableElements.length-1;var cancelEvent=false;if(backward){if(isFocusIndexUnknown||isFirstElementFocused){focusableElements[focusableElements.length-1].focus();cancelEvent=true;}}else {if(isFocusIndexUnknown||isLastElementFocused){focusableElements[0].focus();cancelEvent=true;}}if(cancelEvent){ev.preventDefault();ev.stopPropagation();}},autoFocus:function autoFocus($dialog){var dialogEl=$dialog[0]; // Browser's (Chrome 40, Forefix 37, IE 11) don't appear to honor autofocus on the dialog, but we should
	var autoFocusEl=dialogEl.querySelector('*[autofocus]');if(autoFocusEl!==null){autoFocusEl.focus();if(document.activeElement===autoFocusEl){return;} // Autofocus element might was display: none, so let's continue
	}var focusableElements=privateMethods.getFocusableElements($dialog);if(focusableElements.length>0){focusableElements[0].focus();return;} // We need to focus something for the screen readers to notice the dialog
	var contentElements=privateMethods.filterVisibleElements(dialogEl.querySelectorAll('h1,h2,h3,h4,h5,h6,p,span'));if(contentElements.length>0){var contentElement=contentElements[0];$el(contentElement).attr('tabindex','-1').css('outline','0');contentElement.focus();}},getFocusableElements:function getFocusableElements($dialog){var dialogEl=$dialog[0];var rawElements=dialogEl.querySelectorAll(focusableElementSelector); // Ignore untabbable elements, ie. those with tabindex = -1
	var tabbableElements=privateMethods.filterTabbableElements(rawElements);return privateMethods.filterVisibleElements(tabbableElements);},filterTabbableElements:function filterTabbableElements(els){var tabbableFocusableElements=[];for(var i=0;i<els.length;i++){var el=els[i];if($el(el).attr('tabindex')!=='-1'){tabbableFocusableElements.push(el);}}return tabbableFocusableElements;},filterVisibleElements:function filterVisibleElements(els){var visibleFocusableElements=[];for(var i=0;i<els.length;i++){var el=els[i];if(el.offsetWidth>0||el.offsetHeight>0){visibleFocusableElements.push(el);}}return visibleFocusableElements;},getActiveDialog:function getActiveDialog(){var dialogs=document.querySelectorAll('.ngdialog');if(dialogs.length===0){return null;} // TODO: This might be incorrect if there are a mix of open dialogs with different 'appendTo' values
	return $el(dialogs[dialogs.length-1]);},applyAriaAttributes:function applyAriaAttributes($dialog,options){if(options.ariaAuto){if(!options.ariaRole){var detectedRole=privateMethods.getFocusableElements($dialog).length>0?'dialog':'alertdialog';options.ariaRole=detectedRole;}if(!options.ariaLabelledBySelector){options.ariaLabelledBySelector='h1,h2,h3,h4,h5,h6';}if(!options.ariaDescribedBySelector){options.ariaDescribedBySelector='article,section,p';}}if(options.ariaRole){$dialog.attr('role',options.ariaRole);}privateMethods.applyAriaAttribute($dialog,'aria-labelledby',options.ariaLabelledById,options.ariaLabelledBySelector);privateMethods.applyAriaAttribute($dialog,'aria-describedby',options.ariaDescribedById,options.ariaDescribedBySelector);},applyAriaAttribute:function applyAriaAttribute($dialog,attr,id,selector){if(id){$dialog.attr(attr,id);}if(selector){var dialogId=$dialog.attr('id');var firstMatch=$dialog[0].querySelector(selector);if(!firstMatch){return;}var generatedId=dialogId+'-'+attr;$el(firstMatch).attr('id',generatedId);$dialog.attr(attr,generatedId);return generatedId;}},detectUIRouter:function detectUIRouter(){ //Detect if ui-router module is installed if not return false
	try{angular.module('ui.router');return true;}catch(err){return false;}},getRouterLocationEventName:function getRouterLocationEventName(){if(privateMethods.detectUIRouter()){return '$stateChangeSuccess';}return '$locationChangeSuccess';}};var publicMethods={__PRIVATE__:privateMethods, /*
	                     * @param {Object} options:
	                     * - template {String} - id of ng-template, url for partial, plain string (if enabled)
	                     * - plain {Boolean} - enable plain string templates, default false
	                     * - scope {Object}
	                     * - controller {String}
	                     * - controllerAs {String}
	                     * - className {String} - dialog theme class
	                     * - disableAnimation {Boolean} - set to true to disable animation
	                     * - showClose {Boolean} - show close button, default true
	                     * - closeByEscape {Boolean} - default true
	                     * - closeByDocument {Boolean} - default true
	                     * - preCloseCallback {String|Function} - user supplied function name/function called before closing dialog (if set)
	                     * @return {Object} dialog
	                     */open:function open(opts){var dialogID=null;opts=opts||{};if(openOnePerName&&opts.name){dialogID=opts.name+' dialog';if(this.isOpen(dialogID)){return;}}var options=angular.copy(defaults);var localID=++globalID;dialogID=dialogID||'ngdialog'+localID;openIdStack.push(dialogID);angular.extend(options,opts);var defer;defers[dialogID]=defer=$q.defer();var scope;scopes[dialogID]=scope=angular.isObject(options.scope)?options.scope.$new():$rootScope.$new();var $dialog,$dialogParent;var resolve=angular.extend({},options.resolve);angular.forEach(resolve,function(value,key){resolve[key]=angular.isString(value)?$injector.get(value):$injector.invoke(value,null,null,key);});$q.all({template:loadTemplate(options.template||options.templateUrl),locals:$q.all(resolve)}).then(function(setup){var template=setup.template,locals=setup.locals;if(options.showClose){template+='<div class="ngdialog-close"></div>';}var hasOverlayClass=options.overlay?'':' ngdialog-no-overlay';$dialog=$el('<div id="'+dialogID+'" class="ngdialog'+hasOverlayClass+'"></div>');$dialog.html(options.overlay?'<div class="ngdialog-overlay"></div><div class="ngdialog-content" role="document">'+template+'</div>':'<div class="ngdialog-content" role="document">'+template+'</div>');$dialog.data('$ngDialogOptions',options);scope.ngDialogId=dialogID;if(options.data&&angular.isString(options.data)){var firstLetter=options.data.replace(/^\s*/,'')[0];scope.ngDialogData=firstLetter==='{'||firstLetter==='['?angular.fromJson(options.data):options.data;scope.ngDialogData.ngDialogId=dialogID;}else if(options.data&&angular.isObject(options.data)){scope.ngDialogData=options.data;scope.ngDialogData.ngDialogId=dialogID;}if(options.className){$dialog.addClass(options.className);}if(options.disableAnimation){$dialog.addClass(disabledAnimationClass);}if(options.appendTo&&angular.isString(options.appendTo)){$dialogParent=angular.element(document.querySelector(options.appendTo));}else {$dialogParent=$elements.body;}privateMethods.applyAriaAttributes($dialog,options);if(options.preCloseCallback){var preCloseCallback;if(angular.isFunction(options.preCloseCallback)){preCloseCallback=options.preCloseCallback;}else if(angular.isString(options.preCloseCallback)){if(scope){if(angular.isFunction(scope[options.preCloseCallback])){preCloseCallback=scope[options.preCloseCallback];}else if(scope.$parent&&angular.isFunction(scope.$parent[options.preCloseCallback])){preCloseCallback=scope.$parent[options.preCloseCallback];}else if($rootScope&&angular.isFunction($rootScope[options.preCloseCallback])){preCloseCallback=$rootScope[options.preCloseCallback];}}}if(preCloseCallback){$dialog.data('$ngDialogPreCloseCallback',preCloseCallback);}}scope.closeThisDialog=function(value){privateMethods.closeDialog($dialog,value);};if(options.controller&&(angular.isString(options.controller)||angular.isArray(options.controller)||angular.isFunction(options.controller))){var label;if(options.controllerAs&&angular.isString(options.controllerAs)){label=options.controllerAs;}var controllerInstance=$controller(options.controller,angular.extend(locals,{$scope:scope,$element:$dialog}),true,label);if(options.bindToController){angular.extend(controllerInstance.instance,{ngDialogId:scope.ngDialogId,ngDialogData:scope.ngDialogData,closeThisDialog:scope.closeThisDialog});}$dialog.data('$ngDialogControllerController',controllerInstance());}$timeout(function(){var $activeDialogs=document.querySelectorAll('.ngdialog');privateMethods.deactivateAll($activeDialogs);$compile($dialog)(scope);var widthDiffs=$window.innerWidth-$elements.body.prop('clientWidth');$elements.html.addClass('ngdialog-open');$elements.body.addClass('ngdialog-open');var scrollBarWidth=widthDiffs-($window.innerWidth-$elements.body.prop('clientWidth'));if(scrollBarWidth>0){privateMethods.setBodyPadding(scrollBarWidth);}$dialogParent.append($dialog);privateMethods.activate($dialog);if(options.trapFocus){privateMethods.autoFocus($dialog);}if(options.name){$rootScope.$broadcast('ngDialog.opened',{dialog:$dialog,name:options.name});}else {$rootScope.$broadcast('ngDialog.opened',$dialog);}});if(!keydownIsBound){$elements.body.bind('keydown',privateMethods.onDocumentKeydown);keydownIsBound=true;}if(options.closeByNavigation){var eventName=privateMethods.getRouterLocationEventName();$rootScope.$on(eventName,function(){privateMethods.closeDialog($dialog);});}if(options.preserveFocus){$dialog.data('$ngDialogPreviousFocus',document.activeElement);}closeByDocumentHandler=function closeByDocumentHandler(event){var isOverlay=options.closeByDocument?$el(event.target).hasClass('ngdialog-overlay'):false;var isCloseBtn=$el(event.target).hasClass('ngdialog-close');if(isOverlay||isCloseBtn){publicMethods.close($dialog.attr('id'),isCloseBtn?'$closeButton':'$document');}};if(typeof $window.Hammer!=='undefined'){var hammerTime=scope.hammerTime=$window.Hammer($dialog[0]);hammerTime.on('tap',closeByDocumentHandler);}else {$dialog.bind('click',closeByDocumentHandler);}dialogsCount+=1;return publicMethods;});return {id:dialogID,closePromise:defer.promise,close:function close(value){privateMethods.closeDialog($dialog,value);}};function loadTemplateUrl(tmpl,config){$rootScope.$broadcast('ngDialog.templateLoading',tmpl);return $http.get(tmpl,config||{}).then(function(res){$rootScope.$broadcast('ngDialog.templateLoaded',tmpl);return res.data||'';});}function loadTemplate(tmpl){if(!tmpl){return 'Empty template';}if(angular.isString(tmpl)&&options.plain){return tmpl;}if(typeof options.cache==='boolean'&&!options.cache){return loadTemplateUrl(tmpl,{cache:false});}return loadTemplateUrl(tmpl,{cache:$templateCache});}}, /*
	                     * @param {Object} options:
	                     * - template {String} - id of ng-template, url for partial, plain string (if enabled)
	                     * - plain {Boolean} - enable plain string templates, default false
	                     * - name {String}
	                     * - scope {Object}
	                     * - controller {String}
	                     * - controllerAs {String}
	                     * - className {String} - dialog theme class
	                     * - showClose {Boolean} - show close button, default true
	                     * - closeByEscape {Boolean} - default false
	                     * - closeByDocument {Boolean} - default false
	                     * - preCloseCallback {String|Function} - user supplied function name/function called before closing dialog (if set); not called on confirm
	                     *
	                     * @return {Object} dialog
	                     */openConfirm:function openConfirm(opts){var defer=$q.defer();var options=angular.copy(defaults);opts=opts||{};angular.extend(options,opts);options.scope=angular.isObject(options.scope)?options.scope.$new():$rootScope.$new();options.scope.confirm=function(value){defer.resolve(value);var $dialog=$el(document.getElementById(openResult.id));privateMethods.performCloseDialog($dialog,value);};var openResult=publicMethods.open(options);if(openResult){openResult.closePromise.then(function(data){if(data){return defer.reject(data.value);}return defer.reject();});return defer.promise;}},isOpen:function isOpen(id){var $dialog=$el(document.getElementById(id));return $dialog.length>0;}, /*
	                     * @param {String} id
	                     * @return {Object} dialog
	                     */close:function close(id,value){var $dialog=$el(document.getElementById(id));if($dialog.length){privateMethods.closeDialog($dialog,value);}else {if(id==='$escape'){var topDialogId=openIdStack[openIdStack.length-1];$dialog=$el(document.getElementById(topDialogId));if($dialog.data('$ngDialogOptions').closeByEscape){privateMethods.closeDialog($dialog,'$escape');}}else {publicMethods.closeAll(value);}}return publicMethods;},closeAll:function closeAll(value){var $all=document.querySelectorAll('.ngdialog'); // Reverse order to ensure focus restoration works as expected
	for(var i=$all.length-1;i>=0;i--){var dialog=$all[i];privateMethods.closeDialog($el(dialog),value);}},getOpenDialogs:function getOpenDialogs(){return openIdStack;},getDefaults:function getDefaults(){return defaults;}};angular.forEach(['html','body'],function(elementName){$elements[elementName]=$document.find(elementName);if(forceElementsReload[elementName]){var eventName=privateMethods.getRouterLocationEventName();$rootScope.$on(eventName,function(){$elements[elementName]=$document.find(elementName);});}});return publicMethods;}];});m.directive('ngDialog',['ngDialog',function(ngDialog){return {restrict:'A',scope:{ngDialogScope:'='},link:function link(scope,elem,attrs){elem.on('click',function(e){e.preventDefault();var ngDialogScope=angular.isDefined(scope.ngDialogScope)?scope.ngDialogScope:'noScope';angular.isDefined(attrs.ngDialogClosePrevious)&&ngDialog.close(attrs.ngDialogClosePrevious);var defaults=ngDialog.getDefaults();ngDialog.open({template:attrs.ngDialog,className:attrs.ngDialogClass||defaults.className,controller:attrs.ngDialogController,controllerAs:attrs.ngDialogControllerAs,bindToController:attrs.ngDialogBindToController,scope:ngDialogScope,data:attrs.ngDialogData,showClose:attrs.ngDialogShowClose==='false'?false:attrs.ngDialogShowClose==='true'?true:defaults.showClose,closeByDocument:attrs.ngDialogCloseByDocument==='false'?false:attrs.ngDialogCloseByDocument==='true'?true:defaults.closeByDocument,closeByEscape:attrs.ngDialogCloseByEscape==='false'?false:attrs.ngDialogCloseByEscape==='true'?true:defaults.closeByEscape,overlay:attrs.ngDialogOverlay==='false'?false:attrs.ngDialogOverlay==='true'?true:defaults.overlay,preCloseCallback:attrs.ngDialogPreCloseCallback||defaults.preCloseCallback});});}};}]);return m;});

/***/ },
/* 117 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(__webpack_provided_window_dot_jQuery) {'use strict';var _typeof=typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"?function(obj){return typeof obj;}:function(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol?"symbol":typeof obj;}; // ==ClosureCompiler==
	// @compilation_level SIMPLE_OPTIMIZATIONS
	/**
	 * @license Highcharts JS v4.1.9 (2015-10-07)
	 *
	 * (c) 2009-2014 Torstein Honsi
	 *
	 * License: www.highcharts.com/license
	 */ // JSLint options:
	/*global Highcharts, HighchartsAdapter, document, window, navigator, setInterval, clearInterval, clearTimeout, setTimeout, location, jQuery, $, console, each, grep */ /*jslint ass: true, sloppy: true, forin: true, plusplus: true, nomen: true, vars: true, regexp: true, newcap: true, browser: true, continue: true, white: true */(function(){ // encapsulated variables
	var UNDEFINED,doc=document,win=window,math=Math,mathRound=math.round,mathFloor=math.floor,mathCeil=math.ceil,mathMax=math.max,mathMin=math.min,mathAbs=math.abs,mathCos=math.cos,mathSin=math.sin,mathPI=math.PI,deg2rad=mathPI*2/360, // some variables
	userAgent=navigator.userAgent,isOpera=win.opera,isMS=/(msie|trident|edge)/i.test(userAgent)&&!isOpera,docMode8=doc.documentMode===8,isWebKit=!isMS&&/AppleWebKit/.test(userAgent),isFirefox=/Firefox/.test(userAgent),isTouchDevice=/(Mobile|Android|Windows Phone)/.test(userAgent),SVG_NS='http://www.w3.org/2000/svg',hasSVG=!!doc.createElementNS&&!!doc.createElementNS(SVG_NS,'svg').createSVGRect,hasBidiBug=isFirefox&&parseInt(userAgent.split('Firefox/')[1],10)<4, // issue #38
	useCanVG=!hasSVG&&!isMS&&!!doc.createElement('canvas').getContext,Renderer,hasTouch,symbolSizes={},idCounter=0,garbageBin,defaultOptions,dateFormat, // function
	pathAnim,timeUnits,noop=function noop(){return UNDEFINED;},charts=[],chartCount=0,PRODUCT='Highcharts',VERSION='4.1.9', // some constants for frequently used strings
	DIV='div',ABSOLUTE='absolute',RELATIVE='relative',HIDDEN='hidden',PREFIX='highcharts-',VISIBLE='visible',PX='px',NONE='none',M='M',L='L',numRegex=/^[0-9]+$/,NORMAL_STATE='',HOVER_STATE='hover',SELECT_STATE='select',marginNames=['plotTop','marginRight','marginBottom','plotLeft'], // Object for extending Axis
	AxisPlotLineOrBandExtension, // constants for attributes
	STROKE_WIDTH='stroke-width', // time methods, changed based on whether or not UTC is used
	Date, // Allow using a different Date class
	makeTime,timezoneOffset,getTimezoneOffset,getMinutes,getHours,getDay,getDate,getMonth,getFullYear,setMilliseconds,setSeconds,setMinutes,setHours,setDate,setMonth,setFullYear, // lookup over the types and the associated classes
	seriesTypes={},Highcharts; // The Highcharts namespace
	Highcharts=win.Highcharts=win.Highcharts?error(16,true):{};Highcharts.seriesTypes=seriesTypes; /**
	 * Extend an object with the members of another
	 * @param {Object} a The object to be extended
	 * @param {Object} b The object to add to the first one
	 */var extend=Highcharts.extend=function(a,b){var n;if(!a){a={};}for(n in b){a[n]=b[n];}return a;}; /**
	 * Deep merge two or more objects and return a third object. If the first argument is
	 * true, the contents of the second object is copied into the first object.
	 * Previously this function redirected to jQuery.extend(true), but this had two limitations.
	 * First, it deep merged arrays, which lead to workarounds in Highcharts. Second,
	 * it copied properties from extended prototypes. 
	 */function merge(){var i,args=arguments,len,ret={},doCopy=function doCopy(copy,original){var value,key; // An object is replacing a primitive
	if((typeof copy==='undefined'?'undefined':_typeof(copy))!=='object'){copy={};}for(key in original){if(original.hasOwnProperty(key)){value=original[key]; // Copy the contents of objects, but not arrays or DOM nodes
	if(value&&(typeof value==='undefined'?'undefined':_typeof(value))==='object'&&Object.prototype.toString.call(value)!=='[object Array]'&&key!=='renderTo'&&typeof value.nodeType!=='number'){copy[key]=doCopy(copy[key]||{},value); // Primitives and arrays are copied over directly
	}else {copy[key]=original[key];}}}return copy;}; // If first argument is true, copy into the existing object. Used in setOptions.
	if(args[0]===true){ret=args[1];args=Array.prototype.slice.call(args,2);} // For each argument, extend the return
	len=args.length;for(i=0;i<len;i++){ret=doCopy(ret,args[i]);}return ret;} /**
	 * Shortcut for parseInt
	 * @param {Object} s
	 * @param {Number} mag Magnitude
	 */function pInt(s,mag){return parseInt(s,mag||10);} /**
	 * Check for string
	 * @param {Object} s
	 */function isString(s){return typeof s==='string';} /**
	 * Check for object
	 * @param {Object} obj
	 */function isObject(obj){return obj&&(typeof obj==='undefined'?'undefined':_typeof(obj))==='object';} /**
	 * Check for array
	 * @param {Object} obj
	 */function isArray(obj){return Object.prototype.toString.call(obj)==='[object Array]';} /**
	 * Check for number
	 * @param {Object} n
	 */function isNumber(n){return typeof n==='number';}function log2lin(num){return math.log(num)/math.LN10;}function lin2log(num){return math.pow(10,num);} /**
	 * Remove last occurence of an item from an array
	 * @param {Array} arr
	 * @param {Mixed} item
	 */function erase(arr,item){var i=arr.length;while(i--){if(arr[i]===item){arr.splice(i,1);break;}} //return arr;
	} /**
	 * Returns true if the object is not null or undefined. Like MooTools' $.defined.
	 * @param {Object} obj
	 */function defined(obj){return obj!==UNDEFINED&&obj!==null;} /**
	 * Set or get an attribute or an object of attributes. Can't use jQuery attr because
	 * it attempts to set expando properties on the SVG element, which is not allowed.
	 *
	 * @param {Object} elem The DOM element to receive the attribute(s)
	 * @param {String|Object} prop The property or an abject of key-value pairs
	 * @param {String} value The value if a single property is set
	 */function attr(elem,prop,value){var key,ret; // if the prop is a string
	if(isString(prop)){ // set the value
	if(defined(value)){elem.setAttribute(prop,value); // get the value
	}else if(elem&&elem.getAttribute){ // elem not defined when printing pie demo...
	ret=elem.getAttribute(prop);} // else if prop is defined, it is a hash of key/value pairs
	}else if(defined(prop)&&isObject(prop)){for(key in prop){elem.setAttribute(key,prop[key]);}}return ret;} /**
	 * Check if an element is an array, and if not, make it into an array. Like
	 * MooTools' $.splat.
	 */function splat(obj){return isArray(obj)?obj:[obj];} /**
	 * Return the first value that is defined. Like MooTools' $.pick.
	 */var pick=Highcharts.pick=function(){var args=arguments,i,arg,length=args.length;for(i=0;i<length;i++){arg=args[i];if(arg!==UNDEFINED&&arg!==null){return arg;}}}; /**
	 * Set CSS on a given element
	 * @param {Object} el
	 * @param {Object} styles Style object with camel case property names
	 */function _css(el,styles){if(isMS&&!hasSVG){ // #2686
	if(styles&&styles.opacity!==UNDEFINED){styles.filter='alpha(opacity='+styles.opacity*100+')';}}extend(el.style,styles);} /**
	 * Utility function to create element with attributes and styles
	 * @param {Object} tag
	 * @param {Object} attribs
	 * @param {Object} styles
	 * @param {Object} parent
	 * @param {Object} nopad
	 */function createElement(tag,attribs,styles,parent,nopad){var el=doc.createElement(tag);if(attribs){extend(el,attribs);}if(nopad){_css(el,{padding:0,border:NONE,margin:0});}if(styles){_css(el,styles);}if(parent){parent.appendChild(el);}return el;} /**
	 * Extend a prototyped class by new members
	 * @param {Object} parent
	 * @param {Object} members
	 */function extendClass(parent,members){var object=function object(){return UNDEFINED;};object.prototype=new parent();extend(object.prototype,members);return object;} /**
	 * Pad a string to a given length by adding 0 to the beginning
	 * @param {Number} number
	 * @param {Number} length
	 */function pad(number,length){ // Create an array of the remaining length +1 and join it with 0's
	return new Array((length||2)+1-String(number).length).join(0)+number;} /**
	 * Return a length based on either the integer value, or a percentage of a base.
	 */function relativeLength(value,base){return (/%$/.test(value)?base*parseFloat(value)/100:parseFloat(value));} /**
	 * Wrap a method with extended functionality, preserving the original function
	 * @param {Object} obj The context object that the method belongs to 
	 * @param {String} method The name of the method to extend
	 * @param {Function} func A wrapper function callback. This function is called with the same arguments
	 * as the original function, except that the original function is unshifted and passed as the first 
	 * argument. 
	 */var wrap=Highcharts.wrap=function(obj,method,func){var proceed=obj[method];obj[method]=function(){var args=Array.prototype.slice.call(arguments);args.unshift(proceed);return func.apply(this,args);};};function getTZOffset(timestamp){return (getTimezoneOffset&&getTimezoneOffset(timestamp)||timezoneOffset||0)*60000;} /**
	 * Based on http://www.php.net/manual/en/function.strftime.php
	 * @param {String} format
	 * @param {Number} timestamp
	 * @param {Boolean} capitalize
	 */dateFormat=function dateFormat(format,timestamp,capitalize){if(!defined(timestamp)||isNaN(timestamp)){return defaultOptions.lang.invalidDate||'';}format=pick(format,'%Y-%m-%d %H:%M:%S');var date=new Date(timestamp-getTZOffset(timestamp)),key, // used in for constuct below
	// get the basic time values
	hours=date[getHours](),day=date[getDay](),dayOfMonth=date[getDate](),month=date[getMonth](),fullYear=date[getFullYear](),lang=defaultOptions.lang,langWeekdays=lang.weekdays, // List all format keys. Custom formats can be added from the outside. 
	replacements=extend({ // Day
	'a':langWeekdays[day].substr(0,3), // Short weekday, like 'Mon'
	'A':langWeekdays[day], // Long weekday, like 'Monday'
	'd':pad(dayOfMonth), // Two digit day of the month, 01 to 31
	'e':dayOfMonth, // Day of the month, 1 through 31
	'w':day, // Week (none implemented)
	//'W': weekNumber(),
	// Month
	'b':lang.shortMonths[month], // Short month, like 'Jan'
	'B':lang.months[month], // Long month, like 'January'
	'm':pad(month+1), // Two digit month number, 01 through 12
	// Year
	'y':fullYear.toString().substr(2,2), // Two digits year, like 09 for 2009
	'Y':fullYear, // Four digits year, like 2009
	// Time
	'H':pad(hours), // Two digits hours in 24h format, 00 through 23
	'k':hours, // Hours in 24h format, 0 through 23
	'I':pad(hours%12||12), // Two digits hours in 12h format, 00 through 11
	'l':hours%12||12, // Hours in 12h format, 1 through 12
	'M':pad(date[getMinutes]()), // Two digits minutes, 00 through 59
	'p':hours<12?'AM':'PM', // Upper case AM or PM
	'P':hours<12?'am':'pm', // Lower case AM or PM
	'S':pad(date.getSeconds()), // Two digits seconds, 00 through  59
	'L':pad(mathRound(timestamp%1000),3) // Milliseconds (naming from Ruby)
	},Highcharts.dateFormats); // do the replaces
	for(key in replacements){while(format.indexOf('%'+key)!==-1){ // regex would do it in one line, but this is faster
	format=format.replace('%'+key,typeof replacements[key]==='function'?replacements[key](timestamp):replacements[key]);}} // Optionally capitalize the string and return
	return capitalize?format.substr(0,1).toUpperCase()+format.substr(1):format;}; /** 
	 * Format a single variable. Similar to sprintf, without the % prefix.
	 */function formatSingle(format,val){var floatRegex=/f$/,decRegex=/\.([0-9])/,lang=defaultOptions.lang,decimals;if(floatRegex.test(format)){ // float
	decimals=format.match(decRegex);decimals=decimals?decimals[1]:-1;if(val!==null){val=Highcharts.numberFormat(val,decimals,lang.decimalPoint,format.indexOf(',')>-1?lang.thousandsSep:'');}}else {val=dateFormat(format,val);}return val;} /**
	 * Format a string according to a subset of the rules of Python's String.format method.
	 */function format(str,ctx){var splitter='{',isInside=false,segment,valueAndFormat,path,i,len,ret=[],val,index;while((index=str.indexOf(splitter))!==-1){segment=str.slice(0,index);if(isInside){ // we're on the closing bracket looking back
	valueAndFormat=segment.split(':');path=valueAndFormat.shift().split('.'); // get first and leave format
	len=path.length;val=ctx; // Assign deeper paths
	for(i=0;i<len;i++){val=val[path[i]];} // Format the replacement
	if(valueAndFormat.length){val=formatSingle(valueAndFormat.join(':'),val);} // Push the result and advance the cursor
	ret.push(val);}else {ret.push(segment);}str=str.slice(index+1); // the rest
	isInside=!isInside; // toggle
	splitter=isInside?'}':'{'; // now look for next matching bracket
	}ret.push(str);return ret.join('');} /**
	 * Get the magnitude of a number
	 */function getMagnitude(num){return math.pow(10,mathFloor(math.log(num)/math.LN10));} /**
	 * Take an interval and normalize it to multiples of 1, 2, 2.5 and 5
	 * @param {Number} interval
	 * @param {Array} multiples
	 * @param {Number} magnitude
	 * @param {Object} options
	 */function normalizeTickInterval(interval,multiples,magnitude,allowDecimals,preventExceed){var normalized,i,retInterval=interval; // round to a tenfold of 1, 2, 2.5 or 5
	magnitude=pick(magnitude,1);normalized=interval/magnitude; // multiples for a linear scale
	if(!multiples){multiples=[1,2,2.5,5,10]; // the allowDecimals option
	if(allowDecimals===false){if(magnitude===1){multiples=[1,2,5,10];}else if(magnitude<=0.1){multiples=[1/magnitude];}}} // normalize the interval to the nearest multiple
	for(i=0;i<multiples.length;i++){retInterval=multiples[i];if(preventExceed&&retInterval*magnitude>=interval|| // only allow tick amounts smaller than natural
	!preventExceed&&normalized<=(multiples[i]+(multiples[i+1]||multiples[i]))/2){break;}} // multiply back to the correct magnitude
	retInterval*=magnitude;return retInterval;} /**
	 * Utility method that sorts an object array and keeping the order of equal items.
	 * ECMA script standard does not specify the behaviour when items are equal.
	 */function stableSort(arr,sortFunction){var length=arr.length,sortValue,i; // Add index to each item
	for(i=0;i<length;i++){arr[i].ss_i=i; // stable sort index
	}arr.sort(function(a,b){sortValue=sortFunction(a,b);return sortValue===0?a.ss_i-b.ss_i:sortValue;}); // Remove index from items
	for(i=0;i<length;i++){delete arr[i].ss_i; // stable sort index
	}} /**
	 * Non-recursive method to find the lowest member of an array. Math.min raises a maximum
	 * call stack size exceeded error in Chrome when trying to apply more than 150.000 points. This
	 * method is slightly slower, but safe.
	 */function arrayMin(data){var i=data.length,min=data[0];while(i--){if(data[i]<min){min=data[i];}}return min;} /**
	 * Non-recursive method to find the lowest member of an array. Math.min raises a maximum
	 * call stack size exceeded error in Chrome when trying to apply more than 150.000 points. This
	 * method is slightly slower, but safe.
	 */function arrayMax(data){var i=data.length,max=data[0];while(i--){if(data[i]>max){max=data[i];}}return max;} /**
	 * Utility method that destroys any SVGElement or VMLElement that are properties on the given object.
	 * It loops all properties and invokes destroy if there is a destroy method. The property is
	 * then delete'ed.
	 * @param {Object} The object to destroy properties on
	 * @param {Object} Exception, do not destroy this property, only delete it.
	 */function destroyObjectProperties(obj,except){var n;for(n in obj){ // If the object is non-null and destroy is defined
	if(obj[n]&&obj[n]!==except&&obj[n].destroy){ // Invoke the destroy
	obj[n].destroy();} // Delete the property from the object.
	delete obj[n];}} /**
	 * Discard an element by moving it to the bin and delete
	 * @param {Object} The HTML node to discard
	 */function discardElement(element){ // create a garbage bin element, not part of the DOM
	if(!garbageBin){garbageBin=createElement(DIV);} // move the node and empty bin
	if(element){garbageBin.appendChild(element);}garbageBin.innerHTML='';} /**
	 * Provide error messages for debugging, with links to online explanation 
	 */function error(code,stop){var msg='Highcharts error #'+code+': www.highcharts.com/errors/'+code;if(stop){throw msg;} // else ...
	if(win.console){console.log(msg);}} /**
	 * Fix JS round off float errors
	 * @param {Number} num
	 */function correctFloat(num,prec){return parseFloat(num.toPrecision(prec||14));} /**
	 * Set the global animation to either a given value, or fall back to the
	 * given chart's animation option
	 * @param {Object} animation
	 * @param {Object} chart
	 */function setAnimation(animation,chart){chart.renderer.globalAnimation=pick(animation,chart.animation);} /**
	 * The time unit lookup
	 */timeUnits={millisecond:1,second:1000,minute:60000,hour:3600000,day:24*3600000,week:7*24*3600000,month:28*24*3600000,year:364*24*3600000}; /**
	 * Format a number and return a string based on input settings
	 * @param {Number} number The input number to format
	 * @param {Number} decimals The amount of decimals
	 * @param {String} decPoint The decimal point, defaults to the one given in the lang options
	 * @param {String} thousandsSep The thousands separator, defaults to the one given in the lang options
	 */Highcharts.numberFormat=function(number,decimals,decPoint,thousandsSep){var lang=defaultOptions.lang, // http://kevin.vanzonneveld.net/techblog/article/javascript_equivalent_for_phps_number_format/
	n=+number||0,c=decimals===-1?mathMin((n.toString().split('.')[1]||'').length,20): // Preserve decimals. Not huge numbers (#3793).
	isNaN(decimals=mathAbs(decimals))?2:decimals,d=decPoint===undefined?lang.decimalPoint:decPoint,t=thousandsSep===undefined?lang.thousandsSep:thousandsSep,s=n<0?"-":"",i=String(pInt(n=mathAbs(n).toFixed(c))),j=i.length>3?i.length%3:0;return s+(j?i.substr(0,j)+t:"")+i.substr(j).replace(/(\d{3})(?=\d)/g,"$1"+t)+(c?d+mathAbs(n-i).toFixed(c).slice(2):"");}; /**
	 * Path interpolation algorithm used across adapters
	 */pathAnim={ /**
		 * Prepare start and end values so that the path can be animated one to one
		 */init:function init(elem,fromD,toD){fromD=fromD||'';var shift=elem.shift,bezier=fromD.indexOf('C')>-1,numParams=bezier?7:3,endLength,slice,i,start=fromD.split(' '),end=[].concat(toD), // copy
	startBaseLine,endBaseLine,sixify=function sixify(arr){ // in splines make move points have six parameters like bezier curves
	i=arr.length;while(i--){if(arr[i]===M){arr.splice(i+1,0,arr[i+1],arr[i+2],arr[i+1],arr[i+2]);}}};if(bezier){sixify(start);sixify(end);} // pull out the base lines before padding
	if(elem.isArea){startBaseLine=start.splice(start.length-6,6);endBaseLine=end.splice(end.length-6,6);} // if shifting points, prepend a dummy point to the end path
	if(shift<=end.length/numParams&&start.length===end.length){while(shift--){end=[].concat(end).splice(0,numParams).concat(end);}}elem.shift=0; // reset for following animations
	// copy and append last point until the length matches the end length
	if(start.length){endLength=end.length;while(start.length<endLength){ //bezier && sixify(start);
	slice=[].concat(start).splice(start.length-numParams,numParams);if(bezier){ // disable first control point
	slice[numParams-6]=slice[numParams-2];slice[numParams-5]=slice[numParams-1];}start=start.concat(slice);}}if(startBaseLine){ // append the base lines for areas
	start=start.concat(startBaseLine);end=end.concat(endBaseLine);}return [start,end];}, /**
		 * Interpolate each value of the path and return the array
		 */step:function step(start,end,pos,complete){var ret=[],i=start.length,startVal;if(pos===1){ // land on the final path without adjustment points appended in the ends
	ret=complete;}else if(i===end.length&&pos<1){while(i--){startVal=parseFloat(start[i]);ret[i]=isNaN(startVal)? // a letter instruction like M or L
	start[i]:pos*parseFloat(end[i]-startVal)+startVal;}}else { // if animation is finished or length not matching, land on right value
	ret=end;}return ret;}};(function($){ /**
		 * The default HighchartsAdapter for jQuery
		 */win.HighchartsAdapter=win.HighchartsAdapter||$&&{ /**
			 * Initialize the adapter by applying some extensions to jQuery
			 */init:function init(pathAnim){ // extend the animate function to allow SVG animations
	var Fx=$.fx; /*jslint unparam: true*/ /* allow unused param x in this function */$.extend($.easing,{easeOutQuad:function easeOutQuad(x,t,b,c,d){return -c*(t/=d)*(t-2)+b;}}); /*jslint unparam: false*/ // extend some methods to check for elem.attr, which means it is a Highcharts SVG object
	$.each(['cur','_default','width','height','opacity'],function(i,fn){var obj=Fx.step,base; // Handle different parent objects
	if(fn==='cur'){obj=Fx.prototype; // 'cur', the getter, relates to Fx.prototype
	}else if(fn==='_default'&&$.Tween){ // jQuery 1.8 model
	obj=$.Tween.propHooks[fn];fn='set';} // Overwrite the method
	base=obj[fn];if(base){ // step.width and step.height don't exist in jQuery < 1.7
	// create the extended function replacement
	obj[fn]=function(fx){var elem; // Fx.prototype.cur does not use fx argument
	fx=i?fx:this; // Don't run animations on textual properties like align (#1821)
	if(fx.prop==='align'){return;} // shortcut
	elem=fx.elem; // Fx.prototype.cur returns the current value. The other ones are setters
	// and returning a value has no effect.
	return elem.attr? // is SVG element wrapper
	elem.attr(fx.prop,fn==='cur'?UNDEFINED:fx.now): // apply the SVG wrapper's method
	base.apply(this,arguments); // use jQuery's built-in method
	};}}); // Extend the opacity getter, needed for fading opacity with IE9 and jQuery 1.10+
	wrap($.cssHooks.opacity,'get',function(proceed,elem,computed){return elem.attr?elem.opacity||0:proceed.call(this,elem,computed);}); // Define the setter function for d (path definitions)
	this.addAnimSetter('d',function(fx){var elem=fx.elem,ends; // Normally start and end should be set in state == 0, but sometimes,
	// for reasons unknown, this doesn't happen. Perhaps state == 0 is skipped
	// in these cases
	if(!fx.started){ends=pathAnim.init(elem,elem.d,elem.toD);fx.start=ends[0];fx.end=ends[1];fx.started=true;} // Interpolate each value of the path
	elem.attr('d',pathAnim.step(fx.start,fx.end,fx.pos,elem.toD));}); /**
				 * Utility for iterating over an array. Parameters are reversed compared to jQuery.
				 * @param {Array} arr
				 * @param {Function} fn
				 */this.each=Array.prototype.forEach?function(arr,fn){ // modern browsers
	return Array.prototype.forEach.call(arr,fn);}:function(arr,fn){ // legacy
	var i,len=arr.length;for(i=0;i<len;i++){if(fn.call(arr[i],arr[i],i,arr)===false){return i;}}}; /**
				 * Register Highcharts as a plugin in the respective framework
				 */$.fn.highcharts=function(){var constr='Chart', // default constructor
	args=arguments,options,ret,chart;if(this[0]){if(isString(args[0])){constr=args[0];args=Array.prototype.slice.call(args,1);}options=args[0]; // Create the chart
	if(options!==UNDEFINED){ /*jslint unused:false*/options.chart=options.chart||{};options.chart.renderTo=this[0];chart=new Highcharts[constr](options,args[1]);ret=this; /*jslint unused:true*/} // When called without parameters or with the return argument, get a predefined chart
	if(options===UNDEFINED){ret=charts[attr(this[0],'data-highcharts-chart')];}}return ret;};}, /**
			 * Add an animation setter for a specific property
			 */addAnimSetter:function addAnimSetter(prop,setter){ // jQuery 1.8 style
	if($.Tween){$.Tween.propHooks[prop]={set:setter}; // pre 1.8
	}else {$.fx.step[prop]=setter;}}, /**
			 * Downloads a script and executes a callback when done.
			 * @param {String} scriptLocation
			 * @param {Function} callback
			 */getScript:$.getScript, /**
			 * Return the index of an item in an array, or -1 if not found
			 */inArray:$.inArray, /**
			 * A direct link to jQuery methods. MooTools and Prototype adapters must be implemented for each case of method.
			 * @param {Object} elem The HTML element
			 * @param {String} method Which method to run on the wrapped element
			 */adapterRun:function adapterRun(elem,method){return $(elem)[method]();}, /**
			 * Filter an array
			 */grep:$.grep, /**
			 * Map an array
			 * @param {Array} arr
			 * @param {Function} fn
			 */map:function map(arr,fn){ //return jQuery.map(arr, fn);
	var results=[],i=0,len=arr.length;for(;i<len;i++){results[i]=fn.call(arr[i],arr[i],i,arr);}return results;}, /**
			 * Get the position of an element relative to the top left of the page
			 */offset:function offset(el){return $(el).offset();}, /**
			 * Add an event listener
			 * @param {Object} el A HTML element or custom object
			 * @param {String} event The event type
			 * @param {Function} fn The event handler
			 */addEvent:function addEvent(el,event,fn){$(el).bind(event,fn);}, /**
			 * Remove event added with addEvent
			 * @param {Object} el The object
			 * @param {String} eventType The event type. Leave blank to remove all events.
			 * @param {Function} handler The function to remove
			 */removeEvent:function removeEvent(el,eventType,handler){ // workaround for jQuery issue with unbinding custom events:
	// http://forum.jQuery.com/topic/javascript-error-when-unbinding-a-custom-event-using-jQuery-1-4-2
	var func=doc.removeEventListener?'removeEventListener':'detachEvent';if(doc[func]&&el&&!el[func]){el[func]=function(){};}$(el).unbind(eventType,handler);}, /**
			 * Fire an event on a custom object
			 * @param {Object} el
			 * @param {String} type
			 * @param {Object} eventArguments
			 * @param {Function} defaultFunction
			 */fireEvent:function fireEvent(el,type,eventArguments,defaultFunction){var event=$.Event(type),detachedType='detached'+type,defaultPrevented; // Remove warnings in Chrome when accessing returnValue (#2790), layerX and layerY. Although Highcharts
	// never uses these properties, Chrome includes them in the default click event and
	// raises the warning when they are copied over in the extend statement below.
	//
	// To avoid problems in IE (see #1010) where we cannot delete the properties and avoid
	// testing if they are there (warning in chrome) the only option is to test if running IE.
	if(!isMS&&eventArguments){delete eventArguments.layerX;delete eventArguments.layerY;delete eventArguments.returnValue;}extend(event,eventArguments); // Prevent jQuery from triggering the object method that is named the
	// same as the event. For example, if the event is 'select', jQuery
	// attempts calling el.select and it goes into a loop.
	if(el[type]){el[detachedType]=el[type];el[type]=null;} // Wrap preventDefault and stopPropagation in try/catch blocks in
	// order to prevent JS errors when cancelling events on non-DOM
	// objects. #615.
	/*jslint unparam: true*/$.each(['preventDefault','stopPropagation'],function(i,fn){var base=event[fn];event[fn]=function(){try{base.call(event);}catch(e){if(fn==='preventDefault'){defaultPrevented=true;}}};}); /*jslint unparam: false*/ // trigger it
	$(el).trigger(event); // attach the method
	if(el[detachedType]){el[type]=el[detachedType];el[detachedType]=null;}if(defaultFunction&&!event.isDefaultPrevented()&&!defaultPrevented){defaultFunction(event);}}, /**
			 * Extension method needed for MooTools
			 */washMouseEvent:function washMouseEvent(e){var ret=e.originalEvent||e; // computed by jQuery, needed by IE8
	if(ret.pageX===UNDEFINED){ // #1236
	ret.pageX=e.pageX;ret.pageY=e.pageY;}return ret;}, /**
			 * Animate a HTML element or SVG element wrapper
			 * @param {Object} el
			 * @param {Object} params
			 * @param {Object} options jQuery-like animation options: duration, easing, callback
			 */animate:function animate(el,params,options){var $el=$(el);if(!el.style){el.style={}; // #1881
	}if(params.d){el.toD=params.d; // keep the array form for paths, used in $.fx.step.d
	params.d=1; // because in jQuery, animating to an array has a different meaning
	}$el.stop();if(params.opacity!==UNDEFINED&&el.attr){params.opacity+='px'; // force jQuery to use same logic as width and height (#2161)
	}el.hasAnim=1; // #3342
	$el.animate(params,options);}, /**
			 * Stop running animation
			 */stop:function stop(el){if(el.hasAnim){ // #3342, memory leak on calling $(el) from destroy
	$(el).stop();}}};})(__webpack_provided_window_dot_jQuery); // check for a custom HighchartsAdapter defined prior to this file
	var globalAdapter=win.HighchartsAdapter,adapter=globalAdapter||{}; // Initialize the adapter
	if(globalAdapter){globalAdapter.init.call(globalAdapter,pathAnim);} // Utility functions. If the HighchartsAdapter is not defined, adapter is an empty object
	// and all the utility functions will be null. In that case they are populated by the
	// default adapters below.
	var adapterRun=adapter.adapterRun,getScript=adapter.getScript,inArray=adapter.inArray,each=Highcharts.each=adapter.each,grep=adapter.grep,offset=adapter.offset,map=adapter.map,addEvent=adapter.addEvent,removeEvent=adapter.removeEvent,fireEvent=adapter.fireEvent,washMouseEvent=adapter.washMouseEvent,_animate=adapter.animate,stop=adapter.stop; /* ****************************************************************************
	 * Handle the options                                                         *
	 *****************************************************************************/defaultOptions={colors:['#7cb5ec','#434348','#90ed7d','#f7a35c','#8085e9','#f15c80','#e4d354','#2b908f','#f45b5b','#91e8e1'],symbols:['circle','diamond','square','triangle','triangle-down'],lang:{loading:'Loading...',months:['January','February','March','April','May','June','July','August','September','October','November','December'],shortMonths:['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'],weekdays:['Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday'], // invalidDate: '',
	decimalPoint:'.',numericSymbols:['k','M','G','T','P','E'], // SI prefixes used in axis labels
	resetZoom:'Reset zoom',resetZoomTitle:'Reset zoom level 1:1',thousandsSep:' '},global:{useUTC:true, //timezoneOffset: 0,
	canvasToolsURL:'http://code.highcharts.com/4.1.9/modules/canvas-tools.js',VMLRadialGradientURL:'http://code.highcharts.com/4.1.9/gfx/vml-radial-gradient.png'},chart:{ //animation: true,
	//alignTicks: false,
	//reflow: true,
	//className: null,
	//events: { load, selection },
	//margin: [null],
	//marginTop: null,
	//marginRight: null,
	//marginBottom: null,
	//marginLeft: null,
	borderColor:'#4572A7', //borderWidth: 0,
	borderRadius:0,defaultSeriesType:'line',ignoreHiddenSeries:true, //inverted: false,
	//shadow: false,
	spacing:[10,10,15,10], //spacingTop: 10,
	//spacingRight: 10,
	//spacingBottom: 15,
	//spacingLeft: 10,
	//style: {
	//	fontFamily: '"Lucida Grande", "Lucida Sans Unicode", Verdana, Arial, Helvetica, sans-serif', // default font
	//	fontSize: '12px'
	//},
	backgroundColor:'#FFFFFF', //plotBackgroundColor: null,
	plotBorderColor:'#C0C0C0', //plotBorderWidth: 0,
	//plotShadow: false,
	//zoomType: ''
	resetZoomButton:{theme:{zIndex:20},position:{align:'right',x:-10, //verticalAlign: 'top',
	y:10} // relativeTo: 'plot'
	}},title:{text:'Chart title',align:'center', // floating: false,
	margin:15, // x: 0,
	// verticalAlign: 'top',
	// y: null,
	style:{color:'#333333',fontSize:'18px'}},subtitle:{text:'',align:'center', // floating: false
	// x: 0,
	// verticalAlign: 'top',
	// y: null,
	style:{color:'#555555'}},plotOptions:{line:{ // base series options
	allowPointSelect:false,showCheckbox:false,animation:{duration:1000}, //connectNulls: false,
	//cursor: 'default',
	//clip: true,
	//dashStyle: null,
	//enableMouseTracking: true,
	events:{}, //legendIndex: 0,
	//linecap: 'round',
	lineWidth:2, //shadow: false,
	// stacking: null,
	marker:{ //enabled: true,
	//symbol: null,
	lineWidth:0,radius:4,lineColor:'#FFFFFF', //fillColor: null,
	states:{ // states for a single point
	hover:{enabled:true,lineWidthPlus:1,radiusPlus:2},select:{fillColor:'#FFFFFF',lineColor:'#000000',lineWidth:2}}},point:{events:{}},dataLabels:{align:'center', // defer: true,
	// enabled: false,
	formatter:function formatter(){return this.y===null?'':Highcharts.numberFormat(this.y,-1);},style:{color:'contrast',fontSize:'11px',fontWeight:'bold',textShadow:'0 0 6px contrast, 0 0 3px contrast'},verticalAlign:'bottom', // above singular point
	x:0,y:0, // backgroundColor: undefined,
	// borderColor: undefined,
	// borderRadius: undefined,
	// borderWidth: undefined,
	padding:5 // shadow: false
	},cropThreshold:300, // draw points outside the plot area when the number of points is less than this
	pointRange:0, //pointStart: 0,
	//pointInterval: 1,
	//showInLegend: null, // auto: true for standalone series, false for linked series
	softThreshold:true,states:{ // states for the entire series
	hover:{ //enabled: false,
	lineWidthPlus:1,marker:{ // lineWidth: base + 1,
	// radius: base + 1
	},halo:{size:10,opacity:0.25}},select:{marker:{}}},stickyTracking:true, //tooltip: {
	//pointFormat: '<span style="color:{point.color}">\u25CF</span> {series.name}: <b>{point.y}</b>'
	//valueDecimals: null,
	//xDateFormat: '%A, %b %e, %Y',
	//valuePrefix: '',
	//ySuffix: ''				
	//}
	turboThreshold:1000 // zIndex: null
	}},labels:{ //items: [],
	style:{ //font: defaultFont,
	position:ABSOLUTE,color:'#3E576F'}},legend:{enabled:true,align:'center', //floating: false,
	layout:'horizontal',labelFormatter:function labelFormatter(){return this.name;}, //borderWidth: 0,
	borderColor:'#909090',borderRadius:0,navigation:{ // animation: true,
	activeColor:'#274b6d', // arrowSize: 12
	inactiveColor:'#CCC' // style: {} // text styles
	}, // margin: 20,
	// reversed: false,
	shadow:false, // backgroundColor: null,
	/*style: {
				padding: '5px'
			},*/itemStyle:{color:'#333333',fontSize:'12px',fontWeight:'bold'},itemHoverStyle:{ //cursor: 'pointer', removed as of #601
	color:'#000'},itemHiddenStyle:{color:'#CCC'},itemCheckboxStyle:{position:ABSOLUTE,width:'13px', // for IE precision
	height:'13px'}, // itemWidth: undefined,
	// symbolRadius: 0,
	// symbolWidth: 16,
	symbolPadding:5,verticalAlign:'bottom', // width: undefined,
	x:0,y:0,title:{ //text: null,
	style:{fontWeight:'bold'}}},loading:{ // hideDuration: 100,
	labelStyle:{fontWeight:'bold',position:RELATIVE,top:'45%'}, // showDuration: 0,
	style:{position:ABSOLUTE,backgroundColor:'white',opacity:0.5,textAlign:'center'}},tooltip:{enabled:true,animation:hasSVG, //crosshairs: null,
	backgroundColor:'rgba(249, 249, 249, .85)',borderWidth:1,borderRadius:3,dateTimeLabelFormats:{millisecond:'%A, %b %e, %H:%M:%S.%L',second:'%A, %b %e, %H:%M:%S',minute:'%A, %b %e, %H:%M',hour:'%A, %b %e, %H:%M',day:'%A, %b %e, %Y',week:'Week from %A, %b %e, %Y',month:'%B %Y',year:'%Y'},footerFormat:'', //formatter: defaultFormatter,
	headerFormat:'<span style="font-size: 10px">{point.key}</span><br/>',pointFormat:'<span style="color:{point.color}">●</span> {series.name}: <b>{point.y}</b><br/>',shadow:true, //shape: 'callout',
	//shared: false,
	snap:isTouchDevice?25:10,style:{color:'#333333',cursor:'default',fontSize:'12px',padding:'8px',pointerEvents:'none', // #1686 http://caniuse.com/#feat=pointer-events
	whiteSpace:'nowrap'} //xDateFormat: '%A, %b %e, %Y',
	//valueDecimals: null,
	//valuePrefix: '',
	//valueSuffix: ''
	},credits:{enabled:true,text:'Highcharts.com',href:'http://www.highcharts.com',position:{align:'right',x:-10,verticalAlign:'bottom',y:-5},style:{cursor:'pointer',color:'#909090',fontSize:'9px'}}}; // Series defaults
	var defaultPlotOptions=defaultOptions.plotOptions,defaultSeriesOptions=defaultPlotOptions.line; // set the default time methods
	setTimeMethods(); /**
	 * Set the time methods globally based on the useUTC option. Time method can be either
	 * local time or UTC (default).
	 */function setTimeMethods(){var globalOptions=defaultOptions.global,useUTC=globalOptions.useUTC,GET=useUTC?'getUTC':'get',SET=useUTC?'setUTC':'set';Date=globalOptions.Date||window.Date;timezoneOffset=useUTC&&globalOptions.timezoneOffset;getTimezoneOffset=useUTC&&globalOptions.getTimezoneOffset;makeTime=function makeTime(year,month,date,hours,minutes,seconds){var d;if(useUTC){d=Date.UTC.apply(0,arguments);d+=getTZOffset(d);}else {d=new Date(year,month,pick(date,1),pick(hours,0),pick(minutes,0),pick(seconds,0)).getTime();}return d;};getMinutes=GET+'Minutes';getHours=GET+'Hours';getDay=GET+'Day';getDate=GET+'Date';getMonth=GET+'Month';getFullYear=GET+'FullYear';setMilliseconds=SET+'Milliseconds';setSeconds=SET+'Seconds';setMinutes=SET+'Minutes';setHours=SET+'Hours';setDate=SET+'Date';setMonth=SET+'Month';setFullYear=SET+'FullYear';} /**
	 * Merge the default options with custom options and return the new options structure
	 * @param {Object} options The new custom options
	 */function setOptions(options){ // Copy in the default options
	defaultOptions=merge(true,defaultOptions,options); // Apply UTC
	setTimeMethods();return defaultOptions;} /**
	 * Get the updated default options. Until 3.0.7, merely exposing defaultOptions for outside modules
	 * wasn't enough because the setOptions method created a new object.
	 */function getOptions(){return defaultOptions;} /**
	 * Handle color operations. The object methods are chainable.
	 * @param {String} input The input color in either rbga or hex format
	 */var rgbaRegEx=/rgba\(\s*([0-9]{1,3})\s*,\s*([0-9]{1,3})\s*,\s*([0-9]{1,3})\s*,\s*([0-9]?(?:\.[0-9]+)?)\s*\)/,hexRegEx=/#([a-fA-F0-9]{2})([a-fA-F0-9]{2})([a-fA-F0-9]{2})/,rgbRegEx=/rgb\(\s*([0-9]{1,3})\s*,\s*([0-9]{1,3})\s*,\s*([0-9]{1,3})\s*\)/;var Color=function Color(input){ // declare variables
	var rgba=[],result,stops; /**
		 * Parse the input color to rgba array
		 * @param {String} input
		 */function init(input){ // Gradients
	if(input&&input.stops){stops=map(input.stops,function(stop){return Color(stop[1]);}); // Solid colors
	}else { // rgba
	result=rgbaRegEx.exec(input);if(result){rgba=[pInt(result[1]),pInt(result[2]),pInt(result[3]),parseFloat(result[4],10)];}else { // hex
	result=hexRegEx.exec(input);if(result){rgba=[pInt(result[1],16),pInt(result[2],16),pInt(result[3],16),1];}else { // rgb
	result=rgbRegEx.exec(input);if(result){rgba=[pInt(result[1]),pInt(result[2]),pInt(result[3]),1];}}}}} /**
		 * Return the color a specified format
		 * @param {String} format
		 */function get(format){var ret;if(stops){ret=merge(input);ret.stops=[].concat(ret.stops);each(stops,function(stop,i){ret.stops[i]=[ret.stops[i][0],stop.get(format)];}); // it's NaN if gradient colors on a column chart
	}else if(rgba&&!isNaN(rgba[0])){if(format==='rgb'){ret='rgb('+rgba[0]+','+rgba[1]+','+rgba[2]+')';}else if(format==='a'){ret=rgba[3];}else {ret='rgba('+rgba.join(',')+')';}}else {ret=input;}return ret;} /**
		 * Brighten the color
		 * @param {Number} alpha
		 */function brighten(alpha){if(stops){each(stops,function(stop){stop.brighten(alpha);});}else if(isNumber(alpha)&&alpha!==0){var i;for(i=0;i<3;i++){rgba[i]+=pInt(alpha*255);if(rgba[i]<0){rgba[i]=0;}if(rgba[i]>255){rgba[i]=255;}}}return this;} /**
		 * Set the color's opacity to a given alpha value
		 * @param {Number} alpha
		 */function setOpacity(alpha){rgba[3]=alpha;return this;} // initialize: parse the input
	init(input); // public methods
	return {get:get,brighten:brighten,rgba:rgba,setOpacity:setOpacity,raw:input};}; /**
	 * A wrapper object for SVG elements
	 */function SVGElement(){}SVGElement.prototype={ // Default base for animation
	opacity:1, // For labels, these CSS properties are applied to the <text> node directly
	textProps:['fontSize','fontWeight','fontFamily','fontStyle','color','lineHeight','width','textDecoration','textOverflow','textShadow'], /**
		 * Initialize the SVG renderer
		 * @param {Object} renderer
		 * @param {String} nodeName
		 */init:function init(renderer,nodeName){var wrapper=this;wrapper.element=nodeName==='span'?createElement(nodeName):doc.createElementNS(SVG_NS,nodeName);wrapper.renderer=renderer;}, /**
		 * Animate a given attribute
		 * @param {Object} params
		 * @param {Number} options The same options as in jQuery animation
		 * @param {Function} complete Function to perform at the end of animation
		 */animate:function animate(params,options,complete){var animOptions=pick(options,this.renderer.globalAnimation,true);stop(this); // stop regardless of animation actually running, or reverting to .attr (#607)
	if(animOptions){animOptions=merge(animOptions,{}); //#2625
	if(complete){ // allows using a callback with the global animation without overwriting it
	animOptions.complete=complete;}_animate(this,params,animOptions);}else {this.attr(params,null,complete);}return this;}, /**
		 * Build an SVG gradient out of a common JavaScript configuration object
		 */colorGradient:function colorGradient(color,prop,elem){var renderer=this.renderer,colorObject,gradName,gradAttr,radAttr,gradients,gradientObject,stops,stopColor,stopOpacity,radialReference,n,id,key=[]; // Apply linear or radial gradients
	if(color.linearGradient){gradName='linearGradient';}else if(color.radialGradient){gradName='radialGradient';}if(gradName){gradAttr=color[gradName];gradients=renderer.gradients;stops=color.stops;radialReference=elem.radialReference; // Keep < 2.2 kompatibility
	if(isArray(gradAttr)){color[gradName]=gradAttr={x1:gradAttr[0],y1:gradAttr[1],x2:gradAttr[2],y2:gradAttr[3],gradientUnits:'userSpaceOnUse'};} // Correct the radial gradient for the radial reference system
	if(gradName==='radialGradient'&&radialReference&&!defined(gradAttr.gradientUnits)){radAttr=gradAttr; // Save the radial attributes for updating
	gradAttr=merge(gradAttr,renderer.getRadialAttr(radialReference,radAttr),{gradientUnits:'userSpaceOnUse'});} // Build the unique key to detect whether we need to create a new element (#1282)
	for(n in gradAttr){if(n!=='id'){key.push(n,gradAttr[n]);}}for(n in stops){key.push(stops[n]);}key=key.join(','); // Check if a gradient object with the same config object is created within this renderer
	if(gradients[key]){id=gradients[key].attr('id');}else { // Set the id and create the element
	gradAttr.id=id=PREFIX+idCounter++;gradients[key]=gradientObject=renderer.createElement(gradName).attr(gradAttr).add(renderer.defs);gradientObject.radAttr=radAttr; // The gradient needs to keep a list of stops to be able to destroy them
	gradientObject.stops=[];each(stops,function(stop){var stopObject;if(stop[1].indexOf('rgba')===0){colorObject=Color(stop[1]);stopColor=colorObject.get('rgb');stopOpacity=colorObject.get('a');}else {stopColor=stop[1];stopOpacity=1;}stopObject=renderer.createElement('stop').attr({offset:stop[0],'stop-color':stopColor,'stop-opacity':stopOpacity}).add(gradientObject); // Add the stop element to the gradient
	gradientObject.stops.push(stopObject);});} // Set the reference to the gradient object
	elem.setAttribute(prop,'url('+renderer.url+'#'+id+')');elem.gradient=key;}}, /**
		 * Apply a polyfill to the text-stroke CSS property, by copying the text element
		 * and apply strokes to the copy.
		 *
		 * Contrast checks at http://jsfiddle.net/highcharts/43soe9m1/2/
		 *
		 * docs: update default, document the polyfill and the limitations on hex colors and pixel values, document contrast pseudo-color
		 */applyTextShadow:function applyTextShadow(textShadow){var elem=this.element,tspans,hasContrast=textShadow.indexOf('contrast')!==-1,styles={},forExport=this.renderer.forExport, // IE10 and IE11 report textShadow in elem.style even though it doesn't work. Check
	// this again with new IE release. In exports, the rendering is passed to PhantomJS. 
	supports=forExport||elem.style.textShadow!==UNDEFINED&&!isMS; // When the text shadow is set to contrast, use dark stroke for light text and vice versa
	if(hasContrast){styles.textShadow=textShadow=textShadow.replace(/contrast/g,this.renderer.getContrast(elem.style.fill));} // Safari with retina displays as well as PhantomJS bug (#3974). Firefox does not tolerate this,
	// it removes the text shadows.
	if(isWebKit||forExport){styles.textRendering='geometricPrecision';} /* Selective side-by-side testing in supported browser (http://jsfiddle.net/highcharts/73L1ptrh/)
			if (elem.textContent.indexOf('2.') === 0) {
				elem.style['text-shadow'] = 'none';
				supports = false;
			}
			// */ // No reason to polyfill, we've got native support
	if(supports){this.css(styles); // Apply altered textShadow or textRendering workaround
	}else {this.fakeTS=true; // Fake text shadow
	// In order to get the right y position of the clones, 
	// copy over the y setter
	this.ySetter=this.xSetter;tspans=[].slice.call(elem.getElementsByTagName('tspan'));each(textShadow.split(/\s?,\s?/g),function(textShadow){var firstChild=elem.firstChild,color,strokeWidth;textShadow=textShadow.split(' ');color=textShadow[textShadow.length-1]; // Approximately tune the settings to the text-shadow behaviour
	strokeWidth=textShadow[textShadow.length-2];if(strokeWidth){each(tspans,function(tspan,y){var clone; // Let the first line start at the correct X position
	if(y===0){tspan.setAttribute('x',elem.getAttribute('x'));y=elem.getAttribute('y');tspan.setAttribute('y',y||0);if(y===null){elem.setAttribute('y',0);}} // Create the clone and apply shadow properties
	clone=tspan.cloneNode(1);attr(clone,{'class':PREFIX+'text-shadow','fill':color,'stroke':color,'stroke-opacity':1/mathMax(pInt(strokeWidth),3),'stroke-width':strokeWidth,'stroke-linejoin':'round'});elem.insertBefore(clone,firstChild);});}});}}, /**
		 * Set or get a given attribute
		 * @param {Object|String} hash
		 * @param {Mixed|Undefined} val
		 */attr:function attr(hash,val,complete){var key,value,element=this.element,hasSetSymbolSize,ret=this,skipAttr; // single key-value pair
	if(typeof hash==='string'&&val!==UNDEFINED){key=hash;hash={};hash[key]=val;} // used as a getter: first argument is a string, second is undefined
	if(typeof hash==='string'){ret=(this[hash+'Getter']||this._defaultGetter).call(this,hash,element); // setter
	}else {for(key in hash){value=hash[key];skipAttr=false;if(this.symbolName&&/^(x|y|width|height|r|start|end|innerR|anchorX|anchorY)/.test(key)){if(!hasSetSymbolSize){this.symbolAttr(hash);hasSetSymbolSize=true;}skipAttr=true;}if(this.rotation&&(key==='x'||key==='y')){this.doTransform=true;}if(!skipAttr){(this[key+'Setter']||this._defaultSetter).call(this,value,key,element);} // Let the shadow follow the main element
	if(this.shadows&&/^(width|height|visibility|x|y|d|transform|cx|cy|r)$/.test(key)){this.updateShadows(key,value);}} // Update transform. Do this outside the loop to prevent redundant updating for batch setting
	// of attributes.
	if(this.doTransform){this.updateTransform();this.doTransform=false;}} // In accordance with animate, run a complete callback
	if(complete){complete();}return ret;},updateShadows:function updateShadows(key,value){var shadows=this.shadows,i=shadows.length;while(i--){shadows[i].setAttribute(key,key==='height'?mathMax(value-(shadows[i].cutHeight||0),0):key==='d'?this.d:value);}}, /**
		 * Add a class name to an element
		 */addClass:function addClass(className){var element=this.element,currentClassName=attr(element,'class')||'';if(currentClassName.indexOf(className)===-1){attr(element,'class',currentClassName+' '+className);}return this;}, /* hasClass and removeClass are not (yet) needed
		hasClass: function (className) {
			return attr(this.element, 'class').indexOf(className) !== -1;
		},
		removeClass: function (className) {
			attr(this.element, 'class', attr(this.element, 'class').replace(className, ''));
			return this;
		},
		*/ /**
		 * If one of the symbol size affecting parameters are changed,
		 * check all the others only once for each call to an element's
		 * .attr() method
		 * @param {Object} hash
		 */symbolAttr:function symbolAttr(hash){var wrapper=this;each(['x','y','r','start','end','width','height','innerR','anchorX','anchorY'],function(key){wrapper[key]=pick(hash[key],wrapper[key]);});wrapper.attr({d:wrapper.renderer.symbols[wrapper.symbolName](wrapper.x,wrapper.y,wrapper.width,wrapper.height,wrapper)});}, /**
		 * Apply a clipping path to this object
		 * @param {String} id
		 */clip:function clip(clipRect){return this.attr('clip-path',clipRect?'url('+this.renderer.url+'#'+clipRect.id+')':NONE);}, /**
		 * Calculate the coordinates needed for drawing a rectangle crisply and return the
		 * calculated attributes
		 * @param {Number} strokeWidth
		 * @param {Number} x
		 * @param {Number} y
		 * @param {Number} width
		 * @param {Number} height
		 */crisp:function crisp(rect){var wrapper=this,key,attribs={},normalizer,strokeWidth=rect.strokeWidth||wrapper.strokeWidth||0;normalizer=mathRound(strokeWidth)%2/2; // mathRound because strokeWidth can sometimes have roundoff errors
	// normalize for crisp edges
	rect.x=mathFloor(rect.x||wrapper.x||0)+normalizer;rect.y=mathFloor(rect.y||wrapper.y||0)+normalizer;rect.width=mathFloor((rect.width||wrapper.width||0)-2*normalizer);rect.height=mathFloor((rect.height||wrapper.height||0)-2*normalizer);rect.strokeWidth=strokeWidth;for(key in rect){if(wrapper[key]!==rect[key]){ // only set attribute if changed
	wrapper[key]=attribs[key]=rect[key];}}return attribs;}, /**
		 * Set styles for the element
		 * @param {Object} styles
		 */css:function css(styles){var elemWrapper=this,oldStyles=elemWrapper.styles,newStyles={},elem=elemWrapper.element,textWidth,n,serializedCss='',hyphenate,hasNew=!oldStyles; // convert legacy
	if(styles&&styles.color){styles.fill=styles.color;} // Filter out existing styles to increase performance (#2640)
	if(oldStyles){for(n in styles){if(styles[n]!==oldStyles[n]){newStyles[n]=styles[n];hasNew=true;}}}if(hasNew){textWidth=elemWrapper.textWidth=styles&&styles.width&&elem.nodeName.toLowerCase()==='text'&&pInt(styles.width)||elemWrapper.textWidth; // #3501
	// Merge the new styles with the old ones
	if(oldStyles){styles=extend(oldStyles,newStyles);} // store object
	elemWrapper.styles=styles;if(textWidth&&(useCanVG||!hasSVG&&elemWrapper.renderer.forExport)){delete styles.width;} // serialize and set style attribute
	if(isMS&&!hasSVG){_css(elemWrapper.element,styles);}else { /*jslint unparam: true*/hyphenate=function hyphenate(a,b){return '-'+b.toLowerCase();}; /*jslint unparam: false*/for(n in styles){serializedCss+=n.replace(/([A-Z])/g,hyphenate)+':'+styles[n]+';';}attr(elem,'style',serializedCss); // #1881
	} // re-build text
	if(textWidth&&elemWrapper.added){elemWrapper.renderer.buildText(elemWrapper);}}return elemWrapper;}, /**
		 * Add an event listener
		 * @param {String} eventType
		 * @param {Function} handler
		 */on:function on(eventType,handler){var svgElement=this,element=svgElement.element; // touch
	if(hasTouch&&eventType==='click'){element.ontouchstart=function(e){svgElement.touchEventFired=Date.now();e.preventDefault();handler.call(element,e);};element.onclick=function(e){if(userAgent.indexOf('Android')===-1||Date.now()-(svgElement.touchEventFired||0)>1100){ // #2269
	handler.call(element,e);}};}else { // simplest possible event model for internal use
	element['on'+eventType]=handler;}return this;}, /**
		 * Set the coordinates needed to draw a consistent radial gradient across
		 * pie slices regardless of positioning inside the chart. The format is
		 * [centerX, centerY, diameter] in pixels.
		 */setRadialReference:function setRadialReference(coordinates){var existingGradient=this.renderer.gradients[this.element.gradient];this.element.radialReference=coordinates; // On redrawing objects with an existing gradient, the gradient needs
	// to be repositioned (#3801)
	if(existingGradient&&existingGradient.radAttr){existingGradient.animate(this.renderer.getRadialAttr(coordinates,existingGradient.radAttr));}return this;}, /**
		 * Move an object and its children by x and y values
		 * @param {Number} x
		 * @param {Number} y
		 */translate:function translate(x,y){return this.attr({translateX:x,translateY:y});}, /**
		 * Invert a group, rotate and flip
		 */invert:function invert(){var wrapper=this;wrapper.inverted=true;wrapper.updateTransform();return wrapper;}, /**
		 * Private method to update the transform attribute based on internal
		 * properties
		 */updateTransform:function updateTransform(){var wrapper=this,translateX=wrapper.translateX||0,translateY=wrapper.translateY||0,scaleX=wrapper.scaleX,scaleY=wrapper.scaleY,inverted=wrapper.inverted,rotation=wrapper.rotation,element=wrapper.element,transform; // flipping affects translate as adjustment for flipping around the group's axis
	if(inverted){translateX+=wrapper.attr('width');translateY+=wrapper.attr('height');} // Apply translate. Nearly all transformed elements have translation, so instead
	// of checking for translate = 0, do it always (#1767, #1846).
	transform=['translate('+translateX+','+translateY+')']; // apply rotation
	if(inverted){transform.push('rotate(90) scale(-1,1)');}else if(rotation){ // text rotation
	transform.push('rotate('+rotation+' '+(element.getAttribute('x')||0)+' '+(element.getAttribute('y')||0)+')'); // Delete bBox memo when the rotation changes
	//delete wrapper.bBox;
	} // apply scale
	if(defined(scaleX)||defined(scaleY)){transform.push('scale('+pick(scaleX,1)+' '+pick(scaleY,1)+')');}if(transform.length){element.setAttribute('transform',transform.join(' '));}}, /**
		 * Bring the element to the front
		 */toFront:function toFront(){var element=this.element;element.parentNode.appendChild(element);return this;}, /**
		 * Break down alignment options like align, verticalAlign, x and y
		 * to x and y relative to the chart.
		 *
		 * @param {Object} alignOptions
		 * @param {Boolean} alignByTranslate
		 * @param {String[Object} box The box to align to, needs a width and height. When the
		 *		box is a string, it refers to an object in the Renderer. For example, when
		 *		box is 'spacingBox', it refers to Renderer.spacingBox which holds width, height
		 *		x and y properties.
		 *
		 */align:function align(alignOptions,alignByTranslate,box){var align,vAlign,x,y,attribs={},alignTo,renderer=this.renderer,alignedObjects=renderer.alignedObjects; // First call on instanciate
	if(alignOptions){this.alignOptions=alignOptions;this.alignByTranslate=alignByTranslate;if(!box||isString(box)){ // boxes other than renderer handle this internally
	this.alignTo=alignTo=box||'renderer';erase(alignedObjects,this); // prevent duplicates, like legendGroup after resize
	alignedObjects.push(this);box=null; // reassign it below
	} // When called on resize, no arguments are supplied
	}else {alignOptions=this.alignOptions;alignByTranslate=this.alignByTranslate;alignTo=this.alignTo;}box=pick(box,renderer[alignTo],renderer); // Assign variables
	align=alignOptions.align;vAlign=alignOptions.verticalAlign;x=(box.x||0)+(alignOptions.x||0); // default: left align
	y=(box.y||0)+(alignOptions.y||0); // default: top align
	// Align
	if(align==='right'||align==='center'){x+=(box.width-(alignOptions.width||0))/{right:1,center:2}[align];}attribs[alignByTranslate?'translateX':'x']=mathRound(x); // Vertical align
	if(vAlign==='bottom'||vAlign==='middle'){y+=(box.height-(alignOptions.height||0))/({bottom:1,middle:2}[vAlign]||1);}attribs[alignByTranslate?'translateY':'y']=mathRound(y); // Animate only if already placed
	this[this.placed?'animate':'attr'](attribs);this.placed=true;this.alignAttr=attribs;return this;}, /**
		 * Get the bounding box (width, height, x and y) for the element
		 */getBBox:function getBBox(reload){var wrapper=this,bBox, // = wrapper.bBox,
	renderer=wrapper.renderer,width,height,rotation=wrapper.rotation,element=wrapper.element,styles=wrapper.styles,rad=rotation*deg2rad,textStr=wrapper.textStr,textShadow,elemStyle=element.style,toggleTextShadowShim,cacheKey;if(textStr!==UNDEFINED){ // Properties that affect bounding box
	cacheKey=['',rotation||0,styles&&styles.fontSize,element.style.width].join(','); // Since numbers are monospaced, and numerical labels appear a lot in a chart,
	// we assume that a label of n characters has the same bounding box as others 
	// of the same length.
	if(textStr===''||numRegex.test(textStr)){cacheKey='num:'+textStr.toString().length+cacheKey; // Caching all strings reduces rendering time by 4-5%.
	}else {cacheKey=textStr+cacheKey;}}if(cacheKey&&!reload){bBox=renderer.cache[cacheKey];} // No cache found
	if(!bBox){ // SVG elements
	if(element.namespaceURI===SVG_NS||renderer.forExport){try{ // Fails in Firefox if the container has display: none.
	// When the text shadow shim is used, we need to hide the fake shadows
	// to get the correct bounding box (#3872)
	toggleTextShadowShim=this.fakeTS&&function(display){each(element.querySelectorAll('.'+PREFIX+'text-shadow'),function(tspan){tspan.style.display=display;});}; // Workaround for #3842, Firefox reporting wrong bounding box for shadows
	if(isFirefox&&elemStyle.textShadow){textShadow=elemStyle.textShadow;elemStyle.textShadow='';}else if(toggleTextShadowShim){toggleTextShadowShim(NONE);}bBox=element.getBBox? // SVG: use extend because IE9 is not allowed to change width and height in case
	// of rotation (below)
	extend({},element.getBBox()): // Canvas renderer and legacy IE in export mode
	{width:element.offsetWidth,height:element.offsetHeight}; // #3842
	if(textShadow){elemStyle.textShadow=textShadow;}else if(toggleTextShadowShim){toggleTextShadowShim('');}}catch(e){} // If the bBox is not set, the try-catch block above failed. The other condition
	// is for Opera that returns a width of -Infinity on hidden elements.
	if(!bBox||bBox.width<0){bBox={width:0,height:0};} // VML Renderer or useHTML within SVG
	}else {bBox=wrapper.htmlGetBBox();} // True SVG elements as well as HTML elements in modern browsers using the .useHTML option
	// need to compensated for rotation
	if(renderer.isSVG){width=bBox.width;height=bBox.height; // Workaround for wrong bounding box in IE9 and IE10 (#1101, #1505, #1669, #2568)
	if(isMS&&styles&&styles.fontSize==='11px'&&height.toPrecision(3)==='16.9'){bBox.height=height=14;} // Adjust for rotated text
	if(rotation){bBox.width=mathAbs(height*mathSin(rad))+mathAbs(width*mathCos(rad));bBox.height=mathAbs(height*mathCos(rad))+mathAbs(width*mathSin(rad));}} // Cache it
	if(cacheKey){renderer.cache[cacheKey]=bBox;}}return bBox;}, /**
		 * Show the element
		 */show:function show(inherit){return this.attr({visibility:inherit?'inherit':VISIBLE});}, /**
		 * Hide the element
		 */hide:function hide(){return this.attr({visibility:HIDDEN});},fadeOut:function fadeOut(duration){var elemWrapper=this;elemWrapper.animate({opacity:0},{duration:duration||150,complete:function complete(){elemWrapper.attr({y:-9999}); // #3088, assuming we're only using this for tooltips
	}});}, /**
		 * Add the element
		 * @param {Object|Undefined} parent Can be an element, an element wrapper or undefined
		 *	to append the element to the renderer.box.
		 */add:function add(parent){var renderer=this.renderer,element=this.element,inserted;if(parent){this.parentGroup=parent;} // mark as inverted
	this.parentInverted=parent&&parent.inverted; // build formatted text
	if(this.textStr!==undefined){renderer.buildText(this);} // Mark as added
	this.added=true; // If we're adding to renderer root, or other elements in the group 
	// have a z index, we need to handle it
	if(!parent||parent.handleZ||this.zIndex){inserted=this.zIndexSetter();} // If zIndex is not handled, append at the end
	if(!inserted){(parent?parent.element:renderer.box).appendChild(element);} // fire an event for internal hooks
	if(this.onAdd){this.onAdd();}return this;}, /**
		 * Removes a child either by removeChild or move to garbageBin.
		 * Issue 490; in VML removeChild results in Orphaned nodes according to sIEve, discardElement does not.
		 */safeRemoveChild:function safeRemoveChild(element){var parentNode=element.parentNode;if(parentNode){parentNode.removeChild(element);}}, /**
		 * Destroy the element and element wrapper
		 */destroy:function destroy(){var wrapper=this,element=wrapper.element||{},shadows=wrapper.shadows,parentToClean=wrapper.renderer.isSVG&&element.nodeName==='SPAN'&&wrapper.parentGroup,grandParent,key,i; // remove events
	element.onclick=element.onmouseout=element.onmouseover=element.onmousemove=element.point=null;stop(wrapper); // stop running animations
	if(wrapper.clipPath){wrapper.clipPath=wrapper.clipPath.destroy();} // Destroy stops in case this is a gradient object
	if(wrapper.stops){for(i=0;i<wrapper.stops.length;i++){wrapper.stops[i]=wrapper.stops[i].destroy();}wrapper.stops=null;} // remove element
	wrapper.safeRemoveChild(element); // destroy shadows
	if(shadows){each(shadows,function(shadow){wrapper.safeRemoveChild(shadow);});} // In case of useHTML, clean up empty containers emulating SVG groups (#1960, #2393, #2697).
	while(parentToClean&&parentToClean.div&&parentToClean.div.childNodes.length===0){grandParent=parentToClean.parentGroup;wrapper.safeRemoveChild(parentToClean.div);delete parentToClean.div;parentToClean=grandParent;} // remove from alignObjects
	if(wrapper.alignTo){erase(wrapper.renderer.alignedObjects,wrapper);}for(key in wrapper){delete wrapper[key];}return null;}, /**
		 * Add a shadow to the element. Must be done after the element is added to the DOM
		 * @param {Boolean|Object} shadowOptions
		 */shadow:function shadow(shadowOptions,group,cutOff){var shadows=[],i,shadow,element=this.element,strokeWidth,shadowWidth,shadowElementOpacity, // compensate for inverted plot area
	transform;if(shadowOptions){shadowWidth=pick(shadowOptions.width,3);shadowElementOpacity=(shadowOptions.opacity||0.15)/shadowWidth;transform=this.parentInverted?'(-1,-1)':'('+pick(shadowOptions.offsetX,1)+', '+pick(shadowOptions.offsetY,1)+')';for(i=1;i<=shadowWidth;i++){shadow=element.cloneNode(0);strokeWidth=shadowWidth*2+1-2*i;attr(shadow,{'isShadow':'true','stroke':shadowOptions.color||'black','stroke-opacity':shadowElementOpacity*i,'stroke-width':strokeWidth,'transform':'translate'+transform,'fill':NONE});if(cutOff){attr(shadow,'height',mathMax(attr(shadow,'height')-strokeWidth,0));shadow.cutHeight=strokeWidth;}if(group){group.element.appendChild(shadow);}else {element.parentNode.insertBefore(shadow,element);}shadows.push(shadow);}this.shadows=shadows;}return this;},xGetter:function xGetter(key){if(this.element.nodeName==='circle'){key={x:'cx',y:'cy'}[key]||key;}return this._defaultGetter(key);}, /** 
		 * Get the current value of an attribute or pseudo attribute, used mainly
		 * for animation.
		 */_defaultGetter:function _defaultGetter(key){var ret=pick(this[key],this.element?this.element.getAttribute(key):null,0);if(/^[\-0-9\.]+$/.test(ret)){ // is numerical
	ret=parseFloat(ret);}return ret;},dSetter:function dSetter(value,key,element){if(value&&value.join){ // join path
	value=value.join(' ');}if(/(NaN| {2}|^$)/.test(value)){value='M 0 0';}element.setAttribute(key,value);this[key]=value;},dashstyleSetter:function dashstyleSetter(value){var i;value=value&&value.toLowerCase();if(value){value=value.replace('shortdashdotdot','3,1,1,1,1,1,').replace('shortdashdot','3,1,1,1').replace('shortdot','1,1,').replace('shortdash','3,1,').replace('longdash','8,3,').replace(/dot/g,'1,3,').replace('dash','4,3,').replace(/,$/,'').split(','); // ending comma
	i=value.length;while(i--){value[i]=pInt(value[i])*this['stroke-width'];}value=value.join(',').replace('NaN','none'); // #3226
	this.element.setAttribute('stroke-dasharray',value);}},alignSetter:function alignSetter(value){this.element.setAttribute('text-anchor',{left:'start',center:'middle',right:'end'}[value]);},opacitySetter:function opacitySetter(value,key,element){this[key]=value;element.setAttribute(key,value);},titleSetter:function titleSetter(value){var titleNode=this.element.getElementsByTagName('title')[0];if(!titleNode){titleNode=doc.createElementNS(SVG_NS,'title');this.element.appendChild(titleNode);}titleNode.appendChild(doc.createTextNode(String(pick(value),'').replace(/<[^>]*>/g,'') // #3276, #3895
	));},textSetter:function textSetter(value){if(value!==this.textStr){ // Delete bBox memo when the text changes
	delete this.bBox;this.textStr=value;if(this.added){this.renderer.buildText(this);}}},fillSetter:function fillSetter(value,key,element){if(typeof value==='string'){element.setAttribute(key,value);}else if(value){this.colorGradient(value,key,element);}},visibilitySetter:function visibilitySetter(value,key,element){ // IE9-11 doesn't handle visibilty:inherit well, so we remove the attribute instead (#2881, #3909)
	if(value==='inherit'){element.removeAttribute(key);}else {element.setAttribute(key,value);}},zIndexSetter:function zIndexSetter(value,key){var renderer=this.renderer,parentGroup=this.parentGroup,parentWrapper=parentGroup||renderer,parentNode=parentWrapper.element||renderer.box,childNodes,otherElement,otherZIndex,element=this.element,inserted,run=this.added,i;if(defined(value)){element.setAttribute(key,value); // So we can read it for other elements in the group
	value=+value;if(this[key]===value){ // Only update when needed (#3865)
	run=false;}this[key]=value;} // Insert according to this and other elements' zIndex. Before .add() is called,
	// nothing is done. Then on add, or by later calls to zIndexSetter, the node
	// is placed on the right place in the DOM.
	if(run){value=this.zIndex;if(value&&parentGroup){parentGroup.handleZ=true;}childNodes=parentNode.childNodes;for(i=0;i<childNodes.length&&!inserted;i++){otherElement=childNodes[i];otherZIndex=attr(otherElement,'zIndex');if(otherElement!==element&&( // Insert before the first element with a higher zIndex
	pInt(otherZIndex)>value|| // If no zIndex given, insert before the first element with a zIndex
	!defined(value)&&defined(otherZIndex))){parentNode.insertBefore(element,otherElement);inserted=true;}}if(!inserted){parentNode.appendChild(element);}}return inserted;},_defaultSetter:function _defaultSetter(value,key,element){element.setAttribute(key,value);}}; // Some shared setters and getters
	SVGElement.prototype.yGetter=SVGElement.prototype.xGetter;SVGElement.prototype.translateXSetter=SVGElement.prototype.translateYSetter=SVGElement.prototype.rotationSetter=SVGElement.prototype.verticalAlignSetter=SVGElement.prototype.scaleXSetter=SVGElement.prototype.scaleYSetter=function(value,key){this[key]=value;this.doTransform=true;}; // WebKit and Batik have problems with a stroke-width of zero, so in this case we remove the 
	// stroke attribute altogether. #1270, #1369, #3065, #3072.
	SVGElement.prototype['stroke-widthSetter']=SVGElement.prototype.strokeSetter=function(value,key,element){this[key]=value; // Only apply the stroke attribute if the stroke width is defined and larger than 0
	if(this.stroke&&this['stroke-width']){this.strokeWidth=this['stroke-width'];SVGElement.prototype.fillSetter.call(this,this.stroke,'stroke',element); // use prototype as instance may be overridden
	element.setAttribute('stroke-width',this['stroke-width']);this.hasStroke=true;}else if(key==='stroke-width'&&value===0&&this.hasStroke){element.removeAttribute('stroke');this.hasStroke=false;}}; /**
	 * The default SVG renderer
	 */var SVGRenderer=function SVGRenderer(){this.init.apply(this,arguments);};SVGRenderer.prototype={Element:SVGElement, /**
		 * Initialize the SVGRenderer
		 * @param {Object} container
		 * @param {Number} width
		 * @param {Number} height
		 * @param {Boolean} forExport
		 */init:function init(container,width,height,style,forExport,allowHTML){var renderer=this,loc=location,boxWrapper,element,desc;boxWrapper=renderer.createElement('svg').attr({version:'1.1'}).css(this.getStyle(style));element=boxWrapper.element;container.appendChild(element); // For browsers other than IE, add the namespace attribute (#1978)
	if(container.innerHTML.indexOf('xmlns')===-1){attr(element,'xmlns',SVG_NS);} // object properties
	renderer.isSVG=true;renderer.box=element;renderer.boxWrapper=boxWrapper;renderer.alignedObjects=[]; // Page url used for internal references. #24, #672, #1070
	renderer.url=(isFirefox||isWebKit)&&doc.getElementsByTagName('base').length?loc.href.replace(/#.*?$/,'') // remove the hash
	.replace(/([\('\)])/g,'\\$1') // escape parantheses and quotes
	.replace(/ /g,'%20'): // replace spaces (needed for Safari only)
	''; // Add description
	desc=this.createElement('desc').add();desc.element.appendChild(doc.createTextNode('Created with '+PRODUCT+' '+VERSION));renderer.defs=this.createElement('defs').add();renderer.allowHTML=allowHTML;renderer.forExport=forExport;renderer.gradients={}; // Object where gradient SvgElements are stored
	renderer.cache={}; // Cache for numerical bounding boxes
	renderer.setSize(width,height,false); // Issue 110 workaround:
	// In Firefox, if a div is positioned by percentage, its pixel position may land
	// between pixels. The container itself doesn't display this, but an SVG element
	// inside this container will be drawn at subpixel precision. In order to draw
	// sharp lines, this must be compensated for. This doesn't seem to work inside
	// iframes though (like in jsFiddle).
	var subPixelFix,rect;if(isFirefox&&container.getBoundingClientRect){renderer.subPixelFix=subPixelFix=function subPixelFix(){_css(container,{left:0,top:0});rect=container.getBoundingClientRect();_css(container,{left:mathCeil(rect.left)-rect.left+PX,top:mathCeil(rect.top)-rect.top+PX});}; // run the fix now
	subPixelFix(); // run it on resize
	addEvent(win,'resize',subPixelFix);}},getStyle:function getStyle(style){return this.style=extend({fontFamily:'"Lucida Grande", "Lucida Sans Unicode", Arial, Helvetica, sans-serif', // default font
	fontSize:'12px'},style);}, /**
		 * Detect whether the renderer is hidden. This happens when one of the parent elements
		 * has display: none. #608.
		 */isHidden:function isHidden(){return !this.boxWrapper.getBBox().width;}, /**
		 * Destroys the renderer and its allocated members.
		 */destroy:function destroy(){var renderer=this,rendererDefs=renderer.defs;renderer.box=null;renderer.boxWrapper=renderer.boxWrapper.destroy(); // Call destroy on all gradient elements
	destroyObjectProperties(renderer.gradients||{});renderer.gradients=null; // Defs are null in VMLRenderer
	// Otherwise, destroy them here.
	if(rendererDefs){renderer.defs=rendererDefs.destroy();} // Remove sub pixel fix handler
	// We need to check that there is a handler, otherwise all functions that are registered for event 'resize' are removed
	// See issue #982
	if(renderer.subPixelFix){removeEvent(win,'resize',renderer.subPixelFix);}renderer.alignedObjects=null;return null;}, /**
		 * Create a wrapper for an SVG element
		 * @param {Object} nodeName
		 */createElement:function createElement(nodeName){var wrapper=new this.Element();wrapper.init(this,nodeName);return wrapper;}, /**
		 * Dummy function for use in canvas renderer
		 */draw:function draw(){}, /**
		 * Get converted radial gradient attributes
		 */getRadialAttr:function getRadialAttr(radialReference,gradAttr){return {cx:radialReference[0]-radialReference[2]/2+gradAttr.cx*radialReference[2],cy:radialReference[1]-radialReference[2]/2+gradAttr.cy*radialReference[2],r:gradAttr.r*radialReference[2]};}, /**
		 * Parse a simple HTML string into SVG tspans
		 *
		 * @param {Object} textNode The parent text SVG node
		 */buildText:function buildText(wrapper){var textNode=wrapper.element,renderer=this,forExport=renderer.forExport,textStr=pick(wrapper.textStr,'').toString(),hasMarkup=textStr.indexOf('<')!==-1,lines,childNodes=textNode.childNodes,styleRegex,hrefRegex,parentX=attr(textNode,'x'),textStyles=wrapper.styles,width=wrapper.textWidth,textLineHeight=textStyles&&textStyles.lineHeight,textShadow=textStyles&&textStyles.textShadow,ellipsis=textStyles&&textStyles.textOverflow==='ellipsis',i=childNodes.length,tempParent=width&&!wrapper.added&&this.box,getLineHeight=function getLineHeight(tspan){return textLineHeight?pInt(textLineHeight):renderer.fontMetrics(/(px|em)$/.test(tspan&&tspan.style.fontSize)?tspan.style.fontSize:textStyles&&textStyles.fontSize||renderer.style.fontSize||12,tspan).h;},unescapeAngleBrackets=function unescapeAngleBrackets(inputStr){return inputStr.replace(/&lt;/g,'<').replace(/&gt;/g,'>');}; /// remove old text
	while(i--){textNode.removeChild(childNodes[i]);} // Skip tspans, add text directly to text node. The forceTSpan is a hook 
	// used in text outline hack.
	if(!hasMarkup&&!textShadow&&!ellipsis&&textStr.indexOf(' ')===-1){textNode.appendChild(doc.createTextNode(unescapeAngleBrackets(textStr)));return; // Complex strings, add more logic
	}else {styleRegex=/<.*style="([^"]+)".*>/;hrefRegex=/<.*href="(http[^"]+)".*>/;if(tempParent){tempParent.appendChild(textNode); // attach it to the DOM to read offset width
	}if(hasMarkup){lines=textStr.replace(/<(b|strong)>/g,'<span style="font-weight:bold">').replace(/<(i|em)>/g,'<span style="font-style:italic">').replace(/<a/g,'<span').replace(/<\/(b|strong|i|em|a)>/g,'</span>').split(/<br.*?>/g);}else {lines=[textStr];} // remove empty line at end
	if(lines[lines.length-1]===''){lines.pop();} // build the lines
	each(lines,function(line,lineNo){var spans,spanNo=0;line=line.replace(/<span/g,'|||<span').replace(/<\/span>/g,'</span>|||');spans=line.split('|||');each(spans,function(span){if(span!==''||spans.length===1){var attributes={},tspan=doc.createElementNS(SVG_NS,'tspan'),spanStyle; // #390
	if(styleRegex.test(span)){spanStyle=span.match(styleRegex)[1].replace(/(;| |^)color([ :])/,'$1fill$2');attr(tspan,'style',spanStyle);}if(hrefRegex.test(span)&&!forExport){ // Not for export - #1529
	attr(tspan,'onclick','location.href=\"'+span.match(hrefRegex)[1]+'\"');_css(tspan,{cursor:'pointer'});}span=unescapeAngleBrackets(span.replace(/<(.|\n)*?>/g,'')||' '); // Nested tags aren't supported, and cause crash in Safari (#1596)
	if(span!==' '){ // add the text node
	tspan.appendChild(doc.createTextNode(span));if(!spanNo){ // first span in a line, align it to the left
	if(lineNo&&parentX!==null){attributes.x=parentX;}}else {attributes.dx=0; // #16
	} // add attributes
	attr(tspan,attributes); // Append it
	textNode.appendChild(tspan); // first span on subsequent line, add the line height
	if(!spanNo&&lineNo){ // allow getting the right offset height in exporting in IE
	if(!hasSVG&&forExport){_css(tspan,{display:'block'});} // Set the line height based on the font size of either
	// the text element or the tspan element
	attr(tspan,'dy',getLineHeight(tspan));} /*if (width) {
									renderer.breakText(wrapper, width);
								}*/ // Check width and apply soft breaks or ellipsis
	if(width){var words=span.replace(/([^\^])-/g,'$1- ').split(' '), // #1273
	hasWhiteSpace=spans.length>1||lineNo||words.length>1&&textStyles.whiteSpace!=='nowrap',tooLong,wasTooLong,actualWidth,rest=[],dy=getLineHeight(tspan),softLineNo=1,rotation=wrapper.rotation,wordStr=span, // for ellipsis
	cursor=wordStr.length, // binary search cursor
	bBox;while((hasWhiteSpace||ellipsis)&&(words.length||rest.length)){wrapper.rotation=0; // discard rotation when computing box
	bBox=wrapper.getBBox(true);actualWidth=bBox.width; // Old IE cannot measure the actualWidth for SVG elements (#2314)
	if(!hasSVG&&renderer.forExport){actualWidth=renderer.measureSpanWidth(tspan.firstChild.data,wrapper.styles);}tooLong=actualWidth>width; // For ellipsis, do a binary search for the correct string length
	if(wasTooLong===undefined){wasTooLong=tooLong; // First time
	}if(ellipsis&&wasTooLong){cursor/=2;if(wordStr===''||!tooLong&&cursor<0.5){words=[]; // All ok, break out
	}else {if(tooLong){wasTooLong=true;}wordStr=span.substring(0,wordStr.length+(tooLong?-1:1)*mathCeil(cursor));words=[wordStr+(width>3?'…':'')];tspan.removeChild(tspan.firstChild);} // Looping down, this is the first word sequence that is not too long,
	// so we can move on to build the next line.
	}else if(!tooLong||words.length===1){words=rest;rest=[];if(words.length){softLineNo++;tspan=doc.createElementNS(SVG_NS,'tspan');attr(tspan,{dy:dy,x:parentX});if(spanStyle){ // #390
	attr(tspan,'style',spanStyle);}textNode.appendChild(tspan);}if(actualWidth>width){ // a single word is pressing it out
	width=actualWidth;}}else { // append to existing line tspan
	tspan.removeChild(tspan.firstChild);rest.unshift(words.pop());}if(words.length){tspan.appendChild(doc.createTextNode(words.join(' ').replace(/- /g,'-')));}}if(wasTooLong){wrapper.attr('title',wrapper.textStr);}wrapper.rotation=rotation;}spanNo++;}}});});if(tempParent){tempParent.removeChild(textNode); // attach it to the DOM to read offset width
	} // Apply the text shadow
	if(textShadow&&wrapper.applyTextShadow){wrapper.applyTextShadow(textShadow);}}}, /*
		breakText: function (wrapper, width) {
			var bBox = wrapper.getBBox(),
				node = wrapper.element,
				textLength = node.textContent.length,
				pos = mathRound(width * textLength / bBox.width), // try this position first, based on average character width
				increment = 0,
				finalPos;
	
			if (bBox.width > width) {
				while (finalPos === undefined) {
					textLength = node.getSubStringLength(0, pos);
	
					if (textLength <= width) {
						if (increment === -1) {
							finalPos = pos;
						} else {
							increment = 1;
						}
					} else {
						if (increment === 1) {
							finalPos = pos - 1;
						} else {
							increment = -1;
						}
					}
					pos += increment;
				}
			}
			console.log(finalPos, node.getSubStringLength(0, finalPos))
		},
		*/ /** 
		 * Returns white for dark colors and black for bright colors
		 */getContrast:function getContrast(color){color=Color(color).rgba;return color[0]+color[1]+color[2]>384?'#000000':'#FFFFFF';}, /**
		 * Create a button with preset states
		 * @param {String} text
		 * @param {Number} x
		 * @param {Number} y
		 * @param {Function} callback
		 * @param {Object} normalState
		 * @param {Object} hoverState
		 * @param {Object} pressedState
		 */button:function button(text,x,y,callback,normalState,hoverState,pressedState,disabledState,shape){var label=this.label(text,x,y,shape,null,null,null,null,'button'),curState=0,stateOptions,stateStyle,normalStyle,hoverStyle,pressedStyle,disabledStyle,verticalGradient={x1:0,y1:0,x2:0,y2:1}; // Normal state - prepare the attributes
	normalState=merge({'stroke-width':1,stroke:'#CCCCCC',fill:{linearGradient:verticalGradient,stops:[[0,'#FEFEFE'],[1,'#F6F6F6']]},r:2,padding:5,style:{color:'black'}},normalState);normalStyle=normalState.style;delete normalState.style; // Hover state
	hoverState=merge(normalState,{stroke:'#68A',fill:{linearGradient:verticalGradient,stops:[[0,'#FFF'],[1,'#ACF']]}},hoverState);hoverStyle=hoverState.style;delete hoverState.style; // Pressed state
	pressedState=merge(normalState,{stroke:'#68A',fill:{linearGradient:verticalGradient,stops:[[0,'#9BD'],[1,'#CDF']]}},pressedState);pressedStyle=pressedState.style;delete pressedState.style; // Disabled state
	disabledState=merge(normalState,{style:{color:'#CCC'}},disabledState);disabledStyle=disabledState.style;delete disabledState.style; // Add the events. IE9 and IE10 need mouseover and mouseout to funciton (#667).
	addEvent(label.element,isMS?'mouseover':'mouseenter',function(){if(curState!==3){label.attr(hoverState).css(hoverStyle);}});addEvent(label.element,isMS?'mouseout':'mouseleave',function(){if(curState!==3){stateOptions=[normalState,hoverState,pressedState][curState];stateStyle=[normalStyle,hoverStyle,pressedStyle][curState];label.attr(stateOptions).css(stateStyle);}});label.setState=function(state){label.state=curState=state;if(!state){label.attr(normalState).css(normalStyle);}else if(state===2){label.attr(pressedState).css(pressedStyle);}else if(state===3){label.attr(disabledState).css(disabledStyle);}};return label.on('click',function(e){if(curState!==3){callback.call(label,e);}}).attr(normalState).css(extend({cursor:'default'},normalStyle));}, /**
		 * Make a straight line crisper by not spilling out to neighbour pixels
		 * @param {Array} points
		 * @param {Number} width
		 */crispLine:function crispLine(points,width){ // points format: [M, 0, 0, L, 100, 0]
	// normalize to a crisp line
	if(points[1]===points[4]){ // Substract due to #1129. Now bottom and left axis gridlines behave the same.
	points[1]=points[4]=mathRound(points[1])-width%2/2;}if(points[2]===points[5]){points[2]=points[5]=mathRound(points[2])+width%2/2;}return points;}, /**
		 * Draw a path
		 * @param {Array} path An SVG path in array form
		 */path:function path(_path){var attr={fill:NONE};if(isArray(_path)){attr.d=_path;}else if(isObject(_path)){ // attributes
	extend(attr,_path);}return this.createElement('path').attr(attr);}, /**
		 * Draw and return an SVG circle
		 * @param {Number} x The x position
		 * @param {Number} y The y position
		 * @param {Number} r The radius
		 */circle:function circle(x,y,r){var attr=isObject(x)?x:{x:x,y:y,r:r},wrapper=this.createElement('circle');wrapper.xSetter=function(value){this.element.setAttribute('cx',value);};wrapper.ySetter=function(value){this.element.setAttribute('cy',value);};return wrapper.attr(attr);}, /**
		 * Draw and return an arc
		 * @param {Number} x X position
		 * @param {Number} y Y position
		 * @param {Number} r Radius
		 * @param {Number} innerR Inner radius like used in donut charts
		 * @param {Number} start Starting angle
		 * @param {Number} end Ending angle
		 */arc:function arc(x,y,r,innerR,start,end){var arc;if(isObject(x)){y=x.y;r=x.r;innerR=x.innerR;start=x.start;end=x.end;x=x.x;} // Arcs are defined as symbols for the ability to set
	// attributes in attr and animate
	arc=this.symbol('arc',x||0,y||0,r||0,r||0,{innerR:innerR||0,start:start||0,end:end||0});arc.r=r; // #959
	return arc;}, /**
		 * Draw and return a rectangle
		 * @param {Number} x Left position
		 * @param {Number} y Top position
		 * @param {Number} width
		 * @param {Number} height
		 * @param {Number} r Border corner radius
		 * @param {Number} strokeWidth A stroke width can be supplied to allow crisp drawing
		 */rect:function rect(x,y,width,height,r,strokeWidth){r=isObject(x)?x.r:r;var wrapper=this.createElement('rect'),attribs=isObject(x)?x:x===UNDEFINED?{}:{x:x,y:y,width:mathMax(width,0),height:mathMax(height,0)};if(strokeWidth!==UNDEFINED){attribs.strokeWidth=strokeWidth;attribs=wrapper.crisp(attribs);}if(r){attribs.r=r;}wrapper.rSetter=function(value){attr(this.element,{rx:value,ry:value});};return wrapper.attr(attribs);}, /**
		 * Resize the box and re-align all aligned elements
		 * @param {Object} width
		 * @param {Object} height
		 * @param {Boolean} animate
		 *
		 */setSize:function setSize(width,height,animate){var renderer=this,alignedObjects=renderer.alignedObjects,i=alignedObjects.length;renderer.width=width;renderer.height=height;renderer.boxWrapper[pick(animate,true)?'animate':'attr']({width:width,height:height});while(i--){alignedObjects[i].align();}}, /**
		 * Create a group
		 * @param {String} name The group will be given a class name of 'highcharts-{name}'.
		 *	 This can be used for styling and scripting.
		 */g:function g(name){var elem=this.createElement('g');return defined(name)?elem.attr({'class':PREFIX+name}):elem;}, /**
		 * Display an image
		 * @param {String} src
		 * @param {Number} x
		 * @param {Number} y
		 * @param {Number} width
		 * @param {Number} height
		 */image:function image(src,x,y,width,height){var attribs={preserveAspectRatio:NONE},elemWrapper; // optional properties
	if(arguments.length>1){extend(attribs,{x:x,y:y,width:width,height:height});}elemWrapper=this.createElement('image').attr(attribs); // set the href in the xlink namespace
	if(elemWrapper.element.setAttributeNS){elemWrapper.element.setAttributeNS('http://www.w3.org/1999/xlink','href',src);}else { // could be exporting in IE
	// using href throws "not supported" in ie7 and under, requries regex shim to fix later
	elemWrapper.element.setAttribute('hc-svg-href',src);}return elemWrapper;}, /**
		 * Draw a symbol out of pre-defined shape paths from the namespace 'symbol' object.
		 *
		 * @param {Object} symbol
		 * @param {Object} x
		 * @param {Object} y
		 * @param {Object} radius
		 * @param {Object} options
		 */symbol:function symbol(_symbol,x,y,width,height,options){var obj, // get the symbol definition function
	symbolFn=this.symbols[_symbol], // check if there's a path defined for this symbol
	path=symbolFn&&symbolFn(mathRound(x),mathRound(y),width,height,options),imageElement,imageRegex=/^url\((.*?)\)$/,imageSrc,imageSize,centerImage;if(path){obj=this.path(path); // expando properties for use in animate and attr
	extend(obj,{symbolName:_symbol,x:x,y:y,width:width,height:height});if(options){extend(obj,options);} // image symbols
	}else if(imageRegex.test(_symbol)){ // On image load, set the size and position
	centerImage=function centerImage(img,size){if(img.element){ // it may be destroyed in the meantime (#1390)
	img.attr({width:size[0],height:size[1]});if(!img.alignByTranslate){ // #185
	img.translate(mathRound((width-size[0])/2), // #1378
	mathRound((height-size[1])/2));}}};imageSrc=_symbol.match(imageRegex)[1];imageSize=symbolSizes[imageSrc]||options&&options.width&&options.height&&[options.width,options.height]; // Ireate the image synchronously, add attribs async
	obj=this.image(imageSrc).attr({x:x,y:y});obj.isImg=true;if(imageSize){centerImage(obj,imageSize);}else { // Initialize image to be 0 size so export will still function if there's no cached sizes.
	obj.attr({width:0,height:0}); // Create a dummy JavaScript image to get the width and height. Due to a bug in IE < 8,
	// the created element must be assigned to a variable in order to load (#292).
	imageElement=createElement('img',{onload:function onload(){ // Special case for SVGs on IE11, the width is not accessible until the image is 
	// part of the DOM (#2854).
	if(this.width===0){_css(this,{position:ABSOLUTE,top:'-999em'});document.body.appendChild(this);} // Center the image
	centerImage(obj,symbolSizes[imageSrc]=[this.width,this.height]); // Clean up after #2854 workaround.
	if(this.parentNode){this.parentNode.removeChild(this);}},src:imageSrc});}}return obj;}, /**
		 * An extendable collection of functions for defining symbol paths.
		 */symbols:{'circle':function circle(x,y,w,h){var cpw=0.166*w;return [M,x+w/2,y,'C',x+w+cpw,y,x+w+cpw,y+h,x+w/2,y+h,'C',x-cpw,y+h,x-cpw,y,x+w/2,y,'Z'];},'square':function square(x,y,w,h){return [M,x,y,L,x+w,y,x+w,y+h,x,y+h,'Z'];},'triangle':function triangle(x,y,w,h){return [M,x+w/2,y,L,x+w,y+h,x,y+h,'Z'];},'triangle-down':function triangleDown(x,y,w,h){return [M,x,y,L,x+w,y,x+w/2,y+h,'Z'];},'diamond':function diamond(x,y,w,h){return [M,x+w/2,y,L,x+w,y+h/2,x+w/2,y+h,x,y+h/2,'Z'];},'arc':function arc(x,y,w,h,options){var start=options.start,radius=options.r||w||h,end=options.end-0.001, // to prevent cos and sin of start and end from becoming equal on 360 arcs (related: #1561)
	innerRadius=options.innerR,open=options.open,cosStart=mathCos(start),sinStart=mathSin(start),cosEnd=mathCos(end),sinEnd=mathSin(end),longArc=options.end-start<mathPI?0:1;return [M,x+radius*cosStart,y+radius*sinStart,'A', // arcTo
	radius, // x radius
	radius, // y radius
	0, // slanting
	longArc, // long or short arc
	1, // clockwise
	x+radius*cosEnd,y+radius*sinEnd,open?M:L,x+innerRadius*cosEnd,y+innerRadius*sinEnd,'A', // arcTo
	innerRadius, // x radius
	innerRadius, // y radius
	0, // slanting
	longArc, // long or short arc
	0, // clockwise
	x+innerRadius*cosStart,y+innerRadius*sinStart,open?'':'Z' // close
	];}, /**
			 * Callout shape used for default tooltips, also used for rounded rectangles in VML
			 */callout:function callout(x,y,w,h,options){var arrowLength=6,halfDistance=6,r=mathMin(options&&options.r||0,w,h),safeDistance=r+halfDistance,anchorX=options&&options.anchorX,anchorY=options&&options.anchorY,path;path=['M',x+r,y,'L',x+w-r,y, // top side
	'C',x+w,y,x+w,y,x+w,y+r, // top-right corner
	'L',x+w,y+h-r, // right side
	'C',x+w,y+h,x+w,y+h,x+w-r,y+h, // bottom-right corner
	'L',x+r,y+h, // bottom side
	'C',x,y+h,x,y+h,x,y+h-r, // bottom-left corner
	'L',x,y+r, // left side
	'C',x,y,x,y,x+r,y // top-right corner
	];if(anchorX&&anchorX>w&&anchorY>y+safeDistance&&anchorY<y+h-safeDistance){ // replace right side
	path.splice(13,3,'L',x+w,anchorY-halfDistance,x+w+arrowLength,anchorY,x+w,anchorY+halfDistance,x+w,y+h-r);}else if(anchorX&&anchorX<0&&anchorY>y+safeDistance&&anchorY<y+h-safeDistance){ // replace left side
	path.splice(33,3,'L',x,anchorY+halfDistance,x-arrowLength,anchorY,x,anchorY-halfDistance,x,y+r);}else if(anchorY&&anchorY>h&&anchorX>x+safeDistance&&anchorX<x+w-safeDistance){ // replace bottom
	path.splice(23,3,'L',anchorX+halfDistance,y+h,anchorX,y+h+arrowLength,anchorX-halfDistance,y+h,x+r,y+h);}else if(anchorY&&anchorY<0&&anchorX>x+safeDistance&&anchorX<x+w-safeDistance){ // replace top
	path.splice(3,3,'L',anchorX-halfDistance,y,anchorX,y-arrowLength,anchorX+halfDistance,y,w-r,y);}return path;}}, /**
		 * Define a clipping rectangle
		 * @param {String} id
		 * @param {Number} x
		 * @param {Number} y
		 * @param {Number} width
		 * @param {Number} height
		 */clipRect:function clipRect(x,y,width,height){var wrapper,id=PREFIX+idCounter++,clipPath=this.createElement('clipPath').attr({id:id}).add(this.defs);wrapper=this.rect(x,y,width,height,0).add(clipPath);wrapper.id=id;wrapper.clipPath=clipPath;wrapper.count=0;return wrapper;}, /**
		 * Add text to the SVG object
		 * @param {String} str
		 * @param {Number} x Left position
		 * @param {Number} y Top position
		 * @param {Boolean} useHTML Use HTML to render the text
		 */text:function text(str,x,y,useHTML){ // declare variables
	var renderer=this,fakeSVG=useCanVG||!hasSVG&&renderer.forExport,wrapper,attr={};if(useHTML&&(renderer.allowHTML||!renderer.forExport)){return renderer.html(str,x,y);}attr.x=Math.round(x||0); // X is always needed for line-wrap logic
	if(y){attr.y=Math.round(y);}if(str||str===0){attr.text=str;}wrapper=renderer.createElement('text').attr(attr); // Prevent wrapping from creating false offsetWidths in export in legacy IE (#1079, #1063)
	if(fakeSVG){wrapper.css({position:ABSOLUTE});}if(!useHTML){wrapper.xSetter=function(value,key,element){var tspans=element.getElementsByTagName('tspan'),tspan,parentVal=element.getAttribute(key),i;for(i=0;i<tspans.length;i++){tspan=tspans[i]; // If the x values are equal, the tspan represents a linebreak
	if(tspan.getAttribute(key)===parentVal){tspan.setAttribute(key,value);}}element.setAttribute(key,value);};}return wrapper;}, /**
		 * Utility to return the baseline offset and total line height from the font size
		 */fontMetrics:function fontMetrics(fontSize,elem){var lineHeight,baseline,style;fontSize=fontSize||this.style.fontSize;if(!fontSize&&elem&&win.getComputedStyle){elem=elem.element||elem; // SVGElement
	style=win.getComputedStyle(elem,"");fontSize=style&&style.fontSize; // #4309, the style doesn't exist inside a hidden iframe in Firefox
	}fontSize=/px/.test(fontSize)?pInt(fontSize):/em/.test(fontSize)?parseFloat(fontSize)*12:12; // Empirical values found by comparing font size and bounding box height.
	// Applies to the default font family. http://jsfiddle.net/highcharts/7xvn7/
	lineHeight=fontSize<24?fontSize+3:mathRound(fontSize*1.2);baseline=mathRound(lineHeight*0.8);return {h:lineHeight,b:baseline,f:fontSize};}, /**
		 * Correct X and Y positioning of a label for rotation (#1764)
		 */rotCorr:function rotCorr(baseline,rotation,alterY){var y=baseline;if(rotation&&alterY){y=mathMax(y*mathCos(rotation*deg2rad),4);}return {x:-baseline/3*mathSin(rotation*deg2rad),y:y};}, /**
		 * Add a label, a text item that can hold a colored or gradient background
		 * as well as a border and shadow.
		 * @param {string} str
		 * @param {Number} x
		 * @param {Number} y
		 * @param {String} shape
		 * @param {Number} anchorX In case the shape has a pointer, like a flag, this is the
		 *	coordinates it should be pinned to
		 * @param {Number} anchorY
		 * @param {Boolean} baseline Whether to position the label relative to the text baseline,
		 *	like renderer.text, or to the upper border of the rectangle.
		 * @param {String} className Class name for the group
		 */label:function label(str,x,y,shape,anchorX,anchorY,useHTML,baseline,className){var renderer=this,wrapper=renderer.g(className),text=renderer.text('',0,0,useHTML).attr({zIndex:1}), //.add(wrapper),
	box,bBox,alignFactor=0,padding=3,paddingLeft=0,width,height,wrapperX,wrapperY,crispAdjust=0,deferredAttr={},baselineOffset,needsBox; /**
			 * This function runs after the label is added to the DOM (when the bounding box is
			 * available), and after the text of the label is updated to detect the new bounding
			 * box and reflect it in the border box.
			 */function updateBoxSize(){var boxX,boxY,style=text.element.style;bBox=(width===undefined||height===undefined||wrapper.styles.textAlign)&&defined(text.textStr)&&text.getBBox(); //#3295 && 3514 box failure when string equals 0
	wrapper.width=(width||bBox.width||0)+2*padding+paddingLeft;wrapper.height=(height||bBox.height||0)+2*padding; // update the label-scoped y offset
	baselineOffset=padding+renderer.fontMetrics(style&&style.fontSize,text).b;if(needsBox){ // create the border box if it is not already present
	if(!box){boxX=mathRound(-alignFactor*padding)+crispAdjust;boxY=(baseline?-baselineOffset:0)+crispAdjust;wrapper.box=box=shape?renderer.symbol(shape,boxX,boxY,wrapper.width,wrapper.height,deferredAttr):renderer.rect(boxX,boxY,wrapper.width,wrapper.height,0,deferredAttr[STROKE_WIDTH]);if(!box.isImg){ // #4324, fill "none" causes it to be ignored by mouse events in IE
	box.attr('fill',NONE);}box.add(wrapper);} // apply the box attributes
	if(!box.isImg){ // #1630
	box.attr(extend({width:mathRound(wrapper.width),height:mathRound(wrapper.height)},deferredAttr));}deferredAttr=null;}} /**
			 * This function runs after setting text or padding, but only if padding is changed
			 */function updateTextPadding(){var styles=wrapper.styles,textAlign=styles&&styles.textAlign,x=paddingLeft+padding*(1-alignFactor),y; // determin y based on the baseline
	y=baseline?0:baselineOffset; // compensate for alignment
	if(defined(width)&&bBox&&(textAlign==='center'||textAlign==='right')){x+={center:0.5,right:1}[textAlign]*(width-bBox.width);} // update if anything changed
	if(x!==text.x||y!==text.y){text.attr('x',x);if(y!==UNDEFINED){text.attr('y',y);}} // record current values
	text.x=x;text.y=y;} /**
			 * Set a box attribute, or defer it if the box is not yet created
			 * @param {Object} key
			 * @param {Object} value
			 */function boxAttr(key,value){if(box){box.attr(key,value);}else {deferredAttr[key]=value;}} /**
			 * After the text element is added, get the desired size of the border box
			 * and add it before the text in the DOM.
			 */wrapper.onAdd=function(){text.add(wrapper);wrapper.attr({text:str||str===0?str:'', // alignment is available now // #3295: 0 not rendered if given as a value
	x:x,y:y});if(box&&defined(anchorX)){wrapper.attr({anchorX:anchorX,anchorY:anchorY});}}; /*
			 * Add specific attribute setters.
			 */ // only change local variables
	wrapper.widthSetter=function(value){width=value;};wrapper.heightSetter=function(value){height=value;};wrapper.paddingSetter=function(value){if(defined(value)&&value!==padding){padding=wrapper.padding=value;updateTextPadding();}};wrapper.paddingLeftSetter=function(value){if(defined(value)&&value!==paddingLeft){paddingLeft=value;updateTextPadding();}}; // change local variable and prevent setting attribute on the group
	wrapper.alignSetter=function(value){alignFactor={left:0,center:0.5,right:1}[value];}; // apply these to the box and the text alike
	wrapper.textSetter=function(value){if(value!==UNDEFINED){text.textSetter(value);}updateBoxSize();updateTextPadding();}; // apply these to the box but not to the text
	wrapper['stroke-widthSetter']=function(value,key){if(value){needsBox=true;}crispAdjust=value%2/2;boxAttr(key,value);};wrapper.strokeSetter=wrapper.fillSetter=wrapper.rSetter=function(value,key){if(key==='fill'&&value){needsBox=true;}boxAttr(key,value);};wrapper.anchorXSetter=function(value,key){anchorX=value;boxAttr(key,mathRound(value)-crispAdjust-wrapperX);};wrapper.anchorYSetter=function(value,key){anchorY=value;boxAttr(key,value-wrapperY);}; // rename attributes
	wrapper.xSetter=function(value){wrapper.x=value; // for animation getter
	if(alignFactor){value-=alignFactor*((width||bBox.width)+padding);}wrapperX=mathRound(value);wrapper.attr('translateX',wrapperX);};wrapper.ySetter=function(value){wrapperY=wrapper.y=mathRound(value);wrapper.attr('translateY',wrapperY);}; // Redirect certain methods to either the box or the text
	var baseCss=wrapper.css;return extend(wrapper,{ /**
				 * Pick up some properties and apply them to the text instead of the wrapper
				 */css:function css(styles){if(styles){var textStyles={};styles=merge(styles); // create a copy to avoid altering the original object (#537)
	each(wrapper.textProps,function(prop){if(styles[prop]!==UNDEFINED){textStyles[prop]=styles[prop];delete styles[prop];}});text.css(textStyles);}return baseCss.call(wrapper,styles);}, /**
				 * Return the bounding box of the box, not the group
				 */getBBox:function getBBox(){return {width:bBox.width+2*padding,height:bBox.height+2*padding,x:bBox.x-padding,y:bBox.y-padding};}, /**
				 * Apply the shadow to the box
				 */shadow:function shadow(b){if(box){box.shadow(b);}return wrapper;}, /**
				 * Destroy and release memory.
				 */destroy:function destroy(){ // Added by button implementation
	removeEvent(wrapper.element,'mouseenter');removeEvent(wrapper.element,'mouseleave');if(text){text=text.destroy();}if(box){box=box.destroy();} // Call base implementation to destroy the rest
	SVGElement.prototype.destroy.call(wrapper); // Release local pointers (#1298)
	wrapper=renderer=updateBoxSize=updateTextPadding=boxAttr=null;}});}}; // end SVGRenderer
	// general renderer
	Renderer=SVGRenderer; // extend SvgElement for useHTML option
	extend(SVGElement.prototype,{ /**
		 * Apply CSS to HTML elements. This is used in text within SVG rendering and
		 * by the VML renderer
		 */htmlCss:function htmlCss(styles){var wrapper=this,element=wrapper.element,textWidth=styles&&element.tagName==='SPAN'&&styles.width;if(textWidth){delete styles.width;wrapper.textWidth=textWidth;wrapper.updateTransform();}if(styles&&styles.textOverflow==='ellipsis'){styles.whiteSpace='nowrap';styles.overflow='hidden';}wrapper.styles=extend(wrapper.styles,styles);_css(wrapper.element,styles);return wrapper;}, /**
		 * VML and useHTML method for calculating the bounding box based on offsets
		 * @param {Boolean} refresh Whether to force a fresh value from the DOM or to
		 * use the cached value
		 *
		 * @return {Object} A hash containing values for x, y, width and height
		 */htmlGetBBox:function htmlGetBBox(){var wrapper=this,element=wrapper.element; // faking getBBox in exported SVG in legacy IE
	// faking getBBox in exported SVG in legacy IE (is this a duplicate of the fix for #1079?)
	if(element.nodeName==='text'){element.style.position=ABSOLUTE;}return {x:element.offsetLeft,y:element.offsetTop,width:element.offsetWidth,height:element.offsetHeight};}, /**
		 * VML override private method to update elements based on internal
		 * properties based on SVG transform
		 */htmlUpdateTransform:function htmlUpdateTransform(){ // aligning non added elements is expensive
	if(!this.added){this.alignOnAdd=true;return;}var wrapper=this,renderer=wrapper.renderer,elem=wrapper.element,translateX=wrapper.translateX||0,translateY=wrapper.translateY||0,x=wrapper.x||0,y=wrapper.y||0,align=wrapper.textAlign||'left',alignCorrection={left:0,center:0.5,right:1}[align],shadows=wrapper.shadows,styles=wrapper.styles; // apply translate
	_css(elem,{marginLeft:translateX,marginTop:translateY});if(shadows){ // used in labels/tooltip
	each(shadows,function(shadow){_css(shadow,{marginLeft:translateX+1,marginTop:translateY+1});});} // apply inversion
	if(wrapper.inverted){ // wrapper is a group
	each(elem.childNodes,function(child){renderer.invertChild(child,elem);});}if(elem.tagName==='SPAN'){var width,rotation=wrapper.rotation,baseline,textWidth=pInt(wrapper.textWidth),currentTextTransform=[rotation,align,elem.innerHTML,wrapper.textWidth,wrapper.textAlign].join(',');if(currentTextTransform!==wrapper.cTT){ // do the calculations and DOM access only if properties changed
	baseline=renderer.fontMetrics(elem.style.fontSize).b; // Renderer specific handling of span rotation
	if(defined(rotation)){wrapper.setSpanRotation(rotation,alignCorrection,baseline);}width=pick(wrapper.elemWidth,elem.offsetWidth); // Update textWidth
	if(width>textWidth&&/[ \-]/.test(elem.textContent||elem.innerText)){ // #983, #1254
	_css(elem,{width:textWidth+PX,display:'block',whiteSpace:styles&&styles.whiteSpace||'normal' // #3331
	});width=textWidth;}wrapper.getSpanCorrection(width,baseline,alignCorrection,rotation,align);} // apply position with correction
	_css(elem,{left:x+(wrapper.xCorr||0)+PX,top:y+(wrapper.yCorr||0)+PX}); // force reflow in webkit to apply the left and top on useHTML element (#1249)
	if(isWebKit){baseline=elem.offsetHeight; // assigned to baseline for JSLint purpose
	} // record current text transform
	wrapper.cTT=currentTextTransform;}}, /**
		 * Set the rotation of an individual HTML span
		 */setSpanRotation:function setSpanRotation(rotation,alignCorrection,baseline){var rotationStyle={},cssTransformKey=isMS?'-ms-transform':isWebKit?'-webkit-transform':isFirefox?'MozTransform':isOpera?'-o-transform':'';rotationStyle[cssTransformKey]=rotationStyle.transform='rotate('+rotation+'deg)';rotationStyle[cssTransformKey+(isFirefox?'Origin':'-origin')]=rotationStyle.transformOrigin=alignCorrection*100+'% '+baseline+'px';_css(this.element,rotationStyle);}, /**
		 * Get the correction in X and Y positioning as the element is rotated.
		 */getSpanCorrection:function getSpanCorrection(width,baseline,alignCorrection){this.xCorr=-width*alignCorrection;this.yCorr=-baseline;}}); // Extend SvgRenderer for useHTML option.
	extend(SVGRenderer.prototype,{ /**
		 * Create HTML text node. This is used by the VML renderer as well as the SVG
		 * renderer through the useHTML option.
		 *
		 * @param {String} str
		 * @param {Number} x
		 * @param {Number} y
		 */html:function html(str,x,y){var wrapper=this.createElement('span'),element=wrapper.element,renderer=wrapper.renderer; // Text setter
	wrapper.textSetter=function(value){if(value!==element.innerHTML){delete this.bBox;}element.innerHTML=this.textStr=value;wrapper.htmlUpdateTransform();}; // Various setters which rely on update transform
	wrapper.xSetter=wrapper.ySetter=wrapper.alignSetter=wrapper.rotationSetter=function(value,key){if(key==='align'){key='textAlign'; // Do not overwrite the SVGElement.align method. Same as VML.
	}wrapper[key]=value;wrapper.htmlUpdateTransform();}; // Set the default attributes
	wrapper.attr({text:str,x:mathRound(x),y:mathRound(y)}).css({position:ABSOLUTE,fontFamily:this.style.fontFamily,fontSize:this.style.fontSize}); // Keep the whiteSpace style outside the wrapper.styles collection
	element.style.whiteSpace='nowrap'; // Use the HTML specific .css method
	wrapper.css=wrapper.htmlCss; // This is specific for HTML within SVG
	if(renderer.isSVG){wrapper.add=function(svgGroupWrapper){var htmlGroup,container=renderer.box.parentNode,parentGroup,parents=[];this.parentGroup=svgGroupWrapper; // Create a mock group to hold the HTML elements
	if(svgGroupWrapper){htmlGroup=svgGroupWrapper.div;if(!htmlGroup){ // Read the parent chain into an array and read from top down
	parentGroup=svgGroupWrapper;while(parentGroup){parents.push(parentGroup); // Move up to the next parent group
	parentGroup=parentGroup.parentGroup;} // Ensure dynamically updating position when any parent is translated
	each(parents.reverse(),function(parentGroup){var htmlGroupStyle,cls=attr(parentGroup.element,'class');if(cls){cls={className:cls};} // else null
	// Create a HTML div and append it to the parent div to emulate
	// the SVG group structure
	htmlGroup=parentGroup.div=parentGroup.div||createElement(DIV,cls,{position:ABSOLUTE,left:(parentGroup.translateX||0)+PX,top:(parentGroup.translateY||0)+PX},htmlGroup||container); // the top group is appended to container
	// Shortcut
	htmlGroupStyle=htmlGroup.style; // Set listeners to update the HTML div's position whenever the SVG group
	// position is changed
	extend(parentGroup,{translateXSetter:function translateXSetter(value,key){htmlGroupStyle.left=value+PX;parentGroup[key]=value;parentGroup.doTransform=true;},translateYSetter:function translateYSetter(value,key){htmlGroupStyle.top=value+PX;parentGroup[key]=value;parentGroup.doTransform=true;}}); // These properties are set as attributes on the SVG group, and as
	// identical CSS properties on the div. (#3542)
	each(['opacity','visibility'],function(prop){wrap(parentGroup,prop+'Setter',function(proceed,value,key,elem){proceed.call(this,value,key,elem);htmlGroupStyle[key]=value;});});});}}else {htmlGroup=container;}htmlGroup.appendChild(element); // Shared with VML:
	wrapper.added=true;if(wrapper.alignOnAdd){wrapper.htmlUpdateTransform();}return wrapper;};}return wrapper;}}); /* ****************************************************************************
	 *                                                                            *
	 * START OF INTERNET EXPLORER <= 8 SPECIFIC CODE                              *
	 *                                                                            *
	 * For applications and websites that don't need IE support, like platform    *
	 * targeted mobile apps and web apps, this code can be removed.               *
	 *                                                                            *
	 *****************************************************************************/ /**
	 * @constructor
	 */var VMLRenderer,VMLElement;if(!hasSVG&&!useCanVG){ /**
	 * The VML element wrapper.
	 */VMLElement={ /**
		 * Initialize a new VML element wrapper. It builds the markup as a string
		 * to minimize DOM traffic.
		 * @param {Object} renderer
		 * @param {Object} nodeName
		 */init:function init(renderer,nodeName){var wrapper=this,markup=['<',nodeName,' filled="f" stroked="f"'],style=['position: ',ABSOLUTE,';'],isDiv=nodeName===DIV; // divs and shapes need size
	if(nodeName==='shape'||isDiv){style.push('left:0;top:0;width:1px;height:1px;');}style.push('visibility: ',isDiv?HIDDEN:VISIBLE);markup.push(' style="',style.join(''),'"/>'); // create element with default attributes and style
	if(nodeName){markup=isDiv||nodeName==='span'||nodeName==='img'?markup.join(''):renderer.prepVML(markup);wrapper.element=createElement(markup);}wrapper.renderer=renderer;}, /**
		 * Add the node to the given parent
		 * @param {Object} parent
		 */add:function add(parent){var wrapper=this,renderer=wrapper.renderer,element=wrapper.element,box=renderer.box,inverted=parent&&parent.inverted, // get the parent node
	parentNode=parent?parent.element||parent:box; // if the parent group is inverted, apply inversion on all children
	if(inverted){ // only on groups
	renderer.invertChild(element,parentNode);} // append it
	parentNode.appendChild(element); // align text after adding to be able to read offset
	wrapper.added=true;if(wrapper.alignOnAdd&&!wrapper.deferUpdateTransform){wrapper.updateTransform();} // fire an event for internal hooks
	if(wrapper.onAdd){wrapper.onAdd();}return wrapper;}, /**
		 * VML always uses htmlUpdateTransform
		 */updateTransform:SVGElement.prototype.htmlUpdateTransform, /**
		 * Set the rotation of a span with oldIE's filter
		 */setSpanRotation:function setSpanRotation(){ // Adjust for alignment and rotation. Rotation of useHTML content is not yet implemented
	// but it can probably be implemented for Firefox 3.5+ on user request. FF3.5+
	// has support for CSS3 transform. The getBBox method also needs to be updated
	// to compensate for the rotation, like it currently does for SVG.
	// Test case: http://jsfiddle.net/highcharts/Ybt44/
	var rotation=this.rotation,costheta=mathCos(rotation*deg2rad),sintheta=mathSin(rotation*deg2rad);_css(this.element,{filter:rotation?['progid:DXImageTransform.Microsoft.Matrix(M11=',costheta,', M12=',-sintheta,', M21=',sintheta,', M22=',costheta,', sizingMethod=\'auto expand\')'].join(''):NONE});}, /**
		 * Get the positioning correction for the span after rotating. 
		 */getSpanCorrection:function getSpanCorrection(width,baseline,alignCorrection,rotation,align){var costheta=rotation?mathCos(rotation*deg2rad):1,sintheta=rotation?mathSin(rotation*deg2rad):0,height=pick(this.elemHeight,this.element.offsetHeight),quad,nonLeft=align&&align!=='left'; // correct x and y
	this.xCorr=costheta<0&&-width;this.yCorr=sintheta<0&&-height; // correct for baseline and corners spilling out after rotation
	quad=costheta*sintheta<0;this.xCorr+=sintheta*baseline*(quad?1-alignCorrection:alignCorrection);this.yCorr-=costheta*baseline*(rotation?quad?alignCorrection:1-alignCorrection:1); // correct for the length/height of the text
	if(nonLeft){this.xCorr-=width*alignCorrection*(costheta<0?-1:1);if(rotation){this.yCorr-=height*alignCorrection*(sintheta<0?-1:1);}_css(this.element,{textAlign:align});}}, /**
		 * Converts a subset of an SVG path definition to its VML counterpart. Takes an array
		 * as the parameter and returns a string.
		 */pathToVML:function pathToVML(value){ // convert paths
	var i=value.length,path=[];while(i--){ // Multiply by 10 to allow subpixel precision.
	// Substracting half a pixel seems to make the coordinates
	// align with SVG, but this hasn't been tested thoroughly
	if(isNumber(value[i])){path[i]=mathRound(value[i]*10)-5;}else if(value[i]==='Z'){ // close the path
	path[i]='x';}else {path[i]=value[i]; // When the start X and end X coordinates of an arc are too close,
	// they are rounded to the same value above. In this case, substract or 
	// add 1 from the end X and Y positions. #186, #760, #1371, #1410.
	if(value.isArc&&(value[i]==='wa'||value[i]==='at')){ // Start and end X
	if(path[i+5]===path[i+7]){path[i+7]+=value[i+7]>value[i+5]?1:-1;} // Start and end Y
	if(path[i+6]===path[i+8]){path[i+8]+=value[i+8]>value[i+6]?1:-1;}}}} // Loop up again to handle path shortcuts (#2132)
	/*while (i++ < path.length) {
				if (path[i] === 'H') { // horizontal line to
					path[i] = 'L';
					path.splice(i + 2, 0, path[i - 1]);
				} else if (path[i] === 'V') { // vertical line to
					path[i] = 'L';
					path.splice(i + 1, 0, path[i - 2]);
				}
			}*/return path.join(' ')||'x';}, /**
		 * Set the element's clipping to a predefined rectangle
		 *
		 * @param {String} id The id of the clip rectangle
		 */clip:function clip(clipRect){var wrapper=this,clipMembers,cssRet;if(clipRect){clipMembers=clipRect.members;erase(clipMembers,wrapper); // Ensure unique list of elements (#1258)
	clipMembers.push(wrapper);wrapper.destroyClip=function(){erase(clipMembers,wrapper);};cssRet=clipRect.getCSS(wrapper);}else {if(wrapper.destroyClip){wrapper.destroyClip();}cssRet={clip:docMode8?'inherit':'rect(auto)'}; // #1214
	}return wrapper.css(cssRet);}, /**
		 * Set styles for the element
		 * @param {Object} styles
		 */css:SVGElement.prototype.htmlCss, /**
		 * Removes a child either by removeChild or move to garbageBin.
		 * Issue 490; in VML removeChild results in Orphaned nodes according to sIEve, discardElement does not.
		 */safeRemoveChild:function safeRemoveChild(element){ // discardElement will detach the node from its parent before attaching it
	// to the garbage bin. Therefore it is important that the node is attached and have parent.
	if(element.parentNode){discardElement(element);}}, /**
		 * Extend element.destroy by removing it from the clip members array
		 */destroy:function destroy(){if(this.destroyClip){this.destroyClip();}return SVGElement.prototype.destroy.apply(this);}, /**
		 * Add an event listener. VML override for normalizing event parameters.
		 * @param {String} eventType
		 * @param {Function} handler
		 */on:function on(eventType,handler){ // simplest possible event model for internal use
	this.element['on'+eventType]=function(){var evt=win.event;evt.target=evt.srcElement;handler(evt);};return this;}, /**
		 * In stacked columns, cut off the shadows so that they don't overlap
		 */cutOffPath:function cutOffPath(path,length){var len;path=path.split(/[ ,]/);len=path.length;if(len===9||len===11){path[len-4]=path[len-2]=pInt(path[len-2])-10*length;}return path.join(' ');}, /**
		 * Apply a drop shadow by copying elements and giving them different strokes
		 * @param {Boolean|Object} shadowOptions
		 */shadow:function shadow(shadowOptions,group,cutOff){var shadows=[],i,element=this.element,renderer=this.renderer,shadow,elemStyle=element.style,markup,path=element.path,strokeWidth,modifiedPath,shadowWidth,shadowElementOpacity; // some times empty paths are not strings
	if(path&&typeof path.value!=='string'){path='x';}modifiedPath=path;if(shadowOptions){shadowWidth=pick(shadowOptions.width,3);shadowElementOpacity=(shadowOptions.opacity||0.15)/shadowWidth;for(i=1;i<=3;i++){strokeWidth=shadowWidth*2+1-2*i; // Cut off shadows for stacked column items
	if(cutOff){modifiedPath=this.cutOffPath(path.value,strokeWidth+0.5);}markup=['<shape isShadow="true" strokeweight="',strokeWidth,'" filled="false" path="',modifiedPath,'" coordsize="10 10" style="',element.style.cssText,'" />'];shadow=createElement(renderer.prepVML(markup),null,{left:pInt(elemStyle.left)+pick(shadowOptions.offsetX,1),top:pInt(elemStyle.top)+pick(shadowOptions.offsetY,1)});if(cutOff){shadow.cutOff=strokeWidth+1;} // apply the opacity
	markup=['<stroke color="',shadowOptions.color||'black','" opacity="',shadowElementOpacity*i,'"/>'];createElement(renderer.prepVML(markup),null,null,shadow); // insert it
	if(group){group.element.appendChild(shadow);}else {element.parentNode.insertBefore(shadow,element);} // record it
	shadows.push(shadow);}this.shadows=shadows;}return this;},updateShadows:noop, // Used in SVG only
	setAttr:function setAttr(key,value){if(docMode8){ // IE8 setAttribute bug
	this.element[key]=value;}else {this.element.setAttribute(key,value);}},classSetter:function classSetter(value){ // IE8 Standards mode has problems retrieving the className unless set like this
	this.element.className=value;},dashstyleSetter:function dashstyleSetter(value,key,element){var strokeElem=element.getElementsByTagName('stroke')[0]||createElement(this.renderer.prepVML(['<stroke/>']),null,null,element);strokeElem[key]=value||'solid';this[key]=value; /* because changing stroke-width will change the dash length
				and cause an epileptic effect */},dSetter:function dSetter(value,key,element){var i,shadows=this.shadows;value=value||[];this.d=value.join&&value.join(' '); // used in getter for animation
	element.path=value=this.pathToVML(value); // update shadows
	if(shadows){i=shadows.length;while(i--){shadows[i].path=shadows[i].cutOff?this.cutOffPath(value,shadows[i].cutOff):value;}}this.setAttr(key,value);},fillSetter:function fillSetter(value,key,element){var nodeName=element.nodeName;if(nodeName==='SPAN'){ // text color
	element.style.color=value;}else if(nodeName!=='IMG'){ // #1336
	element.filled=value!==NONE;this.setAttr('fillcolor',this.renderer.color(value,element,key,this));}},opacitySetter:noop, // Don't bother - animation is too slow and filters introduce artifacts
	rotationSetter:function rotationSetter(value,key,element){var style=element.style;this[key]=style[key]=value; // style is for #1873
	// Correction for the 1x1 size of the shape container. Used in gauge needles.
	style.left=-mathRound(mathSin(value*deg2rad)+1)+PX;style.top=mathRound(mathCos(value*deg2rad))+PX;},strokeSetter:function strokeSetter(value,key,element){this.setAttr('strokecolor',this.renderer.color(value,element,key));},'stroke-widthSetter':function strokeWidthSetter(value,key,element){element.stroked=!!value; // VML "stroked" attribute
	this[key]=value; // used in getter, issue #113
	if(isNumber(value)){value+=PX;}this.setAttr('strokeweight',value);},titleSetter:function titleSetter(value,key){this.setAttr(key,value);},visibilitySetter:function visibilitySetter(value,key,element){ // Handle inherited visibility
	if(value==='inherit'){value=VISIBLE;} // Let the shadow follow the main element
	if(this.shadows){each(this.shadows,function(shadow){shadow.style[key]=value;});} // Instead of toggling the visibility CSS property, move the div out of the viewport.
	// This works around #61 and #586
	if(element.nodeName==='DIV'){value=value===HIDDEN?'-999em':0; // In order to redraw, IE7 needs the div to be visible when tucked away
	// outside the viewport. So the visibility is actually opposite of
	// the expected value. This applies to the tooltip only.
	if(!docMode8){element.style[key]=value?VISIBLE:HIDDEN;}key='top';}element.style[key]=value;},xSetter:function xSetter(value,key,element){this[key]=value; // used in getter
	if(key==='x'){key='left';}else if(key==='y'){key='top';} /* else {
				value = mathMax(0, value); // don't set width or height below zero (#311)
			}*/ // clipping rectangle special
	if(this.updateClipping){this[key]=value; // the key is now 'left' or 'top' for 'x' and 'y'
	this.updateClipping();}else { // normal
	element.style[key]=value;}},zIndexSetter:function zIndexSetter(value,key,element){element.style[key]=value;}};Highcharts.VMLElement=VMLElement=extendClass(SVGElement,VMLElement); // Some shared setters
	VMLElement.prototype.ySetter=VMLElement.prototype.widthSetter=VMLElement.prototype.heightSetter=VMLElement.prototype.xSetter; /**
	 * The VML renderer
	 */var VMLRendererExtension={ // inherit SVGRenderer
	Element:VMLElement,isIE8:userAgent.indexOf('MSIE 8.0')>-1, /**
		 * Initialize the VMLRenderer
		 * @param {Object} container
		 * @param {Number} width
		 * @param {Number} height
		 */init:function init(container,width,height,style){var renderer=this,boxWrapper,box,css;renderer.alignedObjects=[];boxWrapper=renderer.createElement(DIV).css(extend(this.getStyle(style),{position:RELATIVE}));box=boxWrapper.element;container.appendChild(boxWrapper.element); // generate the containing box
	renderer.isVML=true;renderer.box=box;renderer.boxWrapper=boxWrapper;renderer.cache={};renderer.setSize(width,height,false); // The only way to make IE6 and IE7 print is to use a global namespace. However,
	// with IE8 the only way to make the dynamic shapes visible in screen and print mode
	// seems to be to add the xmlns attribute and the behaviour style inline.
	if(!doc.namespaces.hcv){doc.namespaces.add('hcv','urn:schemas-microsoft-com:vml'); // Setup default CSS (#2153, #2368, #2384)
	css='hcv\\:fill, hcv\\:path, hcv\\:shape, hcv\\:stroke'+'{ behavior:url(#default#VML); display: inline-block; } ';try{doc.createStyleSheet().cssText=css;}catch(e){doc.styleSheets[0].cssText+=css;}}}, /**
		 * Detect whether the renderer is hidden. This happens when one of the parent elements
		 * has display: none
		 */isHidden:function isHidden(){return !this.box.offsetWidth;}, /**
		 * Define a clipping rectangle. In VML it is accomplished by storing the values
		 * for setting the CSS style to all associated members.
		 *
		 * @param {Number} x
		 * @param {Number} y
		 * @param {Number} width
		 * @param {Number} height
		 */clipRect:function clipRect(x,y,width,height){ // create a dummy element
	var clipRect=this.createElement(),isObj=isObject(x); // mimic a rectangle with its style object for automatic updating in attr
	return extend(clipRect,{members:[],count:0,left:(isObj?x.x:x)+1,top:(isObj?x.y:y)+1,width:(isObj?x.width:width)-1,height:(isObj?x.height:height)-1,getCSS:function getCSS(wrapper){var element=wrapper.element,nodeName=element.nodeName,isShape=nodeName==='shape',inverted=wrapper.inverted,rect=this,top=rect.top-(isShape?element.offsetTop:0),left=rect.left,right=left+rect.width,bottom=top+rect.height,ret={clip:'rect('+mathRound(inverted?left:top)+'px,'+mathRound(inverted?bottom:right)+'px,'+mathRound(inverted?right:bottom)+'px,'+mathRound(inverted?top:left)+'px)'}; // issue 74 workaround
	if(!inverted&&docMode8&&nodeName==='DIV'){extend(ret,{width:right+PX,height:bottom+PX});}return ret;}, // used in attr and animation to update the clipping of all members
	updateClipping:function updateClipping(){each(clipRect.members,function(member){if(member.element){ // Deleted series, like in stock/members/series-remove demo. Should be removed from members, but this will do.
	member.css(clipRect.getCSS(member));}});}});}, /**
		 * Take a color and return it if it's a string, make it a gradient if it's a
		 * gradient configuration object, and apply opacity.
		 *
		 * @param {Object} color The color or config object
		 */color:function color(_color,elem,prop,wrapper){var renderer=this,colorObject,regexRgba=/^rgba/,markup,fillType,ret=NONE; // Check for linear or radial gradient
	if(_color&&_color.linearGradient){fillType='gradient';}else if(_color&&_color.radialGradient){fillType='pattern';}if(fillType){var stopColor,stopOpacity,gradient=_color.linearGradient||_color.radialGradient,x1,y1,x2,y2,opacity1,opacity2,color1,color2,fillAttr='',stops=_color.stops,firstStop,lastStop,colors=[],addFillNode=function addFillNode(){ // Add the fill subnode. When colors attribute is used, the meanings of opacity and o:opacity2
	// are reversed.
	markup=['<fill colors="'+colors.join(',')+'" opacity="',opacity2,'" o:opacity2="',opacity1,'" type="',fillType,'" ',fillAttr,'focus="100%" method="any" />'];createElement(renderer.prepVML(markup),null,null,elem);}; // Extend from 0 to 1
	firstStop=stops[0];lastStop=stops[stops.length-1];if(firstStop[0]>0){stops.unshift([0,firstStop[1]]);}if(lastStop[0]<1){stops.push([1,lastStop[1]]);} // Compute the stops
	each(stops,function(stop,i){if(regexRgba.test(stop[1])){colorObject=Color(stop[1]);stopColor=colorObject.get('rgb');stopOpacity=colorObject.get('a');}else {stopColor=stop[1];stopOpacity=1;} // Build the color attribute
	colors.push(stop[0]*100+'% '+stopColor); // Only start and end opacities are allowed, so we use the first and the last
	if(!i){opacity1=stopOpacity;color2=stopColor;}else {opacity2=stopOpacity;color1=stopColor;}}); // Apply the gradient to fills only.
	if(prop==='fill'){ // Handle linear gradient angle
	if(fillType==='gradient'){x1=gradient.x1||gradient[0]||0;y1=gradient.y1||gradient[1]||0;x2=gradient.x2||gradient[2]||0;y2=gradient.y2||gradient[3]||0;fillAttr='angle="'+(90-math.atan((y2-y1)/( // y vector
	x2-x1) // x vector
	)*180/mathPI)+'"';addFillNode(); // Radial (circular) gradient
	}else {var r=gradient.r,sizex=r*2,sizey=r*2,cx=gradient.cx,cy=gradient.cy,radialReference=elem.radialReference,bBox,applyRadialGradient=function applyRadialGradient(){if(radialReference){bBox=wrapper.getBBox();cx+=(radialReference[0]-bBox.x)/bBox.width-0.5;cy+=(radialReference[1]-bBox.y)/bBox.height-0.5;sizex*=radialReference[2]/bBox.width;sizey*=radialReference[2]/bBox.height;}fillAttr='src="'+defaultOptions.global.VMLRadialGradientURL+'" '+'size="'+sizex+','+sizey+'" '+'origin="0.5,0.5" '+'position="'+cx+','+cy+'" '+'color2="'+color2+'" ';addFillNode();}; // Apply radial gradient
	if(wrapper.added){applyRadialGradient();}else { // We need to know the bounding box to get the size and position right
	wrapper.onAdd=applyRadialGradient;} // The fill element's color attribute is broken in IE8 standards mode, so we
	// need to set the parent shape's fillcolor attribute instead.
	ret=color1;} // Gradients are not supported for VML stroke, return the first color. #722.
	}else {ret=stopColor;} // if the color is an rgba color, split it and add a fill node
	// to hold the opacity component
	}else if(regexRgba.test(_color)&&elem.tagName!=='IMG'){colorObject=Color(_color);markup=['<',prop,' opacity="',colorObject.get('a'),'"/>'];createElement(this.prepVML(markup),null,null,elem);ret=colorObject.get('rgb');}else {var propNodes=elem.getElementsByTagName(prop); // 'stroke' or 'fill' node
	if(propNodes.length){propNodes[0].opacity=1;propNodes[0].type='solid';}ret=_color;}return ret;}, /**
		 * Take a VML string and prepare it for either IE8 or IE6/IE7.
		 * @param {Array} markup A string array of the VML markup to prepare
		 */prepVML:function prepVML(markup){var vmlStyle='display:inline-block;behavior:url(#default#VML);',isIE8=this.isIE8;markup=markup.join('');if(isIE8){ // add xmlns and style inline
	markup=markup.replace('/>',' xmlns="urn:schemas-microsoft-com:vml" />');if(markup.indexOf('style="')===-1){markup=markup.replace('/>',' style="'+vmlStyle+'" />');}else {markup=markup.replace('style="','style="'+vmlStyle);}}else { // add namespace
	markup=markup.replace('<','<hcv:');}return markup;}, /**
		 * Create rotated and aligned text
		 * @param {String} str
		 * @param {Number} x
		 * @param {Number} y
		 */text:SVGRenderer.prototype.html, /**
		 * Create and return a path element
		 * @param {Array} path
		 */path:function path(_path2){var attr={ // subpixel precision down to 0.1 (width and height = 1px)
	coordsize:'10 10'};if(isArray(_path2)){attr.d=_path2;}else if(isObject(_path2)){ // attributes
	extend(attr,_path2);} // create the shape
	return this.createElement('shape').attr(attr);}, /**
		 * Create and return a circle element. In VML circles are implemented as
		 * shapes, which is faster than v:oval
		 * @param {Number} x
		 * @param {Number} y
		 * @param {Number} r
		 */circle:function circle(x,y,r){var circle=this.symbol('circle');if(isObject(x)){r=x.r;y=x.y;x=x.x;}circle.isCircle=true; // Causes x and y to mean center (#1682)
	circle.r=r;return circle.attr({x:x,y:y});}, /**
		 * Create a group using an outer div and an inner v:group to allow rotating
		 * and flipping. A simple v:group would have problems with positioning
		 * child HTML elements and CSS clip.
		 *
		 * @param {String} name The name of the group
		 */g:function g(name){var wrapper,attribs; // set the class name
	if(name){attribs={'className':PREFIX+name,'class':PREFIX+name};} // the div to hold HTML and clipping
	wrapper=this.createElement(DIV).attr(attribs);return wrapper;}, /**
		 * VML override to create a regular HTML image
		 * @param {String} src
		 * @param {Number} x
		 * @param {Number} y
		 * @param {Number} width
		 * @param {Number} height
		 */image:function image(src,x,y,width,height){var obj=this.createElement('img').attr({src:src});if(arguments.length>1){obj.attr({x:x,y:y,width:width,height:height});}return obj;}, /**
		 * For rectangles, VML uses a shape for rect to overcome bugs and rotation problems
		 */createElement:function createElement(nodeName){return nodeName==='rect'?this.symbol(nodeName):SVGRenderer.prototype.createElement.call(this,nodeName);}, /**
		 * In the VML renderer, each child of an inverted div (group) is inverted
		 * @param {Object} element
		 * @param {Object} parentNode
		 */invertChild:function invertChild(element,parentNode){var ren=this,parentStyle=parentNode.style,imgStyle=element.tagName==='IMG'&&element.style; // #1111
	_css(element,{flip:'x',left:pInt(parentStyle.width)-(imgStyle?pInt(imgStyle.top):1),top:pInt(parentStyle.height)-(imgStyle?pInt(imgStyle.left):1),rotation:-90}); // Recursively invert child elements, needed for nested composite shapes like box plots and error bars. #1680, #1806.
	each(element.childNodes,function(child){ren.invertChild(child,element);});}, /**
		 * Symbol definitions that override the parent SVG renderer's symbols
		 *
		 */symbols:{ // VML specific arc function
	arc:function arc(x,y,w,h,options){var start=options.start,end=options.end,radius=options.r||w||h,innerRadius=options.innerR,cosStart=mathCos(start),sinStart=mathSin(start),cosEnd=mathCos(end),sinEnd=mathSin(end),ret;if(end-start===0){ // no angle, don't show it.
	return ['x'];}ret=['wa', // clockwise arc to
	x-radius, // left
	y-radius, // top
	x+radius, // right
	y+radius, // bottom
	x+radius*cosStart, // start x
	y+radius*sinStart, // start y
	x+radius*cosEnd, // end x
	y+radius*sinEnd // end y
	];if(options.open&&!innerRadius){ret.push('e',M,x, // - innerRadius,
	y // - innerRadius
	);}ret.push('at', // anti clockwise arc to
	x-innerRadius, // left
	y-innerRadius, // top
	x+innerRadius, // right
	y+innerRadius, // bottom
	x+innerRadius*cosEnd, // start x
	y+innerRadius*sinEnd, // start y
	x+innerRadius*cosStart, // end x
	y+innerRadius*sinStart, // end y
	'x', // finish path
	'e' // close
	);ret.isArc=true;return ret;}, // Add circle symbol path. This performs significantly faster than v:oval.
	circle:function circle(x,y,w,h,wrapper){if(wrapper){w=h=2*wrapper.r;} // Center correction, #1682
	if(wrapper&&wrapper.isCircle){x-=w/2;y-=h/2;} // Return the path
	return ['wa', // clockwisearcto
	x, // left
	y, // top
	x+w, // right
	y+h, // bottom
	x+w, // start x
	y+h/2, // start y
	x+w, // end x
	y+h/2, // end y
	//'x', // finish path
	'e' // close
	];}, /**
			 * Add rectangle symbol path which eases rotation and omits arcsize problems
			 * compared to the built-in VML roundrect shape. When borders are not rounded,
			 * use the simpler square path, else use the callout path without the arrow.
			 */rect:function rect(x,y,w,h,options){return SVGRenderer.prototype.symbols[!defined(options)||!options.r?'square':'callout'].call(0,x,y,w,h,options);}}};Highcharts.VMLRenderer=VMLRenderer=function VMLRenderer(){this.init.apply(this,arguments);};VMLRenderer.prototype=merge(SVGRenderer.prototype,VMLRendererExtension); // general renderer
	Renderer=VMLRenderer;} // This method is used with exporting in old IE, when emulating SVG (see #2314)
	SVGRenderer.prototype.measureSpanWidth=function(text,styles){var measuringSpan=doc.createElement('span'),offsetWidth,textNode=doc.createTextNode(text);measuringSpan.appendChild(textNode);_css(measuringSpan,styles);this.box.appendChild(measuringSpan);offsetWidth=measuringSpan.offsetWidth;discardElement(measuringSpan); // #2463
	return offsetWidth;}; /* ****************************************************************************
	 *                                                                            *
	 * END OF INTERNET EXPLORER <= 8 SPECIFIC CODE                                *
	 *                                                                            *
	 *****************************************************************************/ /* ****************************************************************************
	 *                                                                            *
	 * START OF ANDROID < 3 SPECIFIC CODE. THIS CAN BE REMOVED IF YOU'RE NOT      *
	 * TARGETING THAT SYSTEM.                                                     *
	 *                                                                            *
	 *****************************************************************************/var CanVGRenderer,CanVGController;if(useCanVG){ /**
		 * The CanVGRenderer is empty from start to keep the source footprint small.
		 * When requested, the CanVGController downloads the rest of the source packaged
		 * together with the canvg library.
		 */Highcharts.CanVGRenderer=CanVGRenderer=function CanVGRenderer(){ // Override the global SVG namespace to fake SVG/HTML that accepts CSS
	SVG_NS='http://www.w3.org/1999/xhtml';}; /**
		 * Start with an empty symbols object. This is needed when exporting is used (exporting.src.js will add a few symbols), but 
		 * the implementation from SvgRenderer will not be merged in until first render.
		 */CanVGRenderer.prototype.symbols={}; /**
		 * Handles on demand download of canvg rendering support.
		 */CanVGController=function(){ // List of renderering calls
	var deferredRenderCalls=[]; /**
			 * When downloaded, we are ready to draw deferred charts.
			 */function drawDeferred(){var callLength=deferredRenderCalls.length,callIndex; // Draw all pending render calls
	for(callIndex=0;callIndex<callLength;callIndex++){deferredRenderCalls[callIndex]();} // Clear the list
	deferredRenderCalls=[];}return {push:function push(func,scriptLocation){ // Only get the script once
	if(deferredRenderCalls.length===0){getScript(scriptLocation,drawDeferred);} // Register render call
	deferredRenderCalls.push(func);}};}();Renderer=CanVGRenderer;} // end CanVGRenderer
	/* ****************************************************************************
	 *                                                                            *
	 * END OF ANDROID < 3 SPECIFIC CODE                                           *
	 *                                                                            *
	 *****************************************************************************/ /**
	 * The Tick class
	 */function Tick(axis,pos,type,noLabel){this.axis=axis;this.pos=pos;this.type=type||'';this.isNew=true;if(!type&&!noLabel){this.addLabel();}}Tick.prototype={ /**
		 * Write the tick label
		 */addLabel:function addLabel(){var tick=this,axis=tick.axis,options=axis.options,chart=axis.chart,categories=axis.categories,names=axis.names,pos=tick.pos,labelOptions=options.labels,str,tickPositions=axis.tickPositions,isFirst=pos===tickPositions[0],isLast=pos===tickPositions[tickPositions.length-1],value=categories?pick(categories[pos],names[pos],pos):pos,label=tick.label,tickPositionInfo=tickPositions.info,dateTimeLabelFormat; // Set the datetime label format. If a higher rank is set for this position, use that. If not,
	// use the general format.
	if(axis.isDatetimeAxis&&tickPositionInfo){dateTimeLabelFormat=options.dateTimeLabelFormats[tickPositionInfo.higherRanks[pos]||tickPositionInfo.unitName];} // set properties for access in render method
	tick.isFirst=isFirst;tick.isLast=isLast; // get the string
	str=axis.labelFormatter.call({axis:axis,chart:chart,isFirst:isFirst,isLast:isLast,dateTimeLabelFormat:dateTimeLabelFormat,value:axis.isLog?correctFloat(lin2log(value)):value}); // prepare CSS
	//css = width && { width: mathMax(1, mathRound(width - 2 * (labelOptions.padding || 10))) + PX };
	// first call
	if(!defined(label)){tick.label=label=defined(str)&&labelOptions.enabled?chart.renderer.text(str,0,0,labelOptions.useHTML) //.attr(attr)
	// without position absolute, IE export sometimes is wrong
	.css(merge(labelOptions.style)).add(axis.labelGroup):null;tick.labelLength=label&&label.getBBox().width; // Un-rotated length
	tick.rotation=0; // Base value to detect change for new calls to getBBox
	// update
	}else if(label){label.attr({text:str});}}, /**
		 * Get the offset height or width of the label
		 */getLabelSize:function getLabelSize(){return this.label?this.label.getBBox()[this.axis.horiz?'height':'width']:0;}, /**
		 * Handle the label overflow by adjusting the labels to the left and right edge, or
		 * hide them if they collide into the neighbour label.
		 */handleOverflow:function handleOverflow(xy){var axis=this.axis,pxPos=xy.x,chartWidth=axis.chart.chartWidth,spacing=axis.chart.spacing,leftBound=pick(axis.labelLeft,mathMin(axis.pos,spacing[3])),rightBound=pick(axis.labelRight,mathMax(axis.pos+axis.len,chartWidth-spacing[1])),label=this.label,rotation=this.rotation,factor={left:0,center:0.5,right:1}[axis.labelAlign],labelWidth=label.getBBox().width,slotWidth=axis.slotWidth,xCorrection=factor,goRight=1,leftPos,rightPos,textWidth,css={}; // Check if the label overshoots the chart spacing box. If it does, move it.
	// If it now overshoots the slotWidth, add ellipsis.
	if(!rotation){leftPos=pxPos-factor*labelWidth;rightPos=pxPos+(1-factor)*labelWidth;if(leftPos<leftBound){slotWidth=xy.x+slotWidth*(1-factor)-leftBound;}else if(rightPos>rightBound){slotWidth=rightBound-xy.x+slotWidth*factor;goRight=-1;}slotWidth=mathMin(axis.slotWidth,slotWidth); // #4177
	if(slotWidth<axis.slotWidth&&axis.labelAlign==='center'){xy.x+=goRight*(axis.slotWidth-slotWidth-xCorrection*(axis.slotWidth-mathMin(labelWidth,slotWidth)));} // If the label width exceeds the available space, set a text width to be 
	// picked up below. Also, if a width has been set before, we need to set a new
	// one because the reported labelWidth will be limited by the box (#3938).
	if(labelWidth>slotWidth||axis.autoRotation&&label.styles.width){textWidth=slotWidth;} // Add ellipsis to prevent rotated labels to be clipped against the edge of the chart
	}else if(rotation<0&&pxPos-factor*labelWidth<leftBound){textWidth=mathRound(pxPos/mathCos(rotation*deg2rad)-leftBound);}else if(rotation>0&&pxPos+factor*labelWidth>rightBound){textWidth=mathRound((chartWidth-pxPos)/mathCos(rotation*deg2rad));}if(textWidth){css.width=textWidth;if(!axis.options.labels.style.textOverflow){css.textOverflow='ellipsis';}label.css(css);}}, /**
		 * Get the x and y position for ticks and labels
		 */getPosition:function getPosition(horiz,pos,tickmarkOffset,old){var axis=this.axis,chart=axis.chart,cHeight=old&&chart.oldChartHeight||chart.chartHeight;return {x:horiz?axis.translate(pos+tickmarkOffset,null,null,old)+axis.transB:axis.left+axis.offset+(axis.opposite?(old&&chart.oldChartWidth||chart.chartWidth)-axis.right-axis.left:0),y:horiz?cHeight-axis.bottom+axis.offset-(axis.opposite?axis.height:0):cHeight-axis.translate(pos+tickmarkOffset,null,null,old)-axis.transB};}, /**
		 * Get the x, y position of the tick label
		 */getLabelPosition:function getLabelPosition(x,y,label,horiz,labelOptions,tickmarkOffset,index,step){var axis=this.axis,transA=axis.transA,reversed=axis.reversed,staggerLines=axis.staggerLines,rotCorr=axis.tickRotCorr||{x:0,y:0},yOffset=pick(labelOptions.y,rotCorr.y+(axis.side===2?8:-(label.getBBox().height/2))),line;x=x+labelOptions.x+rotCorr.x-(tickmarkOffset&&horiz?tickmarkOffset*transA*(reversed?-1:1):0);y=y+yOffset-(tickmarkOffset&&!horiz?tickmarkOffset*transA*(reversed?1:-1):0); // Correct for staggered labels
	if(staggerLines){line=index/(step||1)%staggerLines;y+=line*(axis.labelOffset/staggerLines);}return {x:x,y:mathRound(y)};}, /**
		 * Extendible method to return the path of the marker
		 */getMarkPath:function getMarkPath(x,y,tickLength,tickWidth,horiz,renderer){return renderer.crispLine([M,x,y,L,x+(horiz?0:-tickLength),y+(horiz?tickLength:0)],tickWidth);}, /**
		 * Put everything in place
		 *
		 * @param index {Number}
		 * @param old {Boolean} Use old coordinates to prepare an animation into new position
		 */render:function render(index,old,opacity){var tick=this,axis=tick.axis,options=axis.options,chart=axis.chart,renderer=chart.renderer,horiz=axis.horiz,type=tick.type,label=tick.label,pos=tick.pos,labelOptions=options.labels,gridLine=tick.gridLine,gridPrefix=type?type+'Grid':'grid',tickPrefix=type?type+'Tick':'tick',gridLineWidth=options[gridPrefix+'LineWidth'],gridLineColor=options[gridPrefix+'LineColor'],dashStyle=options[gridPrefix+'LineDashStyle'],tickLength=options[tickPrefix+'Length'],tickWidth=pick(options[tickPrefix+'Width'],!type&&axis.isXAxis?1:0), // X axis defaults to 1
	tickColor=options[tickPrefix+'Color'],tickPosition=options[tickPrefix+'Position'],gridLinePath,mark=tick.mark,markPath,step= /*axis.labelStep || */labelOptions.step,attribs,show=true,tickmarkOffset=axis.tickmarkOffset,xy=tick.getPosition(horiz,pos,tickmarkOffset,old),x=xy.x,y=xy.y,reverseCrisp=horiz&&x===axis.pos+axis.len||!horiz&&y===axis.pos?-1:1; // #1480, #1687
	opacity=pick(opacity,1);this.isActive=true; // create the grid line
	if(gridLineWidth){gridLinePath=axis.getPlotLinePath(pos+tickmarkOffset,gridLineWidth*reverseCrisp,old,true);if(gridLine===UNDEFINED){attribs={stroke:gridLineColor,'stroke-width':gridLineWidth};if(dashStyle){attribs.dashstyle=dashStyle;}if(!type){attribs.zIndex=1;}if(old){attribs.opacity=0;}tick.gridLine=gridLine=gridLineWidth?renderer.path(gridLinePath).attr(attribs).add(axis.gridGroup):null;} // If the parameter 'old' is set, the current call will be followed
	// by another call, therefore do not do any animations this time
	if(!old&&gridLine&&gridLinePath){gridLine[tick.isNew?'attr':'animate']({d:gridLinePath,opacity:opacity});}} // create the tick mark
	if(tickWidth&&tickLength){ // negate the length
	if(tickPosition==='inside'){tickLength=-tickLength;}if(axis.opposite){tickLength=-tickLength;}markPath=tick.getMarkPath(x,y,tickLength,tickWidth*reverseCrisp,horiz,renderer);if(mark){ // updating
	mark.animate({d:markPath,opacity:opacity});}else { // first time
	tick.mark=renderer.path(markPath).attr({stroke:tickColor,'stroke-width':tickWidth,opacity:opacity}).add(axis.axisGroup);}} // the label is created on init - now move it into place
	if(label&&!isNaN(x)){label.xy=xy=tick.getLabelPosition(x,y,label,horiz,labelOptions,tickmarkOffset,index,step); // Apply show first and show last. If the tick is both first and last, it is
	// a single centered tick, in which case we show the label anyway (#2100).
	if(tick.isFirst&&!tick.isLast&&!pick(options.showFirstLabel,1)||tick.isLast&&!tick.isFirst&&!pick(options.showLastLabel,1)){show=false; // Handle label overflow and show or hide accordingly
	}else if(horiz&&!axis.isRadial&&!labelOptions.step&&!labelOptions.rotation&&!old&&opacity!==0){tick.handleOverflow(xy);} // apply step
	if(step&&index%step){ // show those indices dividable by step
	show=false;} // Set the new position, and show or hide
	if(show&&!isNaN(xy.y)){xy.opacity=opacity;label[tick.isNew?'attr':'animate'](xy);tick.isNew=false;}else {label.attr('y',-9999); // #1338
	}}}, /**
		 * Destructor for the tick prototype
		 */destroy:function destroy(){destroyObjectProperties(this,this.axis);}}; /**
	 * The object wrapper for plot lines and plot bands
	 * @param {Object} options
	 */Highcharts.PlotLineOrBand=function(axis,options){this.axis=axis;if(options){this.options=options;this.id=options.id;}};Highcharts.PlotLineOrBand.prototype={ /**
		 * Render the plot line or plot band. If it is already existing,
		 * move it.
		 */render:function render(){var plotLine=this,axis=plotLine.axis,horiz=axis.horiz,options=plotLine.options,optionsLabel=options.label,label=plotLine.label,width=options.width,to=options.to,from=options.from,isBand=defined(from)&&defined(to),value=options.value,dashStyle=options.dashStyle,svgElem=plotLine.svgElem,path=[],addEvent,eventType,xs,ys,x,y,color=options.color,zIndex=options.zIndex,events=options.events,attribs={},renderer=axis.chart.renderer; // logarithmic conversion
	if(axis.isLog){from=log2lin(from);to=log2lin(to);value=log2lin(value);} // plot line
	if(width){path=axis.getPlotLinePath(value,width);attribs={stroke:color,'stroke-width':width};if(dashStyle){attribs.dashstyle=dashStyle;}}else if(isBand){ // plot band
	path=axis.getPlotBandPath(from,to,options);if(color){attribs.fill=color;}if(options.borderWidth){attribs.stroke=options.borderColor;attribs['stroke-width']=options.borderWidth;}}else {return;} // zIndex
	if(defined(zIndex)){attribs.zIndex=zIndex;} // common for lines and bands
	if(svgElem){if(path){svgElem.animate({d:path},null,svgElem.onGetPath);}else {svgElem.hide();svgElem.onGetPath=function(){svgElem.show();};if(label){plotLine.label=label=label.destroy();}}}else if(path&&path.length){plotLine.svgElem=svgElem=renderer.path(path).attr(attribs).add(); // events
	if(events){addEvent=function addEvent(eventType){svgElem.on(eventType,function(e){events[eventType].apply(plotLine,[e]);});};for(eventType in events){addEvent(eventType);}}} // the plot band/line label
	if(optionsLabel&&defined(optionsLabel.text)&&path&&path.length&&axis.width>0&&axis.height>0){ // apply defaults
	optionsLabel=merge({align:horiz&&isBand&&'center',x:horiz?!isBand&&4:10,verticalAlign:!horiz&&isBand&&'middle',y:horiz?isBand?16:10:isBand?6:-4,rotation:horiz&&!isBand&&90},optionsLabel); // add the SVG element
	if(!label){attribs={align:optionsLabel.textAlign||optionsLabel.align,rotation:optionsLabel.rotation};if(defined(zIndex)){attribs.zIndex=zIndex;}plotLine.label=label=renderer.text(optionsLabel.text,0,0,optionsLabel.useHTML).attr(attribs).css(optionsLabel.style).add();} // get the bounding box and align the label
	// #3000 changed to better handle choice between plotband or plotline
	xs=[path[1],path[4],isBand?path[6]:path[1]];ys=[path[2],path[5],isBand?path[7]:path[2]];x=arrayMin(xs);y=arrayMin(ys);label.align(optionsLabel,false,{x:x,y:y,width:arrayMax(xs)-x,height:arrayMax(ys)-y});label.show();}else if(label){ // move out of sight
	label.hide();} // chainable
	return plotLine;}, /**
		 * Remove the plot line or band
		 */destroy:function destroy(){ // remove it from the lookup
	erase(this.axis.plotLinesAndBands,this);delete this.axis;destroyObjectProperties(this);}}; /**
	 * Object with members for extending the Axis prototype
	 */AxisPlotLineOrBandExtension={ /**
		 * Create the path for a plot band
		 */getPlotBandPath:function getPlotBandPath(from,to){var toPath=this.getPlotLinePath(to,null,null,true),path=this.getPlotLinePath(from,null,null,true);if(path&&toPath&&path.toString()!==toPath.toString()){ // #3836
	path.push(toPath[4],toPath[5],toPath[1],toPath[2]);}else { // outside the axis area
	path=null;}return path;},addPlotBand:function addPlotBand(options){return this.addPlotBandOrLine(options,'plotBands');},addPlotLine:function addPlotLine(options){return this.addPlotBandOrLine(options,'plotLines');}, /**
		 * Add a plot band or plot line after render time
		 *
		 * @param options {Object} The plotBand or plotLine configuration object
		 */addPlotBandOrLine:function addPlotBandOrLine(options,coll){var obj=new Highcharts.PlotLineOrBand(this,options).render(),userOptions=this.userOptions;if(obj){ // #2189
	// Add it to the user options for exporting and Axis.update
	if(coll){userOptions[coll]=userOptions[coll]||[];userOptions[coll].push(options);}this.plotLinesAndBands.push(obj);}return obj;}, /**
		 * Remove a plot band or plot line from the chart by id
		 * @param {Object} id
		 */removePlotBandOrLine:function removePlotBandOrLine(id){var plotLinesAndBands=this.plotLinesAndBands,options=this.options,userOptions=this.userOptions,i=plotLinesAndBands.length;while(i--){if(plotLinesAndBands[i].id===id){plotLinesAndBands[i].destroy();}}each([options.plotLines||[],userOptions.plotLines||[],options.plotBands||[],userOptions.plotBands||[]],function(arr){i=arr.length;while(i--){if(arr[i].id===id){erase(arr,arr[i]);}}});}}; /**
	 * Create a new axis object
	 * @param {Object} chart
	 * @param {Object} options
	 */var Axis=Highcharts.Axis=function(){this.init.apply(this,arguments);};Axis.prototype={ /**
		 * Default options for the X axis - the Y axis has extended defaults
		 */defaultOptions:{ // allowDecimals: null,
	// alternateGridColor: null,
	// categories: [],
	dateTimeLabelFormats:{millisecond:'%H:%M:%S.%L',second:'%H:%M:%S',minute:'%H:%M',hour:'%H:%M',day:'%e. %b',week:'%e. %b',month:'%b \'%y',year:'%Y'},endOnTick:false,gridLineColor:'#D8D8D8', // gridLineDashStyle: 'solid',
	// gridLineWidth: 0,
	// reversed: false,
	labels:{enabled:true, // rotation: 0,
	// align: 'center',
	// step: null,
	style:{color:'#606060',cursor:'default',fontSize:'11px'},x:0,y:15 /*formatter: function () {
					return this.value;
				},*/},lineColor:'#C0D0E0',lineWidth:1, //linkedTo: null,
	//max: undefined,
	//min: undefined,
	minPadding:0.01,maxPadding:0.01, //minRange: null,
	minorGridLineColor:'#E0E0E0', // minorGridLineDashStyle: null,
	minorGridLineWidth:1,minorTickColor:'#A0A0A0', //minorTickInterval: null,
	minorTickLength:2,minorTickPosition:'outside', // inside or outside
	//minorTickWidth: 0,
	//opposite: false,
	//offset: 0,
	//plotBands: [{
	//	events: {},
	//	zIndex: 1,
	//	labels: { align, x, verticalAlign, y, style, rotation, textAlign }
	//}],
	//plotLines: [{
	//	events: {}
	//  dashStyle: {}
	//	zIndex:
	//	labels: { align, x, verticalAlign, y, style, rotation, textAlign }
	//}],
	//reversed: false,
	// showFirstLabel: true,
	// showLastLabel: true,
	startOfWeek:1,startOnTick:false,tickColor:'#C0D0E0', //tickInterval: null,
	tickLength:10,tickmarkPlacement:'between', // on or between
	tickPixelInterval:100,tickPosition:'outside', //tickWidth: 1,
	title:{ //text: null,
	align:'middle', // low, middle or high
	//margin: 0 for horizontal, 10 for vertical axes,
	//rotation: 0,
	//side: 'outside',
	style:{color:'#707070'} //x: 0,
	//y: 0
	},type:'linear' // linear, logarithmic or datetime
	//visible: true
	}, /**
		 * This options set extends the defaultOptions for Y axes
		 */defaultYAxisOptions:{endOnTick:true,gridLineWidth:1,tickPixelInterval:72,showLastLabel:true,labels:{x:-8,y:3},lineWidth:0,maxPadding:0.05,minPadding:0.05,startOnTick:true, //tickWidth: 0,
	title:{rotation:270,text:'Values'},stackLabels:{enabled:false, //align: dynamic,
	//y: dynamic,
	//x: dynamic,
	//verticalAlign: dynamic,
	//textAlign: dynamic,
	//rotation: 0,
	formatter:function formatter(){return Highcharts.numberFormat(this.total,-1);},style:merge(defaultPlotOptions.line.dataLabels.style,{color:'#000000'})}}, /**
		 * These options extend the defaultOptions for left axes
		 */defaultLeftAxisOptions:{labels:{x:-15,y:null},title:{rotation:270}}, /**
		 * These options extend the defaultOptions for right axes
		 */defaultRightAxisOptions:{labels:{x:15,y:null},title:{rotation:90}}, /**
		 * These options extend the defaultOptions for bottom axes
		 */defaultBottomAxisOptions:{labels:{autoRotation:[-45],x:0,y:null // based on font size
	// overflow: undefined,
	// staggerLines: null
	},title:{rotation:0}}, /**
		 * These options extend the defaultOptions for top axes
		 */defaultTopAxisOptions:{labels:{autoRotation:[-45],x:0,y:-15 // overflow: undefined
	// staggerLines: null
	},title:{rotation:0}}, /**
		 * Initialize the axis
		 */init:function init(chart,userOptions){var isXAxis=userOptions.isX,axis=this;axis.chart=chart; // Flag, is the axis horizontal
	axis.horiz=chart.inverted?!isXAxis:isXAxis; // Flag, isXAxis
	axis.isXAxis=isXAxis;axis.coll=isXAxis?'xAxis':'yAxis';axis.opposite=userOptions.opposite; // needed in setOptions
	axis.side=userOptions.side||(axis.horiz?axis.opposite?0:2: // top : bottom
	axis.opposite?1:3); // right : left
	axis.setOptions(userOptions);var options=this.options,type=options.type,isDatetimeAxis=type==='datetime';axis.labelFormatter=options.labels.formatter||axis.defaultLabelFormatter; // can be overwritten by dynamic format
	// Flag, stagger lines or not
	axis.userOptions=userOptions; //axis.axisTitleMargin = UNDEFINED,// = options.title.margin,
	axis.minPixelPadding=0;axis.reversed=options.reversed;axis.visible=options.visible!==false;axis.zoomEnabled=options.zoomEnabled!==false; // Initial categories
	axis.categories=options.categories||type==='category';axis.names=axis.names||[]; // Preserve on update (#3830)
	// Elements
	//axis.axisGroup = UNDEFINED;
	//axis.gridGroup = UNDEFINED;
	//axis.axisTitle = UNDEFINED;
	//axis.axisLine = UNDEFINED;
	// Shorthand types
	axis.isLog=type==='logarithmic';axis.isDatetimeAxis=isDatetimeAxis; // Flag, if axis is linked to another axis
	axis.isLinked=defined(options.linkedTo); // Linked axis.
	//axis.linkedParent = UNDEFINED;
	// Tick positions
	//axis.tickPositions = UNDEFINED; // array containing predefined positions
	// Tick intervals
	//axis.tickInterval = UNDEFINED;
	//axis.minorTickInterval = UNDEFINED;
	// Major ticks
	axis.ticks={};axis.labelEdge=[]; // Minor ticks
	axis.minorTicks={}; // List of plotLines/Bands
	axis.plotLinesAndBands=[]; // Alternate bands
	axis.alternateBands={}; // Axis metrics
	//axis.left = UNDEFINED;
	//axis.top = UNDEFINED;
	//axis.width = UNDEFINED;
	//axis.height = UNDEFINED;
	//axis.bottom = UNDEFINED;
	//axis.right = UNDEFINED;
	//axis.transA = UNDEFINED;
	//axis.transB = UNDEFINED;
	//axis.oldTransA = UNDEFINED;
	axis.len=0; //axis.oldMin = UNDEFINED;
	//axis.oldMax = UNDEFINED;
	//axis.oldUserMin = UNDEFINED;
	//axis.oldUserMax = UNDEFINED;
	//axis.oldAxisLength = UNDEFINED;
	axis.minRange=axis.userMinRange=options.minRange||options.maxZoom;axis.range=options.range;axis.offset=options.offset||0; // Dictionary for stacks
	axis.stacks={};axis.oldStacks={};axis.stacksTouched=0; // Min and max in the data
	//axis.dataMin = UNDEFINED,
	//axis.dataMax = UNDEFINED,
	// The axis range
	axis.max=null;axis.min=null; // User set min and max
	//axis.userMin = UNDEFINED,
	//axis.userMax = UNDEFINED,
	// Crosshair options
	axis.crosshair=pick(options.crosshair,splat(chart.options.tooltip.crosshairs)[isXAxis?0:1],false); // Run Axis
	var eventType,events=axis.options.events; // Register
	if(inArray(axis,chart.axes)===-1){ // don't add it again on Axis.update()
	if(isXAxis&&!this.isColorAxis){ // #2713
	chart.axes.splice(chart.xAxis.length,0,axis);}else {chart.axes.push(axis);}chart[axis.coll].push(axis);}axis.series=axis.series||[]; // populated by Series
	// inverted charts have reversed xAxes as default
	if(chart.inverted&&isXAxis&&axis.reversed===UNDEFINED){axis.reversed=true;}axis.removePlotBand=axis.removePlotBandOrLine;axis.removePlotLine=axis.removePlotBandOrLine; // register event listeners
	for(eventType in events){addEvent(axis,eventType,events[eventType]);} // extend logarithmic axis
	if(axis.isLog){axis.val2lin=log2lin;axis.lin2val=lin2log;}}, /**
		 * Merge and set options
		 */setOptions:function setOptions(userOptions){this.options=merge(this.defaultOptions,this.isXAxis?{}:this.defaultYAxisOptions,[this.defaultTopAxisOptions,this.defaultRightAxisOptions,this.defaultBottomAxisOptions,this.defaultLeftAxisOptions][this.side],merge(defaultOptions[this.coll], // if set in setOptions (#1053)
	userOptions));}, /**
		 * The default label formatter. The context is a special config object for the label.
		 */defaultLabelFormatter:function defaultLabelFormatter(){var axis=this.axis,value=this.value,categories=axis.categories,dateTimeLabelFormat=this.dateTimeLabelFormat,numericSymbols=defaultOptions.lang.numericSymbols,i=numericSymbols&&numericSymbols.length,multi,ret,formatOption=axis.options.labels.format, // make sure the same symbol is added for all labels on a linear axis
	numericSymbolDetector=axis.isLog?value:axis.tickInterval;if(formatOption){ret=format(formatOption,this);}else if(categories){ret=value;}else if(dateTimeLabelFormat){ // datetime axis
	ret=dateFormat(dateTimeLabelFormat,value);}else if(i&&numericSymbolDetector>=1000){ // Decide whether we should add a numeric symbol like k (thousands) or M (millions).
	// If we are to enable this in tooltip or other places as well, we can move this
	// logic to the numberFormatter and enable it by a parameter.
	while(i--&&ret===UNDEFINED){multi=Math.pow(1000,i+1);if(numericSymbolDetector>=multi&&value*10%multi===0&&numericSymbols[i]!==null){ret=Highcharts.numberFormat(value/multi,-1)+numericSymbols[i];}}}if(ret===UNDEFINED){if(mathAbs(value)>=10000){ // add thousands separators
	ret=Highcharts.numberFormat(value,-1);}else { // small numbers
	ret=Highcharts.numberFormat(value,-1,UNDEFINED,''); // #2466
	}}return ret;}, /**
		 * Get the minimum and maximum for the series of each axis
		 */getSeriesExtremes:function getSeriesExtremes(){var axis=this,chart=axis.chart;axis.hasVisibleSeries=false; // Reset properties in case we're redrawing (#3353)
	axis.dataMin=axis.dataMax=axis.threshold=null;axis.softThreshold=!axis.isXAxis;if(axis.buildStacks){axis.buildStacks();} // loop through this axis' series
	each(axis.series,function(series){if(series.visible||!chart.options.chart.ignoreHiddenSeries){var seriesOptions=series.options,xData,threshold=seriesOptions.threshold,seriesDataMin,seriesDataMax;axis.hasVisibleSeries=true; // Validate threshold in logarithmic axes
	if(axis.isLog&&threshold<=0){threshold=null;} // Get dataMin and dataMax for X axes
	if(axis.isXAxis){xData=series.xData;if(xData.length){axis.dataMin=mathMin(pick(axis.dataMin,xData[0]),arrayMin(xData));axis.dataMax=mathMax(pick(axis.dataMax,xData[0]),arrayMax(xData));} // Get dataMin and dataMax for Y axes, as well as handle stacking and processed data
	}else { // Get this particular series extremes
	series.getExtremes();seriesDataMax=series.dataMax;seriesDataMin=series.dataMin; // Get the dataMin and dataMax so far. If percentage is used, the min and max are
	// always 0 and 100. If seriesDataMin and seriesDataMax is null, then series
	// doesn't have active y data, we continue with nulls
	if(defined(seriesDataMin)&&defined(seriesDataMax)){axis.dataMin=mathMin(pick(axis.dataMin,seriesDataMin),seriesDataMin);axis.dataMax=mathMax(pick(axis.dataMax,seriesDataMax),seriesDataMax);} // Adjust to threshold
	if(defined(threshold)){axis.threshold=threshold;} // If any series has a hard threshold, it takes precedence
	if(!seriesOptions.softThreshold||axis.isLog){axis.softThreshold=false;}}}});}, /**
		 * Translate from axis value to pixel position on the chart, or back
		 *
		 */translate:function translate(val,backwards,cvsCoord,old,handleLog,pointPlacement){var axis=this.linkedParent||this, // #1417
	sign=1,cvsOffset=0,localA=old?axis.oldTransA:axis.transA,localMin=old?axis.oldMin:axis.min,returnValue,minPixelPadding=axis.minPixelPadding,doPostTranslate=(axis.doPostTranslate||axis.isLog&&handleLog)&&axis.lin2val;if(!localA){localA=axis.transA;} // In vertical axes, the canvas coordinates start from 0 at the top like in
	// SVG.
	if(cvsCoord){sign*=-1; // canvas coordinates inverts the value
	cvsOffset=axis.len;} // Handle reversed axis
	if(axis.reversed){sign*=-1;cvsOffset-=sign*(axis.sector||axis.len);} // From pixels to value
	if(backwards){ // reverse translation
	val=val*sign+cvsOffset;val-=minPixelPadding;returnValue=val/localA+localMin; // from chart pixel to value
	if(doPostTranslate){ // log and ordinal axes
	returnValue=axis.lin2val(returnValue);} // From value to pixels
	}else {if(doPostTranslate){ // log and ordinal axes
	val=axis.val2lin(val);}if(pointPlacement==='between'){pointPlacement=0.5;}returnValue=sign*(val-localMin)*localA+cvsOffset+sign*minPixelPadding+(isNumber(pointPlacement)?localA*pointPlacement*axis.pointRange:0);}return returnValue;}, /**
		 * Utility method to translate an axis value to pixel position.
		 * @param {Number} value A value in terms of axis units
		 * @param {Boolean} paneCoordinates Whether to return the pixel coordinate relative to the chart
		 *        or just the axis/pane itself.
		 */toPixels:function toPixels(value,paneCoordinates){return this.translate(value,false,!this.horiz,null,true)+(paneCoordinates?0:this.pos);}, /*
		 * Utility method to translate a pixel position in to an axis value
		 * @param {Number} pixel The pixel value coordinate
		 * @param {Boolean} paneCoordiantes Whether the input pixel is relative to the chart or just the
		 *        axis/pane itself.
		 */toValue:function toValue(pixel,paneCoordinates){return this.translate(pixel-(paneCoordinates?0:this.pos),true,!this.horiz,null,true);}, /**
		 * Create the path for a plot line that goes from the given value on
		 * this axis, across the plot to the opposite side
		 * @param {Number} value
		 * @param {Number} lineWidth Used for calculation crisp line
		 * @param {Number] old Use old coordinates (for resizing and rescaling)
		 */getPlotLinePath:function getPlotLinePath(value,lineWidth,old,force,translatedValue){var axis=this,chart=axis.chart,axisLeft=axis.left,axisTop=axis.top,x1,y1,x2,y2,cHeight=old&&chart.oldChartHeight||chart.chartHeight,cWidth=old&&chart.oldChartWidth||chart.chartWidth,skip,transB=axis.transB, /**
				 * Check if x is between a and b. If not, either move to a/b or skip, 
				 * depending on the force parameter.
				 */between=function between(x,a,b){if(x<a||x>b){if(force){x=mathMin(mathMax(a,x),b);}else {skip=true;}}return x;};translatedValue=pick(translatedValue,axis.translate(value,null,null,old));x1=x2=mathRound(translatedValue+transB);y1=y2=mathRound(cHeight-translatedValue-transB);if(isNaN(translatedValue)){ // no min or max
	skip=true;}else if(axis.horiz){y1=axisTop;y2=cHeight-axis.bottom;x1=x2=between(x1,axisLeft,axisLeft+axis.width);}else {x1=axisLeft;x2=cWidth-axis.right;y1=y2=between(y1,axisTop,axisTop+axis.height);}return skip&&!force?null:chart.renderer.crispLine([M,x1,y1,L,x2,y2],lineWidth||1);}, /**
		 * Set the tick positions of a linear axis to round values like whole tens or every five.
		 */getLinearTickPositions:function getLinearTickPositions(tickInterval,min,max){var pos,lastPos,roundedMin=correctFloat(mathFloor(min/tickInterval)*tickInterval),roundedMax=correctFloat(mathCeil(max/tickInterval)*tickInterval),tickPositions=[]; // For single points, add a tick regardless of the relative position (#2662)
	if(min===max&&isNumber(min)){return [min];} // Populate the intermediate values
	pos=roundedMin;while(pos<=roundedMax){ // Place the tick on the rounded value
	tickPositions.push(pos); // Always add the raw tickInterval, not the corrected one.
	pos=correctFloat(pos+tickInterval); // If the interval is not big enough in the current min - max range to actually increase
	// the loop variable, we need to break out to prevent endless loop. Issue #619
	if(pos===lastPos){break;} // Record the last value
	lastPos=pos;}return tickPositions;}, /**
		 * Return the minor tick positions. For logarithmic axes, reuse the same logic
		 * as for major ticks.
		 */getMinorTickPositions:function getMinorTickPositions(){var axis=this,options=axis.options,tickPositions=axis.tickPositions,minorTickInterval=axis.minorTickInterval,minorTickPositions=[],pos,i,pointRangePadding=axis.pointRangePadding||0,min=axis.min-pointRangePadding, // #1498
	max=axis.max+pointRangePadding, // #1498
	range=max-min,len; // If minor ticks get too dense, they are hard to read, and may cause long running script. So we don't draw them.
	if(range&&range/minorTickInterval<axis.len/3){ // #3875
	if(axis.isLog){len=tickPositions.length;for(i=1;i<len;i++){minorTickPositions=minorTickPositions.concat(axis.getLogTickPositions(minorTickInterval,tickPositions[i-1],tickPositions[i],true));}}else if(axis.isDatetimeAxis&&options.minorTickInterval==='auto'){ // #1314
	minorTickPositions=minorTickPositions.concat(axis.getTimeTicks(axis.normalizeTimeTickInterval(minorTickInterval),min,max,options.startOfWeek));}else {for(pos=min+(tickPositions[0]-min)%minorTickInterval;pos<=max;pos+=minorTickInterval){minorTickPositions.push(pos);}}}if(minorTickPositions.length!==0){ // don't change the extremes, when there is no minor ticks
	axis.trimTicks(minorTickPositions,options.startOnTick,options.endOnTick); // #3652 #3743 #1498
	}return minorTickPositions;}, /**
		 * Adjust the min and max for the minimum range. Keep in mind that the series data is
		 * not yet processed, so we don't have information on data cropping and grouping, or
		 * updated axis.pointRange or series.pointRange. The data can't be processed until
		 * we have finally established min and max.
		 */adjustForMinRange:function adjustForMinRange(){var axis=this,options=axis.options,min=axis.min,max=axis.max,zoomOffset,spaceAvailable=axis.dataMax-axis.dataMin>=axis.minRange,closestDataRange,i,distance,xData,loopLength,minArgs,maxArgs,minRange; // Set the automatic minimum range based on the closest point distance
	if(axis.isXAxis&&axis.minRange===UNDEFINED&&!axis.isLog){if(defined(options.min)||defined(options.max)){axis.minRange=null; // don't do this again
	}else { // Find the closest distance between raw data points, as opposed to
	// closestPointRange that applies to processed points (cropped and grouped)
	each(axis.series,function(series){xData=series.xData;loopLength=series.xIncrement?1:xData.length-1;for(i=loopLength;i>0;i--){distance=xData[i]-xData[i-1];if(closestDataRange===UNDEFINED||distance<closestDataRange){closestDataRange=distance;}}});axis.minRange=mathMin(closestDataRange*5,axis.dataMax-axis.dataMin);}} // if minRange is exceeded, adjust
	if(max-min<axis.minRange){minRange=axis.minRange;zoomOffset=(minRange-max+min)/2; // if min and max options have been set, don't go beyond it
	minArgs=[min-zoomOffset,pick(options.min,min-zoomOffset)];if(spaceAvailable){ // if space is available, stay within the data range
	minArgs[2]=axis.dataMin;}min=arrayMax(minArgs);maxArgs=[min+minRange,pick(options.max,min+minRange)];if(spaceAvailable){ // if space is availabe, stay within the data range
	maxArgs[2]=axis.dataMax;}max=arrayMin(maxArgs); // now if the max is adjusted, adjust the min back
	if(max-min<minRange){minArgs[0]=max-minRange;minArgs[1]=pick(options.min,max-minRange);min=arrayMax(minArgs);}} // Record modified extremes
	axis.min=min;axis.max=max;}, /**
		 * Update translation information
		 */setAxisTranslation:function setAxisTranslation(saveOld){var axis=this,range=axis.max-axis.min,pointRange=axis.axisPointRange||0,closestPointRange,minPointOffset=0,pointRangePadding=0,linkedParent=axis.linkedParent,ordinalCorrection,hasCategories=!!axis.categories,transA=axis.transA,isXAxis=axis.isXAxis; // Adjust translation for padding. Y axis with categories need to go through the same (#1784).
	if(isXAxis||hasCategories||pointRange){if(linkedParent){minPointOffset=linkedParent.minPointOffset;pointRangePadding=linkedParent.pointRangePadding;}else {each(axis.series,function(series){var seriesPointRange=hasCategories?1:isXAxis?series.pointRange:axis.axisPointRange||0, // #2806
	pointPlacement=series.options.pointPlacement,seriesClosestPointRange=series.closestPointRange;pointRange=mathMax(pointRange,seriesPointRange);if(!axis.single){ // minPointOffset is the value padding to the left of the axis in order to make
	// room for points with a pointRange, typically columns. When the pointPlacement option
	// is 'between' or 'on', this padding does not apply.
	minPointOffset=mathMax(minPointOffset,isString(pointPlacement)?0:seriesPointRange/2); // Determine the total padding needed to the length of the axis to make room for the
	// pointRange. If the series' pointPlacement is 'on', no padding is added.
	pointRangePadding=mathMax(pointRangePadding,pointPlacement==='on'?0:seriesPointRange);} // Set the closestPointRange
	if(!series.noSharedTooltip&&defined(seriesClosestPointRange)){closestPointRange=defined(closestPointRange)?mathMin(closestPointRange,seriesClosestPointRange):seriesClosestPointRange;}});} // Record minPointOffset and pointRangePadding
	ordinalCorrection=axis.ordinalSlope&&closestPointRange?axis.ordinalSlope/closestPointRange:1; // #988, #1853
	axis.minPointOffset=minPointOffset=minPointOffset*ordinalCorrection;axis.pointRangePadding=pointRangePadding=pointRangePadding*ordinalCorrection; // pointRange means the width reserved for each point, like in a column chart
	axis.pointRange=mathMin(pointRange,range); // closestPointRange means the closest distance between points. In columns
	// it is mostly equal to pointRange, but in lines pointRange is 0 while closestPointRange
	// is some other value
	if(isXAxis){axis.closestPointRange=closestPointRange;}} // Secondary values
	if(saveOld){axis.oldTransA=transA;}axis.translationSlope=axis.transA=transA=axis.len/(range+pointRangePadding||1);axis.transB=axis.horiz?axis.left:axis.bottom; // translation addend
	axis.minPixelPadding=transA*minPointOffset;},minFromRange:function minFromRange(){return this.max-this.range;}, /**
		 * Set the tick positions to round values and optionally extend the extremes
		 * to the nearest tick
		 */setTickInterval:function setTickInterval(secondPass){var axis=this,chart=axis.chart,options=axis.options,isLog=axis.isLog,isDatetimeAxis=axis.isDatetimeAxis,isXAxis=axis.isXAxis,isLinked=axis.isLinked,maxPadding=options.maxPadding,minPadding=options.minPadding,length,linkedParentExtremes,tickIntervalOption=options.tickInterval,minTickInterval,tickPixelIntervalOption=options.tickPixelInterval,categories=axis.categories,threshold=axis.threshold,softThreshold=axis.softThreshold,thresholdMin,thresholdMax,hardMin,hardMax;if(!isDatetimeAxis&&!categories&&!isLinked){this.getTickAmount();} // Min or max set either by zooming/setExtremes or initial options
	hardMin=pick(axis.userMin,options.min);hardMax=pick(axis.userMax,options.max); // Linked axis gets the extremes from the parent axis
	if(isLinked){axis.linkedParent=chart[axis.coll][options.linkedTo];linkedParentExtremes=axis.linkedParent.getExtremes();axis.min=pick(linkedParentExtremes.min,linkedParentExtremes.dataMin);axis.max=pick(linkedParentExtremes.max,linkedParentExtremes.dataMax);if(options.type!==axis.linkedParent.options.type){error(11,1); // Can't link axes of different type
	} // Initial min and max from the extreme data values
	}else { // Adjust to hard threshold
	if(!softThreshold&&defined(threshold)){if(axis.dataMin>=threshold){thresholdMin=threshold;minPadding=0;}else if(axis.dataMax<=threshold){thresholdMax=threshold;maxPadding=0;}}axis.min=pick(hardMin,thresholdMin,axis.dataMin);axis.max=pick(hardMax,thresholdMax,axis.dataMax);}if(isLog){if(!secondPass&&mathMin(axis.min,pick(axis.dataMin,axis.min))<=0){ // #978
	error(10,1); // Can't plot negative values on log axis
	} // The correctFloat cures #934, float errors on full tens. But it
	// was too aggressive for #4360 because of conversion back to lin,
	// therefore use precision 15.
	axis.min=correctFloat(log2lin(axis.min),15);axis.max=correctFloat(log2lin(axis.max),15);} // handle zoomed range
	if(axis.range&&defined(axis.max)){axis.userMin=axis.min=hardMin=mathMax(axis.min,axis.minFromRange()); // #618
	axis.userMax=hardMax=axis.max;axis.range=null; // don't use it when running setExtremes
	} // Hook for adjusting this.min and this.max. Used by bubble series.
	if(axis.beforePadding){axis.beforePadding();} // adjust min and max for the minimum range
	axis.adjustForMinRange(); // Pad the values to get clear of the chart's edges. To avoid tickInterval taking the padding
	// into account, we do this after computing tick interval (#1337).
	if(!categories&&!axis.axisPointRange&&!axis.usePercentage&&!isLinked&&defined(axis.min)&&defined(axis.max)){length=axis.max-axis.min;if(length){if(!defined(hardMin)&&minPadding){axis.min-=length*minPadding;}if(!defined(hardMax)&&maxPadding){axis.max+=length*maxPadding;}}} // Stay within floor and ceiling
	if(isNumber(options.floor)){axis.min=mathMax(axis.min,options.floor);}if(isNumber(options.ceiling)){axis.max=mathMin(axis.max,options.ceiling);} // When the threshold is soft, adjust the extreme value only if 
	// the data extreme and the padded extreme land on either side of the threshold. For example,
	// a series of [0, 1, 2, 3] would make the yAxis add a tick for -1 because of the
	// default minPadding and startOnTick options. This is prevented by the softThreshold
	// option.
	if(softThreshold&&defined(axis.dataMin)){threshold=threshold||0;if(!defined(hardMin)&&axis.min<threshold&&axis.dataMin>=threshold){axis.min=threshold;}else if(!defined(hardMax)&&axis.max>threshold&&axis.dataMax<=threshold){axis.max=threshold;}} // get tickInterval
	if(axis.min===axis.max||axis.min===undefined||axis.max===undefined){axis.tickInterval=1;}else if(isLinked&&!tickIntervalOption&&tickPixelIntervalOption===axis.linkedParent.options.tickPixelInterval){axis.tickInterval=tickIntervalOption=axis.linkedParent.tickInterval;}else {axis.tickInterval=pick(tickIntervalOption,this.tickAmount?(axis.max-axis.min)/mathMax(this.tickAmount-1,1):undefined,categories? // for categoried axis, 1 is default, for linear axis use tickPix
	1: // don't let it be more than the data range
	(axis.max-axis.min)*tickPixelIntervalOption/mathMax(axis.len,tickPixelIntervalOption));} // Now we're finished detecting min and max, crop and group series data. This
	// is in turn needed in order to find tick positions in ordinal axes.
	if(isXAxis&&!secondPass){each(axis.series,function(series){series.processData(axis.min!==axis.oldMin||axis.max!==axis.oldMax);});} // set the translation factor used in translate function
	axis.setAxisTranslation(true); // hook for ordinal axes and radial axes
	if(axis.beforeSetTickPositions){axis.beforeSetTickPositions();} // hook for extensions, used in Highstock ordinal axes
	if(axis.postProcessTickInterval){axis.tickInterval=axis.postProcessTickInterval(axis.tickInterval);} // In column-like charts, don't cramp in more ticks than there are points (#1943)
	if(axis.pointRange){axis.tickInterval=mathMax(axis.pointRange,axis.tickInterval);} // Before normalizing the tick interval, handle minimum tick interval. This applies only if tickInterval is not defined.
	minTickInterval=pick(options.minTickInterval,axis.isDatetimeAxis&&axis.closestPointRange);if(!tickIntervalOption&&axis.tickInterval<minTickInterval){axis.tickInterval=minTickInterval;} // for linear axes, get magnitude and normalize the interval
	if(!isDatetimeAxis&&!isLog&&!tickIntervalOption){axis.tickInterval=normalizeTickInterval(axis.tickInterval,null,getMagnitude(axis.tickInterval), // If the tick interval is between 0.5 and 5 and the axis max is in the order of
	// thousands, chances are we are dealing with years. Don't allow decimals. #3363.
	pick(options.allowDecimals,!(axis.tickInterval>0.5&&axis.tickInterval<5&&axis.max>1000&&axis.max<9999)),!!this.tickAmount);} // Prevent ticks from getting so close that we can't draw the labels
	if(!this.tickAmount&&this.len){ // Color axis with disabled legend has no length
	axis.tickInterval=axis.unsquish();}this.setTickPositions();}, /**
		 * Now we have computed the normalized tickInterval, get the tick positions
		 */setTickPositions:function setTickPositions(){var options=this.options,tickPositions,tickPositionsOption=options.tickPositions,tickPositioner=options.tickPositioner,startOnTick=options.startOnTick,endOnTick=options.endOnTick,single; // Set the tickmarkOffset
	this.tickmarkOffset=this.categories&&options.tickmarkPlacement==='between'&&this.tickInterval===1?0.5:0; // #3202
	// get minorTickInterval
	this.minorTickInterval=options.minorTickInterval==='auto'&&this.tickInterval?this.tickInterval/5:options.minorTickInterval; // Find the tick positions
	this.tickPositions=tickPositions=tickPositionsOption&&tickPositionsOption.slice(); // Work on a copy (#1565)
	if(!tickPositions){if(this.isDatetimeAxis){tickPositions=this.getTimeTicks(this.normalizeTimeTickInterval(this.tickInterval,options.units),this.min,this.max,options.startOfWeek,this.ordinalPositions,this.closestPointRange,true);}else if(this.isLog){tickPositions=this.getLogTickPositions(this.tickInterval,this.min,this.max);}else {tickPositions=this.getLinearTickPositions(this.tickInterval,this.min,this.max);} // Too dense ticks, keep only the first and last (#4477)
	if(tickPositions.length>this.len){tickPositions=[tickPositions[0],tickPositions.pop()];}this.tickPositions=tickPositions; // Run the tick positioner callback, that allows modifying auto tick positions.
	if(tickPositioner){tickPositioner=tickPositioner.apply(this,[this.min,this.max]);if(tickPositioner){this.tickPositions=tickPositions=tickPositioner;}}}if(!this.isLinked){ // reset min/max or remove extremes based on start/end on tick
	this.trimTicks(tickPositions,startOnTick,endOnTick); // When there is only one point, or all points have the same value on this axis, then min
	// and max are equal and tickPositions.length is 0 or 1. In this case, add some padding
	// in order to center the point, but leave it with one tick. #1337.
	if(this.min===this.max&&defined(this.min)&&!this.tickAmount){ // Substract half a unit (#2619, #2846, #2515, #3390)
	single=true;this.min-=0.5;this.max+=0.5;}this.single=single;if(!tickPositionsOption&&!tickPositioner){this.adjustTickAmount();}}}, /**
		 * Handle startOnTick and endOnTick by either adapting to padding min/max or rounded min/max
		 */trimTicks:function trimTicks(tickPositions,startOnTick,endOnTick){var roundedMin=tickPositions[0],roundedMax=tickPositions[tickPositions.length-1],minPointOffset=this.minPointOffset||0;if(startOnTick){this.min=roundedMin;}else if(this.min-minPointOffset>roundedMin){tickPositions.shift();}if(endOnTick){this.max=roundedMax;}else if(this.max+minPointOffset<roundedMax){tickPositions.pop();} // If no tick are left, set one tick in the middle (#3195) 
	if(tickPositions.length===0&&defined(roundedMin)){tickPositions.push((roundedMax+roundedMin)/2);}}, /**
		 * Set the max ticks of either the x and y axis collection
		 */getTickAmount:function getTickAmount(){var others={}, // Whether there is another axis to pair with this one
	hasOther,options=this.options,tickAmount=options.tickAmount,tickPixelInterval=options.tickPixelInterval;if(!defined(options.tickInterval)&&this.len<tickPixelInterval&&!this.isRadial&&!this.isLog&&options.startOnTick&&options.endOnTick){tickAmount=2;}if(!tickAmount&&this.chart.options.chart.alignTicks!==false&&options.alignTicks!==false){ // Check if there are multiple axes in the same pane
	each(this.chart[this.coll],function(axis){var options=axis.options,horiz=axis.horiz,key=[horiz?options.left:options.top,horiz?options.width:options.height,options.pane].join(',');if(axis.series.length){ // #4442
	if(others[key]){hasOther=true; // #4201
	}else {others[key]=1;}}});if(hasOther){ // Add 1 because 4 tick intervals require 5 ticks (including first and last)
	tickAmount=mathCeil(this.len/tickPixelInterval)+1;}} // For tick amounts of 2 and 3, compute five ticks and remove the intermediate ones. This
	// prevents the axis from adding ticks that are too far away from the data extremes.
	if(tickAmount<4){this.finalTickAmt=tickAmount;tickAmount=5;}this.tickAmount=tickAmount;}, /**
		 * When using multiple axes, adjust the number of ticks to match the highest
		 * number of ticks in that group
		 */adjustTickAmount:function adjustTickAmount(){var tickInterval=this.tickInterval,tickPositions=this.tickPositions,tickAmount=this.tickAmount,finalTickAmt=this.finalTickAmt,currentTickAmount=tickPositions&&tickPositions.length,i,len;if(currentTickAmount<tickAmount){ // TODO: Check #3411
	while(tickPositions.length<tickAmount){tickPositions.push(correctFloat(tickPositions[tickPositions.length-1]+tickInterval));}this.transA*=(currentTickAmount-1)/(tickAmount-1);this.max=tickPositions[tickPositions.length-1]; // We have too many ticks, run second pass to try to reduce ticks
	}else if(currentTickAmount>tickAmount){this.tickInterval*=2;this.setTickPositions();} // The finalTickAmt property is set in getTickAmount
	if(defined(finalTickAmt)){i=len=tickPositions.length;while(i--){if(finalTickAmt===3&&i%2===1|| // Remove every other tick
	finalTickAmt<=2&&i>0&&i<len-1 // Remove all but first and last
	){tickPositions.splice(i,1);}}this.finalTickAmt=UNDEFINED;}}, /**
		 * Set the scale based on data min and max, user set min and max or options
		 *
		 */setScale:function setScale(){var axis=this,isDirtyData,isDirtyAxisLength;axis.oldMin=axis.min;axis.oldMax=axis.max;axis.oldAxisLength=axis.len; // set the new axisLength
	axis.setAxisSize(); //axisLength = horiz ? axisWidth : axisHeight;
	isDirtyAxisLength=axis.len!==axis.oldAxisLength; // is there new data?
	each(axis.series,function(series){if(series.isDirtyData||series.isDirty||series.xAxis.isDirty){ // when x axis is dirty, we need new data extremes for y as well
	isDirtyData=true;}}); // do we really need to go through all this?
	if(isDirtyAxisLength||isDirtyData||axis.isLinked||axis.forceRedraw||axis.userMin!==axis.oldUserMin||axis.userMax!==axis.oldUserMax){if(axis.resetStacks){axis.resetStacks();}axis.forceRedraw=false; // get data extremes if needed
	axis.getSeriesExtremes(); // get fixed positions based on tickInterval
	axis.setTickInterval(); // record old values to decide whether a rescale is necessary later on (#540)
	axis.oldUserMin=axis.userMin;axis.oldUserMax=axis.userMax; // Mark as dirty if it is not already set to dirty and extremes have changed. #595.
	if(!axis.isDirty){axis.isDirty=isDirtyAxisLength||axis.min!==axis.oldMin||axis.max!==axis.oldMax;}}else if(axis.cleanStacks){axis.cleanStacks();}}, /**
		 * Set the extremes and optionally redraw
		 * @param {Number} newMin
		 * @param {Number} newMax
		 * @param {Boolean} redraw
		 * @param {Boolean|Object} animation Whether to apply animation, and optionally animation
		 *    configuration
		 * @param {Object} eventArguments
		 *
		 */setExtremes:function setExtremes(newMin,newMax,redraw,animation,eventArguments){var axis=this,chart=axis.chart;redraw=pick(redraw,true); // defaults to true
	each(axis.series,function(serie){delete serie.kdTree;}); // Extend the arguments with min and max
	eventArguments=extend(eventArguments,{min:newMin,max:newMax}); // Fire the event
	fireEvent(axis,'setExtremes',eventArguments,function(){ // the default event handler
	axis.userMin=newMin;axis.userMax=newMax;axis.eventArgs=eventArguments;if(redraw){chart.redraw(animation);}});}, /**
		 * Overridable method for zooming chart. Pulled out in a separate method to allow overriding
		 * in stock charts.
		 */zoom:function zoom(newMin,newMax){var dataMin=this.dataMin,dataMax=this.dataMax,options=this.options,min=mathMin(dataMin,pick(options.min,dataMin)),max=mathMax(dataMax,pick(options.max,dataMax)); // Prevent pinch zooming out of range. Check for defined is for #1946. #1734.
	if(!this.allowZoomOutside){if(defined(dataMin)&&newMin<=min){newMin=min;}if(defined(dataMax)&&newMax>=max){newMax=max;}} // In full view, displaying the reset zoom button is not required
	this.displayBtn=newMin!==UNDEFINED||newMax!==UNDEFINED; // Do it
	this.setExtremes(newMin,newMax,false,UNDEFINED,{trigger:'zoom'});return true;}, /**
		 * Update the axis metrics
		 */setAxisSize:function setAxisSize(){var chart=this.chart,options=this.options,offsetLeft=options.offsetLeft||0,offsetRight=options.offsetRight||0,horiz=this.horiz,width=pick(options.width,chart.plotWidth-offsetLeft+offsetRight),height=pick(options.height,chart.plotHeight),top=pick(options.top,chart.plotTop),left=pick(options.left,chart.plotLeft+offsetLeft),percentRegex=/%$/; // Check for percentage based input values
	if(percentRegex.test(height)){height=parseFloat(height)/100*chart.plotHeight;}if(percentRegex.test(top)){top=parseFloat(top)/100*chart.plotHeight+chart.plotTop;} // Expose basic values to use in Series object and navigator
	this.left=left;this.top=top;this.width=width;this.height=height;this.bottom=chart.chartHeight-height-top;this.right=chart.chartWidth-width-left; // Direction agnostic properties
	this.len=mathMax(horiz?width:height,0); // mathMax fixes #905
	this.pos=horiz?left:top; // distance from SVG origin
	}, /**
		 * Get the actual axis extremes
		 */getExtremes:function getExtremes(){var axis=this,isLog=axis.isLog;return {min:isLog?correctFloat(lin2log(axis.min)):axis.min,max:isLog?correctFloat(lin2log(axis.max)):axis.max,dataMin:axis.dataMin,dataMax:axis.dataMax,userMin:axis.userMin,userMax:axis.userMax};}, /**
		 * Get the zero plane either based on zero or on the min or max value.
		 * Used in bar and area plots
		 */getThreshold:function getThreshold(threshold){var axis=this,isLog=axis.isLog,realMin=isLog?lin2log(axis.min):axis.min,realMax=isLog?lin2log(axis.max):axis.max; // With a threshold of null, make the columns/areas rise from the top or bottom 
	// depending on the value, assuming an actual threshold of 0 (#4233).
	if(threshold===null){threshold=realMax<0?realMax:realMin;}else if(realMin>threshold){threshold=realMin;}else if(realMax<threshold){threshold=realMax;}return axis.translate(threshold,0,1,0,1);}, /**
		 * Compute auto alignment for the axis label based on which side the axis is on
		 * and the given rotation for the label
		 */autoLabelAlign:function autoLabelAlign(rotation){var ret,angle=(pick(rotation,0)-this.side*90+720)%360;if(angle>15&&angle<165){ret='right';}else if(angle>195&&angle<345){ret='left';}else {ret='center';}return ret;}, /**
		 * Prevent the ticks from getting so close we can't draw the labels. On a horizontal
		 * axis, this is handled by rotating the labels, removing ticks and adding ellipsis. 
		 * On a vertical axis remove ticks and add ellipsis.
		 */unsquish:function unsquish(){var chart=this.chart,ticks=this.ticks,labelOptions=this.options.labels,horiz=this.horiz,tickInterval=this.tickInterval,newTickInterval=tickInterval,slotSize=this.len/(((this.categories?1:0)+this.max-this.min)/tickInterval),rotation,rotationOption=labelOptions.rotation,labelMetrics=chart.renderer.fontMetrics(labelOptions.style.fontSize,ticks[0]&&ticks[0].label),step,bestScore=Number.MAX_VALUE,autoRotation, // Return the multiple of tickInterval that is needed to avoid collision
	getStep=function getStep(spaceNeeded){var step=spaceNeeded/(slotSize||1);step=step>1?mathCeil(step):1;return step*tickInterval;};if(horiz){autoRotation=!labelOptions.staggerLines&&!labelOptions.step&&( // #3971
	defined(rotationOption)?[rotationOption]:slotSize<pick(labelOptions.autoRotationLimit,80)&&labelOptions.autoRotation);if(autoRotation){ // Loop over the given autoRotation options, and determine which gives the best score. The 
	// best score is that with the lowest number of steps and a rotation closest to horizontal.
	each(autoRotation,function(rot){var score;if(rot===rotationOption||rot&&rot>=-90&&rot<=90){ // #3891
	step=getStep(mathAbs(labelMetrics.h/mathSin(deg2rad*rot)));score=step+mathAbs(rot/360);if(score<bestScore){bestScore=score;rotation=rot;newTickInterval=step;}}});}}else if(!labelOptions.step){ // #4411
	newTickInterval=getStep(labelMetrics.h);}this.autoRotation=autoRotation;this.labelRotation=pick(rotation,rotationOption);return newTickInterval;},renderUnsquish:function renderUnsquish(){var chart=this.chart,renderer=chart.renderer,tickPositions=this.tickPositions,ticks=this.ticks,labelOptions=this.options.labels,horiz=this.horiz,margin=chart.margin,slotCount=this.categories?tickPositions.length:tickPositions.length-1,slotWidth=this.slotWidth=horiz&&!labelOptions.step&&!labelOptions.rotation&&(this.staggerLines||1)*chart.plotWidth/slotCount||!horiz&&(margin[3]&&margin[3]-chart.spacing[3]||chart.chartWidth*0.33), // #1580, #1931,
	innerWidth=mathMax(1,mathRound(slotWidth-2*(labelOptions.padding||5))),attr={},labelMetrics=renderer.fontMetrics(labelOptions.style.fontSize,ticks[0]&&ticks[0].label),textOverflowOption=labelOptions.style.textOverflow,css,labelLength=0,label,i,pos; // Set rotation option unless it is "auto", like in gauges
	if(!isString(labelOptions.rotation)){attr.rotation=labelOptions.rotation||0; // #4443
	} // Handle auto rotation on horizontal axis
	if(this.autoRotation){ // Get the longest label length
	each(tickPositions,function(tick){tick=ticks[tick];if(tick&&tick.labelLength>labelLength){labelLength=tick.labelLength;}}); // Apply rotation only if the label is too wide for the slot, and
	// the label is wider than its height.
	if(labelLength>innerWidth&&labelLength>labelMetrics.h){attr.rotation=this.labelRotation;}else {this.labelRotation=0;} // Handle word-wrap or ellipsis on vertical axis
	}else if(slotWidth){ // For word-wrap or ellipsis
	css={width:innerWidth+PX};if(!textOverflowOption){css.textOverflow='clip'; // On vertical axis, only allow word wrap if there is room for more lines.
	i=tickPositions.length;while(!horiz&&i--){pos=tickPositions[i];label=ticks[pos].label;if(label){ // Reset ellipsis in order to get the correct bounding box (#4070)
	if(label.styles.textOverflow==='ellipsis'){label.css({textOverflow:'clip'});}if(label.getBBox().height>this.len/tickPositions.length-(labelMetrics.h-labelMetrics.f)){label.specCss={textOverflow:'ellipsis'};}}}}} // Add ellipsis if the label length is significantly longer than ideal
	if(attr.rotation){css={width:(labelLength>chart.chartHeight*0.5?chart.chartHeight*0.33:chart.chartHeight)+PX};if(!textOverflowOption){css.textOverflow='ellipsis';}} // Set the explicit or automatic label alignment
	this.labelAlign=attr.align=labelOptions.align||this.autoLabelAlign(this.labelRotation); // Apply general and specific CSS
	each(tickPositions,function(pos){var tick=ticks[pos],label=tick&&tick.label;if(label){label.attr(attr); // This needs to go before the CSS in old IE (#4502)
	if(css){label.css(merge(css,label.specCss));}delete label.specCss;tick.rotation=attr.rotation;}}); // TODO: Why not part of getLabelPosition?
	this.tickRotCorr=renderer.rotCorr(labelMetrics.b,this.labelRotation||0,this.side===2);}, /**
		 * Return true if the axis has associated data
		 */hasData:function hasData(){return this.hasVisibleSeries||defined(this.min)&&defined(this.max)&&!!this.tickPositions;}, /**
		 * Render the tick labels to a preliminary position to get their sizes
		 */getOffset:function getOffset(){var axis=this,chart=axis.chart,renderer=chart.renderer,options=axis.options,tickPositions=axis.tickPositions,ticks=axis.ticks,horiz=axis.horiz,side=axis.side,invertedSide=chart.inverted?[1,0,3,2][side]:side,hasData,showAxis,titleOffset=0,titleOffsetOption,titleMargin=0,axisTitleOptions=options.title,labelOptions=options.labels,labelOffset=0, // reset
	labelOffsetPadded,axisOffset=chart.axisOffset,clipOffset=chart.clipOffset,clip,directionFactor=[-1,1,1,-1][side],n,axisParent=axis.axisParent, // Used in color axis
	lineHeightCorrection; // For reuse in Axis.render
	hasData=axis.hasData();axis.showAxis=showAxis=hasData||pick(options.showEmpty,true); // Set/reset staggerLines
	axis.staggerLines=axis.horiz&&labelOptions.staggerLines; // Create the axisGroup and gridGroup elements on first iteration
	if(!axis.axisGroup){axis.gridGroup=renderer.g('grid').attr({zIndex:options.gridZIndex||1}).add(axisParent);axis.axisGroup=renderer.g('axis').attr({zIndex:options.zIndex||2}).add(axisParent);axis.labelGroup=renderer.g('axis-labels').attr({zIndex:labelOptions.zIndex||7}).addClass(PREFIX+axis.coll.toLowerCase()+'-labels').add(axisParent);}if(hasData||axis.isLinked){ // Generate ticks
	each(tickPositions,function(pos){if(!ticks[pos]){ticks[pos]=new Tick(axis,pos);}else {ticks[pos].addLabel(); // update labels depending on tick interval
	}});axis.renderUnsquish();each(tickPositions,function(pos){ // left side must be align: right and right side must have align: left for labels
	if(side===0||side===2||{1:'left',3:'right'}[side]===axis.labelAlign){ // get the highest offset
	labelOffset=mathMax(ticks[pos].getLabelSize(),labelOffset);}});if(axis.staggerLines){labelOffset*=axis.staggerLines;axis.labelOffset=labelOffset;}}else { // doesn't have data
	for(n in ticks){ticks[n].destroy();delete ticks[n];}}if(axisTitleOptions&&axisTitleOptions.text&&axisTitleOptions.enabled!==false){if(!axis.axisTitle){axis.axisTitle=renderer.text(axisTitleOptions.text,0,0,axisTitleOptions.useHTML).attr({zIndex:7,rotation:axisTitleOptions.rotation||0,align:axisTitleOptions.textAlign||{low:'left',middle:'center',high:'right'}[axisTitleOptions.align]}).addClass(PREFIX+this.coll.toLowerCase()+'-title').css(axisTitleOptions.style).add(axis.axisGroup);axis.axisTitle.isNew=true;}if(showAxis){titleOffset=axis.axisTitle.getBBox()[horiz?'height':'width'];titleOffsetOption=axisTitleOptions.offset;titleMargin=defined(titleOffsetOption)?0:pick(axisTitleOptions.margin,horiz?5:10);} // hide or show the title depending on whether showEmpty is set
	axis.axisTitle[showAxis?'show':'hide']();} // handle automatic or user set offset
	axis.offset=directionFactor*pick(options.offset,axisOffset[side]);axis.tickRotCorr=axis.tickRotCorr||{x:0,y:0}; // polar
	lineHeightCorrection=side===2?axis.tickRotCorr.y:0;labelOffsetPadded=labelOffset+titleMargin+(labelOffset&&directionFactor*(horiz?pick(labelOptions.y,axis.tickRotCorr.y+8):labelOptions.x)-lineHeightCorrection);axis.axisTitleMargin=pick(titleOffsetOption,labelOffsetPadded);axisOffset[side]=mathMax(axisOffset[side],axis.axisTitleMargin+titleOffset+directionFactor*axis.offset,labelOffsetPadded // #3027
	); // Decide the clipping needed to keep the graph inside the plot area and axis lines
	clip=options.offset?0:mathFloor(options.lineWidth/2)*2; // #4308, #4371
	clipOffset[invertedSide]=mathMax(clipOffset[invertedSide],clip);}, /**
		 * Get the path for the axis line
		 */getLinePath:function getLinePath(lineWidth){var chart=this.chart,opposite=this.opposite,offset=this.offset,horiz=this.horiz,lineLeft=this.left+(opposite?this.width:0)+offset,lineTop=chart.chartHeight-this.bottom-(opposite?this.height:0)+offset;if(opposite){lineWidth*=-1; // crispify the other way - #1480, #1687
	}return chart.renderer.crispLine([M,horiz?this.left:lineLeft,horiz?lineTop:this.top,L,horiz?chart.chartWidth-this.right:lineLeft,horiz?lineTop:chart.chartHeight-this.bottom],lineWidth);}, /**
		 * Position the title
		 */getTitlePosition:function getTitlePosition(){ // compute anchor points for each of the title align options
	var horiz=this.horiz,axisLeft=this.left,axisTop=this.top,axisLength=this.len,axisTitleOptions=this.options.title,margin=horiz?axisLeft:axisTop,opposite=this.opposite,offset=this.offset,xOption=axisTitleOptions.x||0,yOption=axisTitleOptions.y||0,fontSize=pInt(axisTitleOptions.style.fontSize||12), // the position in the length direction of the axis
	alongAxis={low:margin+(horiz?0:axisLength),middle:margin+axisLength/2,high:margin+(horiz?axisLength:0)}[axisTitleOptions.align], // the position in the perpendicular direction of the axis
	offAxis=(horiz?axisTop+this.height:axisLeft)+(horiz?1:-1)*( // horizontal axis reverses the margin
	opposite?-1:1)* // so does opposite axes
	this.axisTitleMargin+(this.side===2?fontSize:0);return {x:horiz?alongAxis+xOption:offAxis+(opposite?this.width:0)+offset+xOption,y:horiz?offAxis+yOption-(opposite?this.height:0)+offset:alongAxis+yOption};}, /**
		 * Render the axis
		 */render:function render(){var axis=this,chart=axis.chart,renderer=chart.renderer,options=axis.options,isLog=axis.isLog,isLinked=axis.isLinked,tickPositions=axis.tickPositions,axisTitle=axis.axisTitle,ticks=axis.ticks,minorTicks=axis.minorTicks,alternateBands=axis.alternateBands,stackLabelOptions=options.stackLabels,alternateGridColor=options.alternateGridColor,tickmarkOffset=axis.tickmarkOffset,lineWidth=options.lineWidth,linePath,hasRendered=chart.hasRendered,slideInTicks=hasRendered&&defined(axis.oldMin)&&!isNaN(axis.oldMin),showAxis=axis.showAxis,globalAnimation=renderer.globalAnimation,from,to; // Reset
	axis.labelEdge.length=0; //axis.justifyToPlot = overflow === 'justify';
	axis.overlap=false; // Mark all elements inActive before we go over and mark the active ones
	each([ticks,minorTicks,alternateBands],function(coll){var pos;for(pos in coll){coll[pos].isActive=false;}}); // If the series has data draw the ticks. Else only the line and title
	if(axis.hasData()||isLinked){ // minor ticks
	if(axis.minorTickInterval&&!axis.categories){each(axis.getMinorTickPositions(),function(pos){if(!minorTicks[pos]){minorTicks[pos]=new Tick(axis,pos,'minor');} // render new ticks in old position
	if(slideInTicks&&minorTicks[pos].isNew){minorTicks[pos].render(null,true);}minorTicks[pos].render(null,false,1);});} // Major ticks. Pull out the first item and render it last so that
	// we can get the position of the neighbour label. #808.
	if(tickPositions.length){ // #1300
	each(tickPositions,function(pos,i){ // linked axes need an extra check to find out if
	if(!isLinked||pos>=axis.min&&pos<=axis.max){if(!ticks[pos]){ticks[pos]=new Tick(axis,pos);} // render new ticks in old position
	if(slideInTicks&&ticks[pos].isNew){ticks[pos].render(i,true,0.1);}ticks[pos].render(i);}}); // In a categorized axis, the tick marks are displayed between labels. So
	// we need to add a tick mark and grid line at the left edge of the X axis.
	if(tickmarkOffset&&(axis.min===0||axis.single)){if(!ticks[-1]){ticks[-1]=new Tick(axis,-1,null,true);}ticks[-1].render(-1);}} // alternate grid color
	if(alternateGridColor){each(tickPositions,function(pos,i){to=tickPositions[i+1]!==UNDEFINED?tickPositions[i+1]+tickmarkOffset:axis.max-tickmarkOffset;if(i%2===0&&pos<axis.max&&to<=axis.max-tickmarkOffset){ // #2248
	if(!alternateBands[pos]){alternateBands[pos]=new Highcharts.PlotLineOrBand(axis);}from=pos+tickmarkOffset; // #949
	alternateBands[pos].options={from:isLog?lin2log(from):from,to:isLog?lin2log(to):to,color:alternateGridColor};alternateBands[pos].render();alternateBands[pos].isActive=true;}});} // custom plot lines and bands
	if(!axis._addedPlotLB){ // only first time
	each((options.plotLines||[]).concat(options.plotBands||[]),function(plotLineOptions){axis.addPlotBandOrLine(plotLineOptions);});axis._addedPlotLB=true;}} // end if hasData
	// Remove inactive ticks
	each([ticks,minorTicks,alternateBands],function(coll){var pos,i,forDestruction=[],delay=globalAnimation?globalAnimation.duration||500:0,destroyInactiveItems=function destroyInactiveItems(){i=forDestruction.length;while(i--){ // When resizing rapidly, the same items may be destroyed in different timeouts,
	// or the may be reactivated
	if(coll[forDestruction[i]]&&!coll[forDestruction[i]].isActive){coll[forDestruction[i]].destroy();delete coll[forDestruction[i]];}}};for(pos in coll){if(!coll[pos].isActive){ // Render to zero opacity
	coll[pos].render(pos,false,0);coll[pos].isActive=false;forDestruction.push(pos);}} // When the objects are finished fading out, destroy them
	if(coll===alternateBands||!chart.hasRendered||!delay){destroyInactiveItems();}else if(delay){setTimeout(destroyInactiveItems,delay);}}); // Static items. As the axis group is cleared on subsequent calls
	// to render, these items are added outside the group.
	// axis line
	if(lineWidth){linePath=axis.getLinePath(lineWidth);if(!axis.axisLine){axis.axisLine=renderer.path(linePath).attr({stroke:options.lineColor,'stroke-width':lineWidth,zIndex:7}).add(axis.axisGroup);}else {axis.axisLine.animate({d:linePath});} // show or hide the line depending on options.showEmpty
	axis.axisLine[showAxis?'show':'hide']();}if(axisTitle&&showAxis){axisTitle[axisTitle.isNew?'attr':'animate'](axis.getTitlePosition());axisTitle.isNew=false;} // Stacked totals:
	if(stackLabelOptions&&stackLabelOptions.enabled){axis.renderStackTotals();} // End stacked totals
	axis.isDirty=false;}, /**
		 * Redraw the axis to reflect changes in the data or axis extremes
		 */redraw:function redraw(){if(this.visible){ // render the axis
	this.render(); // move plot lines and bands
	each(this.plotLinesAndBands,function(plotLine){plotLine.render();});} // mark associated series as dirty and ready for redraw
	each(this.series,function(series){series.isDirty=true;});}, /**
		 * Destroys an Axis instance.
		 */destroy:function destroy(keepEvents){var axis=this,stacks=axis.stacks,stackKey,plotLinesAndBands=axis.plotLinesAndBands,i; // Remove the events
	if(!keepEvents){removeEvent(axis);} // Destroy each stack total
	for(stackKey in stacks){destroyObjectProperties(stacks[stackKey]);stacks[stackKey]=null;} // Destroy collections
	each([axis.ticks,axis.minorTicks,axis.alternateBands],function(coll){destroyObjectProperties(coll);});i=plotLinesAndBands.length;while(i--){ // #1975
	plotLinesAndBands[i].destroy();} // Destroy local variables
	each(['stackTotalGroup','axisLine','axisTitle','axisGroup','cross','gridGroup','labelGroup'],function(prop){if(axis[prop]){axis[prop]=axis[prop].destroy();}}); // Destroy crosshair
	if(this.cross){this.cross.destroy();}}, /**
		 * Draw the crosshair
		 */drawCrosshair:function drawCrosshair(e,point){ // docs: Missing docs for Axis.crosshair. Also for properties.
	var path,options=this.crosshair,animation=options.animation,pos,attribs,categorized;if( // Disabled in options
	!this.crosshair|| // Snap
	(defined(point)||!pick(this.crosshair.snap,true))===false|| // Not on this axis (#4095, #2888)
	point&&point.series&&point.series[this.coll]!==this){this.hideCrosshair();}else { // Get the path
	if(!pick(options.snap,true)){pos=this.horiz?e.chartX-this.pos:this.len-e.chartY+this.pos;}else if(defined(point)){ /*jslint eqeq: true*/pos=this.isXAxis?point.plotX:this.len-point.plotY; // #3834
	/*jslint eqeq: false*/}if(this.isRadial){path=this.getPlotLinePath(this.isXAxis?point.x:pick(point.stackY,point.y))||null; // #3189
	}else {path=this.getPlotLinePath(null,null,null,null,pos)||null; // #3189
	}if(path===null){this.hideCrosshair();return;} // Draw the cross
	if(this.cross){this.cross.attr({visibility:VISIBLE})[animation?'animate':'attr']({d:path},animation);}else {categorized=this.categories&&!this.isRadial;attribs={'stroke-width':options.width||(categorized?this.transA:1),stroke:options.color||(categorized?'rgba(155,200,255,0.2)':'#C0C0C0'),zIndex:options.zIndex||2};if(options.dashStyle){attribs.dashstyle=options.dashStyle;}this.cross=this.chart.renderer.path(path).attr(attribs).add();}}}, /**
		 *	Hide the crosshair.
		 */hideCrosshair:function hideCrosshair(){if(this.cross){this.cross.hide();}}}; // end Axis
	extend(Axis.prototype,AxisPlotLineOrBandExtension); /**
	 * Set the tick positions to a time unit that makes sense, for example
	 * on the first of each month or on every Monday. Return an array
	 * with the time positions. Used in datetime axes as well as for grouping
	 * data on a datetime axis.
	 *
	 * @param {Object} normalizedInterval The interval in axis values (ms) and the count
	 * @param {Number} min The minimum in axis values
	 * @param {Number} max The maximum in axis values
	 * @param {Number} startOfWeek
	 */Axis.prototype.getTimeTicks=function(normalizedInterval,min,max,startOfWeek){var tickPositions=[],i,higherRanks={},useUTC=defaultOptions.global.useUTC,minYear, // used in months and years as a basis for Date.UTC()
	minDate=new Date(min-getTZOffset(min)),interval=normalizedInterval.unitRange,count=normalizedInterval.count;if(defined(min)){ // #1300
	minDate[setMilliseconds](interval>=timeUnits.second?0: // #3935
	count*mathFloor(minDate.getMilliseconds()/count)); // #3652, #3654
	if(interval>=timeUnits.second){ // second
	minDate[setSeconds](interval>=timeUnits.minute?0: // #3935
	count*mathFloor(minDate.getSeconds()/count));}if(interval>=timeUnits.minute){ // minute
	minDate[setMinutes](interval>=timeUnits.hour?0:count*mathFloor(minDate[getMinutes]()/count));}if(interval>=timeUnits.hour){ // hour
	minDate[setHours](interval>=timeUnits.day?0:count*mathFloor(minDate[getHours]()/count));}if(interval>=timeUnits.day){ // day
	minDate[setDate](interval>=timeUnits.month?1:count*mathFloor(minDate[getDate]()/count));}if(interval>=timeUnits.month){ // month
	minDate[setMonth](interval>=timeUnits.year?0:count*mathFloor(minDate[getMonth]()/count));minYear=minDate[getFullYear]();}if(interval>=timeUnits.year){ // year
	minYear-=minYear%count;minDate[setFullYear](minYear);} // week is a special case that runs outside the hierarchy
	if(interval===timeUnits.week){ // get start of current week, independent of count
	minDate[setDate](minDate[getDate]()-minDate[getDay]()+pick(startOfWeek,1));} // get tick positions
	i=1;if(timezoneOffset||getTimezoneOffset){minDate=minDate.getTime();minDate=new Date(minDate+getTZOffset(minDate));}minYear=minDate[getFullYear]();var time=minDate.getTime(),minMonth=minDate[getMonth](),minDateDate=minDate[getDate](),localTimezoneOffset=(timeUnits.day+(useUTC?getTZOffset(minDate):minDate.getTimezoneOffset()*60*1000))%timeUnits.day; // #950, #3359
	// iterate and add tick positions at appropriate values
	while(time<max){tickPositions.push(time); // if the interval is years, use Date.UTC to increase years
	if(interval===timeUnits.year){time=makeTime(minYear+i*count,0); // if the interval is months, use Date.UTC to increase months
	}else if(interval===timeUnits.month){time=makeTime(minYear,minMonth+i*count); // if we're using global time, the interval is not fixed as it jumps
	// one hour at the DST crossover
	}else if(!useUTC&&(interval===timeUnits.day||interval===timeUnits.week)){time=makeTime(minYear,minMonth,minDateDate+i*count*(interval===timeUnits.day?1:7)); // else, the interval is fixed and we use simple addition
	}else {time+=interval*count;}i++;} // push the last time
	tickPositions.push(time); // mark new days if the time is dividible by day (#1649, #1760)
	each(grep(tickPositions,function(time){return interval<=timeUnits.hour&&time%timeUnits.day===localTimezoneOffset;}),function(time){higherRanks[time]='day';});} // record information on the chosen unit - for dynamic label formatter
	tickPositions.info=extend(normalizedInterval,{higherRanks:higherRanks,totalRange:interval*count});return tickPositions;}; /**
	 * Get a normalized tick interval for dates. Returns a configuration object with
	 * unit range (interval), count and name. Used to prepare data for getTimeTicks. 
	 * Previously this logic was part of getTimeTicks, but as getTimeTicks now runs
	 * of segments in stock charts, the normalizing logic was extracted in order to 
	 * prevent it for running over again for each segment having the same interval. 
	 * #662, #697.
	 */Axis.prototype.normalizeTimeTickInterval=function(tickInterval,unitsOption){var units=unitsOption||[['millisecond', // unit name
	[1,2,5,10,20,25,50,100,200,500] // allowed multiples
	],['second',[1,2,5,10,15,30]],['minute',[1,2,5,10,15,30]],['hour',[1,2,3,4,6,8,12]],['day',[1,2]],['week',[1,2]],['month',[1,2,3,4,6]],['year',null]],unit=units[units.length-1], // default unit is years
	interval=timeUnits[unit[0]],multiples=unit[1],count,i; // loop through the units to find the one that best fits the tickInterval
	for(i=0;i<units.length;i++){unit=units[i];interval=timeUnits[unit[0]];multiples=unit[1];if(units[i+1]){ // lessThan is in the middle between the highest multiple and the next unit.
	var lessThan=(interval*multiples[multiples.length-1]+timeUnits[units[i+1][0]])/2; // break and keep the current unit
	if(tickInterval<=lessThan){break;}}} // prevent 2.5 years intervals, though 25, 250 etc. are allowed
	if(interval===timeUnits.year&&tickInterval<5*interval){multiples=[1,2,5];} // get the count
	count=normalizeTickInterval(tickInterval/interval,multiples,unit[0]==='year'?mathMax(getMagnitude(tickInterval/interval),1):1 // #1913, #2360
	);return {unitRange:interval,count:count,unitName:unit[0]};}; /**
	 * Methods defined on the Axis prototype
	 */ /**
	 * Set the tick positions of a logarithmic axis
	 */Axis.prototype.getLogTickPositions=function(interval,min,max,minor){var axis=this,options=axis.options,axisLength=axis.len, // Since we use this method for both major and minor ticks,
	// use a local variable and return the result
	positions=[]; // Reset
	if(!minor){axis._minorAutoInterval=null;} // First case: All ticks fall on whole logarithms: 1, 10, 100 etc.
	if(interval>=0.5){interval=mathRound(interval);positions=axis.getLinearTickPositions(interval,min,max); // Second case: We need intermediary ticks. For example 
	// 1, 2, 4, 6, 8, 10, 20, 40 etc. 
	}else if(interval>=0.08){var roundedMin=mathFloor(min),intermediate,i,j,len,pos,lastPos,break2;if(interval>0.3){intermediate=[1,2,4];}else if(interval>0.15){ // 0.2 equals five minor ticks per 1, 10, 100 etc
	intermediate=[1,2,4,6,8];}else { // 0.1 equals ten minor ticks per 1, 10, 100 etc
	intermediate=[1,2,3,4,5,6,7,8,9];}for(i=roundedMin;i<max+1&&!break2;i++){len=intermediate.length;for(j=0;j<len&&!break2;j++){pos=log2lin(lin2log(i)*intermediate[j]);if(pos>min&&(!minor||lastPos<=max)&&lastPos!==UNDEFINED){ // #1670, lastPos is #3113
	positions.push(lastPos);}if(lastPos>max){break2=true;}lastPos=pos;}} // Third case: We are so deep in between whole logarithmic values that
	// we might as well handle the tick positions like a linear axis. For
	// example 1.01, 1.02, 1.03, 1.04.
	}else {var realMin=lin2log(min),realMax=lin2log(max),tickIntervalOption=options[minor?'minorTickInterval':'tickInterval'],filteredTickIntervalOption=tickIntervalOption==='auto'?null:tickIntervalOption,tickPixelIntervalOption=options.tickPixelInterval/(minor?5:1),totalPixelLength=minor?axisLength/axis.tickPositions.length:axisLength;interval=pick(filteredTickIntervalOption,axis._minorAutoInterval,(realMax-realMin)*tickPixelIntervalOption/(totalPixelLength||1));interval=normalizeTickInterval(interval,null,getMagnitude(interval));positions=map(axis.getLinearTickPositions(interval,realMin,realMax),log2lin);if(!minor){axis._minorAutoInterval=interval/5;}} // Set the axis-level tickInterval variable 
	if(!minor){axis.tickInterval=interval;}return positions;}; /**
	 * The tooltip object
	 * @param {Object} chart The chart instance
	 * @param {Object} options Tooltip options
	 */var Tooltip=Highcharts.Tooltip=function(){this.init.apply(this,arguments);};Tooltip.prototype={init:function init(chart,options){var borderWidth=options.borderWidth,style=options.style,padding=pInt(style.padding); // Save the chart and options
	this.chart=chart;this.options=options; // Keep track of the current series
	//this.currentSeries = UNDEFINED;
	// List of crosshairs
	this.crosshairs=[]; // Current values of x and y when animating
	this.now={x:0,y:0}; // The tooltip is initially hidden
	this.isHidden=true; // create the label		
	this.label=chart.renderer.label('',0,0,options.shape||'callout',null,null,options.useHTML,null,'tooltip').attr({padding:padding,fill:options.backgroundColor,'stroke-width':borderWidth,r:options.borderRadius,zIndex:8}).css(style).css({padding:0}) // Remove it from VML, the padding is applied as an attribute instead (#1117)
	.add().attr({y:-9999}); // #2301, #2657
	// When using canVG the shadow shows up as a gray circle
	// even if the tooltip is hidden.
	if(!useCanVG){this.label.shadow(options.shadow);} // Public property for getting the shared state.
	this.shared=options.shared;}, /**
		 * Destroy the tooltip and its elements.
		 */destroy:function destroy(){ // Destroy and clear local variables
	if(this.label){this.label=this.label.destroy();}clearTimeout(this.hideTimer);clearTimeout(this.tooltipTimeout);}, /**
		 * Provide a soft movement for the tooltip
		 *
		 * @param {Number} x
		 * @param {Number} y
		 * @private
		 */move:function move(x,y,anchorX,anchorY){var tooltip=this,now=tooltip.now,animate=tooltip.options.animation!==false&&!tooltip.isHidden&&( // When we get close to the target position, abort animation and land on the right place (#3056)
	mathAbs(x-now.x)>1||mathAbs(y-now.y)>1),skipAnchor=tooltip.followPointer||tooltip.len>1; // Get intermediate values for animation
	extend(now,{x:animate?(2*now.x+x)/3:x,y:animate?(now.y+y)/2:y,anchorX:skipAnchor?UNDEFINED:animate?(2*now.anchorX+anchorX)/3:anchorX,anchorY:skipAnchor?UNDEFINED:animate?(now.anchorY+anchorY)/2:anchorY}); // Move to the intermediate value
	tooltip.label.attr(now); // Run on next tick of the mouse tracker
	if(animate){ // Never allow two timeouts
	clearTimeout(this.tooltipTimeout); // Set the fixed interval ticking for the smooth tooltip
	this.tooltipTimeout=setTimeout(function(){ // The interval function may still be running during destroy, so check that the chart is really there before calling.
	if(tooltip){tooltip.move(x,y,anchorX,anchorY);}},32);}}, /**
		 * Hide the tooltip
		 */hide:function hide(delay){var tooltip=this,hoverPoints;clearTimeout(this.hideTimer); // disallow duplicate timers (#1728, #1766)
	if(!this.isHidden){hoverPoints=this.chart.hoverPoints;this.hideTimer=setTimeout(function(){tooltip.label.fadeOut();tooltip.isHidden=true;},pick(delay,this.options.hideDelay,500));}}, /** 
		 * Extendable method to get the anchor position of the tooltip
		 * from a point or set of points
		 */getAnchor:function getAnchor(points,mouseEvent){var ret,chart=this.chart,inverted=chart.inverted,plotTop=chart.plotTop,plotLeft=chart.plotLeft,plotX=0,plotY=0,yAxis,xAxis;points=splat(points); // Pie uses a special tooltipPos
	ret=points[0].tooltipPos; // When tooltip follows mouse, relate the position to the mouse
	if(this.followPointer&&mouseEvent){if(mouseEvent.chartX===UNDEFINED){mouseEvent=chart.pointer.normalize(mouseEvent);}ret=[mouseEvent.chartX-chart.plotLeft,mouseEvent.chartY-plotTop];} // When shared, use the average position
	if(!ret){each(points,function(point){yAxis=point.series.yAxis;xAxis=point.series.xAxis;plotX+=point.plotX+(!inverted&&xAxis?xAxis.left-plotLeft:0);plotY+=(point.plotLow?(point.plotLow+point.plotHigh)/2:point.plotY)+(!inverted&&yAxis?yAxis.top-plotTop:0); // #1151
	});plotX/=points.length;plotY/=points.length;ret=[inverted?chart.plotWidth-plotY:plotX,this.shared&&!inverted&&points.length>1&&mouseEvent?mouseEvent.chartY-plotTop: // place shared tooltip next to the mouse (#424)
	inverted?chart.plotHeight-plotX:plotY];}return map(ret,mathRound);}, /**
		 * Place the tooltip in a chart without spilling over
		 * and not covering the point it self.
		 */getPosition:function getPosition(boxWidth,boxHeight,point){var chart=this.chart,distance=this.distance,ret={},h=point.h||0, // #4117
	swapped,first=['y',chart.chartHeight,boxHeight,point.plotY+chart.plotTop,chart.plotTop,chart.plotTop+chart.plotHeight],second=['x',chart.chartWidth,boxWidth,point.plotX+chart.plotLeft,chart.plotLeft,chart.plotLeft+chart.plotWidth], // The far side is right or bottom
	preferFarSide=pick(point.ttBelow,chart.inverted&&!point.negative||!chart.inverted&&point.negative), /**
				 * Handle the preferred dimension. When the preferred dimension is tooltip
				 * on top or bottom of the point, it will look for space there.
				 */firstDimension=function firstDimension(dim,outerSize,innerSize,point,min,max){var roomLeft=innerSize<point-distance,roomRight=point+distance+innerSize<outerSize,alignedLeft=point-distance-innerSize,alignedRight=point+distance;if(preferFarSide&&roomRight){ret[dim]=alignedRight;}else if(!preferFarSide&&roomLeft){ret[dim]=alignedLeft;}else if(roomLeft){ret[dim]=mathMin(max-innerSize,alignedLeft-h<0?alignedLeft:alignedLeft-h);}else if(roomRight){ret[dim]=mathMax(min,alignedRight+h+innerSize>outerSize?alignedRight:alignedRight+h);}else {return false;}}, /**
				 * Handle the secondary dimension. If the preferred dimension is tooltip
				 * on top or bottom of the point, the second dimension is to align the tooltip
				 * above the point, trying to align center but allowing left or right
				 * align within the chart box.
				 */secondDimension=function secondDimension(dim,outerSize,innerSize,point){ // Too close to the edge, return false and swap dimensions
	if(point<distance||point>outerSize-distance){return false; // Align left/top
	}else if(point<innerSize/2){ret[dim]=1; // Align right/bottom
	}else if(point>outerSize-innerSize/2){ret[dim]=outerSize-innerSize-2; // Align center
	}else {ret[dim]=point-innerSize/2;}}, /**
				 * Swap the dimensions 
				 */swap=function swap(count){var temp=first;first=second;second=temp;swapped=count;},run=function run(){if(firstDimension.apply(0,first)!==false){if(secondDimension.apply(0,second)===false&&!swapped){swap(true);run();}}else if(!swapped){swap(true);run();}else {ret.x=ret.y=0;}}; // Under these conditions, prefer the tooltip on the side of the point
	if(chart.inverted||this.len>1){swap();}run();return ret;}, /**
		 * In case no user defined formatter is given, this will be used. Note that the context
		 * here is an object holding point, series, x, y etc.
		 */defaultFormatter:function defaultFormatter(tooltip){var items=this.points||splat(this),s; // build the header
	s=[tooltip.tooltipFooterHeaderFormatter(items[0])]; //#3397: abstraction to enable formatting of footer and header
	// build the values
	s=s.concat(tooltip.bodyFormatter(items)); // footer
	s.push(tooltip.tooltipFooterHeaderFormatter(items[0],true)); //#3397: abstraction to enable formatting of footer and header
	return s.join('');}, /**
		 * Refresh the tooltip's text and position.
		 * @param {Object} point
		 */refresh:function refresh(point,mouseEvent){var tooltip=this,chart=tooltip.chart,label=tooltip.label,options=tooltip.options,x,y,anchor,textConfig={},text,pointConfig=[],formatter=options.formatter||tooltip.defaultFormatter,hoverPoints=chart.hoverPoints,borderColor,shared=tooltip.shared,currentSeries;clearTimeout(this.hideTimer); // get the reference point coordinates (pie charts use tooltipPos)
	tooltip.followPointer=splat(point)[0].series.tooltipOptions.followPointer;anchor=tooltip.getAnchor(point,mouseEvent);x=anchor[0];y=anchor[1]; // shared tooltip, array is sent over
	if(shared&&!(point.series&&point.series.noSharedTooltip)){ // hide previous hoverPoints and set new
	chart.hoverPoints=point;if(hoverPoints){each(hoverPoints,function(point){point.setState();});}each(point,function(item){item.setState(HOVER_STATE);pointConfig.push(item.getLabelConfig());});textConfig={x:point[0].category,y:point[0].y};textConfig.points=pointConfig;this.len=pointConfig.length;point=point[0]; // single point tooltip
	}else {textConfig=point.getLabelConfig();}text=formatter.call(textConfig,tooltip); // register the current series
	currentSeries=point.series;this.distance=pick(currentSeries.tooltipOptions.distance,16); // update the inner HTML
	if(text===false){this.hide();}else { // show it
	if(tooltip.isHidden){stop(label);label.attr('opacity',1).show();} // update text
	label.attr({text:text}); // set the stroke color of the box
	borderColor=options.borderColor||point.color||currentSeries.color||'#606060';label.attr({stroke:borderColor});tooltip.updatePosition({plotX:x,plotY:y,negative:point.negative,ttBelow:point.ttBelow,h:anchor[2]||0});this.isHidden=false;}fireEvent(chart,'tooltipRefresh',{text:text,x:x+chart.plotLeft,y:y+chart.plotTop,borderColor:borderColor});}, /**
		 * Find the new position and perform the move
		 */updatePosition:function updatePosition(point){var chart=this.chart,label=this.label,pos=(this.options.positioner||this.getPosition).call(this,label.width,label.height,point); // do the move
	this.move(mathRound(pos.x),mathRound(pos.y||0), // can be undefined (#3977) 
	point.plotX+chart.plotLeft,point.plotY+chart.plotTop);}, /** 
		 * Get the best X date format based on the closest point range on the axis.
		 */getXDateFormat:function getXDateFormat(point,options,xAxis){var xDateFormat,dateTimeLabelFormats=options.dateTimeLabelFormats,closestPointRange=xAxis&&xAxis.closestPointRange,n,blank='01-01 00:00:00.000',strpos={millisecond:15,second:12,minute:9,hour:6,day:3},date,lastN='millisecond'; // for sub-millisecond data, #4223
	if(closestPointRange){date=dateFormat('%m-%d %H:%M:%S.%L',point.x);for(n in timeUnits){ // If the range is exactly one week and we're looking at a Sunday/Monday, go for the week format
	if(closestPointRange===timeUnits.week&&+dateFormat('%w',point.x)===xAxis.options.startOfWeek&&date.substr(6)===blank.substr(6)){n='week';break; // The first format that is too great for the range
	}else if(timeUnits[n]>closestPointRange){n=lastN;break; // If the point is placed every day at 23:59, we need to show
	// the minutes as well. #2637.
	}else if(strpos[n]&&date.substr(strpos[n])!==blank.substr(strpos[n])){break;} // Weeks are outside the hierarchy, only apply them on Mondays/Sundays like in the first condition
	if(n!=='week'){lastN=n;}}if(n){xDateFormat=dateTimeLabelFormats[n];}}else {xDateFormat=dateTimeLabelFormats.day;}return xDateFormat||dateTimeLabelFormats.year; // #2546, 2581
	}, /**
		 * Format the footer/header of the tooltip
		 * #3397: abstraction to enable formatting of footer and header
		 */tooltipFooterHeaderFormatter:function tooltipFooterHeaderFormatter(point,isFooter){var footOrHead=isFooter?'footer':'header',series=point.series,tooltipOptions=series.tooltipOptions,xDateFormat=tooltipOptions.xDateFormat,xAxis=series.xAxis,isDateTime=xAxis&&xAxis.options.type==='datetime'&&isNumber(point.key),formatString=tooltipOptions[footOrHead+'Format']; // Guess the best date format based on the closest point distance (#568, #3418)
	if(isDateTime&&!xDateFormat){xDateFormat=this.getXDateFormat(point,tooltipOptions,xAxis);} // Insert the footer date format if any
	if(isDateTime&&xDateFormat){formatString=formatString.replace('{point.key}','{point.key:'+xDateFormat+'}');}return format(formatString,{point:point,series:series});}, /**
	     * Build the body (lines) of the tooltip by iterating over the items and returning one entry for each item,
	     * abstracting this functionality allows to easily overwrite and extend it. 
		 */bodyFormatter:function bodyFormatter(items){return map(items,function(item){var tooltipOptions=item.series.tooltipOptions;return (tooltipOptions.pointFormatter||item.point.tooltipFormatter).call(item.point,tooltipOptions.pointFormat);});}};var hoverChartIndex; // Global flag for touch support
	hasTouch=doc.documentElement.ontouchstart!==UNDEFINED; /**
	 * The mouse tracker object. All methods starting with "on" are primary DOM event handlers. 
	 * Subsequent methods should be named differently from what they are doing.
	 * @param {Object} chart The Chart instance
	 * @param {Object} options The root options object
	 */var Pointer=Highcharts.Pointer=function(chart,options){this.init(chart,options);};Pointer.prototype={ /**
		 * Initialize Pointer
		 */init:function init(chart,options){var chartOptions=options.chart,chartEvents=chartOptions.events,zoomType=useCanVG?'':chartOptions.zoomType,inverted=chart.inverted,zoomX,zoomY; // Store references
	this.options=options;this.chart=chart; // Zoom status
	this.zoomX=zoomX=/x/.test(zoomType);this.zoomY=zoomY=/y/.test(zoomType);this.zoomHor=zoomX&&!inverted||zoomY&&inverted;this.zoomVert=zoomY&&!inverted||zoomX&&inverted;this.hasZoom=zoomX||zoomY; // Do we need to handle click on a touch device?
	this.runChartClick=chartEvents&&!!chartEvents.click;this.pinchDown=[];this.lastValidTouch={};if(Highcharts.Tooltip&&options.tooltip.enabled){chart.tooltip=new Tooltip(chart,options.tooltip);this.followTouchMove=pick(options.tooltip.followTouchMove,true);}this.setDOMEvents();}, /**
		 * Add crossbrowser support for chartX and chartY
		 * @param {Object} e The event object in standard browsers
		 */normalize:function normalize(e,chartPosition){var chartX,chartY,ePos; // common IE normalizing
	e=e||window.event; // Framework specific normalizing (#1165)
	e=washMouseEvent(e); // More IE normalizing, needs to go after washMouseEvent
	if(!e.target){e.target=e.srcElement;} // iOS (#2757)
	ePos=e.touches?e.touches.length?e.touches.item(0):e.changedTouches[0]:e; // Get mouse position
	if(!chartPosition){this.chartPosition=chartPosition=offset(this.chart.container);} // chartX and chartY
	if(ePos.pageX===UNDEFINED){ // IE < 9. #886.
	chartX=mathMax(e.x,e.clientX-chartPosition.left); // #2005, #2129: the second case is 
	// for IE10 quirks mode within framesets
	chartY=e.y;}else {chartX=ePos.pageX-chartPosition.left;chartY=ePos.pageY-chartPosition.top;}return extend(e,{chartX:mathRound(chartX),chartY:mathRound(chartY)});}, /**
		 * Get the click position in terms of axis values.
		 *
		 * @param {Object} e A pointer event
		 */getCoordinates:function getCoordinates(e){var coordinates={xAxis:[],yAxis:[]};each(this.chart.axes,function(axis){coordinates[axis.isXAxis?'xAxis':'yAxis'].push({axis:axis,value:axis.toValue(e[axis.horiz?'chartX':'chartY'])});});return coordinates;}, /**
		 * With line type charts with a single tracker, get the point closest to the mouse.
		 * Run Point.onMouseOver and display tooltip for the point or points.
		 */runPointActions:function runPointActions(e){var pointer=this,chart=pointer.chart,series=chart.series,tooltip=chart.tooltip,shared=tooltip?tooltip.shared:false,followPointer,hoverPoint=chart.hoverPoint,hoverSeries=chart.hoverSeries,i,distance=Number.MAX_VALUE, // #4511
	anchor,noSharedTooltip,stickToHoverSeries,directTouch,kdpoints=[],kdpoint,kdpointT; // For hovering over the empty parts of the plot area (hoverSeries is undefined). 
	// If there is one series with point tracking (combo chart), don't go to nearest neighbour.
	if(!shared&&!hoverSeries){for(i=0;i<series.length;i++){if(series[i].directTouch||!series[i].options.stickyTracking){series=[];}}} // If it has a hoverPoint and that series requires direct touch (like columns, #3899), or we're on 
	// a noSharedTooltip series among shared tooltip series (#4546), use the hoverPoint . Otherwise, 
	// search the k-d tree.
	stickToHoverSeries=hoverSeries&&(shared?hoverSeries.noSharedTooltip:hoverSeries.directTouch);if(stickToHoverSeries&&hoverPoint){kdpoint=hoverPoint; // Handle shared tooltip or cases where a series is not yet hovered
	}else { // Find nearest points on all series
	each(series,function(s){ // Skip hidden series
	noSharedTooltip=s.noSharedTooltip&&shared;directTouch=!shared&&s.directTouch;if(s.visible&&!noSharedTooltip&&!directTouch&&pick(s.options.enableMouseTracking,true)){ // #3821
	kdpointT=s.searchPoint(e,!noSharedTooltip&&s.kdDimensions===1); // #3828
	if(kdpointT){kdpoints.push(kdpointT);}}}); // Find absolute nearest point
	each(kdpoints,function(p){if(p&&typeof p.dist==='number'&&p.dist<distance){distance=p.dist;kdpoint=p;}});} // Refresh tooltip for kdpoint if new hover point or tooltip was hidden // #3926, #4200
	if(kdpoint&&(kdpoint!==this.prevKDPoint||tooltip&&tooltip.isHidden)){ // Draw tooltip if necessary
	if(shared&&!kdpoint.series.noSharedTooltip){i=kdpoints.length;while(i--){if(kdpoints[i].clientX!==kdpoint.clientX||kdpoints[i].series.noSharedTooltip){kdpoints.splice(i,1);}}if(kdpoints.length&&tooltip){tooltip.refresh(kdpoints,e);} // Do mouseover on all points (#3919, #3985, #4410)
	each(kdpoints,function(point){point.onMouseOver(e,point!==(hoverSeries&&hoverSeries.directTouch&&hoverPoint||kdpoint));});}else {if(tooltip){tooltip.refresh(kdpoint,e);}if(!hoverSeries||!hoverSeries.directTouch){ // #4448
	kdpoint.onMouseOver(e);}}this.prevKDPoint=kdpoint; // Update positions (regardless of kdpoint or hoverPoint)
	}else {followPointer=hoverSeries&&hoverSeries.tooltipOptions.followPointer;if(tooltip&&followPointer&&!tooltip.isHidden){anchor=tooltip.getAnchor([{}],e);tooltip.updatePosition({plotX:anchor[0],plotY:anchor[1]});}} // Start the event listener to pick up the tooltip 
	if(tooltip&&!pointer._onDocumentMouseMove){pointer._onDocumentMouseMove=function(e){if(charts[hoverChartIndex]){charts[hoverChartIndex].pointer.onDocumentMouseMove(e);}};addEvent(doc,'mousemove',pointer._onDocumentMouseMove);} // Crosshair
	each(chart.axes,function(axis){axis.drawCrosshair(e,pick(kdpoint,hoverPoint));});}, /**
		 * Reset the tracking by hiding the tooltip, the hover series state and the hover point
		 * 
		 * @param allowMove {Boolean} Instead of destroying the tooltip altogether, allow moving it if possible
		 */reset:function reset(allowMove,delay){var pointer=this,chart=pointer.chart,hoverSeries=chart.hoverSeries,hoverPoint=chart.hoverPoint,hoverPoints=chart.hoverPoints,tooltip=chart.tooltip,tooltipPoints=tooltip&&tooltip.shared?hoverPoints:hoverPoint; // Narrow in allowMove
	allowMove=allowMove&&tooltip&&tooltipPoints; // Check if the points have moved outside the plot area, #1003		
	if(allowMove&&splat(tooltipPoints)[0].plotX===UNDEFINED){allowMove=false;} // Just move the tooltip, #349
	if(allowMove){tooltip.refresh(tooltipPoints);if(hoverPoint){ // #2500
	hoverPoint.setState(hoverPoint.state,true);each(chart.axes,function(axis){if(pick(axis.options.crosshair&&axis.options.crosshair.snap,true)){axis.drawCrosshair(null,hoverPoint);}else {axis.hideCrosshair();}});} // Full reset
	}else {if(hoverPoint){hoverPoint.onMouseOut();}if(hoverPoints){each(hoverPoints,function(point){point.setState();});}if(hoverSeries){hoverSeries.onMouseOut();}if(tooltip){tooltip.hide(delay);}if(pointer._onDocumentMouseMove){removeEvent(doc,'mousemove',pointer._onDocumentMouseMove);pointer._onDocumentMouseMove=null;} // Remove crosshairs
	each(chart.axes,function(axis){axis.hideCrosshair();});pointer.hoverX=chart.hoverPoints=chart.hoverPoint=null;}}, /**
		 * Scale series groups to a certain scale and translation
		 */scaleGroups:function scaleGroups(attribs,clip){var chart=this.chart,seriesAttribs; // Scale each series
	each(chart.series,function(series){seriesAttribs=attribs||series.getPlotBox(); // #1701
	if(series.xAxis&&series.xAxis.zoomEnabled){series.group.attr(seriesAttribs);if(series.markerGroup){series.markerGroup.attr(seriesAttribs);series.markerGroup.clip(clip?chart.clipRect:null);}if(series.dataLabelsGroup){series.dataLabelsGroup.attr(seriesAttribs);}}}); // Clip
	chart.clipRect.attr(clip||chart.clipBox);}, /**
		 * Start a drag operation
		 */dragStart:function dragStart(e){var chart=this.chart; // Record the start position
	chart.mouseIsDown=e.type;chart.cancelClick=false;chart.mouseDownX=this.mouseDownX=e.chartX;chart.mouseDownY=this.mouseDownY=e.chartY;}, /**
		 * Perform a drag operation in response to a mousemove event while the mouse is down
		 */drag:function drag(e){var chart=this.chart,chartOptions=chart.options.chart,chartX=e.chartX,chartY=e.chartY,zoomHor=this.zoomHor,zoomVert=this.zoomVert,plotLeft=chart.plotLeft,plotTop=chart.plotTop,plotWidth=chart.plotWidth,plotHeight=chart.plotHeight,clickedInside,size,selectionMarker=this.selectionMarker,mouseDownX=this.mouseDownX,mouseDownY=this.mouseDownY,panKey=chartOptions.panKey&&e[chartOptions.panKey+'Key']; // If the device supports both touch and mouse (like IE11), and we are touch-dragging
	// inside the plot area, don't handle the mouse event. #4339.
	if(selectionMarker&&selectionMarker.touch){return;} // If the mouse is outside the plot area, adjust to cooordinates
	// inside to prevent the selection marker from going outside
	if(chartX<plotLeft){chartX=plotLeft;}else if(chartX>plotLeft+plotWidth){chartX=plotLeft+plotWidth;}if(chartY<plotTop){chartY=plotTop;}else if(chartY>plotTop+plotHeight){chartY=plotTop+plotHeight;} // determine if the mouse has moved more than 10px
	this.hasDragged=Math.sqrt(Math.pow(mouseDownX-chartX,2)+Math.pow(mouseDownY-chartY,2));if(this.hasDragged>10){clickedInside=chart.isInsidePlot(mouseDownX-plotLeft,mouseDownY-plotTop); // make a selection
	if(chart.hasCartesianSeries&&(this.zoomX||this.zoomY)&&clickedInside&&!panKey){if(!selectionMarker){this.selectionMarker=selectionMarker=chart.renderer.rect(plotLeft,plotTop,zoomHor?1:plotWidth,zoomVert?1:plotHeight,0).attr({fill:chartOptions.selectionMarkerFill||'rgba(69,114,167,0.25)',zIndex:7}).add();}} // adjust the width of the selection marker
	if(selectionMarker&&zoomHor){size=chartX-mouseDownX;selectionMarker.attr({width:mathAbs(size),x:(size>0?0:size)+mouseDownX});} // adjust the height of the selection marker
	if(selectionMarker&&zoomVert){size=chartY-mouseDownY;selectionMarker.attr({height:mathAbs(size),y:(size>0?0:size)+mouseDownY});} // panning
	if(clickedInside&&!selectionMarker&&chartOptions.panning){chart.pan(e,chartOptions.panning);}}}, /**
		 * On mouse up or touch end across the entire document, drop the selection.
		 */drop:function drop(e){var pointer=this,chart=this.chart,hasPinched=this.hasPinched;if(this.selectionMarker){var selectionData={xAxis:[],yAxis:[],originalEvent:e.originalEvent||e},selectionBox=this.selectionMarker,selectionLeft=selectionBox.attr?selectionBox.attr('x'):selectionBox.x,selectionTop=selectionBox.attr?selectionBox.attr('y'):selectionBox.y,selectionWidth=selectionBox.attr?selectionBox.attr('width'):selectionBox.width,selectionHeight=selectionBox.attr?selectionBox.attr('height'):selectionBox.height,runZoom; // a selection has been made
	if(this.hasDragged||hasPinched){ // record each axis' min and max
	each(chart.axes,function(axis){if(axis.zoomEnabled&&defined(axis.min)&&(hasPinched||pointer[{xAxis:'zoomX',yAxis:'zoomY'}[axis.coll]])){ // #859, #3569
	var horiz=axis.horiz,minPixelPadding=e.type==='touchend'?axis.minPixelPadding:0, // #1207, #3075
	selectionMin=axis.toValue((horiz?selectionLeft:selectionTop)+minPixelPadding),selectionMax=axis.toValue((horiz?selectionLeft+selectionWidth:selectionTop+selectionHeight)-minPixelPadding);selectionData[axis.coll].push({axis:axis,min:mathMin(selectionMin,selectionMax), // for reversed axes
	max:mathMax(selectionMin,selectionMax)});runZoom=true;}});if(runZoom){fireEvent(chart,'selection',selectionData,function(args){chart.zoom(extend(args,hasPinched?{animation:false}:null));});}}this.selectionMarker=this.selectionMarker.destroy(); // Reset scaling preview
	if(hasPinched){this.scaleGroups();}} // Reset all
	if(chart){ // it may be destroyed on mouse up - #877
	_css(chart.container,{cursor:chart._cursor});chart.cancelClick=this.hasDragged>10; // #370
	chart.mouseIsDown=this.hasDragged=this.hasPinched=false;this.pinchDown=[];}},onContainerMouseDown:function onContainerMouseDown(e){e=this.normalize(e); // issue #295, dragging not always working in Firefox
	if(e.preventDefault){e.preventDefault();}this.dragStart(e);},onDocumentMouseUp:function onDocumentMouseUp(e){if(charts[hoverChartIndex]){charts[hoverChartIndex].pointer.drop(e);}}, /**
		 * Special handler for mouse move that will hide the tooltip when the mouse leaves the plotarea.
		 * Issue #149 workaround. The mouseleave event does not always fire. 
		 */onDocumentMouseMove:function onDocumentMouseMove(e){var chart=this.chart,chartPosition=this.chartPosition;e=this.normalize(e,chartPosition); // If we're outside, hide the tooltip
	if(chartPosition&&!this.inClass(e.target,'highcharts-tracker')&&!chart.isInsidePlot(e.chartX-chart.plotLeft,e.chartY-chart.plotTop)){this.reset();}}, /**
		 * When mouse leaves the container, hide the tooltip.
		 */onContainerMouseLeave:function onContainerMouseLeave(){var chart=charts[hoverChartIndex];if(chart){chart.pointer.reset();chart.pointer.chartPosition=null; // also reset the chart position, used in #149 fix
	}}, // The mousemove, touchmove and touchstart event handler
	onContainerMouseMove:function onContainerMouseMove(e){var chart=this.chart;hoverChartIndex=chart.index;e=this.normalize(e);e.returnValue=false; // #2251, #3224
	if(chart.mouseIsDown==='mousedown'){this.drag(e);} // Show the tooltip and run mouse over events (#977)
	if((this.inClass(e.target,'highcharts-tracker')||chart.isInsidePlot(e.chartX-chart.plotLeft,e.chartY-chart.plotTop))&&!chart.openMenu){this.runPointActions(e);}}, /**
		 * Utility to detect whether an element has, or has a parent with, a specific
		 * class name. Used on detection of tracker objects and on deciding whether
		 * hovering the tooltip should cause the active series to mouse out.
		 */inClass:function inClass(element,className){var elemClassName;while(element){elemClassName=attr(element,'class');if(elemClassName){if(elemClassName.indexOf(className)!==-1){return true;}else if(elemClassName.indexOf(PREFIX+'container')!==-1){return false;}}element=element.parentNode;}},onTrackerMouseOut:function onTrackerMouseOut(e){var series=this.chart.hoverSeries,relatedTarget=e.relatedTarget||e.toElement;if(series&&!series.options.stickyTracking&&!this.inClass(relatedTarget,PREFIX+'tooltip')&&!this.inClass(relatedTarget,PREFIX+'series-'+series.index)){ // #2499, #4465
	series.onMouseOut();}},onContainerClick:function onContainerClick(e){var chart=this.chart,hoverPoint=chart.hoverPoint,plotLeft=chart.plotLeft,plotTop=chart.plotTop;e=this.normalize(e);e.originalEvent=e; // #3913
	if(!chart.cancelClick){ // On tracker click, fire the series and point events. #783, #1583
	if(hoverPoint&&this.inClass(e.target,PREFIX+'tracker')){ // the series click event
	fireEvent(hoverPoint.series,'click',extend(e,{point:hoverPoint})); // the point click event
	if(chart.hoverPoint){ // it may be destroyed (#1844)
	hoverPoint.firePointEvent('click',e);} // When clicking outside a tracker, fire a chart event
	}else {extend(e,this.getCoordinates(e)); // fire a click event in the chart
	if(chart.isInsidePlot(e.chartX-plotLeft,e.chartY-plotTop)){fireEvent(chart,'click',e);}}}}, /**
		 * Set the JS DOM events on the container and document. This method should contain
		 * a one-to-one assignment between methods and their handlers. Any advanced logic should
		 * be moved to the handler reflecting the event's name.
		 */setDOMEvents:function setDOMEvents(){var pointer=this,container=pointer.chart.container;container.onmousedown=function(e){pointer.onContainerMouseDown(e);};container.onmousemove=function(e){pointer.onContainerMouseMove(e);};container.onclick=function(e){pointer.onContainerClick(e);};addEvent(container,'mouseleave',pointer.onContainerMouseLeave);if(chartCount===1){addEvent(doc,'mouseup',pointer.onDocumentMouseUp);}if(hasTouch){container.ontouchstart=function(e){pointer.onContainerTouchStart(e);};container.ontouchmove=function(e){pointer.onContainerTouchMove(e);};if(chartCount===1){addEvent(doc,'touchend',pointer.onDocumentTouchEnd);}}}, /**
		 * Destroys the Pointer object and disconnects DOM events.
		 */destroy:function destroy(){var prop;removeEvent(this.chart.container,'mouseleave',this.onContainerMouseLeave);if(!chartCount){removeEvent(doc,'mouseup',this.onDocumentMouseUp);removeEvent(doc,'touchend',this.onDocumentTouchEnd);} // memory and CPU leak
	clearInterval(this.tooltipTimeout);for(prop in this){this[prop]=null;}}}; /* Support for touch devices */extend(Highcharts.Pointer.prototype,{ /**
		 * Run translation operations
		 */pinchTranslate:function pinchTranslate(pinchDown,touches,transform,selectionMarker,clip,lastValidTouch){if(this.zoomHor||this.pinchHor){this.pinchTranslateDirection(true,pinchDown,touches,transform,selectionMarker,clip,lastValidTouch);}if(this.zoomVert||this.pinchVert){this.pinchTranslateDirection(false,pinchDown,touches,transform,selectionMarker,clip,lastValidTouch);}}, /**
		 * Run translation operations for each direction (horizontal and vertical) independently
		 */pinchTranslateDirection:function pinchTranslateDirection(horiz,pinchDown,touches,transform,selectionMarker,clip,lastValidTouch,forcedScale){var chart=this.chart,xy=horiz?'x':'y',XY=horiz?'X':'Y',sChartXY='chart'+XY,wh=horiz?'width':'height',plotLeftTop=chart['plot'+(horiz?'Left':'Top')],selectionWH,selectionXY,clipXY,scale=forcedScale||1,inverted=chart.inverted,bounds=chart.bounds[horiz?'h':'v'],singleTouch=pinchDown.length===1,touch0Start=pinchDown[0][sChartXY],touch0Now=touches[0][sChartXY],touch1Start=!singleTouch&&pinchDown[1][sChartXY],touch1Now=!singleTouch&&touches[1][sChartXY],outOfBounds,transformScale,scaleKey,setScale=function setScale(){if(!singleTouch&&mathAbs(touch0Start-touch1Start)>20){ // Don't zoom if fingers are too close on this axis
	scale=forcedScale||mathAbs(touch0Now-touch1Now)/mathAbs(touch0Start-touch1Start);}clipXY=(plotLeftTop-touch0Now)/scale+touch0Start;selectionWH=chart['plot'+(horiz?'Width':'Height')]/scale;}; // Set the scale, first pass
	setScale();selectionXY=clipXY; // the clip position (x or y) is altered if out of bounds, the selection position is not
	// Out of bounds
	if(selectionXY<bounds.min){selectionXY=bounds.min;outOfBounds=true;}else if(selectionXY+selectionWH>bounds.max){selectionXY=bounds.max-selectionWH;outOfBounds=true;} // Is the chart dragged off its bounds, determined by dataMin and dataMax?
	if(outOfBounds){ // Modify the touchNow position in order to create an elastic drag movement. This indicates
	// to the user that the chart is responsive but can't be dragged further.
	touch0Now-=0.8*(touch0Now-lastValidTouch[xy][0]);if(!singleTouch){touch1Now-=0.8*(touch1Now-lastValidTouch[xy][1]);} // Set the scale, second pass to adapt to the modified touchNow positions
	setScale();}else {lastValidTouch[xy]=[touch0Now,touch1Now];} // Set geometry for clipping, selection and transformation
	if(!inverted){ // TODO: implement clipping for inverted charts
	clip[xy]=clipXY-plotLeftTop;clip[wh]=selectionWH;}scaleKey=inverted?horiz?'scaleY':'scaleX':'scale'+XY;transformScale=inverted?1/scale:scale;selectionMarker[wh]=selectionWH;selectionMarker[xy]=selectionXY;transform[scaleKey]=scale;transform['translate'+XY]=transformScale*plotLeftTop+(touch0Now-transformScale*touch0Start);}, /**
		 * Handle touch events with two touches
		 */pinch:function pinch(e){var self=this,chart=self.chart,pinchDown=self.pinchDown,touches=e.touches,touchesLength=touches.length,lastValidTouch=self.lastValidTouch,hasZoom=self.hasZoom,selectionMarker=self.selectionMarker,transform={},fireClickEvent=touchesLength===1&&(self.inClass(e.target,PREFIX+'tracker')&&chart.runTrackerClick||self.runChartClick),clip={}; // Don't initiate panning until the user has pinched. This prevents us from 
	// blocking page scrolling as users scroll down a long page (#4210).
	if(touchesLength>1){self.initiated=true;} // On touch devices, only proceed to trigger click if a handler is defined
	if(hasZoom&&self.initiated&&!fireClickEvent){e.preventDefault();} // Normalize each touch
	map(touches,function(e){return self.normalize(e);}); // Register the touch start position
	if(e.type==='touchstart'){each(touches,function(e,i){pinchDown[i]={chartX:e.chartX,chartY:e.chartY};});lastValidTouch.x=[pinchDown[0].chartX,pinchDown[1]&&pinchDown[1].chartX];lastValidTouch.y=[pinchDown[0].chartY,pinchDown[1]&&pinchDown[1].chartY]; // Identify the data bounds in pixels
	each(chart.axes,function(axis){if(axis.zoomEnabled){var bounds=chart.bounds[axis.horiz?'h':'v'],minPixelPadding=axis.minPixelPadding,min=axis.toPixels(pick(axis.options.min,axis.dataMin)),max=axis.toPixels(pick(axis.options.max,axis.dataMax)),absMin=mathMin(min,max),absMax=mathMax(min,max); // Store the bounds for use in the touchmove handler
	bounds.min=mathMin(axis.pos,absMin-minPixelPadding);bounds.max=mathMax(axis.pos+axis.len,absMax+minPixelPadding);}});self.res=true; // reset on next move
	// Event type is touchmove, handle panning and pinching
	}else if(pinchDown.length){ // can be 0 when releasing, if touchend fires first
	// Set the marker
	if(!selectionMarker){self.selectionMarker=selectionMarker=extend({destroy:noop,touch:true},chart.plotBox);}self.pinchTranslate(pinchDown,touches,transform,selectionMarker,clip,lastValidTouch);self.hasPinched=hasZoom; // Scale and translate the groups to provide visual feedback during pinching
	self.scaleGroups(transform,clip); // Optionally move the tooltip on touchmove
	if(!hasZoom&&self.followTouchMove&&touchesLength===1){this.runPointActions(self.normalize(e));}else if(self.res){self.res=false;this.reset(false,0);}}}, /**
		 * General touch handler shared by touchstart and touchmove.
		 */touch:function touch(e,start){var chart=this.chart;hoverChartIndex=chart.index;if(e.touches.length===1){e=this.normalize(e);if(chart.isInsidePlot(e.chartX-chart.plotLeft,e.chartY-chart.plotTop)&&!chart.openMenu){ // Run mouse events and display tooltip etc
	if(start){this.runPointActions(e);}this.pinch(e);}else if(start){ // Hide the tooltip on touching outside the plot area (#1203)
	this.reset();}}else if(e.touches.length===2){this.pinch(e);}},onContainerTouchStart:function onContainerTouchStart(e){this.touch(e,true);},onContainerTouchMove:function onContainerTouchMove(e){this.touch(e);},onDocumentTouchEnd:function onDocumentTouchEnd(e){if(charts[hoverChartIndex]){charts[hoverChartIndex].pointer.drop(e);}}});if(win.PointerEvent||win.MSPointerEvent){ // The touches object keeps track of the points being touched at all times
	var touches={},hasPointerEvent=!!win.PointerEvent,getWebkitTouches=function getWebkitTouches(){var key,fake=[];fake.item=function(i){return this[i];};for(key in touches){if(touches.hasOwnProperty(key)){fake.push({pageX:touches[key].pageX,pageY:touches[key].pageY,target:touches[key].target});}}return fake;},translateMSPointer=function translateMSPointer(e,method,wktype,callback){var p;e=e.originalEvent||e;if((e.pointerType==='touch'||e.pointerType===e.MSPOINTER_TYPE_TOUCH)&&charts[hoverChartIndex]){callback(e);p=charts[hoverChartIndex].pointer;p[method]({type:wktype,target:e.currentTarget,preventDefault:noop,touches:getWebkitTouches()});}}; /**
		 * Extend the Pointer prototype with methods for each event handler and more
		 */extend(Pointer.prototype,{onContainerPointerDown:function onContainerPointerDown(e){translateMSPointer(e,'onContainerTouchStart','touchstart',function(e){touches[e.pointerId]={pageX:e.pageX,pageY:e.pageY,target:e.currentTarget};});},onContainerPointerMove:function onContainerPointerMove(e){translateMSPointer(e,'onContainerTouchMove','touchmove',function(e){touches[e.pointerId]={pageX:e.pageX,pageY:e.pageY};if(!touches[e.pointerId].target){touches[e.pointerId].target=e.currentTarget;}});},onDocumentPointerUp:function onDocumentPointerUp(e){translateMSPointer(e,'onDocumentTouchEnd','touchend',function(e){delete touches[e.pointerId];});}, /**
			 * Add or remove the MS Pointer specific events
			 */batchMSEvents:function batchMSEvents(fn){fn(this.chart.container,hasPointerEvent?'pointerdown':'MSPointerDown',this.onContainerPointerDown);fn(this.chart.container,hasPointerEvent?'pointermove':'MSPointerMove',this.onContainerPointerMove);fn(doc,hasPointerEvent?'pointerup':'MSPointerUp',this.onDocumentPointerUp);}}); // Disable default IE actions for pinch and such on chart element
	wrap(Pointer.prototype,'init',function(proceed,chart,options){proceed.call(this,chart,options);if(this.hasZoom){ // #4014
	_css(chart.container,{'-ms-touch-action':NONE,'touch-action':NONE});}}); // Add IE specific touch events to chart
	wrap(Pointer.prototype,'setDOMEvents',function(proceed){proceed.apply(this);if(this.hasZoom||this.followTouchMove){this.batchMSEvents(addEvent);}}); // Destroy MS events also
	wrap(Pointer.prototype,'destroy',function(proceed){this.batchMSEvents(removeEvent);proceed.call(this);});} /**
	 * The overview of the chart's series
	 */var Legend=Highcharts.Legend=function(chart,options){this.init(chart,options);};Legend.prototype={ /**
		 * Initialize the legend
		 */init:function init(chart,options){var legend=this,itemStyle=options.itemStyle,padding,itemMarginTop=options.itemMarginTop||0;this.options=options;if(!options.enabled){return;}legend.itemStyle=itemStyle;legend.itemHiddenStyle=merge(itemStyle,options.itemHiddenStyle);legend.itemMarginTop=itemMarginTop;legend.padding=padding=pick(options.padding,8);legend.initialItemX=padding;legend.initialItemY=padding-5; // 5 is the number of pixels above the text
	legend.maxItemWidth=0;legend.chart=chart;legend.itemHeight=0;legend.symbolWidth=pick(options.symbolWidth,16);legend.pages=[]; // Render it
	legend.render(); // move checkboxes
	addEvent(legend.chart,'endResize',function(){legend.positionCheckboxes();});}, /**
		 * Set the colors for the legend item
		 * @param {Object} item A Series or Point instance
		 * @param {Object} visible Dimmed or colored
		 */colorizeItem:function colorizeItem(item,visible){var legend=this,options=legend.options,legendItem=item.legendItem,legendLine=item.legendLine,legendSymbol=item.legendSymbol,hiddenColor=legend.itemHiddenStyle.color,textColor=visible?options.itemStyle.color:hiddenColor,symbolColor=visible?item.legendColor||item.color||'#CCC':hiddenColor,markerOptions=item.options&&item.options.marker,symbolAttr={fill:symbolColor},key,val;if(legendItem){legendItem.css({fill:textColor,color:textColor}); // color for #1553, oldIE
	}if(legendLine){legendLine.attr({stroke:symbolColor});}if(legendSymbol){ // Apply marker options
	if(markerOptions&&legendSymbol.isMarker){ // #585
	symbolAttr.stroke=symbolColor;markerOptions=item.convertAttribs(markerOptions);for(key in markerOptions){val=markerOptions[key];if(val!==UNDEFINED){symbolAttr[key]=val;}}}legendSymbol.attr(symbolAttr);}}, /**
		 * Position the legend item
		 * @param {Object} item A Series or Point instance
		 */positionItem:function positionItem(item){var legend=this,options=legend.options,symbolPadding=options.symbolPadding,ltr=!options.rtl,legendItemPos=item._legendItemPos,itemX=legendItemPos[0],itemY=legendItemPos[1],checkbox=item.checkbox,legendGroup=item.legendGroup;if(legendGroup&&legendGroup.element){legendGroup.translate(ltr?itemX:legend.legendWidth-itemX-2*symbolPadding-4,itemY);}if(checkbox){checkbox.x=itemX;checkbox.y=itemY;}}, /**
		 * Destroy a single legend item
		 * @param {Object} item The series or point
		 */destroyItem:function destroyItem(item){var checkbox=item.checkbox; // destroy SVG elements
	each(['legendItem','legendLine','legendSymbol','legendGroup'],function(key){if(item[key]){item[key]=item[key].destroy();}});if(checkbox){discardElement(item.checkbox);}}, /**
		 * Destroys the legend.
		 */destroy:function destroy(){var legend=this,legendGroup=legend.group,box=legend.box;if(box){legend.box=box.destroy();}if(legendGroup){legend.group=legendGroup.destroy();}}, /**
		 * Position the checkboxes after the width is determined
		 */positionCheckboxes:function positionCheckboxes(scrollOffset){var alignAttr=this.group.alignAttr,translateY,clipHeight=this.clipHeight||this.legendHeight;if(alignAttr){translateY=alignAttr.translateY;each(this.allItems,function(item){var checkbox=item.checkbox,top;if(checkbox){top=translateY+checkbox.y+(scrollOffset||0)+3;_css(checkbox,{left:alignAttr.translateX+item.checkboxOffset+checkbox.x-20+PX,top:top+PX,display:top>translateY-6&&top<translateY+clipHeight-6?'':NONE});}});}}, /**
		 * Render the legend title on top of the legend
		 */renderTitle:function renderTitle(){var options=this.options,padding=this.padding,titleOptions=options.title,titleHeight=0,bBox;if(titleOptions.text){if(!this.title){this.title=this.chart.renderer.label(titleOptions.text,padding-3,padding-4,null,null,null,null,null,'legend-title').attr({zIndex:1}).css(titleOptions.style).add(this.group);}bBox=this.title.getBBox();titleHeight=bBox.height;this.offsetWidth=bBox.width; // #1717
	this.contentGroup.attr({translateY:titleHeight});}this.titleHeight=titleHeight;}, /**
		 * Set the legend item text
		 */setText:function setText(item){var options=this.options;item.legendItem.attr({text:options.labelFormat?format(options.labelFormat,item):options.labelFormatter.call(item)});}, /**
		 * Render a single specific legend item
		 * @param {Object} item A series or point
		 */renderItem:function renderItem(item){var legend=this,chart=legend.chart,renderer=chart.renderer,options=legend.options,horizontal=options.layout==='horizontal',symbolWidth=legend.symbolWidth,symbolPadding=options.symbolPadding,itemStyle=legend.itemStyle,itemHiddenStyle=legend.itemHiddenStyle,padding=legend.padding,itemDistance=horizontal?pick(options.itemDistance,20):0,ltr=!options.rtl,itemHeight,widthOption=options.width,itemMarginBottom=options.itemMarginBottom||0,itemMarginTop=legend.itemMarginTop,initialItemX=legend.initialItemX,bBox,itemWidth,li=item.legendItem,series=item.series&&item.series.drawLegendSymbol?item.series:item,seriesOptions=series.options,showCheckbox=legend.createCheckboxForItem&&seriesOptions&&seriesOptions.showCheckbox,useHTML=options.useHTML;if(!li){ // generate it once, later move it
	// Generate the group box
	// A group to hold the symbol and text. Text is to be appended in Legend class.
	item.legendGroup=renderer.g('legend-item').attr({zIndex:1}).add(legend.scrollGroup); // Generate the list item text and add it to the group
	item.legendItem=li=renderer.text('',ltr?symbolWidth+symbolPadding:-symbolPadding,legend.baseline||0,useHTML).css(merge(item.visible?itemStyle:itemHiddenStyle)) // merge to prevent modifying original (#1021)
	.attr({align:ltr?'left':'right',zIndex:2}).add(item.legendGroup); // Get the baseline for the first item - the font size is equal for all
	if(!legend.baseline){legend.fontMetrics=renderer.fontMetrics(itemStyle.fontSize,li);legend.baseline=legend.fontMetrics.f+3+itemMarginTop;li.attr('y',legend.baseline);} // Draw the legend symbol inside the group box
	series.drawLegendSymbol(legend,item);if(legend.setItemEvents){legend.setItemEvents(item,li,useHTML,itemStyle,itemHiddenStyle);} // Colorize the items
	legend.colorizeItem(item,item.visible); // add the HTML checkbox on top
	if(showCheckbox){legend.createCheckboxForItem(item);}} // Always update the text
	legend.setText(item); // calculate the positions for the next line
	bBox=li.getBBox();itemWidth=item.checkboxOffset=options.itemWidth||item.legendItemWidth||symbolWidth+symbolPadding+bBox.width+itemDistance+(showCheckbox?20:0);legend.itemHeight=itemHeight=mathRound(item.legendItemHeight||bBox.height); // if the item exceeds the width, start a new line
	if(horizontal&&legend.itemX-initialItemX+itemWidth>(widthOption||chart.chartWidth-2*padding-initialItemX-options.x)){legend.itemX=initialItemX;legend.itemY+=itemMarginTop+legend.lastLineHeight+itemMarginBottom;legend.lastLineHeight=0; // reset for next line (#915, #3976)
	} // If the item exceeds the height, start a new column
	/*if (!horizontal && legend.itemY + options.y + itemHeight > chart.chartHeight - spacingTop - spacingBottom) {
				legend.itemY = legend.initialItemY;
				legend.itemX += legend.maxItemWidth;
				legend.maxItemWidth = 0;
			}*/ // Set the edge positions
	legend.maxItemWidth=mathMax(legend.maxItemWidth,itemWidth);legend.lastItemY=itemMarginTop+legend.itemY+itemMarginBottom;legend.lastLineHeight=mathMax(itemHeight,legend.lastLineHeight); // #915
	// cache the position of the newly generated or reordered items
	item._legendItemPos=[legend.itemX,legend.itemY]; // advance
	if(horizontal){legend.itemX+=itemWidth;}else {legend.itemY+=itemMarginTop+itemHeight+itemMarginBottom;legend.lastLineHeight=itemHeight;} // the width of the widest item
	legend.offsetWidth=widthOption||mathMax((horizontal?legend.itemX-initialItemX-itemDistance:itemWidth)+padding,legend.offsetWidth);}, /**
		 * Get all items, which is one item per series for normal series and one item per point
		 * for pie series.
		 */getAllItems:function getAllItems(){var allItems=[];each(this.chart.series,function(series){var seriesOptions=series.options; // Handle showInLegend. If the series is linked to another series, defaults to false.
	if(!pick(seriesOptions.showInLegend,!defined(seriesOptions.linkedTo)?UNDEFINED:false,true)){return;} // use points or series for the legend item depending on legendType
	allItems=allItems.concat(series.legendItems||(seriesOptions.legendType==='point'?series.data:series));});return allItems;}, /**
		 * Adjust the chart margins by reserving space for the legend on only one side
		 * of the chart. If the position is set to a corner, top or bottom is reserved
		 * for horizontal legends and left or right for vertical ones.
		 */adjustMargins:function adjustMargins(margin,spacing){var chart=this.chart,options=this.options, // Use the first letter of each alignment option in order to detect the side 
	alignment=options.align.charAt(0)+options.verticalAlign.charAt(0)+options.layout.charAt(0); // #4189 - use charAt(x) notation instead of [x] for IE7
	if(this.display&&!options.floating){each([/(lth|ct|rth)/,/(rtv|rm|rbv)/,/(rbh|cb|lbh)/,/(lbv|lm|ltv)/],function(alignments,side){if(alignments.test(alignment)&&!defined(margin[side])){ // Now we have detected on which side of the chart we should reserve space for the legend
	chart[marginNames[side]]=mathMax(chart[marginNames[side]],chart.legend[(side+1)%2?'legendHeight':'legendWidth']+[1,-1,-1,1][side]*options[side%2?'x':'y']+pick(options.margin,12)+spacing[side]);}});}}, /**
		 * Render the legend. This method can be called both before and after
		 * chart.render. If called after, it will only rearrange items instead
		 * of creating new ones.
		 */render:function render(){var legend=this,chart=legend.chart,renderer=chart.renderer,legendGroup=legend.group,allItems,display,legendWidth,legendHeight,box=legend.box,options=legend.options,padding=legend.padding,legendBorderWidth=options.borderWidth,legendBackgroundColor=options.backgroundColor;legend.itemX=legend.initialItemX;legend.itemY=legend.initialItemY;legend.offsetWidth=0;legend.lastItemY=0;if(!legendGroup){legend.group=legendGroup=renderer.g('legend').attr({zIndex:7}).add();legend.contentGroup=renderer.g().attr({zIndex:1}) // above background
	.add(legendGroup);legend.scrollGroup=renderer.g().add(legend.contentGroup);}legend.renderTitle(); // add each series or point
	allItems=legend.getAllItems(); // sort by legendIndex
	stableSort(allItems,function(a,b){return (a.options&&a.options.legendIndex||0)-(b.options&&b.options.legendIndex||0);}); // reversed legend
	if(options.reversed){allItems.reverse();}legend.allItems=allItems;legend.display=display=!!allItems.length; // render the items
	legend.lastLineHeight=0;each(allItems,function(item){legend.renderItem(item);}); // Get the box
	legendWidth=(options.width||legend.offsetWidth)+padding;legendHeight=legend.lastItemY+legend.lastLineHeight+legend.titleHeight;legendHeight=legend.handleOverflow(legendHeight);legendHeight+=padding; // Draw the border and/or background
	if(legendBorderWidth||legendBackgroundColor){if(!box){legend.box=box=renderer.rect(0,0,legendWidth,legendHeight,options.borderRadius,legendBorderWidth||0).attr({stroke:options.borderColor,'stroke-width':legendBorderWidth||0,fill:legendBackgroundColor||NONE}).add(legendGroup).shadow(options.shadow);box.isNew=true;}else if(legendWidth>0&&legendHeight>0){box[box.isNew?'attr':'animate'](box.crisp({width:legendWidth,height:legendHeight}));box.isNew=false;} // hide the border if no items
	box[display?'show':'hide']();}legend.legendWidth=legendWidth;legend.legendHeight=legendHeight; // Now that the legend width and height are established, put the items in the 
	// final position
	each(allItems,function(item){legend.positionItem(item);}); // 1.x compatibility: positioning based on style
	/*var props = ['left', 'right', 'top', 'bottom'],
				prop,
				i = 4;
			while (i--) {
				prop = props[i];
				if (options.style[prop] && options.style[prop] !== 'auto') {
					options[i < 2 ? 'align' : 'verticalAlign'] = prop;
					options[i < 2 ? 'x' : 'y'] = pInt(options.style[prop]) * (i % 2 ? -1 : 1);
				}
			}*/if(display){legendGroup.align(extend({width:legendWidth,height:legendHeight},options),true,'spacingBox');}if(!chart.isResizing){this.positionCheckboxes();}}, /**
		 * Set up the overflow handling by adding navigation with up and down arrows below the
		 * legend.
		 */handleOverflow:function handleOverflow(legendHeight){var legend=this,chart=this.chart,renderer=chart.renderer,options=this.options,optionsY=options.y,alignTop=options.verticalAlign==='top',spaceHeight=chart.spacingBox.height+(alignTop?-optionsY:optionsY)-this.padding,maxHeight=options.maxHeight,clipHeight,clipRect=this.clipRect,navOptions=options.navigation,animation=pick(navOptions.animation,true),arrowSize=navOptions.arrowSize||12,nav=this.nav,pages=this.pages,padding=this.padding,lastY,allItems=this.allItems,clipToHeight=function clipToHeight(height){clipRect.attr({height:height}); // useHTML
	if(legend.contentGroup.div){legend.contentGroup.div.style.clip='rect('+padding+'px,9999px,'+(padding+height)+'px,0)';}}; // Adjust the height
	if(options.layout==='horizontal'){spaceHeight/=2;}if(maxHeight){spaceHeight=mathMin(spaceHeight,maxHeight);} // Reset the legend height and adjust the clipping rectangle
	pages.length=0;if(legendHeight>spaceHeight){this.clipHeight=clipHeight=mathMax(spaceHeight-20-this.titleHeight-padding,0);this.currentPage=pick(this.currentPage,1);this.fullHeight=legendHeight; // Fill pages with Y positions so that the top of each a legend item defines
	// the scroll top for each page (#2098)
	each(allItems,function(item,i){var y=item._legendItemPos[1],h=mathRound(item.legendItem.getBBox().height),len=pages.length;if(!len||y-pages[len-1]>clipHeight&&(lastY||y)!==pages[len-1]){pages.push(lastY||y);len++;}if(i===allItems.length-1&&y+h-pages[len-1]>clipHeight){pages.push(y);}if(y!==lastY){lastY=y;}}); // Only apply clipping if needed. Clipping causes blurred legend in PDF export (#1787)
	if(!clipRect){clipRect=legend.clipRect=renderer.clipRect(0,padding,9999,0);legend.contentGroup.clip(clipRect);}clipToHeight(clipHeight); // Add navigation elements
	if(!nav){this.nav=nav=renderer.g().attr({zIndex:1}).add(this.group);this.up=renderer.symbol('triangle',0,0,arrowSize,arrowSize).on('click',function(){legend.scroll(-1,animation);}).add(nav);this.pager=renderer.text('',15,10).css(navOptions.style).add(nav);this.down=renderer.symbol('triangle-down',0,0,arrowSize,arrowSize).on('click',function(){legend.scroll(1,animation);}).add(nav);} // Set initial position
	legend.scroll(0);legendHeight=spaceHeight;}else if(nav){clipToHeight(chart.chartHeight);nav.hide();this.scrollGroup.attr({translateY:1});this.clipHeight=0; // #1379
	}return legendHeight;}, /**
		 * Scroll the legend by a number of pages
		 * @param {Object} scrollBy
		 * @param {Object} animation
		 */scroll:function scroll(scrollBy,animation){var pages=this.pages,pageCount=pages.length,currentPage=this.currentPage+scrollBy,clipHeight=this.clipHeight,navOptions=this.options.navigation,activeColor=navOptions.activeColor,inactiveColor=navOptions.inactiveColor,pager=this.pager,padding=this.padding,scrollOffset; // When resizing while looking at the last page
	if(currentPage>pageCount){currentPage=pageCount;}if(currentPage>0){if(animation!==UNDEFINED){setAnimation(animation,this.chart);}this.nav.attr({translateX:padding,translateY:clipHeight+this.padding+7+this.titleHeight,visibility:VISIBLE});this.up.attr({fill:currentPage===1?inactiveColor:activeColor}).css({cursor:currentPage===1?'default':'pointer'});pager.attr({text:currentPage+'/'+pageCount});this.down.attr({x:18+this.pager.getBBox().width, // adjust to text width
	fill:currentPage===pageCount?inactiveColor:activeColor}).css({cursor:currentPage===pageCount?'default':'pointer'});scrollOffset=-pages[currentPage-1]+this.initialItemY;this.scrollGroup.animate({translateY:scrollOffset});this.currentPage=currentPage;this.positionCheckboxes(scrollOffset);}}}; /*
	 * LegendSymbolMixin
	 */var LegendSymbolMixin=Highcharts.LegendSymbolMixin={ /**
		 * Get the series' symbol in the legend
		 * 
		 * @param {Object} legend The legend object
		 * @param {Object} item The series (this) or point
		 */drawRectangle:function drawRectangle(legend,item){var symbolHeight=legend.options.symbolHeight||legend.fontMetrics.f;item.legendSymbol=this.chart.renderer.rect(0,legend.baseline-symbolHeight+1, // #3988
	legend.symbolWidth,symbolHeight,legend.options.symbolRadius||0).attr({zIndex:3}).add(item.legendGroup);}, /**
		 * Get the series' symbol in the legend. This method should be overridable to create custom 
		 * symbols through Highcharts.seriesTypes[type].prototype.drawLegendSymbols.
		 * 
		 * @param {Object} legend The legend object
		 */drawLineMarker:function drawLineMarker(legend){var options=this.options,markerOptions=options.marker,radius,legendSymbol,symbolWidth=legend.symbolWidth,renderer=this.chart.renderer,legendItemGroup=this.legendGroup,verticalCenter=legend.baseline-mathRound(legend.fontMetrics.b*0.3),attr; // Draw the line
	if(options.lineWidth){attr={'stroke-width':options.lineWidth};if(options.dashStyle){attr.dashstyle=options.dashStyle;}this.legendLine=renderer.path([M,0,verticalCenter,L,symbolWidth,verticalCenter]).attr(attr).add(legendItemGroup);} // Draw the marker
	if(markerOptions&&markerOptions.enabled!==false){radius=markerOptions.radius;this.legendSymbol=legendSymbol=renderer.symbol(this.symbol,symbolWidth/2-radius,verticalCenter-radius,2*radius,2*radius).add(legendItemGroup);legendSymbol.isMarker=true;}}}; // Workaround for #2030, horizontal legend items not displaying in IE11 Preview,
	// and for #2580, a similar drawing flaw in Firefox 26.
	// TODO: Explore if there's a general cause for this. The problem may be related 
	// to nested group elements, as the legend item texts are within 4 group elements.
	if(/Trident\/7\.0/.test(userAgent)||isFirefox){wrap(Legend.prototype,'positionItem',function(proceed,item){var legend=this,runPositionItem=function runPositionItem(){ // If chart destroyed in sync, this is undefined (#2030)
	if(item._legendItemPos){proceed.call(legend,item);}}; // Do it now, for export and to get checkbox placement
	runPositionItem(); // Do it after to work around the core issue
	setTimeout(runPositionItem);});} /**
	 * The chart class
	 * @param {Object} options
	 * @param {Function} callback Function to run when the chart has loaded
	 */var Chart=Highcharts.Chart=function(){this.init.apply(this,arguments);};Chart.prototype={ /**
		 * Hook for modules
		 */callbacks:[], /**
		 * Initialize the chart
		 */init:function init(userOptions,callback){ // Handle regular options
	var options,seriesOptions=userOptions.series; // skip merging data points to increase performance
	userOptions.series=null;options=merge(defaultOptions,userOptions); // do the merge
	options.series=userOptions.series=seriesOptions; // set back the series data
	this.userOptions=userOptions;var optionsChart=options.chart; // Create margin & spacing array
	this.margin=this.splashArray('margin',optionsChart);this.spacing=this.splashArray('spacing',optionsChart);var chartEvents=optionsChart.events; //this.runChartClick = chartEvents && !!chartEvents.click;
	this.bounds={h:{},v:{}}; // Pixel data bounds for touch zoom
	this.callback=callback;this.isResizing=0;this.options=options; //chartTitleOptions = UNDEFINED;
	//chartSubtitleOptions = UNDEFINED;
	this.axes=[];this.series=[];this.hasCartesianSeries=optionsChart.showAxes; //this.axisOffset = UNDEFINED;
	//this.maxTicks = UNDEFINED; // handle the greatest amount of ticks on grouped axes
	//this.inverted = UNDEFINED;
	//this.loadingShown = UNDEFINED;
	//this.container = UNDEFINED;
	//this.chartWidth = UNDEFINED;
	//this.chartHeight = UNDEFINED;
	//this.marginRight = UNDEFINED;
	//this.marginBottom = UNDEFINED;
	//this.containerWidth = UNDEFINED;
	//this.containerHeight = UNDEFINED;
	//this.oldChartWidth = UNDEFINED;
	//this.oldChartHeight = UNDEFINED;
	//this.renderTo = UNDEFINED;
	//this.renderToClone = UNDEFINED;
	//this.spacingBox = UNDEFINED
	//this.legend = UNDEFINED;
	// Elements
	//this.chartBackground = UNDEFINED;
	//this.plotBackground = UNDEFINED;
	//this.plotBGImage = UNDEFINED;
	//this.plotBorder = UNDEFINED;
	//this.loadingDiv = UNDEFINED;
	//this.loadingSpan = UNDEFINED;
	var chart=this,eventType; // Add the chart to the global lookup
	chart.index=charts.length;charts.push(chart);chartCount++; // Set up auto resize
	if(optionsChart.reflow!==false){addEvent(chart,'load',function(){chart.initReflow();});} // Chart event handlers
	if(chartEvents){for(eventType in chartEvents){addEvent(chart,eventType,chartEvents[eventType]);}}chart.xAxis=[];chart.yAxis=[]; // Expose methods and variables
	chart.animation=useCanVG?false:pick(optionsChart.animation,true);chart.pointCount=chart.colorCounter=chart.symbolCounter=0;chart.firstRender();}, /**
		 * Initialize an individual series, called internally before render time
		 */initSeries:function initSeries(options){var chart=this,optionsChart=chart.options.chart,type=options.type||optionsChart.type||optionsChart.defaultSeriesType,series,constr=seriesTypes[type]; // No such series type
	if(!constr){error(17,true);}series=new constr();series.init(this,options);return series;}, /**
		 * Check whether a given point is within the plot area
		 *
		 * @param {Number} plotX Pixel x relative to the plot area
		 * @param {Number} plotY Pixel y relative to the plot area
		 * @param {Boolean} inverted Whether the chart is inverted
		 */isInsidePlot:function isInsidePlot(plotX,plotY,inverted){var x=inverted?plotY:plotX,y=inverted?plotX:plotY;return x>=0&&x<=this.plotWidth&&y>=0&&y<=this.plotHeight;}, /**
		 * Redraw legend, axes or series based on updated data
		 *
		 * @param {Boolean|Object} animation Whether to apply animation, and optionally animation
		 *    configuration
		 */redraw:function redraw(animation){var chart=this,axes=chart.axes,series=chart.series,pointer=chart.pointer,legend=chart.legend,redrawLegend=chart.isDirtyLegend,hasStackedSeries,hasDirtyStacks,hasCartesianSeries=chart.hasCartesianSeries,isDirtyBox=chart.isDirtyBox, // todo: check if it has actually changed?
	seriesLength=series.length,i=seriesLength,serie,renderer=chart.renderer,isHiddenChart=renderer.isHidden(),afterRedraw=[];setAnimation(animation,chart);if(isHiddenChart){chart.cloneRenderTo();} // Adjust title layout (reflow multiline text)
	chart.layOutTitles(); // link stacked series
	while(i--){serie=series[i];if(serie.options.stacking){hasStackedSeries=true;if(serie.isDirty){hasDirtyStacks=true;break;}}}if(hasDirtyStacks){ // mark others as dirty
	i=seriesLength;while(i--){serie=series[i];if(serie.options.stacking){serie.isDirty=true;}}} // Handle updated data in the series
	each(series,function(serie){if(serie.isDirty){if(serie.options.legendType==='point'){if(serie.updateTotals){serie.updateTotals();}redrawLegend=true;}}}); // handle added or removed series
	if(redrawLegend&&legend.options.enabled){ // series or pie points are added or removed
	// draw legend graphics
	legend.render();chart.isDirtyLegend=false;} // reset stacks
	if(hasStackedSeries){chart.getStacks();}if(hasCartesianSeries){if(!chart.isResizing){ // reset maxTicks
	chart.maxTicks=null; // set axes scales
	each(axes,function(axis){axis.setScale();});}}chart.getMargins(); // #3098
	if(hasCartesianSeries){ // If one axis is dirty, all axes must be redrawn (#792, #2169)
	each(axes,function(axis){if(axis.isDirty){isDirtyBox=true;}}); // redraw axes
	each(axes,function(axis){ // Fire 'afterSetExtremes' only if extremes are set
	var key=axis.min+','+axis.max;if(axis.extKey!==key){ // #821, #4452
	axis.extKey=key;afterRedraw.push(function(){ // prevent a recursive call to chart.redraw() (#1119)
	fireEvent(axis,'afterSetExtremes',extend(axis.eventArgs,axis.getExtremes())); // #747, #751
	delete axis.eventArgs;});}if(isDirtyBox||hasStackedSeries){axis.redraw();}});} // the plot areas size has changed
	if(isDirtyBox){chart.drawChartBox();} // redraw affected series
	each(series,function(serie){if(serie.isDirty&&serie.visible&&(!serie.isCartesian||serie.xAxis)){ // issue #153
	serie.redraw();}}); // move tooltip or reset
	if(pointer){pointer.reset(true);} // redraw if canvas
	renderer.draw(); // fire the event
	fireEvent(chart,'redraw'); // jQuery breaks this when calling it from addEvent. Overwrites chart.redraw
	if(isHiddenChart){chart.cloneRenderTo(true);} // Fire callbacks that are put on hold until after the redraw
	each(afterRedraw,function(callback){callback.call();});}, /**
		 * Get an axis, series or point object by id.
		 * @param id {String} The id as given in the configuration options
		 */get:function get(id){var chart=this,axes=chart.axes,series=chart.series;var i,j,points; // search axes
	for(i=0;i<axes.length;i++){if(axes[i].options.id===id){return axes[i];}} // search series
	for(i=0;i<series.length;i++){if(series[i].options.id===id){return series[i];}} // search points
	for(i=0;i<series.length;i++){points=series[i].points||[];for(j=0;j<points.length;j++){if(points[j].id===id){return points[j];}}}return null;}, /**
		 * Create the Axis instances based on the config options
		 */getAxes:function getAxes(){var chart=this,options=this.options,xAxisOptions=options.xAxis=splat(options.xAxis||{}),yAxisOptions=options.yAxis=splat(options.yAxis||{}),optionsArray,axis; // make sure the options are arrays and add some members
	each(xAxisOptions,function(axis,i){axis.index=i;axis.isX=true;});each(yAxisOptions,function(axis,i){axis.index=i;}); // concatenate all axis options into one array
	optionsArray=xAxisOptions.concat(yAxisOptions);each(optionsArray,function(axisOptions){axis=new Axis(chart,axisOptions);});}, /**
		 * Get the currently selected points from all series
		 */getSelectedPoints:function getSelectedPoints(){var points=[];each(this.series,function(serie){points=points.concat(grep(serie.points||[],function(point){return point.selected;}));});return points;}, /**
		 * Get the currently selected series
		 */getSelectedSeries:function getSelectedSeries(){return grep(this.series,function(serie){return serie.selected;});}, /**
		 * Show the title and subtitle of the chart
		 *
		 * @param titleOptions {Object} New title options
		 * @param subtitleOptions {Object} New subtitle options
		 *
		 */setTitle:function setTitle(titleOptions,subtitleOptions,redraw){var chart=this,options=chart.options,chartTitleOptions,chartSubtitleOptions;chartTitleOptions=options.title=merge(options.title,titleOptions);chartSubtitleOptions=options.subtitle=merge(options.subtitle,subtitleOptions); // add title and subtitle
	each([['title',titleOptions,chartTitleOptions],['subtitle',subtitleOptions,chartSubtitleOptions]],function(arr){var name=arr[0],title=chart[name],titleOptions=arr[1],chartTitleOptions=arr[2];if(title&&titleOptions){chart[name]=title=title.destroy(); // remove old
	}if(chartTitleOptions&&chartTitleOptions.text&&!title){chart[name]=chart.renderer.text(chartTitleOptions.text,0,0,chartTitleOptions.useHTML).attr({align:chartTitleOptions.align,'class':PREFIX+name,zIndex:chartTitleOptions.zIndex||4}).css(chartTitleOptions.style).add();}});chart.layOutTitles(redraw);}, /**
		 * Lay out the chart titles and cache the full offset height for use in getMargins
		 */layOutTitles:function layOutTitles(redraw){var titleOffset=0,title=this.title,subtitle=this.subtitle,options=this.options,titleOptions=options.title,subtitleOptions=options.subtitle,requiresDirtyBox,renderer=this.renderer,autoWidth=this.spacingBox.width-44; // 44 makes room for default context button
	if(title){title.css({width:(titleOptions.width||autoWidth)+PX}).align(extend({y:renderer.fontMetrics(titleOptions.style.fontSize,title).b-3},titleOptions),false,'spacingBox');if(!titleOptions.floating&&!titleOptions.verticalAlign){titleOffset=title.getBBox().height;}}if(subtitle){subtitle.css({width:(subtitleOptions.width||autoWidth)+PX}).align(extend({y:titleOffset+(titleOptions.margin-13)+renderer.fontMetrics(subtitleOptions.style.fontSize,title).b},subtitleOptions),false,'spacingBox');if(!subtitleOptions.floating&&!subtitleOptions.verticalAlign){titleOffset=mathCeil(titleOffset+subtitle.getBBox().height);}}requiresDirtyBox=this.titleOffset!==titleOffset;this.titleOffset=titleOffset; // used in getMargins
	if(!this.isDirtyBox&&requiresDirtyBox){this.isDirtyBox=requiresDirtyBox; // Redraw if necessary (#2719, #2744)		
	if(this.hasRendered&&pick(redraw,true)&&this.isDirtyBox){this.redraw();}}}, /**
		 * Get chart width and height according to options and container size
		 */getChartSize:function getChartSize(){var chart=this,optionsChart=chart.options.chart,widthOption=optionsChart.width,heightOption=optionsChart.height,renderTo=chart.renderToClone||chart.renderTo; // get inner width and height from jQuery (#824)
	if(!defined(widthOption)){chart.containerWidth=adapterRun(renderTo,'width');}if(!defined(heightOption)){chart.containerHeight=adapterRun(renderTo,'height');}chart.chartWidth=mathMax(0,widthOption||chart.containerWidth||600); // #1393, 1460
	chart.chartHeight=mathMax(0,pick(heightOption, // the offsetHeight of an empty container is 0 in standard browsers, but 19 in IE7:
	chart.containerHeight>19?chart.containerHeight:400));}, /**
		 * Create a clone of the chart's renderTo div and place it outside the viewport to allow
		 * size computation on chart.render and chart.redraw
		 */cloneRenderTo:function cloneRenderTo(revert){var clone=this.renderToClone,container=this.container; // Destroy the clone and bring the container back to the real renderTo div
	if(revert){if(clone){this.renderTo.appendChild(container);discardElement(clone);delete this.renderToClone;} // Set up the clone
	}else {if(container&&container.parentNode===this.renderTo){this.renderTo.removeChild(container); // do not clone this
	}this.renderToClone=clone=this.renderTo.cloneNode(0);_css(clone,{position:ABSOLUTE,top:'-9999px',display:'block' // #833
	});if(clone.style.setProperty){ // #2631
	clone.style.setProperty('display','block','important');}doc.body.appendChild(clone);if(container){clone.appendChild(container);}}}, /**
		 * Get the containing element, determine the size and create the inner container
		 * div to hold the chart
		 */getContainer:function getContainer(){var chart=this,container,options=chart.options,optionsChart=options.chart,chartWidth,chartHeight,renderTo,indexAttrName='data-highcharts-chart',oldChartIndex,Ren,containerId;chart.renderTo=renderTo=optionsChart.renderTo;containerId=PREFIX+idCounter++;if(isString(renderTo)){chart.renderTo=renderTo=doc.getElementById(renderTo);} // Display an error if the renderTo is wrong
	if(!renderTo){error(13,true);} // If the container already holds a chart, destroy it. The check for hasRendered is there
	// because web pages that are saved to disk from the browser, will preserve the data-highcharts-chart
	// attribute and the SVG contents, but not an interactive chart. So in this case,
	// charts[oldChartIndex] will point to the wrong chart if any (#2609).
	oldChartIndex=pInt(attr(renderTo,indexAttrName));if(!isNaN(oldChartIndex)&&charts[oldChartIndex]&&charts[oldChartIndex].hasRendered){charts[oldChartIndex].destroy();} // Make a reference to the chart from the div
	attr(renderTo,indexAttrName,chart.index); // remove previous chart
	renderTo.innerHTML=''; // If the container doesn't have an offsetWidth, it has or is a child of a node
	// that has display:none. We need to temporarily move it out to a visible
	// state to determine the size, else the legend and tooltips won't render
	// properly. The allowClone option is used in sparklines as a micro optimization,
	// saving about 1-2 ms each chart.
	if(!optionsChart.skipClone&&!renderTo.offsetWidth){chart.cloneRenderTo();} // get the width and height
	chart.getChartSize();chartWidth=chart.chartWidth;chartHeight=chart.chartHeight; // create the inner container
	chart.container=container=createElement(DIV,{className:PREFIX+'container'+(optionsChart.className?' '+optionsChart.className:''),id:containerId},extend({position:RELATIVE,overflow:HIDDEN, // needed for context menu (avoid scrollbars) and
	// content overflow in IE
	width:chartWidth+PX,height:chartHeight+PX,textAlign:'left',lineHeight:'normal', // #427
	zIndex:0, // #1072
	'-webkit-tap-highlight-color':'rgba(0,0,0,0)'},optionsChart.style),chart.renderToClone||renderTo); // cache the cursor (#1650)
	chart._cursor=container.style.cursor; // Initialize the renderer
	Ren=Highcharts[optionsChart.renderer]||Renderer;chart.renderer=new Ren(container,chartWidth,chartHeight,optionsChart.style,optionsChart.forExport,options.exporting&&options.exporting.allowHTML);if(useCanVG){ // If we need canvg library, extend and configure the renderer
	// to get the tracker for translating mouse events
	chart.renderer.create(chart,container,chartWidth,chartHeight);} // Add a reference to the charts index
	chart.renderer.chartIndex=chart.index;}, /**
		 * Calculate margins by rendering axis labels in a preliminary position. Title,
		 * subtitle and legend have already been rendered at this stage, but will be
		 * moved into their final positions
		 */getMargins:function getMargins(skipAxes){var chart=this,spacing=chart.spacing,margin=chart.margin,titleOffset=chart.titleOffset;chart.resetMargins(); // Adjust for title and subtitle
	if(titleOffset&&!defined(margin[0])){chart.plotTop=mathMax(chart.plotTop,titleOffset+chart.options.title.margin+spacing[0]);} // Adjust for legend
	chart.legend.adjustMargins(margin,spacing); // adjust for scroller
	if(chart.extraBottomMargin){chart.marginBottom+=chart.extraBottomMargin;}if(chart.extraTopMargin){chart.plotTop+=chart.extraTopMargin;}if(!skipAxes){this.getAxisMargins();}},getAxisMargins:function getAxisMargins(){var chart=this,axisOffset=chart.axisOffset=[0,0,0,0], // top, right, bottom, left
	margin=chart.margin; // pre-render axes to get labels offset width
	if(chart.hasCartesianSeries){each(chart.axes,function(axis){if(axis.visible){axis.getOffset();}});} // Add the axis offsets
	each(marginNames,function(m,side){if(!defined(margin[side])){chart[m]+=axisOffset[side];}});chart.setChartSize();}, /**
		 * Resize the chart to its container if size is not explicitly set
		 */reflow:function reflow(e){var chart=this,optionsChart=chart.options.chart,renderTo=chart.renderTo,width=optionsChart.width||adapterRun(renderTo,'width'),height=optionsChart.height||adapterRun(renderTo,'height'),target=e?e.target:win, // #805 - MooTools doesn't supply e
	doReflow=function doReflow(){if(chart.container){ // It may have been destroyed in the meantime (#1257)
	chart.setSize(width,height,false);chart.hasUserSize=null;}}; // Width and height checks for display:none. Target is doc in IE8 and Opera,
	// win in Firefox, Chrome and IE9.
	if(!chart.hasUserSize&&!chart.isPrinting&&width&&height&&(target===win||target===doc)){ // #1093
	if(width!==chart.containerWidth||height!==chart.containerHeight){clearTimeout(chart.reflowTimeout);if(e){ // Called from window.resize
	chart.reflowTimeout=setTimeout(doReflow,100);}else { // Called directly (#2224)
	doReflow();}}chart.containerWidth=width;chart.containerHeight=height;}}, /**
		 * Add the event handlers necessary for auto resizing
		 */initReflow:function initReflow(){var chart=this,reflow=function reflow(e){chart.reflow(e);};addEvent(win,'resize',reflow);addEvent(chart,'destroy',function(){removeEvent(win,'resize',reflow);});}, /**
		 * Resize the chart to a given width and height
		 * @param {Number} width
		 * @param {Number} height
		 * @param {Object|Boolean} animation
		 */setSize:function setSize(width,height,animation){var chart=this,chartWidth,chartHeight,fireEndResize,renderer=chart.renderer,globalAnimation; // Handle the isResizing counter
	chart.isResizing+=1;fireEndResize=function fireEndResize(){if(chart){fireEvent(chart,'endResize',null,function(){chart.isResizing-=1;});}}; // set the animation for the current process
	setAnimation(animation,chart);chart.oldChartHeight=chart.chartHeight;chart.oldChartWidth=chart.chartWidth;if(defined(width)){chart.chartWidth=chartWidth=mathMax(0,mathRound(width));chart.hasUserSize=!!chartWidth;}if(defined(height)){chart.chartHeight=chartHeight=mathMax(0,mathRound(height));} // Resize the container with the global animation applied if enabled (#2503)
	globalAnimation=renderer.globalAnimation;(globalAnimation?_animate:_css)(chart.container,{width:chartWidth+PX,height:chartHeight+PX},globalAnimation);chart.setChartSize(true);renderer.setSize(chartWidth,chartHeight,animation); // handle axes
	chart.maxTicks=null;each(chart.axes,function(axis){axis.isDirty=true;axis.setScale();}); // make sure non-cartesian series are also handled
	each(chart.series,function(serie){serie.isDirty=true;});chart.isDirtyLegend=true; // force legend redraw
	chart.isDirtyBox=true; // force redraw of plot and chart border
	chart.layOutTitles(); // #2857
	chart.getMargins();chart.redraw(animation);chart.oldChartHeight=null;fireEvent(chart,'resize'); // Fire endResize and set isResizing back. If animation is disabled, fire without delay
	globalAnimation=renderer.globalAnimation; // Reassign it before using it, it may have changed since the top of this function.
	if(globalAnimation===false){fireEndResize();}else { // else set a timeout with the animation duration
	setTimeout(fireEndResize,globalAnimation&&globalAnimation.duration||500);}}, /**
		 * Set the public chart properties. This is done before and after the pre-render
		 * to determine margin sizes
		 */setChartSize:function setChartSize(skipAxes){var chart=this,inverted=chart.inverted,renderer=chart.renderer,chartWidth=chart.chartWidth,chartHeight=chart.chartHeight,optionsChart=chart.options.chart,spacing=chart.spacing,clipOffset=chart.clipOffset,clipX,clipY,plotLeft,plotTop,plotWidth,plotHeight,plotBorderWidth;chart.plotLeft=plotLeft=mathRound(chart.plotLeft);chart.plotTop=plotTop=mathRound(chart.plotTop);chart.plotWidth=plotWidth=mathMax(0,mathRound(chartWidth-plotLeft-chart.marginRight));chart.plotHeight=plotHeight=mathMax(0,mathRound(chartHeight-plotTop-chart.marginBottom));chart.plotSizeX=inverted?plotHeight:plotWidth;chart.plotSizeY=inverted?plotWidth:plotHeight;chart.plotBorderWidth=optionsChart.plotBorderWidth||0; // Set boxes used for alignment
	chart.spacingBox=renderer.spacingBox={x:spacing[3],y:spacing[0],width:chartWidth-spacing[3]-spacing[1],height:chartHeight-spacing[0]-spacing[2]};chart.plotBox=renderer.plotBox={x:plotLeft,y:plotTop,width:plotWidth,height:plotHeight};plotBorderWidth=2*mathFloor(chart.plotBorderWidth/2);clipX=mathCeil(mathMax(plotBorderWidth,clipOffset[3])/2);clipY=mathCeil(mathMax(plotBorderWidth,clipOffset[0])/2);chart.clipBox={x:clipX,y:clipY,width:mathFloor(chart.plotSizeX-mathMax(plotBorderWidth,clipOffset[1])/2-clipX),height:mathMax(0,mathFloor(chart.plotSizeY-mathMax(plotBorderWidth,clipOffset[2])/2-clipY))};if(!skipAxes){each(chart.axes,function(axis){axis.setAxisSize();axis.setAxisTranslation();});}}, /**
		 * Initial margins before auto size margins are applied
		 */resetMargins:function resetMargins(){var chart=this;each(marginNames,function(m,side){chart[m]=pick(chart.margin[side],chart.spacing[side]);});chart.axisOffset=[0,0,0,0]; // top, right, bottom, left
	chart.clipOffset=[0,0,0,0];}, /**
		 * Draw the borders and backgrounds for chart and plot area
		 */drawChartBox:function drawChartBox(){var chart=this,optionsChart=chart.options.chart,renderer=chart.renderer,chartWidth=chart.chartWidth,chartHeight=chart.chartHeight,chartBackground=chart.chartBackground,plotBackground=chart.plotBackground,plotBorder=chart.plotBorder,plotBGImage=chart.plotBGImage,chartBorderWidth=optionsChart.borderWidth||0,chartBackgroundColor=optionsChart.backgroundColor,plotBackgroundColor=optionsChart.plotBackgroundColor,plotBackgroundImage=optionsChart.plotBackgroundImage,plotBorderWidth=optionsChart.plotBorderWidth||0,mgn,bgAttr,plotLeft=chart.plotLeft,plotTop=chart.plotTop,plotWidth=chart.plotWidth,plotHeight=chart.plotHeight,plotBox=chart.plotBox,clipRect=chart.clipRect,clipBox=chart.clipBox; // Chart area
	mgn=chartBorderWidth+(optionsChart.shadow?8:0);if(chartBorderWidth||chartBackgroundColor){if(!chartBackground){bgAttr={fill:chartBackgroundColor||NONE};if(chartBorderWidth){ // #980
	bgAttr.stroke=optionsChart.borderColor;bgAttr['stroke-width']=chartBorderWidth;}chart.chartBackground=renderer.rect(mgn/2,mgn/2,chartWidth-mgn,chartHeight-mgn,optionsChart.borderRadius,chartBorderWidth).attr(bgAttr).addClass(PREFIX+'background').add().shadow(optionsChart.shadow);}else { // resize
	chartBackground.animate(chartBackground.crisp({width:chartWidth-mgn,height:chartHeight-mgn}));}} // Plot background
	if(plotBackgroundColor){if(!plotBackground){chart.plotBackground=renderer.rect(plotLeft,plotTop,plotWidth,plotHeight,0).attr({fill:plotBackgroundColor}).add().shadow(optionsChart.plotShadow);}else {plotBackground.animate(plotBox);}}if(plotBackgroundImage){if(!plotBGImage){chart.plotBGImage=renderer.image(plotBackgroundImage,plotLeft,plotTop,plotWidth,plotHeight).add();}else {plotBGImage.animate(plotBox);}} // Plot clip
	if(!clipRect){chart.clipRect=renderer.clipRect(clipBox);}else {clipRect.animate({width:clipBox.width,height:clipBox.height});} // Plot area border
	if(plotBorderWidth){if(!plotBorder){chart.plotBorder=renderer.rect(plotLeft,plotTop,plotWidth,plotHeight,0,-plotBorderWidth).attr({stroke:optionsChart.plotBorderColor,'stroke-width':plotBorderWidth,fill:NONE,zIndex:1}).add();}else {plotBorder.animate(plotBorder.crisp({x:plotLeft,y:plotTop,width:plotWidth,height:plotHeight,strokeWidth:-plotBorderWidth}) //#3282 plotBorder should be negative
	);}} // reset
	chart.isDirtyBox=false;}, /**
		 * Detect whether a certain chart property is needed based on inspecting its options
		 * and series. This mainly applies to the chart.invert property, and in extensions to 
		 * the chart.angular and chart.polar properties.
		 */propFromSeries:function propFromSeries(){var chart=this,optionsChart=chart.options.chart,klass,seriesOptions=chart.options.series,i,value;each(['inverted','angular','polar'],function(key){ // The default series type's class
	klass=seriesTypes[optionsChart.type||optionsChart.defaultSeriesType]; // Get the value from available chart-wide properties
	value=chart[key]|| // 1. it is set before
	optionsChart[key]|| // 2. it is set in the options
	klass&&klass.prototype[key] // 3. it's default series class requires it
	; // 4. Check if any the chart's series require it
	i=seriesOptions&&seriesOptions.length;while(!value&&i--){klass=seriesTypes[seriesOptions[i].type];if(klass&&klass.prototype[key]){value=true;}} // Set the chart property
	chart[key]=value;});}, /**
		 * Link two or more series together. This is done initially from Chart.render,
		 * and after Chart.addSeries and Series.remove.
		 */linkSeries:function linkSeries(){var chart=this,chartSeries=chart.series; // Reset links
	each(chartSeries,function(series){series.linkedSeries.length=0;}); // Apply new links
	each(chartSeries,function(series){var linkedTo=series.options.linkedTo;if(isString(linkedTo)){if(linkedTo===':previous'){linkedTo=chart.series[series.index-1];}else {linkedTo=chart.get(linkedTo);}if(linkedTo){linkedTo.linkedSeries.push(series);series.linkedParent=linkedTo;series.visible=pick(series.options.visible,linkedTo.options.visible,series.visible); // #3879
	}}});}, /**
		 * Render series for the chart
		 */renderSeries:function renderSeries(){each(this.series,function(serie){serie.translate();serie.render();});}, /**
		 * Render labels for the chart
		 */renderLabels:function renderLabels(){var chart=this,labels=chart.options.labels;if(labels.items){each(labels.items,function(label){var style=extend(labels.style,label.style),x=pInt(style.left)+chart.plotLeft,y=pInt(style.top)+chart.plotTop+12; // delete to prevent rewriting in IE
	delete style.left;delete style.top;chart.renderer.text(label.html,x,y).attr({zIndex:2}).css(style).add();});}}, /**
		 * Render all graphics for the chart
		 */render:function render(){var chart=this,axes=chart.axes,renderer=chart.renderer,options=chart.options,tempWidth,tempHeight,redoHorizontal,redoVertical; // Title
	chart.setTitle(); // Legend
	chart.legend=new Legend(chart,options.legend); // Get stacks
	if(chart.getStacks){chart.getStacks();} // Get chart margins
	chart.getMargins(true);chart.setChartSize(); // Record preliminary dimensions for later comparison
	tempWidth=chart.plotWidth;tempHeight=chart.plotHeight=chart.plotHeight-13; // 13 is the most common height of X axis labels
	// Get margins by pre-rendering axes
	each(axes,function(axis){axis.setScale();});chart.getAxisMargins(); // If the plot area size has changed significantly, calculate tick positions again
	redoHorizontal=tempWidth/chart.plotWidth>1.1;redoVertical=tempHeight/chart.plotHeight>1.1;if(redoHorizontal||redoVertical){chart.maxTicks=null; // reset for second pass
	each(axes,function(axis){if(axis.horiz&&redoHorizontal||!axis.horiz&&redoVertical){axis.setTickInterval(true); // update to reflect the new margins
	}});chart.getMargins(); // second pass to check for new labels
	} // Draw the borders and backgrounds
	chart.drawChartBox(); // Axes
	if(chart.hasCartesianSeries){each(axes,function(axis){if(axis.visible){axis.render();}});} // The series
	if(!chart.seriesGroup){chart.seriesGroup=renderer.g('series-group').attr({zIndex:3}).add();}chart.renderSeries(); // Labels
	chart.renderLabels(); // Credits
	chart.showCredits(options.credits); // Set flag
	chart.hasRendered=true;}, /**
		 * Show chart credits based on config options
		 */showCredits:function showCredits(credits){if(credits.enabled&&!this.credits){this.credits=this.renderer.text(credits.text,0,0).on('click',function(){if(credits.href){location.href=credits.href;}}).attr({align:credits.position.align,zIndex:8}).css(credits.style).add().align(credits.position);}}, /**
		 * Clean up memory usage
		 */destroy:function destroy(){var chart=this,axes=chart.axes,series=chart.series,container=chart.container,i,parentNode=container&&container.parentNode; // fire the chart.destoy event
	fireEvent(chart,'destroy'); // Delete the chart from charts lookup array
	charts[chart.index]=UNDEFINED;chartCount--;chart.renderTo.removeAttribute('data-highcharts-chart'); // remove events
	removeEvent(chart); // ==== Destroy collections:
	// Destroy axes
	i=axes.length;while(i--){axes[i]=axes[i].destroy();} // Destroy each series
	i=series.length;while(i--){series[i]=series[i].destroy();} // ==== Destroy chart properties:
	each(['title','subtitle','chartBackground','plotBackground','plotBGImage','plotBorder','seriesGroup','clipRect','credits','pointer','scroller','rangeSelector','legend','resetZoomButton','tooltip','renderer'],function(name){var prop=chart[name];if(prop&&prop.destroy){chart[name]=prop.destroy();}}); // remove container and all SVG
	if(container){ // can break in IE when destroyed before finished loading
	container.innerHTML='';removeEvent(container);if(parentNode){discardElement(container);}} // clean it all up
	for(i in chart){delete chart[i];}}, /**
		 * VML namespaces can't be added until after complete. Listening
		 * for Perini's doScroll hack is not enough.
		 */isReadyToRender:function isReadyToRender(){var chart=this; // Note: in spite of JSLint's complaints, win == win.top is required
	/*jslint eqeq: true*/if(!hasSVG&&win==win.top&&doc.readyState!=='complete'||useCanVG&&!win.canvg){ /*jslint eqeq: false*/if(useCanVG){ // Delay rendering until canvg library is downloaded and ready
	CanVGController.push(function(){chart.firstRender();},chart.options.global.canvasToolsURL);}else {doc.attachEvent('onreadystatechange',function(){doc.detachEvent('onreadystatechange',chart.firstRender);if(doc.readyState==='complete'){chart.firstRender();}});}return false;}return true;}, /**
		 * Prepare for first rendering after all data are loaded
		 */firstRender:function firstRender(){var chart=this,options=chart.options,callback=chart.callback; // Check whether the chart is ready to render
	if(!chart.isReadyToRender()){return;} // Create the container
	chart.getContainer(); // Run an early event after the container and renderer are established
	fireEvent(chart,'init');chart.resetMargins();chart.setChartSize(); // Set the common chart properties (mainly invert) from the given series
	chart.propFromSeries(); // get axes
	chart.getAxes(); // Initialize the series
	each(options.series||[],function(serieOptions){chart.initSeries(serieOptions);});chart.linkSeries(); // Run an event after axes and series are initialized, but before render. At this stage,
	// the series data is indexed and cached in the xData and yData arrays, so we can access
	// those before rendering. Used in Highstock. 
	fireEvent(chart,'beforeRender'); // depends on inverted and on margins being set
	if(Highcharts.Pointer){chart.pointer=new Pointer(chart,options);}chart.render(); // add canvas
	chart.renderer.draw(); // run callbacks
	if(callback){callback.apply(chart,[chart]);}each(chart.callbacks,function(fn){if(chart.index!==UNDEFINED){ // Chart destroyed in its own callback (#3600)
	fn.apply(chart,[chart]);}}); // Fire the load event
	fireEvent(chart,'load'); // If the chart was rendered outside the top container, put it back in (#3679)
	chart.cloneRenderTo(true);}, /**
		* Creates arrays for spacing and margin from given options.
		*/splashArray:function splashArray(target,options){var oVar=options[target],tArray=isObject(oVar)?oVar:[oVar,oVar,oVar,oVar];return [pick(options[target+'Top'],tArray[0]),pick(options[target+'Right'],tArray[1]),pick(options[target+'Bottom'],tArray[2]),pick(options[target+'Left'],tArray[3])];}}; // end Chart
	var CenteredSeriesMixin=Highcharts.CenteredSeriesMixin={ /**
		 * Get the center of the pie based on the size and center options relative to the  
		 * plot area. Borrowed by the polar and gauge series types.
		 */getCenter:function getCenter(){var options=this.options,chart=this.chart,slicingRoom=2*(options.slicedOffset||0),handleSlicingRoom,plotWidth=chart.plotWidth-2*slicingRoom,plotHeight=chart.plotHeight-2*slicingRoom,centerOption=options.center,positions=[pick(centerOption[0],'50%'),pick(centerOption[1],'50%'),options.size||'100%',options.innerSize||0],smallestSize=mathMin(plotWidth,plotHeight),i,value;for(i=0;i<4;++i){value=positions[i];handleSlicingRoom=i<2||i===2&&/%$/.test(value); // i == 0: centerX, relative to width
	// i == 1: centerY, relative to height
	// i == 2: size, relative to smallestSize
	// i == 3: innerSize, relative to size
	positions[i]=relativeLength(value,[plotWidth,plotHeight,smallestSize,positions[2]][i])+(handleSlicingRoom?slicingRoom:0);} // innerSize cannot be larger than size (#3632)
	if(positions[3]>positions[2]){positions[3]=positions[2];}return positions;}}; /**
	 * The Point object and prototype. Inheritable and used as base for PiePoint
	 */var Point=function Point(){};Point.prototype={ /**
		 * Initialize the point
		 * @param {Object} series The series object containing this point
		 * @param {Object} options The data in either number, array or object format
		 */init:function init(series,options,x){var point=this,colors;point.series=series;point.color=series.color; // #3445
	point.applyOptions(options,x);point.pointAttr={};if(series.options.colorByPoint){colors=series.options.colors||series.chart.options.colors;point.color=point.color||colors[series.colorCounter++]; // loop back to zero
	if(series.colorCounter===colors.length){series.colorCounter=0;}}series.chart.pointCount++;return point;}, /**
		 * Apply the options containing the x and y data and possible some extra properties.
		 * This is called on point init or from point.update.
		 *
		 * @param {Object} options
		 */applyOptions:function applyOptions(options,x){var point=this,series=point.series,pointValKey=series.options.pointValKey||series.pointValKey;options=Point.prototype.optionsToObject.call(this,options); // copy options directly to point
	extend(point,options);point.options=point.options?extend(point.options,options):options; // For higher dimension series types. For instance, for ranges, point.y is mapped to point.low.
	if(pointValKey){point.y=point[pointValKey];} // If no x is set by now, get auto incremented value. All points must have an
	// x value, however the y value can be null to create a gap in the series
	if(point.x===UNDEFINED&&series){point.x=x===UNDEFINED?series.autoIncrement():x;}return point;}, /**
		 * Transform number or array configs into objects
		 */optionsToObject:function optionsToObject(options){var ret={},series=this.series,keys=series.options.keys,pointArrayMap=keys||series.pointArrayMap||['y'],valueCount=pointArrayMap.length,firstItemType,i=0,j=0;if(typeof options==='number'||options===null){ret[pointArrayMap[0]]=options;}else if(isArray(options)){ // with leading x value
	if(!keys&&options.length>valueCount){firstItemType=_typeof(options[0]);if(firstItemType==='string'){ret.name=options[0];}else if(firstItemType==='number'){ret.x=options[0];}i++;}while(j<valueCount){if(!keys||options[i]!==undefined){ // Skip undefined positions for keys
	ret[pointArrayMap[j]]=options[i];}i++;j++;}}else if((typeof options==='undefined'?'undefined':_typeof(options))==='object'){ret=options; // This is the fastest way to detect if there are individual point dataLabels that need
	// to be considered in drawDataLabels. These can only occur in object configs.
	if(options.dataLabels){series._hasPointLabels=true;} // Same approach as above for markers
	if(options.marker){series._hasPointMarkers=true;}}return ret;}, /**
		 * Destroy a point to clear memory. Its reference still stays in series.data.
		 */destroy:function destroy(){var point=this,series=point.series,chart=series.chart,hoverPoints=chart.hoverPoints,prop;chart.pointCount--;if(hoverPoints){point.setState();erase(hoverPoints,point);if(!hoverPoints.length){chart.hoverPoints=null;}}if(point===chart.hoverPoint){point.onMouseOut();} // remove all events
	if(point.graphic||point.dataLabel){ // removeEvent and destroyElements are performance expensive
	removeEvent(point);point.destroyElements();}if(point.legendItem){ // pies have legend items
	chart.legend.destroyItem(point);}for(prop in point){point[prop]=null;}}, /**
		 * Destroy SVG elements associated with the point
		 */destroyElements:function destroyElements(){var point=this,props=['graphic','dataLabel','dataLabelUpper','connector','shadowGroup'],prop,i=6;while(i--){prop=props[i];if(point[prop]){point[prop]=point[prop].destroy();}}}, /**
		 * Return the configuration hash needed for the data label and tooltip formatters
		 */getLabelConfig:function getLabelConfig(){return {x:this.category,y:this.y,color:this.color,key:this.name||this.category,series:this.series,point:this,percentage:this.percentage,total:this.total||this.stackTotal};}, /**
		 * Extendable method for formatting each point's tooltip line
		 *
		 * @return {String} A string to be concatenated in to the common tooltip text
		 */tooltipFormatter:function tooltipFormatter(pointFormat){ // Insert options for valueDecimals, valuePrefix, and valueSuffix
	var series=this.series,seriesTooltipOptions=series.tooltipOptions,valueDecimals=pick(seriesTooltipOptions.valueDecimals,''),valuePrefix=seriesTooltipOptions.valuePrefix||'',valueSuffix=seriesTooltipOptions.valueSuffix||''; // Loop over the point array map and replace unformatted values with sprintf formatting markup
	each(series.pointArrayMap||['y'],function(key){key='{point.'+key; // without the closing bracket
	if(valuePrefix||valueSuffix){pointFormat=pointFormat.replace(key+'}',valuePrefix+key+'}'+valueSuffix);}pointFormat=pointFormat.replace(key+'}',key+':,.'+valueDecimals+'f}');});return format(pointFormat,{point:this,series:this.series});}, /**
		 * Fire an event on the Point object. Must not be renamed to fireEvent, as this
		 * causes a name clash in MooTools
		 * @param {String} eventType
		 * @param {Object} eventArgs Additional event arguments
		 * @param {Function} defaultFunction Default event handler
		 */firePointEvent:function firePointEvent(eventType,eventArgs,defaultFunction){var point=this,series=this.series,seriesOptions=series.options; // load event handlers on demand to save time on mouseover/out
	if(seriesOptions.point.events[eventType]||point.options&&point.options.events&&point.options.events[eventType]){this.importEvents();} // add default handler if in selection mode
	if(eventType==='click'&&seriesOptions.allowPointSelect){defaultFunction=function defaultFunction(event){ // Control key is for Windows, meta (= Cmd key) for Mac, Shift for Opera
	if(point.select){ // Could be destroyed by prior event handlers (#2911)
	point.select(null,event.ctrlKey||event.metaKey||event.shiftKey);}};}fireEvent(this,eventType,eventArgs,defaultFunction);},visible:true}; /**
	 * @classDescription The base function which all other series types inherit from. The data in the series is stored
	 * in various arrays.
	 *
	 * - First, series.options.data contains all the original config options for
	 * each point whether added by options or methods like series.addPoint.
	 * - Next, series.data contains those values converted to points, but in case the series data length
	 * exceeds the cropThreshold, or if the data is grouped, series.data doesn't contain all the points. It
	 * only contains the points that have been created on demand.
	 * - Then there's series.points that contains all currently visible point objects. In case of cropping,
	 * the cropped-away points are not part of this array. The series.points array starts at series.cropStart
	 * compared to series.data and series.options.data. If however the series data is grouped, these can't
	 * be correlated one to one.
	 * - series.xData and series.processedXData contain clean x values, equivalent to series.data and series.points.
	 * - series.yData and series.processedYData contain clean x values, equivalent to series.data and series.points.
	 *
	 * @param {Object} chart
	 * @param {Object} options
	 */var Series=Highcharts.Series=function(){};Series.prototype={isCartesian:true,type:'line',pointClass:Point,sorted:true, // requires the data to be sorted
	requireSorting:true,pointAttrToOptions:{ // mapping between SVG attributes and the corresponding options
	stroke:'lineColor','stroke-width':'lineWidth',fill:'fillColor',r:'radius'},directTouch:false,axisTypes:['xAxis','yAxis'],colorCounter:0,parallelArrays:['x','y'], // each point's x and y values are stored in this.xData and this.yData
	init:function init(chart,options){var series=this,eventType,events,chartSeries=chart.series,sortByIndex=function sortByIndex(a,b){return pick(a.options.index,a._i)-pick(b.options.index,b._i);};series.chart=chart;series.options=options=series.setOptions(options); // merge with plotOptions
	series.linkedSeries=[]; // bind the axes
	series.bindAxes(); // set some variables
	extend(series,{name:options.name,state:NORMAL_STATE,pointAttr:{},visible:options.visible!==false, // true by default
	selected:options.selected===true // false by default
	}); // special
	if(useCanVG){options.animation=false;} // register event listeners
	events=options.events;for(eventType in events){addEvent(series,eventType,events[eventType]);}if(events&&events.click||options.point&&options.point.events&&options.point.events.click||options.allowPointSelect){chart.runTrackerClick=true;}series.getColor();series.getSymbol(); // Set the data
	each(series.parallelArrays,function(key){series[key+'Data']=[];});series.setData(options.data,false); // Mark cartesian
	if(series.isCartesian){chart.hasCartesianSeries=true;} // Register it in the chart
	chartSeries.push(series);series._i=chartSeries.length-1; // Sort series according to index option (#248, #1123, #2456)
	stableSort(chartSeries,sortByIndex);if(this.yAxis){stableSort(this.yAxis.series,sortByIndex);}each(chartSeries,function(series,i){series.index=i;series.name=series.name||'Series '+(i+1);});}, /**
		 * Set the xAxis and yAxis properties of cartesian series, and register the series
		 * in the axis.series array
		 */bindAxes:function bindAxes(){var series=this,seriesOptions=series.options,chart=series.chart,axisOptions;each(series.axisTypes||[],function(AXIS){ // repeat for xAxis and yAxis
	each(chart[AXIS],function(axis){ // loop through the chart's axis objects
	axisOptions=axis.options; // apply if the series xAxis or yAxis option mathches the number of the
	// axis, or if undefined, use the first axis
	if(seriesOptions[AXIS]===axisOptions.index||seriesOptions[AXIS]!==UNDEFINED&&seriesOptions[AXIS]===axisOptions.id||seriesOptions[AXIS]===UNDEFINED&&axisOptions.index===0){ // register this series in the axis.series lookup
	axis.series.push(series); // set this series.xAxis or series.yAxis reference
	series[AXIS]=axis; // mark dirty for redraw
	axis.isDirty=true;}}); // The series needs an X and an Y axis
	if(!series[AXIS]&&series.optionalAxis!==AXIS){error(18,true);}});}, /**
		 * For simple series types like line and column, the data values are held in arrays like
		 * xData and yData for quick lookup to find extremes and more. For multidimensional series
		 * like bubble and map, this can be extended with arrays like zData and valueData by
		 * adding to the series.parallelArrays array.
		 */updateParallelArrays:function updateParallelArrays(point,i){var series=point.series,args=arguments,fn=typeof i==='number'? // Insert the value in the given position
	function(key){var val=key==='y'&&series.toYData?series.toYData(point):point[key];series[key+'Data'][i]=val;}: // Apply the method specified in i with the following arguments as arguments
	function(key){Array.prototype[i].apply(series[key+'Data'],Array.prototype.slice.call(args,2));};each(series.parallelArrays,fn);}, /**
		 * Return an auto incremented x value based on the pointStart and pointInterval options.
		 * This is only used if an x value is not given for the point that calls autoIncrement.
		 */autoIncrement:function autoIncrement(){var options=this.options,xIncrement=this.xIncrement,date,pointInterval,pointIntervalUnit=options.pointIntervalUnit;xIncrement=pick(xIncrement,options.pointStart,0);this.pointInterval=pointInterval=pick(this.pointInterval,options.pointInterval,1); // Added code for pointInterval strings
	if(pointIntervalUnit==='month'||pointIntervalUnit==='year'){date=new Date(xIncrement);date=pointIntervalUnit==='month'?+date[setMonth](date[getMonth]()+pointInterval):+date[setFullYear](date[getFullYear]()+pointInterval);pointInterval=date-xIncrement;}this.xIncrement=xIncrement+pointInterval;return xIncrement;}, /**
		 * Divide the series data into segments divided by null values.
		 */getSegments:function getSegments(){var series=this,lastNull=-1,segments=[],i,points=series.points,pointsLength=points.length;if(pointsLength){ // no action required for []
	// if connect nulls, just remove null points
	if(series.options.connectNulls){i=pointsLength;while(i--){if(points[i].y===null){points.splice(i,1);}}if(points.length){segments=[points];} // else, split on null points
	}else {each(points,function(point,i){if(point.y===null){if(i>lastNull+1){segments.push(points.slice(lastNull+1,i));}lastNull=i;}else if(i===pointsLength-1){ // last value
	segments.push(points.slice(lastNull+1,i+1));}});}} // register it
	series.segments=segments;}, /**
		 * Set the series options by merging from the options tree
		 * @param {Object} itemOptions
		 */setOptions:function setOptions(itemOptions){var chart=this.chart,chartOptions=chart.options,plotOptions=chartOptions.plotOptions,userOptions=chart.userOptions||{},userPlotOptions=userOptions.plotOptions||{},typeOptions=plotOptions[this.type],options,zones;this.userOptions=itemOptions; // General series options take precedence over type options because otherwise, default
	// type options like column.animation would be overwritten by the general option.
	// But issues have been raised here (#3881), and the solution may be to distinguish 
	// between default option and userOptions like in the tooltip below.
	options=merge(typeOptions,plotOptions.series,itemOptions); // The tooltip options are merged between global and series specific options
	this.tooltipOptions=merge(defaultOptions.tooltip,defaultOptions.plotOptions[this.type].tooltip,userOptions.tooltip,userPlotOptions.series&&userPlotOptions.series.tooltip,userPlotOptions[this.type]&&userPlotOptions[this.type].tooltip,itemOptions.tooltip); // Delete marker object if not allowed (#1125)
	if(typeOptions.marker===null){delete options.marker;} // Handle color zones
	this.zoneAxis=options.zoneAxis;zones=this.zones=(options.zones||[]).slice();if((options.negativeColor||options.negativeFillColor)&&!options.zones){zones.push({value:options[this.zoneAxis+'Threshold']||options.threshold||0,color:options.negativeColor,fillColor:options.negativeFillColor});}if(zones.length){ // Push one extra zone for the rest
	if(defined(zones[zones.length-1].value)){zones.push({color:this.color,fillColor:this.fillColor});}}return options;},getCyclic:function getCyclic(prop,value,defaults){var i,userOptions=this.userOptions,indexName='_'+prop+'Index',counterName=prop+'Counter';if(!value){if(defined(userOptions[indexName])){ // after Series.update()
	i=userOptions[indexName];}else {userOptions[indexName]=i=this.chart[counterName]%defaults.length;this.chart[counterName]+=1;}value=defaults[i];}this[prop]=value;}, /**
		 * Get the series' color
		 */getColor:function getColor(){if(this.options.colorByPoint){this.options.color=null; // #4359, selected slice got series.color even when colorByPoint was set.
	}else {this.getCyclic('color',this.options.color||defaultPlotOptions[this.type].color,this.chart.options.colors);}}, /**
		 * Get the series' symbol
		 */getSymbol:function getSymbol(){var seriesMarkerOption=this.options.marker;this.getCyclic('symbol',seriesMarkerOption.symbol,this.chart.options.symbols); // don't substract radius in image symbols (#604)
	if(/^url/.test(this.symbol)){seriesMarkerOption.radius=0;}},drawLegendSymbol:LegendSymbolMixin.drawLineMarker, /**
		 * Replace the series data with a new set of data
		 * @param {Object} data
		 * @param {Object} redraw
		 */setData:function setData(data,redraw,animation,updatePoints){var series=this,oldData=series.points,oldDataLength=oldData&&oldData.length||0,dataLength,options=series.options,chart=series.chart,firstPoint=null,xAxis=series.xAxis,hasCategories=xAxis&&!!xAxis.categories,i,turboThreshold=options.turboThreshold,pt,xData=this.xData,yData=this.yData,pointArrayMap=series.pointArrayMap,valueCount=pointArrayMap&&pointArrayMap.length;data=data||[];dataLength=data.length;redraw=pick(redraw,true); // If the point count is the same as is was, just run Point.update which is
	// cheaper, allows animation, and keeps references to points.
	if(updatePoints!==false&&dataLength&&oldDataLength===dataLength&&!series.cropped&&!series.hasGroupedData&&series.visible){each(data,function(point,i){if(oldData[i].update){ // Linked, previously hidden series (#3709)
	oldData[i].update(point,false,null,false);}});}else { // Reset properties
	series.xIncrement=null;series.pointRange=hasCategories?1:options.pointRange;series.colorCounter=0; // for series with colorByPoint (#1547)
	// Update parallel arrays
	each(this.parallelArrays,function(key){series[key+'Data'].length=0;}); // In turbo mode, only one- or twodimensional arrays of numbers are allowed. The
	// first value is tested, and we assume that all the rest are defined the same
	// way. Although the 'for' loops are similar, they are repeated inside each
	// if-else conditional for max performance.
	if(turboThreshold&&dataLength>turboThreshold){ // find the first non-null point
	i=0;while(firstPoint===null&&i<dataLength){firstPoint=data[i];i++;}if(isNumber(firstPoint)){ // assume all points are numbers
	var x=pick(options.pointStart,0),pointInterval=pick(options.pointInterval,1);for(i=0;i<dataLength;i++){xData[i]=x;yData[i]=data[i];x+=pointInterval;}series.xIncrement=x;}else if(isArray(firstPoint)){ // assume all points are arrays
	if(valueCount){ // [x, low, high] or [x, o, h, l, c]
	for(i=0;i<dataLength;i++){pt=data[i];xData[i]=pt[0];yData[i]=pt.slice(1,valueCount+1);}}else { // [x, y]
	for(i=0;i<dataLength;i++){pt=data[i];xData[i]=pt[0];yData[i]=pt[1];}}}else {error(12); // Highcharts expects configs to be numbers or arrays in turbo mode
	}}else {for(i=0;i<dataLength;i++){if(data[i]!==UNDEFINED){ // stray commas in oldIE
	pt={series:series};series.pointClass.prototype.applyOptions.apply(pt,[data[i]]);series.updateParallelArrays(pt,i);if(hasCategories&&defined(pt.name)){ // #4401
	xAxis.names[pt.x]=pt.name; // #2046
	}}}} // Forgetting to cast strings to numbers is a common caveat when handling CSV or JSON
	if(isString(yData[0])){error(14,true);}series.data=[];series.options.data=data; //series.zData = zData;
	// destroy old points
	i=oldDataLength;while(i--){if(oldData[i]&&oldData[i].destroy){oldData[i].destroy();}} // reset minRange (#878)
	if(xAxis){xAxis.minRange=xAxis.userMinRange;} // redraw
	series.isDirty=series.isDirtyData=chart.isDirtyBox=true;animation=false;} // Typically for pie series, points need to be processed and generated 
	// prior to rendering the legend
	if(options.legendType==='point'){ // docs: legendType now supported on more series types (at least column and pie)
	this.processData();this.generatePoints();}if(redraw){chart.redraw(animation);}}, /**
		 * Process the data by cropping away unused data points if the series is longer
		 * than the crop threshold. This saves computing time for lage series.
		 */processData:function processData(force){var series=this,processedXData=series.xData, // copied during slice operation below
	processedYData=series.yData,dataLength=processedXData.length,croppedData,cropStart=0,cropped,distance,closestPointRange,xAxis=series.xAxis,i, // loop variable
	options=series.options,cropThreshold=options.cropThreshold,getExtremesFromAll=series.getExtremesFromAll||options.getExtremesFromAll, // #4599
	isCartesian=series.isCartesian,xExtremes,min,max; // If the series data or axes haven't changed, don't go through this. Return false to pass
	// the message on to override methods like in data grouping.
	if(isCartesian&&!series.isDirty&&!xAxis.isDirty&&!series.yAxis.isDirty&&!force){return false;}if(xAxis){xExtremes=xAxis.getExtremes(); // corrected for log axis (#3053)
	min=xExtremes.min;max=xExtremes.max;} // optionally filter out points outside the plot area
	if(isCartesian&&series.sorted&&!getExtremesFromAll&&(!cropThreshold||dataLength>cropThreshold||series.forceCrop)){ // it's outside current extremes
	if(processedXData[dataLength-1]<min||processedXData[0]>max){processedXData=[];processedYData=[]; // only crop if it's actually spilling out
	}else if(processedXData[0]<min||processedXData[dataLength-1]>max){croppedData=this.cropData(series.xData,series.yData,min,max);processedXData=croppedData.xData;processedYData=croppedData.yData;cropStart=croppedData.start;cropped=true;}} // Find the closest distance between processed points
	for(i=processedXData.length-1;i>=0;i--){distance=processedXData[i]-processedXData[i-1];if(distance>0&&(closestPointRange===UNDEFINED||distance<closestPointRange)){closestPointRange=distance; // Unsorted data is not supported by the line tooltip, as well as data grouping and
	// navigation in Stock charts (#725) and width calculation of columns (#1900)
	}else if(distance<0&&series.requireSorting){error(15);}} // Record the properties
	series.cropped=cropped; // undefined or true
	series.cropStart=cropStart;series.processedXData=processedXData;series.processedYData=processedYData;if(options.pointRange===null){ // null means auto, as for columns, candlesticks and OHLC
	series.pointRange=closestPointRange||1;}series.closestPointRange=closestPointRange;}, /**
		 * Iterate over xData and crop values between min and max. Returns object containing crop start/end
		 * cropped xData with corresponding part of yData, dataMin and dataMax within the cropped range
		 */cropData:function cropData(xData,yData,min,max){var dataLength=xData.length,cropStart=0,cropEnd=dataLength,cropShoulder=pick(this.cropShoulder,1), // line-type series need one point outside
	i; // iterate up to find slice start
	for(i=0;i<dataLength;i++){if(xData[i]>=min){cropStart=mathMax(0,i-cropShoulder);break;}} // proceed to find slice end
	for(;i<dataLength;i++){if(xData[i]>max){cropEnd=i+cropShoulder;break;}}return {xData:xData.slice(cropStart,cropEnd),yData:yData.slice(cropStart,cropEnd),start:cropStart,end:cropEnd};}, /**
		 * Generate the data point after the data has been processed by cropping away
		 * unused points and optionally grouped in Highcharts Stock.
		 */generatePoints:function generatePoints(){var series=this,options=series.options,dataOptions=options.data,data=series.data,dataLength,processedXData=series.processedXData,processedYData=series.processedYData,pointClass=series.pointClass,processedDataLength=processedXData.length,cropStart=series.cropStart||0,cursor,hasGroupedData=series.hasGroupedData,point,points=[],i;if(!data&&!hasGroupedData){var arr=[];arr.length=dataOptions.length;data=series.data=arr;}for(i=0;i<processedDataLength;i++){cursor=cropStart+i;if(!hasGroupedData){if(data[cursor]){point=data[cursor];}else if(dataOptions[cursor]!==UNDEFINED){ // #970
	data[cursor]=point=new pointClass().init(series,dataOptions[cursor],processedXData[i]);}points[i]=point;}else { // splat the y data in case of ohlc data array
	points[i]=new pointClass().init(series,[processedXData[i]].concat(splat(processedYData[i])));}points[i].index=cursor; // For faster access in Point.update
	} // Hide cropped-away points - this only runs when the number of points is above cropThreshold, or when
	// swithching view from non-grouped data to grouped data (#637)
	if(data&&(processedDataLength!==(dataLength=data.length)||hasGroupedData)){for(i=0;i<dataLength;i++){if(i===cropStart&&!hasGroupedData){ // when has grouped data, clear all points
	i+=processedDataLength;}if(data[i]){data[i].destroyElements();data[i].plotX=UNDEFINED; // #1003
	}}}series.data=data;series.points=points;}, /**
		 * Calculate Y extremes for visible data
		 */getExtremes:function getExtremes(yData){var xAxis=this.xAxis,yAxis=this.yAxis,xData=this.processedXData,yDataLength,activeYData=[],activeCounter=0,xExtremes=xAxis.getExtremes(), // #2117, need to compensate for log X axis
	xMin=xExtremes.min,xMax=xExtremes.max,validValue,withinRange,x,y,i,j;yData=yData||this.stackedYData||this.processedYData;yDataLength=yData.length;for(i=0;i<yDataLength;i++){x=xData[i];y=yData[i]; // For points within the visible range, including the first point outside the
	// visible range, consider y extremes
	validValue=y!==null&&y!==UNDEFINED&&(!yAxis.isLog||y.length||y>0);withinRange=this.getExtremesFromAll||this.options.getExtremesFromAll||this.cropped||(xData[i+1]||x)>=xMin&&(xData[i-1]||x)<=xMax;if(validValue&&withinRange){j=y.length;if(j){ // array, like ohlc or range data
	while(j--){if(y[j]!==null){activeYData[activeCounter++]=y[j];}}}else {activeYData[activeCounter++]=y;}}}this.dataMin=arrayMin(activeYData);this.dataMax=arrayMax(activeYData);}, /**
		 * Translate data points from raw data values to chart specific positioning data
		 * needed later in drawPoints, drawGraph and drawTracker.
		 */translate:function translate(){if(!this.processedXData){ // hidden series
	this.processData();}this.generatePoints();var series=this,options=series.options,stacking=options.stacking,xAxis=series.xAxis,categories=xAxis.categories,yAxis=series.yAxis,points=series.points,dataLength=points.length,hasModifyValue=!!series.modifyValue,i,pointPlacement=options.pointPlacement,dynamicallyPlaced=pointPlacement==='between'||isNumber(pointPlacement),threshold=options.threshold,stackThreshold=options.startFromThreshold?threshold:0,plotX,plotY,lastPlotX,stackIndicator,closestPointRangePx=Number.MAX_VALUE; // Translate each point
	for(i=0;i<dataLength;i++){var point=points[i],xValue=point.x,yValue=point.y,yBottom=point.low,stack=stacking&&yAxis.stacks[(series.negStacks&&yValue<(stackThreshold?0:threshold)?'-':'')+series.stackKey],pointStack,stackValues; // Discard disallowed y values for log axes (#3434)
	if(yAxis.isLog&&yValue!==null&&yValue<=0){point.y=yValue=null;error(10);} // Get the plotX translation
	point.plotX=plotX=mathMin(mathMax(-1e5,xAxis.translate(xValue,0,0,0,1,pointPlacement,this.type==='flags')),1e5); // #3923
	// Calculate the bottom y value for stacked series
	if(stacking&&series.visible&&stack&&stack[xValue]){stackIndicator=series.getStackIndicator(stackIndicator,xValue,series.index);pointStack=stack[xValue];stackValues=pointStack.points[stackIndicator.key];yBottom=stackValues[0];yValue=stackValues[1];if(yBottom===stackThreshold){yBottom=pick(threshold,yAxis.min);}if(yAxis.isLog&&yBottom<=0){ // #1200, #1232
	yBottom=null;}point.total=point.stackTotal=pointStack.total;point.percentage=pointStack.total&&point.y/pointStack.total*100;point.stackY=yValue; // Place the stack label
	pointStack.setOffset(series.pointXOffset||0,series.barW||0);} // Set translated yBottom or remove it
	point.yBottom=defined(yBottom)?yAxis.translate(yBottom,0,1,0,1):null; // general hook, used for Highstock compare mode
	if(hasModifyValue){yValue=series.modifyValue(yValue,point);} // Set the the plotY value, reset it for redraws
	point.plotY=plotY=typeof yValue==='number'&&yValue!==Infinity?mathMin(mathMax(-1e5,yAxis.translate(yValue,0,1,0,1)),1e5): // #3201
	UNDEFINED;point.isInside=plotY!==UNDEFINED&&plotY>=0&&plotY<=yAxis.len&& // #3519
	plotX>=0&&plotX<=xAxis.len; // Set client related positions for mouse tracking
	point.clientX=dynamicallyPlaced?xAxis.translate(xValue,0,0,0,1):plotX; // #1514
	point.negative=point.y<(threshold||0); // some API data
	point.category=categories&&categories[point.x]!==UNDEFINED?categories[point.x]:point.x; // Determine auto enabling of markers (#3635)
	if(i){closestPointRangePx=mathMin(closestPointRangePx,mathAbs(plotX-lastPlotX));}lastPlotX=plotX;}series.closestPointRangePx=closestPointRangePx; // now that we have the cropped data, build the segments
	series.getSegments();}, /**
		 * Set the clipping for the series. For animated series it is called twice, first to initiate
		 * animating the clip then the second time without the animation to set the final clip.
		 */setClip:function setClip(animation){var chart=this.chart,options=this.options,renderer=chart.renderer,inverted=chart.inverted,seriesClipBox=this.clipBox,clipBox=seriesClipBox||chart.clipBox,sharedClipKey=this.sharedClipKey||['_sharedClip',animation&&animation.duration,animation&&animation.easing,clipBox.height,options.xAxis,options.yAxis].join(','), // #4526
	clipRect=chart[sharedClipKey],markerClipRect=chart[sharedClipKey+'m']; // If a clipping rectangle with the same properties is currently present in the chart, use that.
	if(!clipRect){ // When animation is set, prepare the initial positions
	if(animation){clipBox.width=0;chart[sharedClipKey+'m']=markerClipRect=renderer.clipRect(-99, // include the width of the first marker
	inverted?-chart.plotLeft:-chart.plotTop,99,inverted?chart.chartWidth:chart.chartHeight);}chart[sharedClipKey]=clipRect=renderer.clipRect(clipBox);}if(animation){clipRect.count+=1;}if(options.clip!==false){this.group.clip(animation||seriesClipBox?clipRect:chart.clipRect);this.markerGroup.clip(markerClipRect);this.sharedClipKey=sharedClipKey;} // Remove the shared clipping rectangle when all series are shown
	if(!animation){clipRect.count-=1;if(clipRect.count<=0&&sharedClipKey&&chart[sharedClipKey]){if(!seriesClipBox){chart[sharedClipKey]=chart[sharedClipKey].destroy();}if(chart[sharedClipKey+'m']){chart[sharedClipKey+'m']=chart[sharedClipKey+'m'].destroy();}}}}, /**
		 * Animate in the series
		 */animate:function animate(init){var series=this,chart=series.chart,clipRect,animation=series.options.animation,sharedClipKey; // Animation option is set to true
	if(animation&&!isObject(animation)){animation=defaultPlotOptions[series.type].animation;} // Initialize the animation. Set up the clipping rectangle.
	if(init){series.setClip(animation); // Run the animation
	}else {sharedClipKey=this.sharedClipKey;clipRect=chart[sharedClipKey];if(clipRect){clipRect.animate({width:chart.plotSizeX},animation);}if(chart[sharedClipKey+'m']){chart[sharedClipKey+'m'].animate({width:chart.plotSizeX+99},animation);} // Delete this function to allow it only once
	series.animate=null;}}, /**
		 * This runs after animation to land on the final plot clipping
		 */afterAnimate:function afterAnimate(){this.setClip();fireEvent(this,'afterAnimate');}, /**
		 * Draw the markers
		 */drawPoints:function drawPoints(){var series=this,pointAttr,points=series.points,chart=series.chart,plotX,plotY,i,point,radius,symbol,isImage,graphic,options=series.options,seriesMarkerOptions=options.marker,seriesPointAttr=series.pointAttr[''],pointMarkerOptions,hasPointMarker,enabled,isInside,markerGroup=series.markerGroup,xAxis=series.xAxis,globallyEnabled=pick(seriesMarkerOptions.enabled,xAxis.isRadial,series.closestPointRangePx>2*seriesMarkerOptions.radius);if(seriesMarkerOptions.enabled!==false||series._hasPointMarkers){i=points.length;while(i--){point=points[i];plotX=mathFloor(point.plotX); // #1843
	plotY=point.plotY;graphic=point.graphic;pointMarkerOptions=point.marker||{};hasPointMarker=!!point.marker;enabled=globallyEnabled&&pointMarkerOptions.enabled===UNDEFINED||pointMarkerOptions.enabled;isInside=point.isInside; // only draw the point if y is defined
	if(enabled&&plotY!==UNDEFINED&&!isNaN(plotY)&&point.y!==null){ // shortcuts
	pointAttr=point.pointAttr[point.selected?SELECT_STATE:NORMAL_STATE]||seriesPointAttr;radius=pointAttr.r;symbol=pick(pointMarkerOptions.symbol,series.symbol);isImage=symbol.indexOf('url')===0;if(graphic){ // update
	graphic[isInside?'show':'hide'](true) // Since the marker group isn't clipped, each individual marker must be toggled
	.animate(extend({x:plotX-radius,y:plotY-radius},graphic.symbolName?{ // don't apply to image symbols #507
	width:2*radius,height:2*radius}:{}));}else if(isInside&&(radius>0||isImage)){point.graphic=graphic=chart.renderer.symbol(symbol,plotX-radius,plotY-radius,2*radius,2*radius,hasPointMarker?pointMarkerOptions:seriesMarkerOptions).attr(pointAttr).add(markerGroup);}}else if(graphic){point.graphic=graphic.destroy(); // #1269
	}}}}, /**
		 * Convert state properties from API naming conventions to SVG attributes
		 *
		 * @param {Object} options API options object
		 * @param {Object} base1 SVG attribute object to inherit from
		 * @param {Object} base2 Second level SVG attribute object to inherit from
		 */convertAttribs:function convertAttribs(options,base1,base2,base3){var conversion=this.pointAttrToOptions,attr,option,obj={};options=options||{};base1=base1||{};base2=base2||{};base3=base3||{};for(attr in conversion){option=conversion[attr];obj[attr]=pick(options[option],base1[attr],base2[attr],base3[attr]);}return obj;}, /**
		 * Get the state attributes. Each series type has its own set of attributes
		 * that are allowed to change on a point's state change. Series wide attributes are stored for
		 * all series, and additionally point specific attributes are stored for all
		 * points with individual marker options. If such options are not defined for the point,
		 * a reference to the series wide attributes is stored in point.pointAttr.
		 */getAttribs:function getAttribs(){var series=this,seriesOptions=series.options,normalOptions=defaultPlotOptions[series.type].marker?seriesOptions.marker:seriesOptions,stateOptions=normalOptions.states,stateOptionsHover=stateOptions[HOVER_STATE],pointStateOptionsHover,seriesColor=series.color,seriesNegativeColor=series.options.negativeColor,normalDefaults={stroke:seriesColor,fill:seriesColor},points=series.points||[], // #927
	i,j,threshold,point,seriesPointAttr=[],pointAttr,pointAttrToOptions=series.pointAttrToOptions,hasPointSpecificOptions=series.hasPointSpecificOptions,defaultLineColor=normalOptions.lineColor,defaultFillColor=normalOptions.fillColor,turboThreshold=seriesOptions.turboThreshold,zones=series.zones,zoneAxis=series.zoneAxis||'y',attr,key; // series type specific modifications
	if(seriesOptions.marker){ // line, spline, area, areaspline, scatter
	// if no hover radius is given, default to normal radius + 2
	stateOptionsHover.radius=stateOptionsHover.radius||normalOptions.radius+stateOptionsHover.radiusPlus;stateOptionsHover.lineWidth=stateOptionsHover.lineWidth||normalOptions.lineWidth+stateOptionsHover.lineWidthPlus;}else { // column, bar, pie
	// if no hover color is given, brighten the normal color
	stateOptionsHover.color=stateOptionsHover.color||Color(stateOptionsHover.color||seriesColor).brighten(stateOptionsHover.brightness).get(); // if no hover negativeColor is given, brighten the normal negativeColor
	stateOptionsHover.negativeColor=stateOptionsHover.negativeColor||Color(stateOptionsHover.negativeColor||seriesNegativeColor).brighten(stateOptionsHover.brightness).get();} // general point attributes for the series normal state
	seriesPointAttr[NORMAL_STATE]=series.convertAttribs(normalOptions,normalDefaults); // HOVER_STATE and SELECT_STATE states inherit from normal state except the default radius
	each([HOVER_STATE,SELECT_STATE],function(state){seriesPointAttr[state]=series.convertAttribs(stateOptions[state],seriesPointAttr[NORMAL_STATE]);}); // set it
	series.pointAttr=seriesPointAttr; // Generate the point-specific attribute collections if specific point
	// options are given. If not, create a referance to the series wide point
	// attributes
	i=points.length;if(!turboThreshold||i<turboThreshold||hasPointSpecificOptions){while(i--){point=points[i];normalOptions=point.options&&point.options.marker||point.options;if(normalOptions&&normalOptions.enabled===false){normalOptions.radius=0;}if(zones.length){j=0;threshold=zones[j];while(point[zoneAxis]>=threshold.value){threshold=zones[++j];}point.color=point.fillColor=pick(threshold.color,series.color); // #3636, #4267, #4430 - inherit color from series, when color is undefined
	}hasPointSpecificOptions=seriesOptions.colorByPoint||point.color; // #868
	// check if the point has specific visual options
	if(point.options){for(key in pointAttrToOptions){if(defined(normalOptions[pointAttrToOptions[key]])){hasPointSpecificOptions=true;}}} // a specific marker config object is defined for the individual point:
	// create it's own attribute collection
	if(hasPointSpecificOptions){normalOptions=normalOptions||{};pointAttr=[];stateOptions=normalOptions.states||{}; // reassign for individual point
	pointStateOptionsHover=stateOptions[HOVER_STATE]=stateOptions[HOVER_STATE]||{}; // Handle colors for column and pies
	if(!seriesOptions.marker||point.negative&&!pointStateOptionsHover.fillColor&&!stateOptionsHover.fillColor){ // column, bar, point or negative threshold for series with markers (#3636)
	// If no hover color is given, brighten the normal color. #1619, #2579
	pointStateOptionsHover[series.pointAttrToOptions.fill]=pointStateOptionsHover.color||!point.options.color&&stateOptionsHover[point.negative&&seriesNegativeColor?'negativeColor':'color']||Color(point.color).brighten(pointStateOptionsHover.brightness||stateOptionsHover.brightness).get();} // normal point state inherits series wide normal state
	attr={color:point.color}; // #868
	if(!defaultFillColor){ // Individual point color or negative color markers (#2219)
	attr.fillColor=point.color;}if(!defaultLineColor){attr.lineColor=point.color; // Bubbles take point color, line markers use white
	} // Color is explicitly set to null or undefined (#1288, #4068)
	if(normalOptions.hasOwnProperty('color')&&!normalOptions.color){delete normalOptions.color;}pointAttr[NORMAL_STATE]=series.convertAttribs(extend(attr,normalOptions),seriesPointAttr[NORMAL_STATE]); // inherit from point normal and series hover
	pointAttr[HOVER_STATE]=series.convertAttribs(stateOptions[HOVER_STATE],seriesPointAttr[HOVER_STATE],pointAttr[NORMAL_STATE]); // inherit from point normal and series hover
	pointAttr[SELECT_STATE]=series.convertAttribs(stateOptions[SELECT_STATE],seriesPointAttr[SELECT_STATE],pointAttr[NORMAL_STATE]); // no marker config object is created: copy a reference to the series-wide
	// attribute collection
	}else {pointAttr=seriesPointAttr;}point.pointAttr=pointAttr;}}}, /**
		 * Clear DOM objects and free up memory
		 */destroy:function destroy(){var series=this,chart=series.chart,issue134=/AppleWebKit\/533/.test(userAgent),destroy,i,data=series.data||[],point,prop,axis; // add event hook
	fireEvent(series,'destroy'); // remove all events
	removeEvent(series); // erase from axes
	each(series.axisTypes||[],function(AXIS){axis=series[AXIS];if(axis){erase(axis.series,series);axis.isDirty=axis.forceRedraw=true;}}); // remove legend items
	if(series.legendItem){series.chart.legend.destroyItem(series);} // destroy all points with their elements
	i=data.length;while(i--){point=data[i];if(point&&point.destroy){point.destroy();}}series.points=null; // Clear the animation timeout if we are destroying the series during initial animation
	clearTimeout(series.animationTimeout); // Destroy all SVGElements associated to the series
	for(prop in series){if(series[prop] instanceof SVGElement&&!series[prop].survive){ // Survive provides a hook for not destroying
	// issue 134 workaround
	destroy=issue134&&prop==='group'?'hide':'destroy';series[prop][destroy]();}} // remove from hoverSeries
	if(chart.hoverSeries===series){chart.hoverSeries=null;}erase(chart.series,series); // clear all members
	for(prop in series){delete series[prop];}}, /**
		 * Return the graph path of a segment
		 */getSegmentPath:function getSegmentPath(segment){var series=this,segmentPath=[],step=series.options.step; // build the segment line
	each(segment,function(point,i){var plotX=point.plotX,plotY=point.plotY,lastPoint;if(series.getPointSpline){ // generate the spline as defined in the SplineSeries object
	segmentPath.push.apply(segmentPath,series.getPointSpline(segment,point,i));}else { // moveTo or lineTo
	segmentPath.push(i?L:M); // step line?
	if(step&&i){lastPoint=segment[i-1];if(step==='right'){segmentPath.push(lastPoint.plotX,plotY,L);}else if(step==='center'){segmentPath.push((lastPoint.plotX+plotX)/2,lastPoint.plotY,L,(lastPoint.plotX+plotX)/2,plotY,L);}else {segmentPath.push(plotX,lastPoint.plotY,L);}} // normal line to next point
	segmentPath.push(point.plotX,point.plotY);}});return segmentPath;}, /**
		 * Get the graph path
		 */getGraphPath:function getGraphPath(){var series=this,graphPath=[],segmentPath,singlePoints=[]; // used in drawTracker
	// Divide into segments and build graph and area paths
	each(series.segments,function(segment){segmentPath=series.getSegmentPath(segment); // add the segment to the graph, or a single point for tracking
	if(segment.length>1){graphPath=graphPath.concat(segmentPath);}else {singlePoints.push(segment[0]);}}); // Record it for use in drawGraph and drawTracker, and return graphPath
	series.singlePoints=singlePoints;series.graphPath=graphPath;return graphPath;}, /**
		 * Draw the actual graph
		 */drawGraph:function drawGraph(){var series=this,options=this.options,props=[['graph',options.lineColor||this.color,options.dashStyle]],lineWidth=options.lineWidth,roundCap=options.linecap!=='square',graphPath=this.getGraphPath(),fillColor=this.fillGraph&&this.color||NONE, // polygon series use filled graph
	zones=this.zones;each(zones,function(threshold,i){props.push(['zoneGraph'+i,threshold.color||series.color,threshold.dashStyle||options.dashStyle]);}); // Draw the graph
	each(props,function(prop,i){var graphKey=prop[0],graph=series[graphKey],attribs;if(graph){graph.animate({d:graphPath});}else if((lineWidth||fillColor)&&graphPath.length){ // #1487
	attribs={stroke:prop[1],'stroke-width':lineWidth,fill:fillColor,zIndex:1 // #1069
	};if(prop[2]){attribs.dashstyle=prop[2];}else if(roundCap){attribs['stroke-linecap']=attribs['stroke-linejoin']='round';}series[graphKey]=series.chart.renderer.path(graphPath).attr(attribs).add(series.group).shadow(i<2&&options.shadow); // add shadow to normal series (0) or to first zone (1) #3932
	}});}, /**
		 * Clip the graphs into the positive and negative coloured graphs
		 */applyZones:function applyZones(){var series=this,chart=this.chart,renderer=chart.renderer,zones=this.zones,translatedFrom,translatedTo,clips=this.clips||[],clipAttr,graph=this.graph,area=this.area,chartSizeMax=mathMax(chart.chartWidth,chart.chartHeight),axis=this[(this.zoneAxis||'y')+'Axis'],extremes,reversed=axis.reversed,inverted=chart.inverted,horiz=axis.horiz,pxRange,pxPosMin,pxPosMax,ignoreZones=false;if(zones.length&&(graph||area)&&axis.min!==UNDEFINED){ // The use of the Color Threshold assumes there are no gaps
	// so it is safe to hide the original graph and area
	if(graph){graph.hide();}if(area){area.hide();} // Create the clips
	extremes=axis.getExtremes();each(zones,function(threshold,i){translatedFrom=reversed?horiz?chart.plotWidth:0:horiz?0:axis.toPixels(extremes.min);translatedFrom=mathMin(mathMax(pick(translatedTo,translatedFrom),0),chartSizeMax);translatedTo=mathMin(mathMax(mathRound(axis.toPixels(pick(threshold.value,extremes.max),true)),0),chartSizeMax);if(ignoreZones){translatedFrom=translatedTo=axis.toPixels(extremes.max);}pxRange=Math.abs(translatedFrom-translatedTo);pxPosMin=mathMin(translatedFrom,translatedTo);pxPosMax=mathMax(translatedFrom,translatedTo);if(axis.isXAxis){clipAttr={x:inverted?pxPosMax:pxPosMin,y:0,width:pxRange,height:chartSizeMax};if(!horiz){clipAttr.x=chart.plotHeight-clipAttr.x;}}else {clipAttr={x:0,y:inverted?pxPosMax:pxPosMin,width:chartSizeMax,height:pxRange};if(horiz){clipAttr.y=chart.plotWidth-clipAttr.y;}} /// VML SUPPPORT
	if(chart.inverted&&renderer.isVML){if(axis.isXAxis){clipAttr={x:0,y:reversed?pxPosMin:pxPosMax,height:clipAttr.width,width:chart.chartWidth};}else {clipAttr={x:clipAttr.y-chart.plotLeft-chart.spacingBox.x,y:0,width:clipAttr.height,height:chart.chartHeight};}} /// END OF VML SUPPORT
	if(clips[i]){clips[i].animate(clipAttr);}else {clips[i]=renderer.clipRect(clipAttr);if(graph){series['zoneGraph'+i].clip(clips[i]);}if(area){series['zoneArea'+i].clip(clips[i]);}} // if this zone extends out of the axis, ignore the others
	ignoreZones=threshold.value>extremes.max;});this.clips=clips;}}, /**
		 * Initialize and perform group inversion on series.group and series.markerGroup
		 */invertGroups:function invertGroups(){var series=this,chart=series.chart; // Pie, go away (#1736)
	if(!series.xAxis){return;} // A fixed size is needed for inversion to work
	function setInvert(){var size={width:series.yAxis.len,height:series.xAxis.len};each(['group','markerGroup'],function(groupName){if(series[groupName]){series[groupName].attr(size).invert();}});}addEvent(chart,'resize',setInvert); // do it on resize
	addEvent(series,'destroy',function(){removeEvent(chart,'resize',setInvert);}); // Do it now
	setInvert(); // do it now
	// On subsequent render and redraw, just do setInvert without setting up events again
	series.invertGroups=setInvert;}, /**
		 * General abstraction for creating plot groups like series.group, series.dataLabelsGroup and
		 * series.markerGroup. On subsequent calls, the group will only be adjusted to the updated plot size.
		 */plotGroup:function plotGroup(prop,name,visibility,zIndex,parent){var group=this[prop],isNew=!group; // Generate it on first call
	if(isNew){this[prop]=group=this.chart.renderer.g(name).attr({visibility:visibility,zIndex:zIndex||0.1 // IE8 needs this
	}).add(parent);group.addClass('highcharts-series-'+this.index);} // Place it on first and subsequent (redraw) calls
	group[isNew?'attr':'animate'](this.getPlotBox());return group;}, /**
		 * Get the translation and scale for the plot area of this series
		 */getPlotBox:function getPlotBox(){var chart=this.chart,xAxis=this.xAxis,yAxis=this.yAxis; // Swap axes for inverted (#2339)
	if(chart.inverted){xAxis=yAxis;yAxis=this.xAxis;}return {translateX:xAxis?xAxis.left:chart.plotLeft,translateY:yAxis?yAxis.top:chart.plotTop,scaleX:1, // #1623
	scaleY:1};}, /**
		 * Render the graph and markers
		 */render:function render(){var series=this,chart=series.chart,group,options=series.options,animation=options.animation, // Animation doesn't work in IE8 quirks when the group div is hidden,
	// and looks bad in other oldIE
	animDuration=animation&&!!series.animate&&chart.renderer.isSVG&&pick(animation.duration,500)||0,visibility=series.visible?VISIBLE:HIDDEN,zIndex=options.zIndex,hasRendered=series.hasRendered,chartSeriesGroup=chart.seriesGroup; // the group
	group=series.plotGroup('group','series',visibility,zIndex,chartSeriesGroup);series.markerGroup=series.plotGroup('markerGroup','markers',visibility,zIndex,chartSeriesGroup); // initiate the animation
	if(animDuration){series.animate(true);} // cache attributes for shapes
	series.getAttribs(); // SVGRenderer needs to know this before drawing elements (#1089, #1795)
	group.inverted=series.isCartesian?chart.inverted:false; // draw the graph if any
	if(series.drawGraph){series.drawGraph();series.applyZones();}each(series.points,function(point){if(point.redraw){point.redraw();}}); // draw the data labels (inn pies they go before the points)
	if(series.drawDataLabels){series.drawDataLabels();} // draw the points
	if(series.visible){series.drawPoints();} // draw the mouse tracking area
	if(series.drawTracker&&series.options.enableMouseTracking!==false){series.drawTracker();} // Handle inverted series and tracker groups
	if(chart.inverted){series.invertGroups();} // Initial clipping, must be defined after inverting groups for VML. Applies to columns etc. (#3839).
	if(options.clip!==false&&!series.sharedClipKey&&!hasRendered){group.clip(chart.clipRect);} // Run the animation
	if(animDuration){series.animate();} // Call the afterAnimate function on animation complete (but don't overwrite the animation.complete option
	// which should be available to the user).
	if(!hasRendered){if(animDuration){series.animationTimeout=setTimeout(function(){series.afterAnimate();},animDuration);}else {series.afterAnimate();}}series.isDirty=series.isDirtyData=false; // means data is in accordance with what you see
	// (See #322) series.isDirty = series.isDirtyData = false; // means data is in accordance with what you see
	series.hasRendered=true;}, /**
		 * Redraw the series after an update in the axes.
		 */redraw:function redraw(){var series=this,chart=series.chart,wasDirtyData=series.isDirtyData, // cache it here as it is set to false in render, but used after
	wasDirty=series.isDirty,group=series.group,xAxis=series.xAxis,yAxis=series.yAxis; // reposition on resize
	if(group){if(chart.inverted){group.attr({width:chart.plotWidth,height:chart.plotHeight});}group.animate({translateX:pick(xAxis&&xAxis.left,chart.plotLeft),translateY:pick(yAxis&&yAxis.top,chart.plotTop)});}series.translate();series.render();if(wasDirtyData){fireEvent(series,'updatedData');}if(wasDirty||wasDirtyData){ // #3945 recalculate the kdtree when dirty
	delete this.kdTree; // #3868 recalculate the kdtree with dirty data
	}}, /**
		 * KD Tree && PointSearching Implementation
		 */kdDimensions:1,kdAxisArray:['clientX','plotY'],searchPoint:function searchPoint(e,compareX){var series=this,xAxis=series.xAxis,yAxis=series.yAxis,inverted=series.chart.inverted;return this.searchKDTree({clientX:inverted?xAxis.len-e.chartY+xAxis.pos:e.chartX-xAxis.pos,plotY:inverted?yAxis.len-e.chartX+yAxis.pos:e.chartY-yAxis.pos},compareX);},buildKDTree:function buildKDTree(){var series=this,dimensions=series.kdDimensions; // Internal function
	function _kdtree(points,depth,dimensions){var axis,median,length=points&&points.length;if(length){ // alternate between the axis
	axis=series.kdAxisArray[depth%dimensions]; // sort point array
	points.sort(function(a,b){return a[axis]-b[axis];});median=Math.floor(length/2); // build and return nod
	return {point:points[median],left:_kdtree(points.slice(0,median),depth+1,dimensions),right:_kdtree(points.slice(median+1),depth+1,dimensions)};}} // Start the recursive build process with a clone of the points array and null points filtered out (#3873)
	function startRecursive(){var points=grep(series.points||[],function(point){ // #4390
	return point.y!==null;});series.kdTree=_kdtree(points,dimensions,dimensions);}delete series.kdTree;if(series.options.kdSync){ // For testing tooltips, don't build async
	startRecursive();}else {setTimeout(startRecursive);}},searchKDTree:function searchKDTree(point,compareX){var series=this,kdX=this.kdAxisArray[0],kdY=this.kdAxisArray[1],kdComparer=compareX?'distX':'dist'; // Set the one and two dimensional distance on the point object
	function setDistance(p1,p2){var x=defined(p1[kdX])&&defined(p2[kdX])?Math.pow(p1[kdX]-p2[kdX],2):null,y=defined(p1[kdY])&&defined(p2[kdY])?Math.pow(p1[kdY]-p2[kdY],2):null,r=(x||0)+(y||0);p2.dist=defined(r)?Math.sqrt(r):Number.MAX_VALUE;p2.distX=defined(x)?Math.sqrt(x):Number.MAX_VALUE;}function _search(search,tree,depth,dimensions){var point=tree.point,axis=series.kdAxisArray[depth%dimensions],tdist,sideA,sideB,ret=point,nPoint1,nPoint2;setDistance(search,point); // Pick side based on distance to splitting point
	tdist=search[axis]-point[axis];sideA=tdist<0?'left':'right';sideB=tdist<0?'right':'left'; // End of tree
	if(tree[sideA]){nPoint1=_search(search,tree[sideA],depth+1,dimensions);ret=nPoint1[kdComparer]<ret[kdComparer]?nPoint1:point;}if(tree[sideB]){ // compare distance to current best to splitting point to decide wether to check side B or not
	if(Math.sqrt(tdist*tdist)<ret[kdComparer]){nPoint2=_search(search,tree[sideB],depth+1,dimensions);ret=nPoint2[kdComparer]<ret[kdComparer]?nPoint2:ret;}}return ret;}if(!this.kdTree){this.buildKDTree();}if(this.kdTree){return _search(point,this.kdTree,this.kdDimensions,this.kdDimensions);}}}; // end Series prototype
	/**
	 * The class for stack items
	 */function StackItem(axis,options,isNegative,x,stackOption){var inverted=axis.chart.inverted;this.axis=axis; // Tells if the stack is negative
	this.isNegative=isNegative; // Save the options to be able to style the label
	this.options=options; // Save the x value to be able to position the label later
	this.x=x; // Initialize total value
	this.total=null; // This will keep each points' extremes stored by series.index and point index
	this.points={}; // Save the stack option on the series configuration object, and whether to treat it as percent
	this.stack=stackOption; // The align options and text align varies on whether the stack is negative and
	// if the chart is inverted or not.
	// First test the user supplied value, then use the dynamic.
	this.alignOptions={align:options.align||(inverted?isNegative?'left':'right':'center'),verticalAlign:options.verticalAlign||(inverted?'middle':isNegative?'bottom':'top'),y:pick(options.y,inverted?4:isNegative?14:-6),x:pick(options.x,inverted?isNegative?-6:6:0)};this.textAlign=options.textAlign||(inverted?isNegative?'right':'left':'center');}StackItem.prototype={destroy:function destroy(){destroyObjectProperties(this,this.axis);}, /**
		 * Renders the stack total label and adds it to the stack label group.
		 */render:function render(group){var options=this.options,formatOption=options.format,str=formatOption?format(formatOption,this):options.formatter.call(this); // format the text in the label
	// Change the text to reflect the new total and set visibility to hidden in case the serie is hidden
	if(this.label){this.label.attr({text:str,visibility:HIDDEN}); // Create new label
	}else {this.label=this.axis.chart.renderer.text(str,null,null,options.useHTML) // dummy positions, actual position updated with setOffset method in columnseries
	.css(options.style) // apply style
	.attr({align:this.textAlign, // fix the text-anchor
	rotation:options.rotation, // rotation
	visibility:HIDDEN // hidden until setOffset is called
	}).add(group); // add to the labels-group
	}}, /**
		 * Sets the offset that the stack has from the x value and repositions the label.
		 */setOffset:function setOffset(xOffset,xWidth){var stackItem=this,axis=stackItem.axis,chart=axis.chart,inverted=chart.inverted,reversed=axis.reversed,neg=this.isNegative&&!reversed||!this.isNegative&&reversed, // #4056
	y=axis.translate(axis.usePercentage?100:this.total,0,0,0,1), // stack value translated mapped to chart coordinates
	yZero=axis.translate(0), // stack origin
	h=mathAbs(y-yZero), // stack height
	x=chart.xAxis[0].translate(this.x)+xOffset, // stack x position
	plotHeight=chart.plotHeight,stackBox={ // this is the box for the complete stack
	x:inverted?neg?y:y-h:x,y:inverted?plotHeight-x-xWidth:neg?plotHeight-y-h:plotHeight-y,width:inverted?h:xWidth,height:inverted?xWidth:h},label=this.label,alignAttr;if(label){label.align(this.alignOptions,null,stackBox); // align the label to the box
	// Set visibility (#678)
	alignAttr=label.alignAttr;label[this.options.crop===false||chart.isInsidePlot(alignAttr.x,alignAttr.y)?'show':'hide'](true);}}}; /**
	 * Generate stacks for each series and calculate stacks total values
	 */Chart.prototype.getStacks=function(){var chart=this; // reset stacks for each yAxis
	each(chart.yAxis,function(axis){if(axis.stacks&&axis.hasVisibleSeries){axis.oldStacks=axis.stacks;}});each(chart.series,function(series){if(series.options.stacking&&(series.visible===true||chart.options.chart.ignoreHiddenSeries===false)){series.stackKey=series.type+pick(series.options.stack,'');}});}; // Stacking methods defined on the Axis prototype
	/**
	 * Build the stacks from top down
	 */Axis.prototype.buildStacks=function(){var series=this.series,reversedStacks=pick(this.options.reversedStacks,true),i=series.length;if(!this.isXAxis){this.usePercentage=false;while(i--){series[reversedStacks?i:series.length-i-1].setStackedPoints();} // Loop up again to compute percent stack
	if(this.usePercentage){for(i=0;i<series.length;i++){series[i].setPercentStacks();}}}};Axis.prototype.renderStackTotals=function(){var axis=this,chart=axis.chart,renderer=chart.renderer,stacks=axis.stacks,stackKey,oneStack,stackCategory,stackTotalGroup=axis.stackTotalGroup; // Create a separate group for the stack total labels
	if(!stackTotalGroup){axis.stackTotalGroup=stackTotalGroup=renderer.g('stack-labels').attr({visibility:VISIBLE,zIndex:6}).add();} // plotLeft/Top will change when y axis gets wider so we need to translate the
	// stackTotalGroup at every render call. See bug #506 and #516
	stackTotalGroup.translate(chart.plotLeft,chart.plotTop); // Render each stack total
	for(stackKey in stacks){oneStack=stacks[stackKey];for(stackCategory in oneStack){oneStack[stackCategory].render(stackTotalGroup);}}}; /**
	 * Set all the stacks to initial states and destroy unused ones.
	 */Axis.prototype.resetStacks=function(){var stacks=this.stacks,type,i;if(!this.isXAxis){for(type in stacks){for(i in stacks[type]){ // Clean up memory after point deletion (#1044, #4320)
	if(stacks[type][i].touched<this.stacksTouched){stacks[type][i].destroy();delete stacks[type][i]; // Reset stacks
	}else {stacks[type][i].total=null;stacks[type][i].cum=0;}}}}};Axis.prototype.cleanStacks=function(){var stacks,type,i;if(!this.isXAxis){if(this.oldStacks){stacks=this.stacks=this.oldStacks;} // reset stacks
	for(type in stacks){for(i in stacks[type]){stacks[type][i].cum=stacks[type][i].total;}}}}; // Stacking methods defnied for Series prototype
	/**
	 * Adds series' points value to corresponding stack
	 */Series.prototype.setStackedPoints=function(){if(!this.options.stacking||this.visible!==true&&this.chart.options.chart.ignoreHiddenSeries!==false){return;}var series=this,xData=series.processedXData,yData=series.processedYData,stackedYData=[],yDataLength=yData.length,seriesOptions=series.options,threshold=seriesOptions.threshold,stackThreshold=seriesOptions.startFromThreshold?threshold:0,stackOption=seriesOptions.stack,stacking=seriesOptions.stacking,stackKey=series.stackKey,negKey='-'+stackKey,negStacks=series.negStacks,yAxis=series.yAxis,stacks=yAxis.stacks,oldStacks=yAxis.oldStacks,stackIndicator,isNegative,stack,other,key,pointKey,i,x,y;yAxis.stacksTouched+=1; // loop over the non-null y values and read them into a local array
	for(i=0;i<yDataLength;i++){x=xData[i];y=yData[i];stackIndicator=series.getStackIndicator(stackIndicator,x,series.index);pointKey=stackIndicator.key; // Read stacked values into a stack based on the x value,
	// the sign of y and the stack key. Stacking is also handled for null values (#739)
	isNegative=negStacks&&y<(stackThreshold?0:threshold);key=isNegative?negKey:stackKey; // Create empty object for this stack if it doesn't exist yet
	if(!stacks[key]){stacks[key]={};} // Initialize StackItem for this x
	if(!stacks[key][x]){if(oldStacks[key]&&oldStacks[key][x]){stacks[key][x]=oldStacks[key][x];stacks[key][x].total=null;}else {stacks[key][x]=new StackItem(yAxis,yAxis.options.stackLabels,isNegative,x,stackOption);}} // If the StackItem doesn't exist, create it first
	stack=stacks[key][x]; //stack.points[pointKey] = [stack.cum || stackThreshold];
	stack.points[pointKey]=[pick(stack.cum,stackThreshold)];stack.touched=yAxis.stacksTouched; // Add value to the stack total
	if(stacking==='percent'){ // Percent stacked column, totals are the same for the positive and negative stacks
	other=isNegative?stackKey:negKey;if(negStacks&&stacks[other]&&stacks[other][x]){other=stacks[other][x];stack.total=other.total=mathMax(other.total,stack.total)+mathAbs(y)||0; // Percent stacked areas
	}else {stack.total=correctFloat(stack.total+(mathAbs(y)||0));}}else {stack.total=correctFloat(stack.total+(y||0));}stack.cum=pick(stack.cum,stackThreshold)+(y||0);stack.points[pointKey].push(stack.cum);stackedYData[i]=stack.cum;}if(stacking==='percent'){yAxis.usePercentage=true;}this.stackedYData=stackedYData; // To be used in getExtremes
	// Reset old stacks
	yAxis.oldStacks={};}; /**
	 * Iterate over all stacks and compute the absolute values to percent
	 */Series.prototype.setPercentStacks=function(){var series=this,stackKey=series.stackKey,stacks=series.yAxis.stacks,processedXData=series.processedXData,stackIndicator;each([stackKey,'-'+stackKey],function(key){var i=processedXData.length,x,stack,pointExtremes,totalFactor;while(i--){x=processedXData[i];stackIndicator=series.getStackIndicator(stackIndicator,x,series.index);stack=stacks[key]&&stacks[key][x];pointExtremes=stack&&stack.points[stackIndicator.key];if(pointExtremes){totalFactor=stack.total?100/stack.total:0;pointExtremes[0]=correctFloat(pointExtremes[0]*totalFactor); // Y bottom value
	pointExtremes[1]=correctFloat(pointExtremes[1]*totalFactor); // Y value
	series.stackedYData[i]=pointExtremes[1];}}});}; /**
	* Get stack indicator, according to it's x-value, to determine points with the same x-value
	*/Series.prototype.getStackIndicator=function(stackIndicator,x,index){if(!defined(stackIndicator)||stackIndicator.x!==x){stackIndicator={x:x,index:0};}else {stackIndicator.index++;}stackIndicator.key=[index,x,stackIndicator.index].join(',');return stackIndicator;}; // Extend the Chart prototype for dynamic methods
	extend(Chart.prototype,{ /**
		 * Add a series dynamically after  time
		 *
		 * @param {Object} options The config options
		 * @param {Boolean} redraw Whether to redraw the chart after adding. Defaults to true.
		 * @param {Boolean|Object} animation Whether to apply animation, and optionally animation
		 *    configuration
		 *
		 * @return {Object} series The newly created series object
		 */addSeries:function addSeries(options,redraw,animation){var series,chart=this;if(options){redraw=pick(redraw,true); // defaults to true
	fireEvent(chart,'addSeries',{options:options},function(){series=chart.initSeries(options);chart.isDirtyLegend=true; // the series array is out of sync with the display
	chart.linkSeries();if(redraw){chart.redraw(animation);}});}return series;}, /**
	     * Add an axis to the chart
	     * @param {Object} options The axis option
	     * @param {Boolean} isX Whether it is an X axis or a value axis
	     */addAxis:function addAxis(options,isX,redraw,animation){var key=isX?'xAxis':'yAxis',chartOptions=this.options,axis; /*jslint unused: false*/axis=new Axis(this,merge(options,{index:this[key].length,isX:isX})); /*jslint unused: true*/ // Push the new axis options to the chart options
	chartOptions[key]=splat(chartOptions[key]||{});chartOptions[key].push(options);if(pick(redraw,true)){this.redraw(animation);}}, /**
		 * Dim the chart and show a loading text or symbol
		 * @param {String} str An optional text to show in the loading label instead of the default one
		 */showLoading:function showLoading(str){var chart=this,options=chart.options,loadingDiv=chart.loadingDiv,loadingOptions=options.loading,setLoadingSize=function setLoadingSize(){if(loadingDiv){_css(loadingDiv,{left:chart.plotLeft+PX,top:chart.plotTop+PX,width:chart.plotWidth+PX,height:chart.plotHeight+PX});}}; // create the layer at the first call
	if(!loadingDiv){chart.loadingDiv=loadingDiv=createElement(DIV,{className:PREFIX+'loading'},extend(loadingOptions.style,{zIndex:10,display:NONE}),chart.container);chart.loadingSpan=createElement('span',null,loadingOptions.labelStyle,loadingDiv);addEvent(chart,'redraw',setLoadingSize); // #1080
	} // update text
	chart.loadingSpan.innerHTML=str||options.lang.loading; // show it
	if(!chart.loadingShown){_css(loadingDiv,{opacity:0,display:''});_animate(loadingDiv,{opacity:loadingOptions.style.opacity},{duration:loadingOptions.showDuration||0});chart.loadingShown=true;}setLoadingSize();}, /**
		 * Hide the loading layer
		 */hideLoading:function hideLoading(){var options=this.options,loadingDiv=this.loadingDiv;if(loadingDiv){_animate(loadingDiv,{opacity:0},{duration:options.loading.hideDuration||100,complete:function complete(){_css(loadingDiv,{display:NONE});}});}this.loadingShown=false;}}); // extend the Point prototype for dynamic methods
	extend(Point.prototype,{ /**
		 * Update the point with new options (typically x/y data) and optionally redraw the series.
		 *
		 * @param {Object} options Point options as defined in the series.data array
		 * @param {Boolean} redraw Whether to redraw the chart or wait for an explicit call
		 * @param {Boolean|Object} animation Whether to apply animation, and optionally animation
		 *    configuration
		 *
		 */update:function update(options,redraw,animation,runEvent){var point=this,series=point.series,graphic=point.graphic,i,chart=series.chart,seriesOptions=series.options,names=series.xAxis&&series.xAxis.names;redraw=pick(redraw,true);function update(){point.applyOptions(options); // Update visuals
	if(point.y===null&&graphic){ // #4146
	point.graphic=graphic.destroy();}if(isObject(options)&&!isArray(options)){ // Defer the actual redraw until getAttribs has been called (#3260)
	point.redraw=function(){if(graphic&&graphic.element){if(options&&options.marker&&options.marker.symbol){point.graphic=graphic.destroy();}}if(options&&options.dataLabels&&point.dataLabel){ // #2468
	point.dataLabel=point.dataLabel.destroy();}point.redraw=null;};} // record changes in the parallel arrays
	i=point.index;series.updateParallelArrays(point,i);if(names&&point.name){names[point.x]=point.name;}seriesOptions.data[i]=point.options; // redraw
	series.isDirty=series.isDirtyData=true;if(!series.fixedBox&&series.hasCartesianSeries){ // #1906, #2320
	chart.isDirtyBox=true;}if(seriesOptions.legendType==='point'){ // #1831, #1885
	chart.isDirtyLegend=true;}if(redraw){chart.redraw(animation);}} // Fire the event with a default handler of doing the update
	if(runEvent===false){ // When called from setData
	update();}else {point.firePointEvent('update',{options:options},update);}}, /**
		 * Remove a point and optionally redraw the series and if necessary the axes
		 * @param {Boolean} redraw Whether to redraw the chart or wait for an explicit call
		 * @param {Boolean|Object} animation Whether to apply animation, and optionally animation
		 *    configuration
		 */remove:function remove(redraw,animation){this.series.removePoint(inArray(this,this.series.data),redraw,animation);}}); // Extend the series prototype for dynamic methods
	extend(Series.prototype,{ /**
		 * Add a point dynamically after chart load time
		 * @param {Object} options Point options as given in series.data
		 * @param {Boolean} redraw Whether to redraw the chart or wait for an explicit call
		 * @param {Boolean} shift If shift is true, a point is shifted off the start
		 *    of the series as one is appended to the end.
		 * @param {Boolean|Object} animation Whether to apply animation, and optionally animation
		 *    configuration
		 */addPoint:function addPoint(options,redraw,shift,animation){var series=this,seriesOptions=series.options,data=series.data,graph=series.graph,area=series.area,chart=series.chart,names=series.xAxis&&series.xAxis.names,currentShift=graph&&graph.shift||0,shiftShapes=['graph','area'],dataOptions=seriesOptions.data,point,isInTheMiddle,xData=series.xData,i,x;setAnimation(animation,chart); // Make graph animate sideways
	if(shift){i=series.zones.length;while(i--){shiftShapes.push('zoneGraph'+i,'zoneArea'+i);}each(shiftShapes,function(shape){if(series[shape]){series[shape].shift=currentShift+(seriesOptions.step?2:1);}});}if(area){area.isArea=true; // needed in animation, both with and without shift
	} // Optional redraw, defaults to true
	redraw=pick(redraw,true); // Get options and push the point to xData, yData and series.options. In series.generatePoints
	// the Point instance will be created on demand and pushed to the series.data array.
	point={series:series};series.pointClass.prototype.applyOptions.apply(point,[options]);x=point.x; // Get the insertion point
	i=xData.length;if(series.requireSorting&&x<xData[i-1]){isInTheMiddle=true;while(i&&xData[i-1]>x){i--;}}series.updateParallelArrays(point,'splice',i,0,0); // insert undefined item
	series.updateParallelArrays(point,i); // update it
	if(names&&point.name){names[x]=point.name;}dataOptions.splice(i,0,options);if(isInTheMiddle){series.data.splice(i,0,null);series.processData();} // Generate points to be added to the legend (#1329)
	if(seriesOptions.legendType==='point'){series.generatePoints();} // Shift the first point off the parallel arrays
	// todo: consider series.removePoint(i) method
	if(shift){if(data[0]&&data[0].remove){data[0].remove(false);}else {data.shift();series.updateParallelArrays(point,'shift');dataOptions.shift();}} // redraw
	series.isDirty=true;series.isDirtyData=true;if(redraw){series.getAttribs(); // #1937
	chart.redraw();}}, /**
		 * Remove a point (rendered or not), by index
		 */removePoint:function removePoint(i,redraw,animation){var series=this,data=series.data,point=data[i],points=series.points,chart=series.chart,remove=function remove(){if(data.length===points.length){points.splice(i,1);}data.splice(i,1);series.options.data.splice(i,1);series.updateParallelArrays(point||{series:series},'splice',i,1);if(point){point.destroy();} // redraw
	series.isDirty=true;series.isDirtyData=true;if(redraw){chart.redraw();}};setAnimation(animation,chart);redraw=pick(redraw,true); // Fire the event with a default handler of removing the point
	if(point){point.firePointEvent('remove',null,remove);}else {remove();}}, /**
		 * Remove a series and optionally redraw the chart
		 *
		 * @param {Boolean} redraw Whether to redraw the chart or wait for an explicit call
		 * @param {Boolean|Object} animation Whether to apply animation, and optionally animation
		 *    configuration
		 */remove:function remove(redraw,animation){var series=this,chart=series.chart;redraw=pick(redraw,true);if(!series.isRemoving){ /* prevent triggering native event in jQuery
					(calling the remove function from the remove event) */series.isRemoving=true; // fire the event with a default handler of removing the point
	fireEvent(series,'remove',null,function(){ // destroy elements
	series.destroy(); // redraw
	chart.isDirtyLegend=chart.isDirtyBox=true;chart.linkSeries();if(redraw){chart.redraw(animation);}});}series.isRemoving=false;}, /**
		 * Update the series with a new set of options
		 */update:function update(newOptions,redraw){var series=this,chart=this.chart, // must use user options when changing type because this.options is merged
	// in with type specific plotOptions
	oldOptions=this.userOptions,oldType=this.type,proto=seriesTypes[oldType].prototype,preserve=['group','markerGroup','dataLabelsGroup'],n; // If we're changing type or zIndex, create new groups (#3380, #3404)
	if(newOptions.type&&newOptions.type!==oldType||newOptions.zIndex!==undefined){preserve.length=0;} // Make sure groups are not destroyed (#3094)
	each(preserve,function(prop){preserve[prop]=series[prop];delete series[prop];}); // Do the merge, with some forced options
	newOptions=merge(oldOptions,{animation:false,index:this.index,pointStart:this.xData[0] // when updating after addPoint
	},{data:this.options.data},newOptions); // Destroy the series and delete all properties. Reinsert all methods 
	// and properties from the new type prototype (#2270, #3719)
	this.remove(false);for(n in proto){this[n]=UNDEFINED;}extend(this,seriesTypes[newOptions.type||oldType].prototype); // Re-register groups (#3094)
	each(preserve,function(prop){series[prop]=preserve[prop];});this.init(chart,newOptions);chart.linkSeries(); // Links are lost in this.remove (#3028)
	if(pick(redraw,true)){chart.redraw(false);}}}); // Extend the Axis.prototype for dynamic methods
	extend(Axis.prototype,{ /**
		 * Update the axis with a new options structure
		 */update:function update(newOptions,redraw){var chart=this.chart;newOptions=chart.options[this.coll][this.options.index]=merge(this.userOptions,newOptions);this.destroy(true);this._addedPlotLB=this.chart._labelPanes=UNDEFINED; // #1611, #2887, #4314
	this.init(chart,extend(newOptions,{events:UNDEFINED}));chart.isDirtyBox=true;if(pick(redraw,true)){chart.redraw();}}, /**
	     * Remove the axis from the chart
	     */remove:function remove(redraw){var chart=this.chart,key=this.coll, // xAxis or yAxis
	axisSeries=this.series,i=axisSeries.length; // Remove associated series (#2687)
	while(i--){if(axisSeries[i]){axisSeries[i].remove(false);}} // Remove the axis
	erase(chart.axes,this);erase(chart[key],this);chart.options[key].splice(this.options.index,1);each(chart[key],function(axis,i){ // Re-index, #1706
	axis.options.index=i;});this.destroy();chart.isDirtyBox=true;if(pick(redraw,true)){chart.redraw();}}, /**
		 * Update the axis title by options
		 */setTitle:function setTitle(newTitleOptions,redraw){this.update({title:newTitleOptions},redraw);}, /**
		 * Set new axis categories and optionally redraw
		 * @param {Array} categories
		 * @param {Boolean} redraw
		 */setCategories:function setCategories(categories,redraw){this.update({categories:categories},redraw);}}); /**
	 * LineSeries object
	 */var LineSeries=extendClass(Series);seriesTypes.line=LineSeries; /**
	 * Set the default options for area
	 */defaultPlotOptions.area=merge(defaultSeriesOptions,{softThreshold:false,threshold:0 // trackByArea: false,
	// lineColor: null, // overrides color, but lets fillColor be unaltered
	// fillOpacity: 0.75,
	// fillColor: null
	}); /**
	 * AreaSeries object
	 */var AreaSeries=extendClass(Series,{type:'area', /**
		 * For stacks, don't split segments on null values. Instead, draw null values with 
		 * no marker. Also insert dummy points for any X position that exists in other series
		 * in the stack.
		 */getSegments:function getSegments(){var series=this,segments=[],segment=[],keys=[],xAxis=this.xAxis,yAxis=this.yAxis,stack=yAxis.stacks[this.stackKey],pointMap={},plotX,plotY,points=this.points,connectNulls=this.options.connectNulls,stackIndicator,i,x;if(this.options.stacking&&!this.cropped){ // cropped causes artefacts in Stock, and perf issue
	// Create a map where we can quickly look up the points by their X value.
	for(i=0;i<points.length;i++){pointMap[points[i].x]=points[i];} // Sort the keys (#1651)
	for(x in stack){if(stack[x].total!==null){ // nulled after switching between grouping and not (#1651, #2336)
	keys.push(+x);}}keys.sort(function(a,b){return a-b;});each(keys,function(x){var threshold=null,stackPoint;if(connectNulls&&(!pointMap[x]||pointMap[x].y===null)){ // #1836
	return; // The point exists, push it to the segment
	}else if(pointMap[x]){segment.push(pointMap[x]); // There is no point for this X value in this series, so we 
	// insert a dummy point in order for the areas to be drawn
	// correctly.
	}else { // Loop down the stack to find the series below this one that has
	// a value (#1991)
	for(i=series.index;i<=yAxis.series.length;i++){stackIndicator=series.getStackIndicator(null,x,i);stackPoint=stack[x].points[stackIndicator.key];if(stackPoint){threshold=stackPoint[1];break;}}plotX=xAxis.translate(x);plotY=yAxis.getThreshold(threshold);segment.push({y:null,plotX:plotX,clientX:plotX,plotY:plotY,yBottom:plotY,onMouseOver:noop});}});if(segment.length){segments.push(segment);}}else {Series.prototype.getSegments.call(this);segments=this.segments;}this.segments=segments;}, /**
		 * Extend the base Series getSegmentPath method by adding the path for the area.
		 * This path is pushed to the series.areaPath property.
		 */getSegmentPath:function getSegmentPath(segment){var segmentPath=Series.prototype.getSegmentPath.call(this,segment), // call base method
	areaSegmentPath=[].concat(segmentPath), // work on a copy for the area path
	i,options=this.options,segLength=segmentPath.length,translatedThreshold=this.yAxis.getThreshold(options.threshold), // #2181
	yBottom;if(segLength===3){ // for animation from 1 to two points
	areaSegmentPath.push(L,segmentPath[1],segmentPath[2]);}if(options.stacking&&!this.closedStacks){ // Follow stack back. Todo: implement areaspline. A general solution could be to 
	// reverse the entire graphPath of the previous series, though may be hard with
	// splines and with series with different extremes
	for(i=segment.length-1;i>=0;i--){yBottom=pick(segment[i].yBottom,translatedThreshold); // step line?
	if(i<segment.length-1&&options.step){areaSegmentPath.push(segment[i+1].plotX,yBottom);}areaSegmentPath.push(segment[i].plotX,yBottom);}}else { // follow zero line back
	this.closeSegment(areaSegmentPath,segment,translatedThreshold);}this.areaPath=this.areaPath.concat(areaSegmentPath);return segmentPath;}, /**
		 * Extendable method to close the segment path of an area. This is overridden in polar 
		 * charts.
		 */closeSegment:function closeSegment(path,segment,translatedThreshold){path.push(L,segment[segment.length-1].plotX,translatedThreshold,L,segment[0].plotX,translatedThreshold);}, /**
		 * Draw the graph and the underlying area. This method calls the Series base
		 * function and adds the area. The areaPath is calculated in the getSegmentPath
		 * method called from Series.prototype.drawGraph.
		 */drawGraph:function drawGraph(){ // Define or reset areaPath
	this.areaPath=[]; // Call the base method
	Series.prototype.drawGraph.apply(this); // Define local variables
	var series=this,areaPath=this.areaPath,options=this.options,zones=this.zones,props=[['area',this.color,options.fillColor]]; // area name, main color, fill color
	each(zones,function(threshold,i){props.push(['zoneArea'+i,threshold.color||series.color,threshold.fillColor||options.fillColor]);});each(props,function(prop){var areaKey=prop[0],area=series[areaKey]; // Create or update the area
	if(area){ // update
	area.animate({d:areaPath});}else { // create
	series[areaKey]=series.chart.renderer.path(areaPath).attr({fill:pick(prop[2],Color(prop[1]).setOpacity(pick(options.fillOpacity,0.75)).get()),zIndex:0 // #1069
	}).add(series.group);}});},drawLegendSymbol:LegendSymbolMixin.drawRectangle});seriesTypes.area=AreaSeries; /**
	 * Set the default options for spline
	 */defaultPlotOptions.spline=merge(defaultSeriesOptions); /**
	 * SplineSeries object
	 */var SplineSeries=extendClass(Series,{type:'spline', /**
		 * Get the spline segment from a given point's previous neighbour to the given point
		 */getPointSpline:function getPointSpline(segment,point,i){var smoothing=1.5, // 1 means control points midway between points, 2 means 1/3 from the point, 3 is 1/4 etc
	denom=smoothing+1,plotX=point.plotX,plotY=point.plotY,lastPoint=segment[i-1],nextPoint=segment[i+1],leftContX,leftContY,rightContX,rightContY,ret; // find control points
	if(lastPoint&&nextPoint){var lastX=lastPoint.plotX,lastY=lastPoint.plotY,nextX=nextPoint.plotX,nextY=nextPoint.plotY,correction;leftContX=(smoothing*plotX+lastX)/denom;leftContY=(smoothing*plotY+lastY)/denom;rightContX=(smoothing*plotX+nextX)/denom;rightContY=(smoothing*plotY+nextY)/denom; // have the two control points make a straight line through main point
	correction=(rightContY-leftContY)*(rightContX-plotX)/(rightContX-leftContX)+plotY-rightContY;leftContY+=correction;rightContY+=correction; // to prevent false extremes, check that control points are between
	// neighbouring points' y values
	if(leftContY>lastY&&leftContY>plotY){leftContY=mathMax(lastY,plotY);rightContY=2*plotY-leftContY; // mirror of left control point
	}else if(leftContY<lastY&&leftContY<plotY){leftContY=mathMin(lastY,plotY);rightContY=2*plotY-leftContY;}if(rightContY>nextY&&rightContY>plotY){rightContY=mathMax(nextY,plotY);leftContY=2*plotY-rightContY;}else if(rightContY<nextY&&rightContY<plotY){rightContY=mathMin(nextY,plotY);leftContY=2*plotY-rightContY;} // record for drawing in next point
	point.rightContX=rightContX;point.rightContY=rightContY;} // Visualize control points for debugging
	/*
			if (leftContX) {
				this.chart.renderer.circle(leftContX + this.chart.plotLeft, leftContY + this.chart.plotTop, 2)
					.attr({
						stroke: 'red',
						'stroke-width': 1,
						fill: 'none'
					})
					.add();
				this.chart.renderer.path(['M', leftContX + this.chart.plotLeft, leftContY + this.chart.plotTop,
					'L', plotX + this.chart.plotLeft, plotY + this.chart.plotTop])
					.attr({
						stroke: 'red',
						'stroke-width': 1
					})
					.add();
				this.chart.renderer.circle(rightContX + this.chart.plotLeft, rightContY + this.chart.plotTop, 2)
					.attr({
						stroke: 'green',
						'stroke-width': 1,
						fill: 'none'
					})
					.add();
				this.chart.renderer.path(['M', rightContX + this.chart.plotLeft, rightContY + this.chart.plotTop,
					'L', plotX + this.chart.plotLeft, plotY + this.chart.plotTop])
					.attr({
						stroke: 'green',
						'stroke-width': 1
					})
					.add();
			}
			*/ // moveTo or lineTo
	if(!i){ret=[M,plotX,plotY];}else { // curve from last point to this
	ret=['C',lastPoint.rightContX||lastPoint.plotX,lastPoint.rightContY||lastPoint.plotY,leftContX||plotX,leftContY||plotY,plotX,plotY];lastPoint.rightContX=lastPoint.rightContY=null; // reset for updating series later
	}return ret;}});seriesTypes.spline=SplineSeries; /**
	 * Set the default options for areaspline
	 */defaultPlotOptions.areaspline=merge(defaultPlotOptions.area); /**
	 * AreaSplineSeries object
	 */var areaProto=AreaSeries.prototype,AreaSplineSeries=extendClass(SplineSeries,{type:'areaspline',closedStacks:true, // instead of following the previous graph back, follow the threshold back
	// Mix in methods from the area series
	getSegmentPath:areaProto.getSegmentPath,closeSegment:areaProto.closeSegment,drawGraph:areaProto.drawGraph,drawLegendSymbol:LegendSymbolMixin.drawRectangle});seriesTypes.areaspline=AreaSplineSeries; /**
	 * Set the default options for column
	 */defaultPlotOptions.column=merge(defaultSeriesOptions,{borderColor:'#FFFFFF', //borderWidth: 1,
	borderRadius:0, //colorByPoint: undefined,
	groupPadding:0.2, //grouping: true,
	marker:null, // point options are specified in the base options
	pointPadding:0.1, //pointWidth: null,
	minPointLength:0,cropThreshold:50, // when there are more points, they will not animate out of the chart on xAxis.setExtremes
	pointRange:null, // null means auto, meaning 1 in a categorized axis and least distance between points if not categories
	states:{hover:{brightness:0.1,shadow:false,halo:false},select:{color:'#C0C0C0',borderColor:'#000000',shadow:false}},dataLabels:{align:null, // auto
	verticalAlign:null, // auto
	y:null},softThreshold:false,startFromThreshold:true, // docs (but false doesn't work well): http://jsfiddle.net/highcharts/hz8fopan/14/
	stickyTracking:false,tooltip:{distance:6},threshold:0}); /**
	 * ColumnSeries object
	 */var ColumnSeries=extendClass(Series,{type:'column',pointAttrToOptions:{ // mapping between SVG attributes and the corresponding options
	stroke:'borderColor',fill:'color',r:'borderRadius'},cropShoulder:0,directTouch:true, // When tooltip is not shared, this series (and derivatives) requires direct touch/hover. KD-tree does not apply.
	trackerGroups:['group','dataLabelsGroup'],negStacks:true, // use separate negative stacks, unlike area stacks where a negative 
	// point is substracted from previous (#1910)
	/**
		 * Initialize the series
		 */init:function init(){Series.prototype.init.apply(this,arguments);var series=this,chart=series.chart; // if the series is added dynamically, force redraw of other
	// series affected by a new column
	if(chart.hasRendered){each(chart.series,function(otherSeries){if(otherSeries.type===series.type){otherSeries.isDirty=true;}});}}, /**
		 * Return the width and x offset of the columns adjusted for grouping, groupPadding, pointPadding,
		 * pointWidth etc. 
		 */getColumnMetrics:function getColumnMetrics(){var series=this,options=series.options,xAxis=series.xAxis,yAxis=series.yAxis,reversedXAxis=xAxis.reversed,stackKey,stackGroups={},columnIndex,columnCount=0; // Get the total number of column type series.
	// This is called on every series. Consider moving this logic to a
	// chart.orderStacks() function and call it on init, addSeries and removeSeries
	if(options.grouping===false){columnCount=1;}else {each(series.chart.series,function(otherSeries){var otherOptions=otherSeries.options,otherYAxis=otherSeries.yAxis;if(otherSeries.type===series.type&&otherSeries.visible&&yAxis.len===otherYAxis.len&&yAxis.pos===otherYAxis.pos){ // #642, #2086
	if(otherOptions.stacking){stackKey=otherSeries.stackKey;if(stackGroups[stackKey]===UNDEFINED){stackGroups[stackKey]=columnCount++;}columnIndex=stackGroups[stackKey];}else if(otherOptions.grouping!==false){ // #1162
	columnIndex=columnCount++;}otherSeries.columnIndex=columnIndex;}});}var categoryWidth=mathMin(mathAbs(xAxis.transA)*(xAxis.ordinalSlope||options.pointRange||xAxis.closestPointRange||xAxis.tickInterval||1), // #2610
	xAxis.len // #1535
	),groupPadding=categoryWidth*options.groupPadding,groupWidth=categoryWidth-2*groupPadding,pointOffsetWidth=groupWidth/columnCount,pointWidth=mathMin(options.maxPointWidth||xAxis.len,pick(options.pointWidth,pointOffsetWidth*(1-2*options.pointPadding))),pointPadding=(pointOffsetWidth-pointWidth)/2,colIndex=(reversedXAxis?columnCount-(series.columnIndex||0): // #1251
	series.columnIndex)||0,pointXOffset=pointPadding+(groupPadding+colIndex*pointOffsetWidth-categoryWidth/2)*(reversedXAxis?-1:1); // Save it for reading in linked series (Error bars particularly)
	return series.columnMetrics={width:pointWidth,offset:pointXOffset};}, /**
		 * Make the columns crisp. The edges are rounded to the nearest full pixel.
		 */crispCol:function crispCol(x,y,w,h){var chart=this.chart,borderWidth=this.borderWidth,xCrisp=-(borderWidth%2?0.5:0),yCrisp=borderWidth%2?0.5:1,right,bottom,fromTop;if(chart.inverted&&chart.renderer.isVML){yCrisp+=1;} // Horizontal. We need to first compute the exact right edge, then round it
	// and compute the width from there.
	right=Math.round(x+w)+xCrisp;x=Math.round(x)+xCrisp;w=right-x; // Vertical
	fromTop=mathAbs(y)<=0.5; // #4504
	bottom=Math.round(y+h)+yCrisp;y=Math.round(y)+yCrisp;h=bottom-y; // Top edges are exceptions
	if(fromTop){y-=1;h+=1;}return {x:x,y:y,width:w,height:h};}, /**
		 * Translate each point to the plot area coordinate system and find shape positions
		 */translate:function translate(){var series=this,chart=series.chart,options=series.options,borderWidth=series.borderWidth=pick(options.borderWidth,series.closestPointRange*series.xAxis.transA<2?0:1 // #3635
	),yAxis=series.yAxis,threshold=options.threshold,translatedThreshold=series.translatedThreshold=yAxis.getThreshold(threshold),minPointLength=pick(options.minPointLength,5),metrics=series.getColumnMetrics(),pointWidth=metrics.width,seriesBarW=series.barW=mathMax(pointWidth,1+2*borderWidth), // postprocessed for border width
	pointXOffset=series.pointXOffset=metrics.offset;if(chart.inverted){translatedThreshold-=0.5; // #3355
	} // When the pointPadding is 0, we want the columns to be packed tightly, so we allow individual
	// columns to have individual sizes. When pointPadding is greater, we strive for equal-width
	// columns (#2694).
	if(options.pointPadding){seriesBarW=mathCeil(seriesBarW);}Series.prototype.translate.apply(series); // Record the new values
	each(series.points,function(point){var yBottom=mathMin(pick(point.yBottom,translatedThreshold),9e4), // #3575
	safeDistance=999+mathAbs(yBottom),plotY=mathMin(mathMax(-safeDistance,point.plotY),yAxis.len+safeDistance), // Don't draw too far outside plot area (#1303, #2241, #4264)
	barX=point.plotX+pointXOffset,barW=seriesBarW,barY=mathMin(plotY,yBottom),up,barH=mathMax(plotY,yBottom)-barY; // Handle options.minPointLength
	if(mathAbs(barH)<minPointLength){if(minPointLength){barH=minPointLength;up=!yAxis.reversed&&!point.negative||yAxis.reversed&&point.negative;barY=mathAbs(barY-translatedThreshold)>minPointLength? // stacked
	yBottom-minPointLength: // keep position
	translatedThreshold-(up?minPointLength:0); // #1485, #4051
	}} // Cache for access in polar
	point.barX=barX;point.pointWidth=pointWidth; // Fix the tooltip on center of grouped columns (#1216, #424, #3648)
	point.tooltipPos=chart.inverted?[yAxis.len+yAxis.pos-chart.plotLeft-plotY,series.xAxis.len-barX-barW/2,barH]:[barX+barW/2,plotY+yAxis.pos-chart.plotTop,barH]; // Register shape type and arguments to be used in drawPoints
	point.shapeType='rect';point.shapeArgs=series.crispCol(barX,barY,barW,barH);});},getSymbol:noop, /**
		 * Use a solid rectangle like the area series types
		 */drawLegendSymbol:LegendSymbolMixin.drawRectangle, /**
		 * Columns have no graph
		 */drawGraph:noop, /**
		 * Draw the columns. For bars, the series.group is rotated, so the same coordinates
		 * apply for columns and bars. This method is inherited by scatter series.
		 *
		 */drawPoints:function drawPoints(){var series=this,chart=this.chart,options=series.options,renderer=chart.renderer,animationLimit=options.animationLimit||250,shapeArgs,pointAttr; // draw the columns
	each(series.points,function(point){var plotY=point.plotY,graphic=point.graphic,borderAttr;if(plotY!==UNDEFINED&&!isNaN(plotY)&&point.y!==null){shapeArgs=point.shapeArgs;borderAttr=defined(series.borderWidth)?{'stroke-width':series.borderWidth}:{};pointAttr=point.pointAttr[point.selected?SELECT_STATE:NORMAL_STATE]||series.pointAttr[NORMAL_STATE];if(graphic){ // update
	stop(graphic);graphic.attr(borderAttr)[chart.pointCount<animationLimit?'animate':'attr'](merge(shapeArgs));}else {point.graphic=graphic=renderer[point.shapeType](shapeArgs).attr(borderAttr).attr(pointAttr).add(point.group||series.group).shadow(options.shadow,null,options.stacking&&!options.borderRadius);}}else if(graphic){point.graphic=graphic.destroy(); // #1269
	}});}, /**
		 * Animate the column heights one by one from zero
		 * @param {Boolean} init Whether to initialize the animation or run it
		 */animate:function animate(init){var series=this,yAxis=this.yAxis,options=series.options,inverted=this.chart.inverted,attr={},translatedThreshold;if(hasSVG){ // VML is too slow anyway
	if(init){attr.scaleY=0.001;translatedThreshold=mathMin(yAxis.pos+yAxis.len,mathMax(yAxis.pos,yAxis.toPixels(options.threshold)));if(inverted){attr.translateX=translatedThreshold-yAxis.len;}else {attr.translateY=translatedThreshold;}series.group.attr(attr);}else { // run the animation
	attr.scaleY=1;attr[inverted?'translateX':'translateY']=yAxis.pos;series.group.animate(attr,series.options.animation); // delete this function to allow it only once
	series.animate=null;}}}, /**
		 * Remove this series from the chart
		 */remove:function remove(){var series=this,chart=series.chart; // column and bar series affects other series of the same type
	// as they are either stacked or grouped
	if(chart.hasRendered){each(chart.series,function(otherSeries){if(otherSeries.type===series.type){otherSeries.isDirty=true;}});}Series.prototype.remove.apply(series,arguments);}});seriesTypes.column=ColumnSeries; /**
	 * Set the default options for bar
	 */defaultPlotOptions.bar=merge(defaultPlotOptions.column); /**
	 * The Bar series class
	 */var BarSeries=extendClass(ColumnSeries,{type:'bar',inverted:true});seriesTypes.bar=BarSeries; /**
	 * Set the default options for scatter
	 */defaultPlotOptions.scatter=merge(defaultSeriesOptions,{lineWidth:0,marker:{enabled:true // Overrides auto-enabling in line series (#3647)
	},tooltip:{headerFormat:'<span style="color:{point.color}">●</span> <span style="font-size: 10px;"> {series.name}</span><br/>',pointFormat:'x: <b>{point.x}</b><br/>y: <b>{point.y}</b><br/>'}}); /**
	 * The scatter series class
	 */var ScatterSeries=extendClass(Series,{type:'scatter',sorted:false,requireSorting:false,noSharedTooltip:true,trackerGroups:['group','markerGroup','dataLabelsGroup'],takeOrdinalPosition:false, // #2342
	kdDimensions:2,drawGraph:function drawGraph(){if(this.options.lineWidth){Series.prototype.drawGraph.call(this);}}});seriesTypes.scatter=ScatterSeries; /**
	 * Set the default options for pie
	 */defaultPlotOptions.pie=merge(defaultSeriesOptions,{borderColor:'#FFFFFF',borderWidth:1,center:[null,null],clip:false,colorByPoint:true, // always true for pies
	dataLabels:{ // align: null,
	// connectorWidth: 1,
	// connectorColor: point.color,
	// connectorPadding: 5,
	distance:30,enabled:true,formatter:function formatter(){ // #2945
	return this.y===null?undefined:this.point.name;}, // softConnector: true,
	x:0 // y: 0
	},ignoreHiddenPoint:true, //innerSize: 0,
	legendType:'point',marker:null, // point options are specified in the base options
	size:null,showInLegend:false,slicedOffset:10,states:{hover:{brightness:0.1,shadow:false}},stickyTracking:false,tooltip:{followPointer:true}}); /**
	 * Extended point object for pies
	 */var PiePoint=extendClass(Point,{ /**
		 * Initiate the pie slice
		 */init:function init(){Point.prototype.init.apply(this,arguments);var point=this,toggleSlice;point.name=pick(point.name,'Slice'); // add event listener for select
	toggleSlice=function toggleSlice(e){point.slice(e.type==='select');};addEvent(point,'select',toggleSlice);addEvent(point,'unselect',toggleSlice);return point;}, /**
		 * Toggle the visibility of the pie slice
		 * @param {Boolean} vis Whether to show the slice or not. If undefined, the
		 *    visibility is toggled
		 */setVisible:function setVisible(vis,redraw){var point=this,series=point.series,chart=series.chart,ignoreHiddenPoint=series.options.ignoreHiddenPoint;redraw=pick(redraw,ignoreHiddenPoint);if(vis!==point.visible){ // If called without an argument, toggle visibility
	point.visible=point.options.visible=vis=vis===UNDEFINED?!point.visible:vis;series.options.data[inArray(point,series.data)]=point.options; // update userOptions.data
	// Show and hide associated elements. This is performed regardless of redraw or not,
	// because chart.redraw only handles full series.
	each(['graphic','dataLabel','connector','shadowGroup'],function(key){if(point[key]){point[key][vis?'show':'hide'](true);}});if(point.legendItem){chart.legend.colorizeItem(point,vis);} // #4170, hide halo after hiding point
	if(!vis&&point.state==='hover'){point.setState('');} // Handle ignore hidden slices
	if(ignoreHiddenPoint){series.isDirty=true;}if(redraw){chart.redraw();}}}, /**
		 * Set or toggle whether the slice is cut out from the pie
		 * @param {Boolean} sliced When undefined, the slice state is toggled
		 * @param {Boolean} redraw Whether to redraw the chart. True by default.
		 */slice:function slice(sliced,redraw,animation){var point=this,series=point.series,chart=series.chart,translation;setAnimation(animation,chart); // redraw is true by default
	redraw=pick(redraw,true); // if called without an argument, toggle
	point.sliced=point.options.sliced=sliced=defined(sliced)?sliced:!point.sliced;series.options.data[inArray(point,series.data)]=point.options; // update userOptions.data
	translation=sliced?point.slicedTranslation:{translateX:0,translateY:0};point.graphic.animate(translation);if(point.shadowGroup){point.shadowGroup.animate(translation);}},haloPath:function haloPath(size){var shapeArgs=this.shapeArgs,chart=this.series.chart;return this.sliced||!this.visible?[]:this.series.chart.renderer.symbols.arc(chart.plotLeft+shapeArgs.x,chart.plotTop+shapeArgs.y,shapeArgs.r+size,shapeArgs.r+size,{innerR:this.shapeArgs.r,start:shapeArgs.start,end:shapeArgs.end});}}); /**
	 * The Pie series class
	 */var PieSeries={type:'pie',isCartesian:false,pointClass:PiePoint,requireSorting:false,directTouch:true,noSharedTooltip:true,trackerGroups:['group','dataLabelsGroup'],axisTypes:[],pointAttrToOptions:{ // mapping between SVG attributes and the corresponding options
	stroke:'borderColor','stroke-width':'borderWidth',fill:'color'}, /**
		 * Animate the pies in
		 */animate:function animate(init){var series=this,points=series.points,startAngleRad=series.startAngleRad;if(!init){each(points,function(point){var graphic=point.graphic,args=point.shapeArgs;if(graphic){ // start values
	graphic.attr({r:point.startR||series.center[3]/2, // animate from inner radius (#779)
	start:startAngleRad,end:startAngleRad}); // animate
	graphic.animate({r:args.r,start:args.start,end:args.end},series.options.animation);}}); // delete this function to allow it only once
	series.animate=null;}}, /**
		 * Recompute total chart sum and update percentages of points.
		 */updateTotals:function updateTotals(){var i,total=0,points=this.points,len=points.length,point,ignoreHiddenPoint=this.options.ignoreHiddenPoint; // Get the total sum
	for(i=0;i<len;i++){point=points[i];total+=ignoreHiddenPoint&&!point.visible?0:point.y;}this.total=total; // Set each point's properties
	for(i=0;i<len;i++){point=points[i];point.percentage=total>0&&(point.visible||!ignoreHiddenPoint)?point.y/total*100:0;point.total=total;}}, /**
		 * Extend the generatePoints method by adding total and percentage properties to each point
		 */generatePoints:function generatePoints(){Series.prototype.generatePoints.call(this);this.updateTotals();}, /**
		 * Do translation for pie slices
		 */translate:function translate(positions){this.generatePoints();var series=this,cumulative=0,precision=1000, // issue #172
	options=series.options,slicedOffset=options.slicedOffset,connectorOffset=slicedOffset+options.borderWidth,start,end,angle,startAngle=options.startAngle||0,startAngleRad=series.startAngleRad=mathPI/180*(startAngle-90),endAngleRad=series.endAngleRad=mathPI/180*(pick(options.endAngle,startAngle+360)-90),circ=endAngleRad-startAngleRad, //2 * mathPI,
	points=series.points,radiusX, // the x component of the radius vector for a given point
	radiusY,labelDistance=options.dataLabels.distance,ignoreHiddenPoint=options.ignoreHiddenPoint,i,len=points.length,point; // Get positions - either an integer or a percentage string must be given.
	// If positions are passed as a parameter, we're in a recursive loop for adjusting
	// space for data labels.
	if(!positions){series.center=positions=series.getCenter();} // utility for getting the x value from a given y, used for anticollision logic in data labels
	series.getX=function(y,left){angle=math.asin(mathMin((y-positions[1])/(positions[2]/2+labelDistance),1));return positions[0]+(left?-1:1)*(mathCos(angle)*(positions[2]/2+labelDistance));}; // Calculate the geometry for each point
	for(i=0;i<len;i++){point=points[i]; // set start and end angle
	start=startAngleRad+cumulative*circ;if(!ignoreHiddenPoint||point.visible){cumulative+=point.percentage/100;}end=startAngleRad+cumulative*circ; // set the shape
	point.shapeType='arc';point.shapeArgs={x:positions[0],y:positions[1],r:positions[2]/2,innerR:positions[3]/2,start:mathRound(start*precision)/precision,end:mathRound(end*precision)/precision}; // The angle must stay within -90 and 270 (#2645)
	angle=(end+start)/2;if(angle>1.5*mathPI){angle-=2*mathPI;}else if(angle<-mathPI/2){angle+=2*mathPI;} // Center for the sliced out slice
	point.slicedTranslation={translateX:mathRound(mathCos(angle)*slicedOffset),translateY:mathRound(mathSin(angle)*slicedOffset)}; // set the anchor point for tooltips
	radiusX=mathCos(angle)*positions[2]/2;radiusY=mathSin(angle)*positions[2]/2;point.tooltipPos=[positions[0]+radiusX*0.7,positions[1]+radiusY*0.7];point.half=angle<-mathPI/2||angle>mathPI/2?1:0;point.angle=angle; // set the anchor point for data labels
	connectorOffset=mathMin(connectorOffset,labelDistance/2); // #1678
	point.labelPos=[positions[0]+radiusX+mathCos(angle)*labelDistance, // first break of connector
	positions[1]+radiusY+mathSin(angle)*labelDistance, // a/a
	positions[0]+radiusX+mathCos(angle)*connectorOffset, // second break, right outside pie
	positions[1]+radiusY+mathSin(angle)*connectorOffset, // a/a
	positions[0]+radiusX, // landing point for connector
	positions[1]+radiusY, // a/a
	labelDistance<0? // alignment
	'center':point.half?'right':'left', // alignment
	angle // center angle
	];}},drawGraph:null, /**
		 * Draw the data points
		 */drawPoints:function drawPoints(){var series=this,chart=series.chart,renderer=chart.renderer,groupTranslation, //center,
	graphic, //group,
	shadow=series.options.shadow,shadowGroup,shapeArgs,attr;if(shadow&&!series.shadowGroup){series.shadowGroup=renderer.g('shadow').add(series.group);} // draw the slices
	each(series.points,function(point){if(point.y!==null){graphic=point.graphic;shapeArgs=point.shapeArgs;shadowGroup=point.shadowGroup; // put the shadow behind all points
	if(shadow&&!shadowGroup){shadowGroup=point.shadowGroup=renderer.g('shadow').add(series.shadowGroup);} // if the point is sliced, use special translation, else use plot area traslation
	groupTranslation=point.sliced?point.slicedTranslation:{translateX:0,translateY:0}; //group.translate(groupTranslation[0], groupTranslation[1]);
	if(shadowGroup){shadowGroup.attr(groupTranslation);} // draw the slice
	if(graphic){graphic.setRadialReference(series.center).animate(extend(shapeArgs,groupTranslation));}else {attr={'stroke-linejoin':'round'};if(!point.visible){attr.visibility='hidden';}point.graphic=graphic=renderer[point.shapeType](shapeArgs).setRadialReference(series.center).attr(point.pointAttr[point.selected?SELECT_STATE:NORMAL_STATE]).attr(attr).attr(groupTranslation).add(series.group).shadow(shadow,shadowGroup);}}});},searchPoint:noop, /**
		 * Utility for sorting data labels
		 */sortByAngle:function sortByAngle(points,sign){points.sort(function(a,b){return a.angle!==undefined&&(b.angle-a.angle)*sign;});}, /**
		 * Use a simple symbol from LegendSymbolMixin
		 */drawLegendSymbol:LegendSymbolMixin.drawRectangle, /**
		 * Use the getCenter method from drawLegendSymbol
		 */getCenter:CenteredSeriesMixin.getCenter, /**
		 * Pies don't have point marker symbols
		 */getSymbol:noop};PieSeries=extendClass(Series,PieSeries);seriesTypes.pie=PieSeries; /**
	 * Draw the data labels
	 */Series.prototype.drawDataLabels=function(){var series=this,seriesOptions=series.options,cursor=seriesOptions.cursor,options=seriesOptions.dataLabels,points=series.points,pointOptions,generalOptions,hasRendered=series.hasRendered||0,str,dataLabelsGroup,renderer=series.chart.renderer;if(options.enabled||series._hasPointLabels){ // Process default alignment of data labels for columns
	if(series.dlProcessOptions){series.dlProcessOptions(options);} // Create a separate group for the data labels to avoid rotation
	dataLabelsGroup=series.plotGroup('dataLabelsGroup','data-labels',options.defer?HIDDEN:VISIBLE,options.zIndex||6);if(pick(options.defer,true)){dataLabelsGroup.attr({opacity:+hasRendered}); // #3300
	if(!hasRendered){addEvent(series,'afterAnimate',function(){if(series.visible){ // #3023, #3024
	dataLabelsGroup.show();}dataLabelsGroup[seriesOptions.animation?'animate':'attr']({opacity:1},{duration:200});});}} // Make the labels for each point
	generalOptions=options;each(points,function(point){var enabled,dataLabel=point.dataLabel,labelConfig,attr,name,rotation,connector=point.connector,isNew=true,style,moreStyle={}; // Determine if each data label is enabled
	pointOptions=point.dlOptions||point.options&&point.options.dataLabels; // dlOptions is used in treemaps
	enabled=pick(pointOptions&&pointOptions.enabled,generalOptions.enabled); // #2282
	// If the point is outside the plot area, destroy it. #678, #820
	if(dataLabel&&!enabled){point.dataLabel=dataLabel.destroy(); // Individual labels are disabled if the are explicitly disabled
	// in the point options, or if they fall outside the plot area.
	}else if(enabled){ // Create individual options structure that can be extended without
	// affecting others
	options=merge(generalOptions,pointOptions);style=options.style;rotation=options.rotation; // Get the string
	labelConfig=point.getLabelConfig();str=options.format?format(options.format,labelConfig):options.formatter.call(labelConfig,options); // Determine the color
	style.color=pick(options.color,style.color,series.color,'black'); // update existing label
	if(dataLabel){if(defined(str)){dataLabel.attr({text:str});isNew=false;}else { // #1437 - the label is shown conditionally
	point.dataLabel=dataLabel=dataLabel.destroy();if(connector){point.connector=connector.destroy();}} // create new label
	}else if(defined(str)){attr={ //align: align,
	fill:options.backgroundColor,stroke:options.borderColor,'stroke-width':options.borderWidth,r:options.borderRadius||0,rotation:rotation,padding:options.padding,zIndex:1}; // Get automated contrast color
	if(style.color==='contrast'){moreStyle.color=options.inside||options.distance<0||!!seriesOptions.stacking?renderer.getContrast(point.color||series.color):'#000000';}if(cursor){moreStyle.cursor=cursor;} // Remove unused attributes (#947)
	for(name in attr){if(attr[name]===UNDEFINED){delete attr[name];}}dataLabel=point.dataLabel=renderer[rotation?'text':'label']( // labels don't support rotation
	str,0,-999,options.shape,null,null,options.useHTML).attr(attr).css(extend(style,moreStyle)).add(dataLabelsGroup).shadow(options.shadow);}if(dataLabel){ // Now the data label is created and placed at 0,0, so we need to align it
	series.alignDataLabel(point,dataLabel,options,null,isNew);}}});}}; /**
	 * Align each individual data label
	 */Series.prototype.alignDataLabel=function(point,dataLabel,options,alignTo,isNew){var chart=this.chart,inverted=chart.inverted,plotX=pick(point.plotX,-999),plotY=pick(point.plotY,-999),bBox=dataLabel.getBBox(),baseline=chart.renderer.fontMetrics(options.style.fontSize).b,rotCorr, // rotation correction
	// Math.round for rounding errors (#2683), alignTo to allow column labels (#2700)
	visible=this.visible&&(point.series.forceDL||chart.isInsidePlot(plotX,mathRound(plotY),inverted)||alignTo&&chart.isInsidePlot(plotX,inverted?alignTo.x+1:alignTo.y+alignTo.height-1,inverted)),alignAttr; // the final position;
	if(visible){ // The alignment box is a singular point
	alignTo=extend({x:inverted?chart.plotWidth-plotY:plotX,y:mathRound(inverted?chart.plotHeight-plotX:plotY),width:0,height:0},alignTo); // Add the text size for alignment calculation
	extend(options,{width:bBox.width,height:bBox.height}); // Allow a hook for changing alignment in the last moment, then do the alignment
	if(options.rotation){ // Fancy box alignment isn't supported for rotated text
	rotCorr=chart.renderer.rotCorr(baseline,options.rotation); // #3723
	dataLabel[isNew?'attr':'animate']({x:alignTo.x+options.x+alignTo.width/2+rotCorr.x,y:alignTo.y+options.y+alignTo.height/2}).attr({ // #3003
	align:options.align});}else {dataLabel.align(options,null,alignTo);alignAttr=dataLabel.alignAttr; // Handle justify or crop
	if(pick(options.overflow,'justify')==='justify'){this.justifyDataLabel(dataLabel,options,alignAttr,bBox,alignTo,isNew);}else if(pick(options.crop,true)){ // Now check that the data label is within the plot area
	visible=chart.isInsidePlot(alignAttr.x,alignAttr.y)&&chart.isInsidePlot(alignAttr.x+bBox.width,alignAttr.y+bBox.height);} // When we're using a shape, make it possible with a connector or an arrow pointing to thie point
	if(options.shape){dataLabel.attr({anchorX:point.plotX,anchorY:point.plotY});}}} // Show or hide based on the final aligned position
	if(!visible){stop(dataLabel);dataLabel.attr({y:-999});dataLabel.placed=false; // don't animate back in
	}}; /**
	 * If data labels fall partly outside the plot area, align them back in, in a way that
	 * doesn't hide the point.
	 */Series.prototype.justifyDataLabel=function(dataLabel,options,alignAttr,bBox,alignTo,isNew){var chart=this.chart,align=options.align,verticalAlign=options.verticalAlign,off,justified,padding=dataLabel.box?0:dataLabel.padding||0; // Off left
	off=alignAttr.x+padding;if(off<0){if(align==='right'){options.align='left';}else {options.x=-off;}justified=true;} // Off right
	off=alignAttr.x+bBox.width-padding;if(off>chart.plotWidth){if(align==='left'){options.align='right';}else {options.x=chart.plotWidth-off;}justified=true;} // Off top
	off=alignAttr.y+padding;if(off<0){if(verticalAlign==='bottom'){options.verticalAlign='top';}else {options.y=-off;}justified=true;} // Off bottom
	off=alignAttr.y+bBox.height-padding;if(off>chart.plotHeight){if(verticalAlign==='top'){options.verticalAlign='bottom';}else {options.y=chart.plotHeight-off;}justified=true;}if(justified){dataLabel.placed=!isNew;dataLabel.align(options,null,alignTo);}}; /**
	 * Override the base drawDataLabels method by pie specific functionality
	 */if(seriesTypes.pie){seriesTypes.pie.prototype.drawDataLabels=function(){var series=this,data=series.data,point,chart=series.chart,options=series.options.dataLabels,connectorPadding=pick(options.connectorPadding,10),connectorWidth=pick(options.connectorWidth,1),plotWidth=chart.plotWidth,plotHeight=chart.plotHeight,connector,connectorPath,softConnector=pick(options.softConnector,true),distanceOption=options.distance,seriesCenter=series.center,radius=seriesCenter[2]/2,centerY=seriesCenter[1],outside=distanceOption>0,dataLabel,dataLabelWidth,labelPos,labelHeight,halves=[ // divide the points into right and left halves for anti collision
	[], // right
	[] // left
	],x,y,visibility,rankArr,i,j,overflow=[0,0,0,0], // top, right, bottom, left
	sort=function sort(a,b){return b.y-a.y;}; // get out if not enabled
	if(!series.visible||!options.enabled&&!series._hasPointLabels){return;} // run parent method
	Series.prototype.drawDataLabels.apply(series); // arrange points for detection collision
	each(data,function(point){if(point.dataLabel&&point.visible){ // #407, #2510
	halves[point.half].push(point);}}); /* Loop over the points in each half, starting from the top and bottom
			 * of the pie to detect overlapping labels.
			 */i=2;while(i--){var slots=[],slotsLength,usedSlots=[],points=halves[i],pos,bottom,length=points.length,slotIndex;if(!length){continue;} // Sort by angle
	series.sortByAngle(points,i-0.5); // Assume equal label heights on either hemisphere (#2630)
	j=labelHeight=0;while(!labelHeight&&points[j]){ // #1569
	labelHeight=points[j]&&points[j].dataLabel&&(points[j].dataLabel.getBBox().height||21); // 21 is for #968
	j++;} // Only do anti-collision when we are outside the pie and have connectors (#856)
	if(distanceOption>0){ // Build the slots
	bottom=mathMin(centerY+radius+distanceOption,chart.plotHeight);for(pos=mathMax(0,centerY-radius-distanceOption);pos<=bottom;pos+=labelHeight){slots.push(pos);}slotsLength=slots.length; /* Visualize the slots
					if (!series.slotElements) {
						series.slotElements = [];
					}
					if (i === 1) {
						series.slotElements.forEach(function (elem) {
							elem.destroy();
						});
						series.slotElements.length = 0;
					}
						
					slots.forEach(function (pos, no) {
						var slotX = series.getX(pos, i) + chart.plotLeft - (i ? 100 : 0),
							slotY = pos + chart.plotTop;
						
						if (!isNaN(slotX)) {
							series.slotElements.push(chart.renderer.rect(slotX, slotY - 7, 100, labelHeight, 1)
								.attr({
									'stroke-width': 1,
									stroke: 'silver',
									fill: 'rgba(0,0,255,0.1)'
								})
								.add());
							series.slotElements.push(chart.renderer.text('Slot '+ no, slotX, slotY + 4)
								.attr({
									fill: 'silver'
								}).add());
						}
					});
					// */ // if there are more values than available slots, remove lowest values
	if(length>slotsLength){ // create an array for sorting and ranking the points within each quarter
	rankArr=[].concat(points);rankArr.sort(sort);j=length;while(j--){rankArr[j].rank=j;}j=length;while(j--){if(points[j].rank>=slotsLength){points.splice(j,1);}}length=points.length;} // The label goes to the nearest open slot, but not closer to the edge than
	// the label's index.
	for(j=0;j<length;j++){point=points[j];labelPos=point.labelPos;var closest=9999,distance,slotI; // find the closest slot index
	for(slotI=0;slotI<slotsLength;slotI++){distance=mathAbs(slots[slotI]-labelPos[1]);if(distance<closest){closest=distance;slotIndex=slotI;}} // if that slot index is closer to the edges of the slots, move it
	// to the closest appropriate slot
	if(slotIndex<j&&slots[j]!==null){ // cluster at the top
	slotIndex=j;}else if(slotsLength<length-j+slotIndex&&slots[j]!==null){ // cluster at the bottom
	slotIndex=slotsLength-length+j;while(slots[slotIndex]===null){ // make sure it is not taken
	slotIndex++;}}else { // Slot is taken, find next free slot below. In the next run, the next slice will find the
	// slot above these, because it is the closest one
	while(slots[slotIndex]===null){ // make sure it is not taken
	slotIndex++;}}usedSlots.push({i:slotIndex,y:slots[slotIndex]});slots[slotIndex]=null; // mark as taken
	} // sort them in order to fill in from the top
	usedSlots.sort(sort);} // now the used slots are sorted, fill them up sequentially
	for(j=0;j<length;j++){var slot,naturalY;point=points[j];labelPos=point.labelPos;dataLabel=point.dataLabel;visibility=point.visible===false?HIDDEN:'inherit';naturalY=labelPos[1];if(distanceOption>0){slot=usedSlots.pop();slotIndex=slot.i; // if the slot next to currrent slot is free, the y value is allowed
	// to fall back to the natural position
	y=slot.y;if(naturalY>y&&slots[slotIndex+1]!==null||naturalY<y&&slots[slotIndex-1]!==null){y=mathMin(mathMax(0,naturalY),chart.plotHeight);}}else {y=naturalY;} // get the x - use the natural x position for first and last slot, to prevent the top
	// and botton slice connectors from touching each other on either side
	x=options.justify?seriesCenter[0]+(i?-1:1)*(radius+distanceOption):series.getX(y===centerY-radius-distanceOption||y===centerY+radius+distanceOption?naturalY:y,i); // Record the placement and visibility
	dataLabel._attr={visibility:visibility,align:labelPos[6]};dataLabel._pos={x:x+options.x+({left:connectorPadding,right:-connectorPadding}[labelPos[6]]||0),y:y+options.y-10 // 10 is for the baseline (label vs text)
	};dataLabel.connX=x;dataLabel.connY=y; // Detect overflowing data labels
	if(this.options.size===null){dataLabelWidth=dataLabel.width; // Overflow left
	if(x-dataLabelWidth<connectorPadding){overflow[3]=mathMax(mathRound(dataLabelWidth-x+connectorPadding),overflow[3]); // Overflow right
	}else if(x+dataLabelWidth>plotWidth-connectorPadding){overflow[1]=mathMax(mathRound(x+dataLabelWidth-plotWidth+connectorPadding),overflow[1]);} // Overflow top
	if(y-labelHeight/2<0){overflow[0]=mathMax(mathRound(-y+labelHeight/2),overflow[0]); // Overflow left
	}else if(y+labelHeight/2>plotHeight){overflow[2]=mathMax(mathRound(y+labelHeight/2-plotHeight),overflow[2]);}}} // for each point
	} // for each half
	// Do not apply the final placement and draw the connectors until we have verified
	// that labels are not spilling over.
	if(arrayMax(overflow)===0||this.verifyDataLabelOverflow(overflow)){ // Place the labels in the final position
	this.placeDataLabels(); // Draw the connectors
	if(outside&&connectorWidth){each(this.points,function(point){connector=point.connector;labelPos=point.labelPos;dataLabel=point.dataLabel;if(dataLabel&&dataLabel._pos&&point.visible){visibility=dataLabel._attr.visibility;x=dataLabel.connX;y=dataLabel.connY;connectorPath=softConnector?[M,x+(labelPos[6]==='left'?5:-5),y, // end of the string at the label
	'C',x,y, // first break, next to the label
	2*labelPos[2]-labelPos[4],2*labelPos[3]-labelPos[5],labelPos[2],labelPos[3], // second break
	L,labelPos[4],labelPos[5] // base
	]:[M,x+(labelPos[6]==='left'?5:-5),y, // end of the string at the label
	L,labelPos[2],labelPos[3], // second break
	L,labelPos[4],labelPos[5] // base
	];if(connector){connector.animate({d:connectorPath});connector.attr('visibility',visibility);}else {point.connector=connector=series.chart.renderer.path(connectorPath).attr({'stroke-width':connectorWidth,stroke:options.connectorColor||point.color||'#606060',visibility:visibility //zIndex: 0 // #2722 (reversed)
	}).add(series.dataLabelsGroup);}}else if(connector){point.connector=connector.destroy();}});}}}; /**
		 * Perform the final placement of the data labels after we have verified that they
		 * fall within the plot area.
		 */seriesTypes.pie.prototype.placeDataLabels=function(){each(this.points,function(point){var dataLabel=point.dataLabel,_pos;if(dataLabel&&point.visible){_pos=dataLabel._pos;if(_pos){dataLabel.attr(dataLabel._attr);dataLabel[dataLabel.moved?'animate':'attr'](_pos);dataLabel.moved=true;}else if(dataLabel){dataLabel.attr({y:-999});}}});};seriesTypes.pie.prototype.alignDataLabel=noop; /**
		 * Verify whether the data labels are allowed to draw, or we should run more translation and data
		 * label positioning to keep them inside the plot area. Returns true when data labels are ready
		 * to draw.
		 */seriesTypes.pie.prototype.verifyDataLabelOverflow=function(overflow){var center=this.center,options=this.options,centerOption=options.center,minSize=options.minSize||80,newSize=minSize,ret; // Handle horizontal size and center
	if(centerOption[0]!==null){ // Fixed center
	newSize=mathMax(center[2]-mathMax(overflow[1],overflow[3]),minSize);}else { // Auto center
	newSize=mathMax(center[2]-overflow[1]-overflow[3], // horizontal overflow
	minSize);center[0]+=(overflow[3]-overflow[1])/2; // horizontal center
	} // Handle vertical size and center
	if(centerOption[1]!==null){ // Fixed center
	newSize=mathMax(mathMin(newSize,center[2]-mathMax(overflow[0],overflow[2])),minSize);}else { // Auto center
	newSize=mathMax(mathMin(newSize,center[2]-overflow[0]-overflow[2] // vertical overflow
	),minSize);center[1]+=(overflow[0]-overflow[2])/2; // vertical center
	} // If the size must be decreased, we need to run translate and drawDataLabels again
	if(newSize<center[2]){center[2]=newSize;center[3]=Math.min(relativeLength(options.innerSize||0,newSize),newSize); // #3632
	this.translate(center);each(this.points,function(point){if(point.dataLabel){point.dataLabel._pos=null; // reset
	}});if(this.drawDataLabels){this.drawDataLabels();} // Else, return true to indicate that the pie and its labels is within the plot area
	}else {ret=true;}return ret;};}if(seriesTypes.column){ /**
		 * Override the basic data label alignment by adjusting for the position of the column
		 */seriesTypes.column.prototype.alignDataLabel=function(point,dataLabel,options,alignTo,isNew){var inverted=this.chart.inverted,series=point.series,dlBox=point.dlBox||point.shapeArgs, // data label box for alignment
	below=pick(point.below,point.plotY>pick(this.translatedThreshold,series.yAxis.len)), // point.below is used in range series
	inside=pick(options.inside,!!this.options.stacking); // draw it inside the box?
	// Align to the column itself, or the top of it
	if(dlBox){ // Area range uses this method but not alignTo
	alignTo=merge(dlBox);if(inverted){alignTo={x:series.yAxis.len-alignTo.y-alignTo.height,y:series.xAxis.len-alignTo.x-alignTo.width,width:alignTo.height,height:alignTo.width};} // Compute the alignment box
	if(!inside){if(inverted){alignTo.x+=below?0:alignTo.width;alignTo.width=0;}else {alignTo.y+=below?alignTo.height:0;alignTo.height=0;}}} // When alignment is undefined (typically columns and bars), display the individual
	// point below or above the point depending on the threshold
	options.align=pick(options.align,!inverted||inside?'center':below?'right':'left');options.verticalAlign=pick(options.verticalAlign,inverted||inside?'middle':below?'top':'bottom'); // Call the parent method
	Series.prototype.alignDataLabel.call(this,point,dataLabel,options,alignTo,isNew);};} /**
	 * Highcharts JS v4.1.9 (2015-10-07)
	 * Highcharts module to hide overlapping data labels. This module is included by default in Highmaps.
	 *
	 * (c) 2010-2014 Torstein Honsi
	 *
	 * License: www.highcharts.com/license
	 */ /*global Highcharts, HighchartsAdapter */(function(H){var Chart=H.Chart,each=H.each,pick=H.pick,addEvent=HighchartsAdapter.addEvent; // Collect potensial overlapping data labels. Stack labels probably don't need to be 
	// considered because they are usually accompanied by data labels that lie inside the columns.
	Chart.prototype.callbacks.push(function(chart){function collectAndHide(){var labels=[];each(chart.series,function(series){var dlOptions=series.options.dataLabels,collections=series.dataLabelCollections||['dataLabel']; // Range series have two collections
	if((dlOptions.enabled||series._hasPointLabels)&&!dlOptions.allowOverlap&&series.visible){ // #3866
	each(collections,function(coll){each(series.points,function(point){if(point[coll]){point[coll].labelrank=pick(point.labelrank,point.shapeArgs&&point.shapeArgs.height); // #4118
	labels.push(point[coll]);}});});}});chart.hideOverlappingLabels(labels);} // Do it now ...
	collectAndHide(); // ... and after each chart redraw
	addEvent(chart,'redraw',collectAndHide);}); /**
		 * Hide overlapping labels. Labels are moved and faded in and out on zoom to provide a smooth 
		 * visual imression.
		 */Chart.prototype.hideOverlappingLabels=function(labels){var len=labels.length,label,i,j,label1,label2,isIntersecting,pos1,pos2,padding,intersectRect=function intersectRect(x1,y1,w1,h1,x2,y2,w2,h2){return !(x2>x1+w1||x2+w2<x1||y2>y1+h1||y2+h2<y1);}; // Mark with initial opacity
	for(i=0;i<len;i++){label=labels[i];if(label){label.oldOpacity=label.opacity;label.newOpacity=1;}} // Prevent a situation in a gradually rising slope, that each label
	// will hide the previous one because the previous one always has
	// lower rank.
	labels.sort(function(a,b){return (b.labelrank||0)-(a.labelrank||0);}); // Detect overlapping labels
	for(i=0;i<len;i++){label1=labels[i];for(j=i+1;j<len;++j){label2=labels[j];if(label1&&label2&&label1.placed&&label2.placed&&label1.newOpacity!==0&&label2.newOpacity!==0){pos1=label1.alignAttr;pos2=label2.alignAttr;padding=2*(label1.box?0:label1.padding); // Substract the padding if no background or border (#4333)
	isIntersecting=intersectRect(pos1.x,pos1.y,label1.width-padding,label1.height-padding,pos2.x,pos2.y,label2.width-padding,label2.height-padding);if(isIntersecting){(label1.labelrank<label2.labelrank?label1:label2).newOpacity=0;}}}} // Hide or show
	each(labels,function(label){var complete,newOpacity;if(label){newOpacity=label.newOpacity;if(label.oldOpacity!==newOpacity&&label.placed){ // Make sure the label is completely hidden to avoid catching clicks (#4362)
	if(newOpacity){label.show(true);}else {complete=function complete(){label.hide();};} // Animate or set the opacity					
	label.alignAttr.opacity=newOpacity;label[label.isOld?'animate':'attr'](label.alignAttr,null,complete);}label.isOld=true;}});};})(Highcharts); /**
	 * TrackerMixin for points and graphs
	 */var TrackerMixin=Highcharts.TrackerMixin={drawTrackerPoint:function drawTrackerPoint(){var series=this,chart=series.chart,pointer=chart.pointer,cursor=series.options.cursor,css=cursor&&{cursor:cursor},onMouseOver=function onMouseOver(e){var target=e.target,point;while(target&&!point){point=target.point;target=target.parentNode;}if(point!==UNDEFINED&&point!==chart.hoverPoint){ // undefined on graph in scatterchart
	point.onMouseOver(e);}}; // Add reference to the point
	each(series.points,function(point){if(point.graphic){point.graphic.element.point=point;}if(point.dataLabel){point.dataLabel.element.point=point;}}); // Add the event listeners, we need to do this only once
	if(!series._hasTracking){each(series.trackerGroups,function(key){if(series[key]){ // we don't always have dataLabelsGroup
	series[key].addClass(PREFIX+'tracker').on('mouseover',onMouseOver).on('mouseout',function(e){pointer.onTrackerMouseOut(e);}).css(css);if(hasTouch){series[key].on('touchstart',onMouseOver);}}});series._hasTracking=true;}}, /**
		 * Draw the tracker object that sits above all data labels and markers to
		 * track mouse events on the graph or points. For the line type charts
		 * the tracker uses the same graphPath, but with a greater stroke width
		 * for better control.
		 */drawTrackerGraph:function drawTrackerGraph(){var series=this,options=series.options,trackByArea=options.trackByArea,trackerPath=[].concat(trackByArea?series.areaPath:series.graphPath),trackerPathLength=trackerPath.length,chart=series.chart,pointer=chart.pointer,renderer=chart.renderer,snap=chart.options.tooltip.snap,tracker=series.tracker,cursor=options.cursor,css=cursor&&{cursor:cursor},singlePoints=series.singlePoints,singlePoint,i,onMouseOver=function onMouseOver(){if(chart.hoverSeries!==series){series.onMouseOver();}}, /*
				 * Empirical lowest possible opacities for TRACKER_FILL for an element to stay invisible but clickable
				 * IE6: 0.002
				 * IE7: 0.002
				 * IE8: 0.002
				 * IE9: 0.00000000001 (unlimited)
				 * IE10: 0.0001 (exporting only)
				 * FF: 0.00000000001 (unlimited)
				 * Chrome: 0.000001
				 * Safari: 0.000001
				 * Opera: 0.00000000001 (unlimited)
				 */TRACKER_FILL='rgba(192,192,192,'+(hasSVG?0.0001:0.002)+')'; // Extend end points. A better way would be to use round linecaps,
	// but those are not clickable in VML.
	if(trackerPathLength&&!trackByArea){i=trackerPathLength+1;while(i--){if(trackerPath[i]===M){ // extend left side
	trackerPath.splice(i+1,0,trackerPath[i+1]-snap,trackerPath[i+2],L);}if(i&&trackerPath[i]===M||i===trackerPathLength){ // extend right side
	trackerPath.splice(i,0,L,trackerPath[i-2]+snap,trackerPath[i-1]);}}} // handle single points
	for(i=0;i<singlePoints.length;i++){singlePoint=singlePoints[i];trackerPath.push(M,singlePoint.plotX-snap,singlePoint.plotY,L,singlePoint.plotX+snap,singlePoint.plotY);} // draw the tracker
	if(tracker){tracker.attr({d:trackerPath});}else { // create
	series.tracker=renderer.path(trackerPath).attr({'stroke-linejoin':'round', // #1225
	visibility:series.visible?VISIBLE:HIDDEN,stroke:TRACKER_FILL,fill:trackByArea?TRACKER_FILL:NONE,'stroke-width':options.lineWidth+(trackByArea?0:2*snap),zIndex:2}).add(series.group); // The tracker is added to the series group, which is clipped, but is covered
	// by the marker group. So the marker group also needs to capture events.
	each([series.tracker,series.markerGroup],function(tracker){tracker.addClass(PREFIX+'tracker').on('mouseover',onMouseOver).on('mouseout',function(e){pointer.onTrackerMouseOut(e);}).css(css);if(hasTouch){tracker.on('touchstart',onMouseOver);}});}}}; /* End TrackerMixin */ /**
	 * Add tracking event listener to the series group, so the point graphics
	 * themselves act as trackers
	 */if(seriesTypes.column){ColumnSeries.prototype.drawTracker=TrackerMixin.drawTrackerPoint;}if(seriesTypes.pie){seriesTypes.pie.prototype.drawTracker=TrackerMixin.drawTrackerPoint;}if(seriesTypes.scatter){ScatterSeries.prototype.drawTracker=TrackerMixin.drawTrackerPoint;} /* 
	 * Extend Legend for item events 
	 */extend(Legend.prototype,{setItemEvents:function setItemEvents(item,legendItem,useHTML,itemStyle,itemHiddenStyle){var legend=this; // Set the events on the item group, or in case of useHTML, the item itself (#1249)
	(useHTML?legendItem:item.legendGroup).on('mouseover',function(){item.setState(HOVER_STATE);legendItem.css(legend.options.itemHoverStyle);}).on('mouseout',function(){legendItem.css(item.visible?itemStyle:itemHiddenStyle);item.setState();}).on('click',function(event){var strLegendItemClick='legendItemClick',fnLegendItemClick=function fnLegendItemClick(){if(item.setVisible){item.setVisible();}}; // Pass over the click/touch event. #4.
	event={browserEvent:event}; // click the name or symbol
	if(item.firePointEvent){ // point
	item.firePointEvent(strLegendItemClick,event,fnLegendItemClick);}else {fireEvent(item,strLegendItemClick,event,fnLegendItemClick);}});},createCheckboxForItem:function createCheckboxForItem(item){var legend=this;item.checkbox=createElement('input',{type:'checkbox',checked:item.selected,defaultChecked:item.selected // required by IE7
	},legend.options.itemCheckboxStyle,legend.chart.container);addEvent(item.checkbox,'click',function(event){var target=event.target;fireEvent(item.series||item,'checkboxClick',{ // #3712
	checked:target.checked,item:item},function(){item.select();});});}}); /* 
	 * Add pointer cursor to legend itemstyle in defaultOptions
	 */defaultOptions.legend.itemStyle.cursor='pointer'; /* 
	 * Extend the Chart object with interaction
	 */extend(Chart.prototype,{ /**
		 * Display the zoom button
		 */showResetZoom:function showResetZoom(){var chart=this,lang=defaultOptions.lang,btnOptions=chart.options.chart.resetZoomButton,theme=btnOptions.theme,states=theme.states,alignTo=btnOptions.relativeTo==='chart'?null:'plotBox';this.resetZoomButton=chart.renderer.button(lang.resetZoom,null,null,function(){chart.zoomOut();},theme,states&&states.hover).attr({align:btnOptions.position.align,title:lang.resetZoomTitle}).add().align(btnOptions.position,false,alignTo);}, /**
		 * Zoom out to 1:1
		 */zoomOut:function zoomOut(){var chart=this;fireEvent(chart,'selection',{resetSelection:true},function(){chart.zoom();});}, /**
		 * Zoom into a given portion of the chart given by axis coordinates
		 * @param {Object} event
		 */zoom:function zoom(event){var chart=this,hasZoomed,pointer=chart.pointer,displayButton=false,resetZoomButton; // If zoom is called with no arguments, reset the axes
	if(!event||event.resetSelection){each(chart.axes,function(axis){hasZoomed=axis.zoom();});}else { // else, zoom in on all axes
	each(event.xAxis.concat(event.yAxis),function(axisData){var axis=axisData.axis,isXAxis=axis.isXAxis; // don't zoom more than minRange
	if(pointer[isXAxis?'zoomX':'zoomY']||pointer[isXAxis?'pinchX':'pinchY']){hasZoomed=axis.zoom(axisData.min,axisData.max);if(axis.displayBtn){displayButton=true;}}});} // Show or hide the Reset zoom button
	resetZoomButton=chart.resetZoomButton;if(displayButton&&!resetZoomButton){chart.showResetZoom();}else if(!displayButton&&isObject(resetZoomButton)){chart.resetZoomButton=resetZoomButton.destroy();} // Redraw
	if(hasZoomed){chart.redraw(pick(chart.options.chart.animation,event&&event.animation,chart.pointCount<100) // animation
	);}}, /**
		 * Pan the chart by dragging the mouse across the pane. This function is called
		 * on mouse move, and the distance to pan is computed from chartX compared to
		 * the first chartX position in the dragging operation.
		 */pan:function pan(e,panning){var chart=this,hoverPoints=chart.hoverPoints,doRedraw; // remove active points for shared tooltip
	if(hoverPoints){each(hoverPoints,function(point){point.setState();});}each(panning==='xy'?[1,0]:[1],function(isX){ // xy is used in maps
	var mousePos=e[isX?'chartX':'chartY'],axis=chart[isX?'xAxis':'yAxis'][0],startPos=chart[isX?'mouseDownX':'mouseDownY'],halfPointRange=(axis.pointRange||0)/2,extremes=axis.getExtremes(),newMin=axis.toValue(startPos-mousePos,true)+halfPointRange,newMax=axis.toValue(startPos+chart[isX?'plotWidth':'plotHeight']-mousePos,true)-halfPointRange,goingLeft=startPos>mousePos; // #3613
	if(axis.series.length&&(goingLeft||newMin>mathMin(extremes.dataMin,extremes.min))&&(!goingLeft||newMax<mathMax(extremes.dataMax,extremes.max))){axis.setExtremes(newMin,newMax,false,false,{trigger:'pan'});doRedraw=true;}chart[isX?'mouseDownX':'mouseDownY']=mousePos; // set new reference for next run
	});if(doRedraw){chart.redraw(false);}_css(chart.container,{cursor:'move'});}}); /*
	 * Extend the Point object with interaction
	 */extend(Point.prototype,{ /**
		 * Toggle the selection status of a point
		 * @param {Boolean} selected Whether to select or unselect the point.
		 * @param {Boolean} accumulate Whether to add to the previous selection. By default,
		 *		 this happens if the control key (Cmd on Mac) was pressed during clicking.
		 */select:function select(selected,accumulate){var point=this,series=point.series,chart=series.chart;selected=pick(selected,!point.selected); // fire the event with the defalut handler
	point.firePointEvent(selected?'select':'unselect',{accumulate:accumulate},function(){point.selected=point.options.selected=selected;series.options.data[inArray(point,series.data)]=point.options;point.setState(selected&&SELECT_STATE); // unselect all other points unless Ctrl or Cmd + click
	if(!accumulate){each(chart.getSelectedPoints(),function(loopPoint){if(loopPoint.selected&&loopPoint!==point){loopPoint.selected=loopPoint.options.selected=false;series.options.data[inArray(loopPoint,series.data)]=loopPoint.options;loopPoint.setState(NORMAL_STATE);loopPoint.firePointEvent('unselect');}});}});}, /**
		 * Runs on mouse over the point
		 *
		 * @param {Object} e The event arguments
		 * @param {Boolean} byProximity Falsy for kd points that are closest to the mouse, or to 
		 *        actually hovered points. True for other points in shared tooltip.
		 */onMouseOver:function onMouseOver(e,byProximity){var point=this,series=point.series,chart=series.chart,tooltip=chart.tooltip,hoverPoint=chart.hoverPoint;if(chart.hoverSeries!==series){series.onMouseOver();} // set normal state to previous series
	if(hoverPoint&&hoverPoint!==point){hoverPoint.onMouseOut();}if(point.series){ // It may have been destroyed, #4130
	// trigger the event
	point.firePointEvent('mouseOver'); // update the tooltip
	if(tooltip&&(!tooltip.shared||series.noSharedTooltip)){tooltip.refresh(point,e);} // hover this
	point.setState(HOVER_STATE);if(!byProximity){chart.hoverPoint=point;}}}, /**
		 * Runs on mouse out from the point
		 */onMouseOut:function onMouseOut(){var chart=this.series.chart,hoverPoints=chart.hoverPoints;this.firePointEvent('mouseOut');if(!hoverPoints||inArray(this,hoverPoints)===-1){ // #887, #2240
	this.setState();chart.hoverPoint=null;}}, /**
		 * Import events from the series' and point's options. Only do it on
		 * demand, to save processing time on hovering.
		 */importEvents:function importEvents(){if(!this.hasImportedEvents){var point=this,options=merge(point.series.options.point,point.options),events=options.events,eventType;point.events=events;for(eventType in events){addEvent(point,eventType,events[eventType]);}this.hasImportedEvents=true;}}, /**
		 * Set the point's state
		 * @param {String} state
		 */setState:function setState(state,move){var point=this,plotX=mathFloor(point.plotX), // #4586
	plotY=point.plotY,series=point.series,stateOptions=series.options.states,markerOptions=defaultPlotOptions[series.type].marker&&series.options.marker,normalDisabled=markerOptions&&!markerOptions.enabled,markerStateOptions=markerOptions&&markerOptions.states[state],stateDisabled=markerStateOptions&&markerStateOptions.enabled===false,stateMarkerGraphic=series.stateMarkerGraphic,pointMarker=point.marker||{},chart=series.chart,radius,halo=series.halo,haloOptions,newSymbol,pointAttr;state=state||NORMAL_STATE; // empty string
	pointAttr=point.pointAttr[state]||series.pointAttr[state];if( // already has this state
	state===point.state&&!move|| // selected points don't respond to hover
	point.selected&&state!==SELECT_STATE|| // series' state options is disabled
	stateOptions[state]&&stateOptions[state].enabled===false|| // general point marker's state options is disabled
	state&&(stateDisabled||normalDisabled&&markerStateOptions.enabled===false)|| // individual point marker's state options is disabled
	state&&pointMarker.states&&pointMarker.states[state]&&pointMarker.states[state].enabled===false // #1610
	){return;} // apply hover styles to the existing point
	if(point.graphic){radius=markerOptions&&point.graphic.symbolName&&pointAttr.r;point.graphic.attr(merge(pointAttr,radius?{ // new symbol attributes (#507, #612)
	x:plotX-radius,y:plotY-radius,width:2*radius,height:2*radius}:{})); // Zooming in from a range with no markers to a range with markers
	if(stateMarkerGraphic){stateMarkerGraphic.hide();}}else { // if a graphic is not applied to each point in the normal state, create a shared
	// graphic for the hover state
	if(state&&markerStateOptions){radius=markerStateOptions.radius;newSymbol=pointMarker.symbol||series.symbol; // If the point has another symbol than the previous one, throw away the
	// state marker graphic and force a new one (#1459)
	if(stateMarkerGraphic&&stateMarkerGraphic.currentSymbol!==newSymbol){stateMarkerGraphic=stateMarkerGraphic.destroy();} // Add a new state marker graphic
	if(!stateMarkerGraphic){if(newSymbol){series.stateMarkerGraphic=stateMarkerGraphic=chart.renderer.symbol(newSymbol,plotX-radius,plotY-radius,2*radius,2*radius).attr(pointAttr).add(series.markerGroup);stateMarkerGraphic.currentSymbol=newSymbol;} // Move the existing graphic
	}else {stateMarkerGraphic[move?'animate':'attr']({ // #1054
	x:plotX-radius,y:plotY-radius});}}if(stateMarkerGraphic){stateMarkerGraphic[state&&chart.isInsidePlot(plotX,plotY,chart.inverted)?'show':'hide'](); // #2450
	stateMarkerGraphic.element.point=point; // #4310
	}} // Show me your halo
	haloOptions=stateOptions[state]&&stateOptions[state].halo;if(haloOptions&&haloOptions.size){if(!halo){series.halo=halo=chart.renderer.path().add(chart.seriesGroup);}halo.attr(extend({fill:Color(point.color||series.color).setOpacity(haloOptions.opacity).get()},haloOptions.attributes))[move?'animate':'attr']({d:point.haloPath(haloOptions.size)});}else if(halo){halo.attr({d:[]});}point.state=state;},haloPath:function haloPath(size){var series=this.series,chart=series.chart,plotBox=series.getPlotBox(),inverted=chart.inverted;return chart.renderer.symbols.circle(plotBox.translateX+(inverted?series.yAxis.len-this.plotY:this.plotX)-size,plotBox.translateY+(inverted?series.xAxis.len-this.plotX:this.plotY)-size,size*2,size*2);}}); /*
	 * Extend the Series object with interaction
	 */extend(Series.prototype,{ /**
		 * Series mouse over handler
		 */onMouseOver:function onMouseOver(){var series=this,chart=series.chart,hoverSeries=chart.hoverSeries; // set normal state to previous series
	if(hoverSeries&&hoverSeries!==series){hoverSeries.onMouseOut();} // trigger the event, but to save processing time,
	// only if defined
	if(series.options.events.mouseOver){fireEvent(series,'mouseOver');} // hover this
	series.setState(HOVER_STATE);chart.hoverSeries=series;}, /**
		 * Series mouse out handler
		 */onMouseOut:function onMouseOut(){ // trigger the event only if listeners exist
	var series=this,options=series.options,chart=series.chart,tooltip=chart.tooltip,hoverPoint=chart.hoverPoint;chart.hoverSeries=null; // #182, set to null before the mouseOut event fires
	// trigger mouse out on the point, which must be in this series
	if(hoverPoint){hoverPoint.onMouseOut();} // fire the mouse out event
	if(series&&options.events.mouseOut){fireEvent(series,'mouseOut');} // hide the tooltip
	if(tooltip&&!options.stickyTracking&&(!tooltip.shared||series.noSharedTooltip)){tooltip.hide();} // set normal state
	series.setState();}, /**
		 * Set the state of the graph
		 */setState:function setState(state){var series=this,options=series.options,graph=series.graph,stateOptions=options.states,lineWidth=options.lineWidth,attribs,i=0;state=state||NORMAL_STATE;if(series.state!==state){series.state=state;if(stateOptions[state]&&stateOptions[state].enabled===false){return;}if(state){lineWidth=stateOptions[state].lineWidth||lineWidth+(stateOptions[state].lineWidthPlus||0); // #4035
	}if(graph&&!graph.dashstyle){ // hover is turned off for dashed lines in VML
	attribs={'stroke-width':lineWidth}; // use attr because animate will cause any other animation on the graph to stop
	graph.attr(attribs);while(series['zoneGraph'+i]){series['zoneGraph'+i].attr(attribs);i=i+1;}}}}, /**
		 * Set the visibility of the graph
		 *
		 * @param vis {Boolean} True to show the series, false to hide. If UNDEFINED,
		 *				the visibility is toggled.
		 */setVisible:function setVisible(vis,redraw){var series=this,chart=series.chart,legendItem=series.legendItem,showOrHide,ignoreHiddenSeries=chart.options.chart.ignoreHiddenSeries,oldVisibility=series.visible; // if called without an argument, toggle visibility
	series.visible=vis=series.userOptions.visible=vis===UNDEFINED?!oldVisibility:vis;showOrHide=vis?'show':'hide'; // show or hide elements
	each(['group','dataLabelsGroup','markerGroup','tracker'],function(key){if(series[key]){series[key][showOrHide]();}}); // hide tooltip (#1361)
	if(chart.hoverSeries===series||(chart.hoverPoint&&chart.hoverPoint.series)===series){series.onMouseOut();}if(legendItem){chart.legend.colorizeItem(series,vis);} // rescale or adapt to resized chart
	series.isDirty=true; // in a stack, all other series are affected
	if(series.options.stacking){each(chart.series,function(otherSeries){if(otherSeries.options.stacking&&otherSeries.visible){otherSeries.isDirty=true;}});} // show or hide linked series
	each(series.linkedSeries,function(otherSeries){otherSeries.setVisible(vis,false);});if(ignoreHiddenSeries){chart.isDirtyBox=true;}if(redraw!==false){chart.redraw();}fireEvent(series,showOrHide);}, /**
		 * Show the graph
		 */show:function show(){this.setVisible(true);}, /**
		 * Hide the graph
		 */hide:function hide(){this.setVisible(false);}, /**
		 * Set the selected state of the graph
		 *
		 * @param selected {Boolean} True to select the series, false to unselect. If
		 *				UNDEFINED, the selection state is toggled.
		 */select:function select(selected){var series=this; // if called without an argument, toggle
	series.selected=selected=selected===UNDEFINED?!series.selected:selected;if(series.checkbox){series.checkbox.checked=selected;}fireEvent(series,selected?'select':'unselect');},drawTracker:TrackerMixin.drawTrackerGraph}); // global variables
	extend(Highcharts,{ // Constructors
	Color:Color,Point:Point,Tick:Tick,Renderer:Renderer,SVGElement:SVGElement,SVGRenderer:SVGRenderer, // Various
	arrayMin:arrayMin,arrayMax:arrayMax,charts:charts,dateFormat:dateFormat,error:error,format:format,pathAnim:pathAnim,getOptions:getOptions,hasBidiBug:hasBidiBug,isTouchDevice:isTouchDevice,setOptions:setOptions,addEvent:addEvent,removeEvent:removeEvent,createElement:createElement,discardElement:discardElement,css:_css,each:each,map:map,merge:merge,splat:splat,extendClass:extendClass,pInt:pInt,svg:hasSVG,canvas:useCanVG,vml:!hasSVG&&!useCanVG,product:PRODUCT,version:VERSION});})();
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 118 */
/***/ function(module, exports) {

	'use strict'; // ==ClosureCompiler==
	// @compilation_level SIMPLE_OPTIMIZATIONS
	/**
	 * @license Highcharts JS v4.1.9 (2015-10-07)
	 *
	 * (c) 2009-2014 Torstein Honsi
	 *
	 * License: www.highcharts.com/license
	 */ // JSLint options:
	/*global Highcharts, HighchartsAdapter, document, window, navigator, setInterval, clearInterval, clearTimeout, setTimeout, location, jQuery, $, console */(function(Highcharts,UNDEFINED){var arrayMin=Highcharts.arrayMin,arrayMax=Highcharts.arrayMax,each=Highcharts.each,extend=Highcharts.extend,merge=Highcharts.merge,map=Highcharts.map,pick=Highcharts.pick,pInt=Highcharts.pInt,defaultPlotOptions=Highcharts.getOptions().plotOptions,seriesTypes=Highcharts.seriesTypes,extendClass=Highcharts.extendClass,splat=Highcharts.splat,wrap=Highcharts.wrap,Axis=Highcharts.Axis,Tick=Highcharts.Tick,Point=Highcharts.Point,Pointer=Highcharts.Pointer,CenteredSeriesMixin=Highcharts.CenteredSeriesMixin,TrackerMixin=Highcharts.TrackerMixin,Series=Highcharts.Series,math=Math,mathRound=math.round,mathFloor=math.floor,mathMax=math.max,Color=Highcharts.Color,noop=function noop(){}; /**
	 * The Pane object allows options that are common to a set of X and Y axes.
	 * 
	 * In the future, this can be extended to basic Highcharts and Highstock.
	 */function Pane(options,chart,firstAxis){this.init.call(this,options,chart,firstAxis);} // Extend the Pane prototype
	extend(Pane.prototype,{ /**
		 * Initiate the Pane object
		 */init:function init(options,chart,firstAxis){var pane=this,backgroundOption,defaultOptions=pane.defaultOptions;pane.chart=chart; // Set options. Angular charts have a default background (#3318)
	pane.options=options=merge(defaultOptions,chart.angular?{background:{}}:undefined,options);backgroundOption=options.background; // To avoid having weighty logic to place, update and remove the backgrounds,
	// push them to the first axis' plot bands and borrow the existing logic there.
	if(backgroundOption){each([].concat(splat(backgroundOption)).reverse(),function(config){var backgroundColor=config.backgroundColor, // if defined, replace the old one (specific for gradients)
	axisUserOptions=firstAxis.userOptions;config=merge(pane.defaultBackgroundOptions,config);if(backgroundColor){config.backgroundColor=backgroundColor;}config.color=config.backgroundColor; // due to naming in plotBands
	firstAxis.options.plotBands.unshift(config);axisUserOptions.plotBands=axisUserOptions.plotBands||[]; // #3176
	if(axisUserOptions.plotBands!==firstAxis.options.plotBands){axisUserOptions.plotBands.unshift(config);}});}}, /**
		 * The default options object
		 */defaultOptions:{ // background: {conditional},
	center:['50%','50%'],size:'85%',startAngle:0 //endAngle: startAngle + 360
	}, /**
		 * The default background options
		 */defaultBackgroundOptions:{shape:'circle',borderWidth:1,borderColor:'silver',backgroundColor:{linearGradient:{x1:0,y1:0,x2:0,y2:1},stops:[[0,'#FFF'],[1,'#DDD']]},from:-Number.MAX_VALUE, // corrected to axis min
	innerRadius:0,to:Number.MAX_VALUE, // corrected to axis max
	outerRadius:'105%'}});var axisProto=Axis.prototype,tickProto=Tick.prototype; /**
	 * Augmented methods for the x axis in order to hide it completely, used for the X axis in gauges
	 */var hiddenAxisMixin={getOffset:noop,redraw:function redraw(){this.isDirty=false; // prevent setting Y axis dirty
	},render:function render(){this.isDirty=false; // prevent setting Y axis dirty
	},setScale:noop,setCategories:noop,setTitle:noop}; /**
	 * Augmented methods for the value axis
	 */ /*jslint unparam: true*/var radialAxisMixin={isRadial:true, /**
		 * The default options extend defaultYAxisOptions
		 */defaultRadialGaugeOptions:{labels:{align:'center',x:0,y:null // auto
	},minorGridLineWidth:0,minorTickInterval:'auto',minorTickLength:10,minorTickPosition:'inside',minorTickWidth:1,tickLength:10,tickPosition:'inside',tickWidth:2,title:{rotation:0},zIndex:2 // behind dials, points in the series group
	}, // Circular axis around the perimeter of a polar chart
	defaultRadialXOptions:{gridLineWidth:1, // spokes
	labels:{align:null, // auto
	distance:15,x:0,y:null // auto
	},maxPadding:0,minPadding:0,showLastLabel:false,tickLength:0}, // Radial axis, like a spoke in a polar chart
	defaultRadialYOptions:{gridLineInterpolation:'circle',labels:{align:'right',x:-3,y:-2},showLastLabel:false,title:{x:4,text:null,rotation:90}}, /**
		 * Merge and set options
		 */setOptions:function setOptions(userOptions){var options=this.options=merge(this.defaultOptions,this.defaultRadialOptions,userOptions); // Make sure the plotBands array is instanciated for each Axis (#2649)
	if(!options.plotBands){options.plotBands=[];}}, /**
		 * Wrap the getOffset method to return zero offset for title or labels in a radial 
		 * axis
		 */getOffset:function getOffset(){ // Call the Axis prototype method (the method we're in now is on the instance)
	axisProto.getOffset.call(this); // Title or label offsets are not counted
	this.chart.axisOffset[this.side]=0; // Set the center array
	this.center=this.pane.center=CenteredSeriesMixin.getCenter.call(this.pane);}, /**
		 * Get the path for the axis line. This method is also referenced in the getPlotLinePath
		 * method.
		 */getLinePath:function getLinePath(lineWidth,radius){var center=this.center;radius=pick(radius,center[2]/2-this.offset);return this.chart.renderer.symbols.arc(this.left+center[0],this.top+center[1],radius,radius,{start:this.startAngleRad,end:this.endAngleRad,open:true,innerR:0});}, /**
		 * Override setAxisTranslation by setting the translation to the difference
		 * in rotation. This allows the translate method to return angle for 
		 * any given value.
		 */setAxisTranslation:function setAxisTranslation(){ // Call uber method		
	axisProto.setAxisTranslation.call(this); // Set transA and minPixelPadding
	if(this.center){ // it's not defined the first time
	if(this.isCircular){this.transA=(this.endAngleRad-this.startAngleRad)/(this.max-this.min||1);}else {this.transA=this.center[2]/2/(this.max-this.min||1);}if(this.isXAxis){this.minPixelPadding=this.transA*this.minPointOffset;}else { // This is a workaround for regression #2593, but categories still don't position correctly.
	// TODO: Implement true handling of Y axis categories on gauges.
	this.minPixelPadding=0;}}}, /**
		 * In case of auto connect, add one closestPointRange to the max value right before
		 * tickPositions are computed, so that ticks will extend passed the real max.
		 */beforeSetTickPositions:function beforeSetTickPositions(){if(this.autoConnect){this.max+=this.categories&&1||this.pointRange||this.closestPointRange||0; // #1197, #2260
	}}, /**
		 * Override the setAxisSize method to use the arc's circumference as length. This
		 * allows tickPixelInterval to apply to pixel lengths along the perimeter
		 */setAxisSize:function setAxisSize(){axisProto.setAxisSize.call(this);if(this.isRadial){ // Set the center array
	this.center=this.pane.center=Highcharts.CenteredSeriesMixin.getCenter.call(this.pane); // The sector is used in Axis.translate to compute the translation of reversed axis points (#2570)
	if(this.isCircular){this.sector=this.endAngleRad-this.startAngleRad;} // Axis len is used to lay out the ticks
	this.len=this.width=this.height=this.center[2]*pick(this.sector,1)/2;}}, /**
		 * Returns the x, y coordinate of a point given by a value and a pixel distance
		 * from center
		 */getPosition:function getPosition(value,length){return this.postTranslate(this.isCircular?this.translate(value):0, // #2848
	pick(this.isCircular?length:this.translate(value),this.center[2]/2)-this.offset);}, /**
		 * Translate from intermediate plotX (angle), plotY (axis.len - radius) to final chart coordinates. 
		 */postTranslate:function postTranslate(angle,radius){var chart=this.chart,center=this.center;angle=this.startAngleRad+angle;return {x:chart.plotLeft+center[0]+Math.cos(angle)*radius,y:chart.plotTop+center[1]+Math.sin(angle)*radius};}, /**
		 * Find the path for plot bands along the radial axis
		 */getPlotBandPath:function getPlotBandPath(from,to,options){var center=this.center,startAngleRad=this.startAngleRad,fullRadius=center[2]/2,radii=[pick(options.outerRadius,'100%'),options.innerRadius,pick(options.thickness,10)],percentRegex=/%$/,start,end,open,isCircular=this.isCircular, // X axis in a polar chart
	ret; // Polygonal plot bands
	if(this.options.gridLineInterpolation==='polygon'){ret=this.getPlotLinePath(from).concat(this.getPlotLinePath(to,true)); // Circular grid bands
	}else { // Keep within bounds
	from=Math.max(from,this.min);to=Math.min(to,this.max); // Plot bands on Y axis (radial axis) - inner and outer radius depend on to and from
	if(!isCircular){radii[0]=this.translate(from);radii[1]=this.translate(to);} // Convert percentages to pixel values
	radii=map(radii,function(radius){if(percentRegex.test(radius)){radius=pInt(radius,10)*fullRadius/100;}return radius;}); // Handle full circle
	if(options.shape==='circle'||!isCircular){start=-Math.PI/2;end=Math.PI*1.5;open=true;}else {start=startAngleRad+this.translate(from);end=startAngleRad+this.translate(to);}ret=this.chart.renderer.symbols.arc(this.left+center[0],this.top+center[1],radii[0],radii[0],{start:Math.min(start,end), // Math is for reversed yAxis (#3606)
	end:Math.max(start,end),innerR:pick(radii[1],radii[0]-radii[2]),open:open});}return ret;}, /**
		 * Find the path for plot lines perpendicular to the radial axis.
		 */getPlotLinePath:function getPlotLinePath(value,reverse){var axis=this,center=axis.center,chart=axis.chart,end=axis.getPosition(value),xAxis,xy,tickPositions,ret; // Spokes
	if(axis.isCircular){ret=['M',center[0]+chart.plotLeft,center[1]+chart.plotTop,'L',end.x,end.y]; // Concentric circles			
	}else if(axis.options.gridLineInterpolation==='circle'){value=axis.translate(value);if(value){ // a value of 0 is in the center
	ret=axis.getLinePath(0,value);} // Concentric polygons 
	}else { // Find the X axis in the same pane
	each(chart.xAxis,function(a){if(a.pane===axis.pane){xAxis=a;}});ret=[];value=axis.translate(value);tickPositions=xAxis.tickPositions;if(xAxis.autoConnect){tickPositions=tickPositions.concat([tickPositions[0]]);} // Reverse the positions for concatenation of polygonal plot bands
	if(reverse){tickPositions=[].concat(tickPositions).reverse();}each(tickPositions,function(pos,i){xy=xAxis.getPosition(pos,value);ret.push(i?'L':'M',xy.x,xy.y);});}return ret;}, /**
		 * Find the position for the axis title, by default inside the gauge
		 */getTitlePosition:function getTitlePosition(){var center=this.center,chart=this.chart,titleOptions=this.options.title;return {x:chart.plotLeft+center[0]+(titleOptions.x||0),y:chart.plotTop+center[1]-{high:0.5,middle:0.25,low:0}[titleOptions.align]*center[2]+(titleOptions.y||0)};}}; /*jslint unparam: false*/ /**
	 * Override axisProto.init to mix in special axis instance functions and function overrides
	 */wrap(axisProto,'init',function(proceed,chart,userOptions){var axis=this,angular=chart.angular,polar=chart.polar,isX=userOptions.isX,isHidden=angular&&isX,isCircular,startAngleRad,endAngleRad,options,chartOptions=chart.options,paneIndex=userOptions.pane||0,pane,paneOptions; // Before prototype.init
	if(angular){extend(this,isHidden?hiddenAxisMixin:radialAxisMixin);isCircular=!isX;if(isCircular){this.defaultRadialOptions=this.defaultRadialGaugeOptions;}}else if(polar){ //extend(this, userOptions.isX ? radialAxisMixin : radialAxisMixin);
	extend(this,radialAxisMixin);isCircular=isX;this.defaultRadialOptions=isX?this.defaultRadialXOptions:merge(this.defaultYAxisOptions,this.defaultRadialYOptions);} // Run prototype.init
	proceed.call(this,chart,userOptions);if(!isHidden&&(angular||polar)){options=this.options; // Create the pane and set the pane options.
	if(!chart.panes){chart.panes=[];}this.pane=pane=chart.panes[paneIndex]=chart.panes[paneIndex]||new Pane(splat(chartOptions.pane)[paneIndex],chart,axis);paneOptions=pane.options; // Disable certain features on angular and polar axes
	chart.inverted=false;chartOptions.chart.zoomType=null; // Start and end angle options are
	// given in degrees relative to top, while internal computations are
	// in radians relative to right (like SVG).
	this.startAngleRad=startAngleRad=(paneOptions.startAngle-90)*Math.PI/180;this.endAngleRad=endAngleRad=(pick(paneOptions.endAngle,paneOptions.startAngle+360)-90)*Math.PI/180;this.offset=options.offset||0;this.isCircular=isCircular; // Automatically connect grid lines?
	if(isCircular&&userOptions.max===UNDEFINED&&endAngleRad-startAngleRad===2*Math.PI){this.autoConnect=true;}}}); /**
	 * Add special cases within the Tick class' methods for radial axes.
	 */wrap(tickProto,'getPosition',function(proceed,horiz,pos,tickmarkOffset,old){var axis=this.axis;return axis.getPosition?axis.getPosition(pos):proceed.call(this,horiz,pos,tickmarkOffset,old);}); /**
	 * Wrap the getLabelPosition function to find the center position of the label
	 * based on the distance option
	 */wrap(tickProto,'getLabelPosition',function(proceed,x,y,label,horiz,labelOptions,tickmarkOffset,index,step){var axis=this.axis,optionsY=labelOptions.y,ret,centerSlot=20, // 20 degrees to each side at the top and bottom
	align=labelOptions.align,angle=(axis.translate(this.pos)+axis.startAngleRad+Math.PI/2)/Math.PI*180%360;if(axis.isRadial){ret=axis.getPosition(this.pos,axis.center[2]/2+pick(labelOptions.distance,-25)); // Automatically rotated
	if(labelOptions.rotation==='auto'){label.attr({rotation:angle}); // Vertically centered
	}else if(optionsY===null){optionsY=axis.chart.renderer.fontMetrics(label.styles.fontSize).b-label.getBBox().height/2;} // Automatic alignment
	if(align===null){if(axis.isCircular){if(this.label.getBBox().width>axis.len*axis.tickInterval/(axis.max-axis.min)){ // #3506
	centerSlot=0;}if(angle>centerSlot&&angle<180-centerSlot){align='left'; // right hemisphere
	}else if(angle>180+centerSlot&&angle<360-centerSlot){align='right'; // left hemisphere
	}else {align='center'; // top or bottom
	}}else {align='center';}label.attr({align:align});}ret.x+=labelOptions.x;ret.y+=optionsY;}else {ret=proceed.call(this,x,y,label,horiz,labelOptions,tickmarkOffset,index,step);}return ret;}); /**
	 * Wrap the getMarkPath function to return the path of the radial marker
	 */wrap(tickProto,'getMarkPath',function(proceed,x,y,tickLength,tickWidth,horiz,renderer){var axis=this.axis,endPoint,ret;if(axis.isRadial){endPoint=axis.getPosition(this.pos,axis.center[2]/2+tickLength);ret=['M',x,y,'L',endPoint.x,endPoint.y];}else {ret=proceed.call(this,x,y,tickLength,tickWidth,horiz,renderer);}return ret;}); /* 
	 * The AreaRangeSeries class
	 * 
	 */ /**
	 * Extend the default options with map options
	 */defaultPlotOptions.arearange=merge(defaultPlotOptions.area,{lineWidth:1,marker:null,threshold:null,tooltip:{pointFormat:'<span style="color:{series.color}">●</span> {series.name}: <b>{point.low}</b> - <b>{point.high}</b><br/>'},trackByArea:true,dataLabels:{align:null,verticalAlign:null,xLow:0,xHigh:0,yLow:0,yHigh:0},states:{hover:{halo:false}}}); /**
	 * Add the series type
	 */seriesTypes.arearange=extendClass(seriesTypes.area,{type:'arearange',pointArrayMap:['low','high'],dataLabelCollections:['dataLabel','dataLabelUpper'],toYData:function toYData(point){return [point.low,point.high];},pointValKey:'low',deferTranslatePolar:true, /**
		 * Translate a point's plotHigh from the internal angle and radius measures to 
		 * true plotHigh coordinates. This is an addition of the toXY method found in
		 * Polar.js, because it runs too early for arearanges to be considered (#3419).
		 */highToXY:function highToXY(point){ // Find the polar plotX and plotY
	var chart=this.chart,xy=this.xAxis.postTranslate(point.rectPlotX,this.yAxis.len-point.plotHigh);point.plotHighX=xy.x-chart.plotLeft;point.plotHigh=xy.y-chart.plotTop;}, /**
		 * Extend getSegments to force null points if the higher value is null. #1703.
		 */getSegments:function getSegments(){var series=this;each(series.points,function(point){if(!series.options.connectNulls&&(point.low===null||point.high===null)){point.y=null;}else if(point.low===null&&point.high!==null){point.y=point.high;}});Series.prototype.getSegments.call(this);}, /**
		 * Translate data points from raw values x and y to plotX and plotY
		 */translate:function translate(){var series=this,yAxis=series.yAxis;seriesTypes.area.prototype.translate.apply(series); // Set plotLow and plotHigh
	each(series.points,function(point){var low=point.low,high=point.high,plotY=point.plotY;if(high===null&&low===null){point.y=null;}else if(low===null){point.plotLow=point.plotY=null;point.plotHigh=yAxis.translate(high,0,1,0,1);}else if(high===null){point.plotLow=plotY;point.plotHigh=null;}else {point.plotLow=plotY;point.plotHigh=yAxis.translate(high,0,1,0,1);}}); // Postprocess plotHigh
	if(this.chart.polar){each(this.points,function(point){series.highToXY(point);});}}, /**
		 * Extend the line series' getSegmentPath method by applying the segment
		 * path to both lower and higher values of the range
		 */getSegmentPath:function getSegmentPath(segment){var lowSegment,highSegment=[],i=segment.length,baseGetSegmentPath=Series.prototype.getSegmentPath,point,linePath,lowerPath,options=this.options,step=options.step,higherPath; // Remove nulls from low segment
	lowSegment=HighchartsAdapter.grep(segment,function(point){return point.plotLow!==null;}); // Make a segment with plotX and plotY for the top values
	while(i--){point=segment[i];if(point.plotHigh!==null){highSegment.push({plotX:point.plotHighX||point.plotX, // plotHighX is for polar charts
	plotY:point.plotHigh});}} // Get the paths
	lowerPath=baseGetSegmentPath.call(this,lowSegment);if(step){if(step===true){step='left';}options.step={left:'right',center:'center',right:'left'}[step]; // swap for reading in getSegmentPath
	}higherPath=baseGetSegmentPath.call(this,highSegment);options.step=step; // Create a line on both top and bottom of the range
	linePath=[].concat(lowerPath,higherPath); // For the area path, we need to change the 'move' statement into 'lineTo' or 'curveTo'
	if(!this.chart.polar){higherPath[0]='L'; // this probably doesn't work for spline
	}this.areaPath=this.areaPath.concat(lowerPath,higherPath);return linePath;}, /**
		 * Extend the basic drawDataLabels method by running it for both lower and higher
		 * values.
		 */drawDataLabels:function drawDataLabels(){var data=this.data,length=data.length,i,originalDataLabels=[],seriesProto=Series.prototype,dataLabelOptions=this.options.dataLabels,align=dataLabelOptions.align,inside=dataLabelOptions.inside,point,up,inverted=this.chart.inverted;if(dataLabelOptions.enabled||this._hasPointLabels){ // Step 1: set preliminary values for plotY and dataLabel and draw the upper labels
	i=length;while(i--){point=data[i];if(point){up=inside?point.plotHigh<point.plotLow:point.plotHigh>point.plotLow; // Set preliminary values
	point.y=point.high;point._plotY=point.plotY;point.plotY=point.plotHigh; // Store original data labels and set preliminary label objects to be picked up 
	// in the uber method
	originalDataLabels[i]=point.dataLabel;point.dataLabel=point.dataLabelUpper; // Set the default offset
	point.below=up;if(inverted){if(!align){dataLabelOptions.align=up?'right':'left';}dataLabelOptions.x=dataLabelOptions.xHigh;}else {dataLabelOptions.y=dataLabelOptions.yHigh;}}}if(seriesProto.drawDataLabels){seriesProto.drawDataLabels.apply(this,arguments); // #1209
	} // Step 2: reorganize and handle data labels for the lower values
	i=length;while(i--){point=data[i];if(point){up=inside?point.plotHigh<point.plotLow:point.plotHigh>point.plotLow; // Move the generated labels from step 1, and reassign the original data labels
	point.dataLabelUpper=point.dataLabel;point.dataLabel=originalDataLabels[i]; // Reset values
	point.y=point.low;point.plotY=point._plotY; // Set the default offset
	point.below=!up;if(inverted){if(!align){dataLabelOptions.align=up?'left':'right';}dataLabelOptions.x=dataLabelOptions.xLow;}else {dataLabelOptions.y=dataLabelOptions.yLow;}}}if(seriesProto.drawDataLabels){seriesProto.drawDataLabels.apply(this,arguments);}}dataLabelOptions.align=align;},alignDataLabel:function alignDataLabel(){seriesTypes.column.prototype.alignDataLabel.apply(this,arguments);},setStackedPoints:noop,getSymbol:noop,drawPoints:noop}); /**
	 * The AreaSplineRangeSeries class
	 */defaultPlotOptions.areasplinerange=merge(defaultPlotOptions.arearange); /**
	 * AreaSplineRangeSeries object
	 */seriesTypes.areasplinerange=extendClass(seriesTypes.arearange,{type:'areasplinerange',getPointSpline:seriesTypes.spline.prototype.getPointSpline});(function(){var colProto=seriesTypes.column.prototype; /**
		 * The ColumnRangeSeries class
		 */defaultPlotOptions.columnrange=merge(defaultPlotOptions.column,defaultPlotOptions.arearange,{lineWidth:1,pointRange:null}); /**
		 * ColumnRangeSeries object
		 */seriesTypes.columnrange=extendClass(seriesTypes.arearange,{type:'columnrange', /**
			 * Translate data points from raw values x and y to plotX and plotY
			 */translate:function translate(){var series=this,yAxis=series.yAxis,plotHigh;colProto.translate.apply(series); // Set plotLow and plotHigh
	each(series.points,function(point){var shapeArgs=point.shapeArgs,minPointLength=series.options.minPointLength,heightDifference,height,y;point.tooltipPos=null; // don't inherit from column
	point.plotHigh=plotHigh=yAxis.translate(point.high,0,1,0,1);point.plotLow=point.plotY; // adjust shape
	y=plotHigh;height=point.plotY-plotHigh; // Adjust for minPointLength
	if(Math.abs(height)<minPointLength){heightDifference=minPointLength-height;height+=heightDifference;y-=heightDifference/2; // Adjust for negative ranges or reversed Y axis (#1457)
	}else if(height<0){height*=-1;y-=height;}shapeArgs.height=height;shapeArgs.y=y;});},directTouch:true,trackerGroups:['group','dataLabelsGroup'],drawGraph:noop,crispCol:colProto.crispCol,pointAttrToOptions:colProto.pointAttrToOptions,drawPoints:colProto.drawPoints,drawTracker:colProto.drawTracker,animate:colProto.animate,getColumnMetrics:colProto.getColumnMetrics});})(); /* 
	 * The GaugeSeries class
	 */ /**
	 * Extend the default options
	 */defaultPlotOptions.gauge=merge(defaultPlotOptions.line,{dataLabels:{enabled:true,defer:false,y:15,borderWidth:1,borderColor:'silver',borderRadius:3,crop:false,verticalAlign:'top',zIndex:2},dial:{ // radius: '80%',
	// backgroundColor: 'black',
	// borderColor: 'silver',
	// borderWidth: 0,
	// baseWidth: 3,
	// topWidth: 1,
	// baseLength: '70%' // of radius
	// rearLength: '10%'
	},pivot:{ //radius: 5,
	//borderWidth: 0
	//borderColor: 'silver',
	//backgroundColor: 'black'
	},tooltip:{headerFormat:''},showInLegend:false}); /**
	 * Extend the point object
	 */var GaugePoint=extendClass(Point,{ /**
		 * Don't do any hover colors or anything
		 */setState:function setState(state){this.state=state;}}); /**
	 * Add the series type
	 */var GaugeSeries={type:'gauge',pointClass:GaugePoint, // chart.angular will be set to true when a gauge series is present, and this will
	// be used on the axes
	angular:true,drawGraph:noop,fixedBox:true,forceDL:true,trackerGroups:['group','dataLabelsGroup'], /**
		 * Calculate paths etc
		 */translate:function translate(){var series=this,yAxis=series.yAxis,options=series.options,center=yAxis.center;series.generatePoints();each(series.points,function(point){var dialOptions=merge(options.dial,point.dial),radius=pInt(pick(dialOptions.radius,80))*center[2]/200,baseLength=pInt(pick(dialOptions.baseLength,70))*radius/100,rearLength=pInt(pick(dialOptions.rearLength,10))*radius/100,baseWidth=dialOptions.baseWidth||3,topWidth=dialOptions.topWidth||1,overshoot=options.overshoot,rotation=yAxis.startAngleRad+yAxis.translate(point.y,null,null,null,true); // Handle the wrap and overshoot options
	if(overshoot&&typeof overshoot==='number'){overshoot=overshoot/180*Math.PI;rotation=Math.max(yAxis.startAngleRad-overshoot,Math.min(yAxis.endAngleRad+overshoot,rotation));}else if(options.wrap===false){rotation=Math.max(yAxis.startAngleRad,Math.min(yAxis.endAngleRad,rotation));}rotation=rotation*180/Math.PI;point.shapeType='path';point.shapeArgs={d:dialOptions.path||['M',-rearLength,-baseWidth/2,'L',baseLength,-baseWidth/2,radius,-topWidth/2,radius,topWidth/2,baseLength,baseWidth/2,-rearLength,baseWidth/2,'z'],translateX:center[0],translateY:center[1],rotation:rotation}; // Positions for data label
	point.plotX=center[0];point.plotY=center[1];});}, /**
		 * Draw the points where each point is one needle
		 */drawPoints:function drawPoints(){var series=this,center=series.yAxis.center,pivot=series.pivot,options=series.options,pivotOptions=options.pivot,renderer=series.chart.renderer;each(series.points,function(point){var graphic=point.graphic,shapeArgs=point.shapeArgs,d=shapeArgs.d,dialOptions=merge(options.dial,point.dial); // #1233
	if(graphic){graphic.animate(shapeArgs);shapeArgs.d=d; // animate alters it
	}else {point.graphic=renderer[point.shapeType](shapeArgs).attr({stroke:dialOptions.borderColor||'none','stroke-width':dialOptions.borderWidth||0,fill:dialOptions.backgroundColor||'black',rotation:shapeArgs.rotation // required by VML when animation is false
	}).add(series.group);}}); // Add or move the pivot
	if(pivot){pivot.animate({ // #1235
	translateX:center[0],translateY:center[1]});}else {series.pivot=renderer.circle(0,0,pick(pivotOptions.radius,5)).attr({'stroke-width':pivotOptions.borderWidth||0,stroke:pivotOptions.borderColor||'silver',fill:pivotOptions.backgroundColor||'black'}).translate(center[0],center[1]).add(series.group);}}, /**
		 * Animate the arrow up from startAngle
		 */animate:function animate(init){var series=this;if(!init){each(series.points,function(point){var graphic=point.graphic;if(graphic){ // start value
	graphic.attr({rotation:series.yAxis.startAngleRad*180/Math.PI}); // animate
	graphic.animate({rotation:point.shapeArgs.rotation},series.options.animation);}}); // delete this function to allow it only once
	series.animate=null;}},render:function render(){this.group=this.plotGroup('group','series',this.visible?'visible':'hidden',this.options.zIndex,this.chart.seriesGroup);Series.prototype.render.call(this);this.group.clip(this.chart.clipRect);}, /**
		 * Extend the basic setData method by running processData and generatePoints immediately,
		 * in order to access the points from the legend.
		 */setData:function setData(data,redraw){Series.prototype.setData.call(this,data,false);this.processData();this.generatePoints();if(pick(redraw,true)){this.chart.redraw();}}, /**
		 * If the tracking module is loaded, add the point tracker
		 */drawTracker:TrackerMixin&&TrackerMixin.drawTrackerPoint};seriesTypes.gauge=extendClass(seriesTypes.line,GaugeSeries); /* ****************************************************************************
	 * Start Box plot series code											      *
	 *****************************************************************************/ // Set default options
	defaultPlotOptions.boxplot=merge(defaultPlotOptions.column,{fillColor:'#FFFFFF',lineWidth:1, //medianColor: null,
	medianWidth:2,states:{hover:{brightness:-0.3}}, //stemColor: null,
	//stemDashStyle: 'solid'
	//stemWidth: null,
	threshold:null,tooltip:{pointFormat:'<span style="color:{point.color}">●</span> <b> {series.name}</b><br/>'+ // docs
	'Maximum: {point.high}<br/>'+'Upper quartile: {point.q3}<br/>'+'Median: {point.median}<br/>'+'Lower quartile: {point.q1}<br/>'+'Minimum: {point.low}<br/>'}, //whiskerColor: null,
	whiskerLength:'50%',whiskerWidth:2}); // Create the series object
	seriesTypes.boxplot=extendClass(seriesTypes.column,{type:'boxplot',pointArrayMap:['low','q1','median','q3','high'], // array point configs are mapped to this
	toYData:function toYData(point){ // return a plain array for speedy calculation
	return [point.low,point.q1,point.median,point.q3,point.high];},pointValKey:'high', // defines the top of the tracker
	/**
		 * One-to-one mapping from options to SVG attributes
		 */pointAttrToOptions:{ // mapping between SVG attributes and the corresponding options
	fill:'fillColor',stroke:'color','stroke-width':'lineWidth'}, /**
		 * Disable data labels for box plot
		 */drawDataLabels:noop, /**
		 * Translate data points from raw values x and y to plotX and plotY
		 */translate:function translate(){var series=this,yAxis=series.yAxis,pointArrayMap=series.pointArrayMap;seriesTypes.column.prototype.translate.apply(series); // do the translation on each point dimension
	each(series.points,function(point){each(pointArrayMap,function(key){if(point[key]!==null){point[key+'Plot']=yAxis.translate(point[key],0,1,0,1);}});});}, /**
		 * Draw the data points
		 */drawPoints:function drawPoints(){var series=this, //state = series.state,
	points=series.points,options=series.options,chart=series.chart,renderer=chart.renderer,pointAttr,q1Plot,q3Plot,highPlot,lowPlot,medianPlot,crispCorr,crispX,graphic,stemPath,stemAttr,boxPath,whiskersPath,whiskersAttr,medianPath,medianAttr,width,left,right,halfWidth,shapeArgs,color,doQuartiles=series.doQuartiles!==false, // error bar inherits this series type but doesn't do quartiles
	pointWiskerLength,whiskerLength=series.options.whiskerLength;each(points,function(point){graphic=point.graphic;shapeArgs=point.shapeArgs; // the box
	stemAttr={};whiskersAttr={};medianAttr={};color=point.color||series.color;if(point.plotY!==UNDEFINED){pointAttr=point.pointAttr[point.selected?'selected':'']; // crisp vector coordinates
	width=shapeArgs.width;left=mathFloor(shapeArgs.x);right=left+width;halfWidth=mathRound(width/2); //crispX = mathRound(left + halfWidth) + crispCorr;
	q1Plot=mathFloor(doQuartiles?point.q1Plot:point.lowPlot); // + crispCorr;
	q3Plot=mathFloor(doQuartiles?point.q3Plot:point.lowPlot); // + crispCorr;
	highPlot=mathFloor(point.highPlot); // + crispCorr;
	lowPlot=mathFloor(point.lowPlot); // + crispCorr;
	// Stem attributes
	stemAttr.stroke=point.stemColor||options.stemColor||color;stemAttr['stroke-width']=pick(point.stemWidth,options.stemWidth,options.lineWidth);stemAttr.dashstyle=point.stemDashStyle||options.stemDashStyle; // Whiskers attributes
	whiskersAttr.stroke=point.whiskerColor||options.whiskerColor||color;whiskersAttr['stroke-width']=pick(point.whiskerWidth,options.whiskerWidth,options.lineWidth); // Median attributes
	medianAttr.stroke=point.medianColor||options.medianColor||color;medianAttr['stroke-width']=pick(point.medianWidth,options.medianWidth,options.lineWidth); // The stem
	crispCorr=stemAttr['stroke-width']%2/2;crispX=left+halfWidth+crispCorr;stemPath=[ // stem up
	'M',crispX,q3Plot,'L',crispX,highPlot, // stem down
	'M',crispX,q1Plot,'L',crispX,lowPlot]; // The box
	if(doQuartiles){crispCorr=pointAttr['stroke-width']%2/2;crispX=mathFloor(crispX)+crispCorr;q1Plot=mathFloor(q1Plot)+crispCorr;q3Plot=mathFloor(q3Plot)+crispCorr;left+=crispCorr;right+=crispCorr;boxPath=['M',left,q3Plot,'L',left,q1Plot,'L',right,q1Plot,'L',right,q3Plot,'L',left,q3Plot,'z'];} // The whiskers
	if(whiskerLength){crispCorr=whiskersAttr['stroke-width']%2/2;highPlot=highPlot+crispCorr;lowPlot=lowPlot+crispCorr;pointWiskerLength=/%$/.test(whiskerLength)?halfWidth*parseFloat(whiskerLength)/100:whiskerLength/2;whiskersPath=[ // High whisker
	'M',crispX-pointWiskerLength,highPlot,'L',crispX+pointWiskerLength,highPlot, // Low whisker
	'M',crispX-pointWiskerLength,lowPlot,'L',crispX+pointWiskerLength,lowPlot];} // The median
	crispCorr=medianAttr['stroke-width']%2/2;medianPlot=mathRound(point.medianPlot)+crispCorr;medianPath=['M',left,medianPlot,'L',right,medianPlot]; // Create or update the graphics
	if(graphic){ // update
	point.stem.animate({d:stemPath});if(whiskerLength){point.whiskers.animate({d:whiskersPath});}if(doQuartiles){point.box.animate({d:boxPath});}point.medianShape.animate({d:medianPath});}else { // create new
	point.graphic=graphic=renderer.g().add(series.group);point.stem=renderer.path(stemPath).attr(stemAttr).add(graphic);if(whiskerLength){point.whiskers=renderer.path(whiskersPath).attr(whiskersAttr).add(graphic);}if(doQuartiles){point.box=renderer.path(boxPath).attr(pointAttr).add(graphic);}point.medianShape=renderer.path(medianPath).attr(medianAttr).add(graphic);}}});},setStackedPoints:noop // #3890
	}); /* ****************************************************************************
	 * End Box plot series code												*
	 *****************************************************************************/ /* ****************************************************************************
	 * Start error bar series code                                                *
	 *****************************************************************************/ // 1 - set default options
	defaultPlotOptions.errorbar=merge(defaultPlotOptions.boxplot,{color:'#000000',grouping:false,linkedTo:':previous',tooltip:{pointFormat:'<span style="color:{point.color}">●</span> {series.name}: <b>{point.low}</b> - <b>{point.high}</b><br/>' // docs
	},whiskerWidth:null}); // 2 - Create the series object
	seriesTypes.errorbar=extendClass(seriesTypes.boxplot,{type:'errorbar',pointArrayMap:['low','high'], // array point configs are mapped to this
	toYData:function toYData(point){ // return a plain array for speedy calculation
	return [point.low,point.high];},pointValKey:'high', // defines the top of the tracker
	doQuartiles:false,drawDataLabels:seriesTypes.arearange?seriesTypes.arearange.prototype.drawDataLabels:noop, /**
		 * Get the width and X offset, either on top of the linked series column
		 * or standalone
		 */getColumnMetrics:function getColumnMetrics(){return this.linkedParent&&this.linkedParent.columnMetrics||seriesTypes.column.prototype.getColumnMetrics.call(this);}}); /* ****************************************************************************
	 * End error bar series code                                                  *
	 *****************************************************************************/ /* ****************************************************************************
	 * Start Waterfall series code                                                *
	 *****************************************************************************/ // 1 - set default options
	defaultPlotOptions.waterfall=merge(defaultPlotOptions.column,{lineWidth:1,lineColor:'#333',dashStyle:'dot',borderColor:'#333',dataLabels:{inside:true},states:{hover:{lineWidthPlus:0 // #3126
	}}}); // 2 - Create the series object
	seriesTypes.waterfall=extendClass(seriesTypes.column,{type:'waterfall',upColorProp:'fill',pointValKey:'y', /**
		 * Translate data points from raw values
		 */translate:function translate(){var series=this,options=series.options,yAxis=series.yAxis,len,i,points,point,shapeArgs,stack,y,yValue,previousY,previousIntermediate,range,threshold=options.threshold,stacking=options.stacking,tooltipY; // run column series translate
	seriesTypes.column.prototype.translate.apply(this);previousY=previousIntermediate=threshold;points=series.points;for(i=0,len=points.length;i<len;i++){ // cache current point object
	point=points[i];yValue=this.processedYData[i];shapeArgs=point.shapeArgs; // get current stack
	stack=stacking&&yAxis.stacks[(series.negStacks&&yValue<threshold?'-':'')+series.stackKey];range=stack?stack[point.x].points[series.index+','+i]:[0,yValue]; // override point value for sums
	// #3710 Update point does not propagate to sum
	if(point.isSum){point.y=yValue;}else if(point.isIntermediateSum){point.y=yValue-previousIntermediate; // #3840
	} // up points
	y=mathMax(previousY,previousY+point.y)+range[0];shapeArgs.y=yAxis.translate(y,0,1); // sum points
	if(point.isSum){shapeArgs.y=yAxis.translate(range[1],0,1);shapeArgs.height=Math.min(yAxis.translate(range[0],0,1),yAxis.len)-shapeArgs.y; // #4256
	}else if(point.isIntermediateSum){shapeArgs.y=yAxis.translate(range[1],0,1);shapeArgs.height=Math.min(yAxis.translate(previousIntermediate,0,1),yAxis.len)-shapeArgs.y;previousIntermediate=range[1]; // If it's not the sum point, update previous stack end position and get 
	// shape height (#3886)
	}else {if(previousY!==0){ // Not the first point
	shapeArgs.height=yValue>0?yAxis.translate(previousY,0,1)-shapeArgs.y:yAxis.translate(previousY,0,1)-yAxis.translate(previousY-yValue,0,1);}previousY+=yValue;} // #3952 Negative sum or intermediate sum not rendered correctly
	if(shapeArgs.height<0){shapeArgs.y+=shapeArgs.height;shapeArgs.height*=-1;}point.plotY=shapeArgs.y=mathRound(shapeArgs.y)-series.borderWidth%2/2;shapeArgs.height=mathMax(mathRound(shapeArgs.height),0.001); // #3151
	point.yBottom=shapeArgs.y+shapeArgs.height; // Correct tooltip placement (#3014)
	tooltipY=point.plotY+(point.negative?shapeArgs.height:0);if(series.chart.inverted){point.tooltipPos[0]=yAxis.len-tooltipY;}else {point.tooltipPos[1]=tooltipY;}}}, /**
		 * Call default processData then override yData to reflect waterfall's extremes on yAxis
		 */processData:function processData(force){var series=this,options=series.options,yData=series.yData,points=series.options.data, // #3710 Update point does not propagate to sum
	point,dataLength=yData.length,threshold=options.threshold||0,subSum,sum,dataMin,dataMax,y,i;sum=subSum=dataMin=dataMax=threshold;for(i=0;i<dataLength;i++){y=yData[i];point=points&&points[i]?points[i]:{};if(y==="sum"||point.isSum){yData[i]=sum;}else if(y==="intermediateSum"||point.isIntermediateSum){yData[i]=subSum;}else {sum+=y;subSum+=y;}dataMin=Math.min(sum,dataMin);dataMax=Math.max(sum,dataMax);}Series.prototype.processData.call(this,force); // Record extremes
	series.dataMin=dataMin;series.dataMax=dataMax;}, /**
		 * Return y value or string if point is sum
		 */toYData:function toYData(pt){if(pt.isSum){return pt.x===0?null:"sum"; //#3245 Error when first element is Sum or Intermediate Sum
	}else if(pt.isIntermediateSum){return pt.x===0?null:"intermediateSum"; //#3245
	}return pt.y;}, /**
		 * Postprocess mapping between options and SVG attributes
		 */getAttribs:function getAttribs(){seriesTypes.column.prototype.getAttribs.apply(this,arguments);var series=this,options=series.options,stateOptions=options.states,upColor=options.upColor||series.color,hoverColor=Highcharts.Color(upColor).brighten(0.1).get(),seriesDownPointAttr=merge(series.pointAttr),upColorProp=series.upColorProp;seriesDownPointAttr[''][upColorProp]=upColor;seriesDownPointAttr.hover[upColorProp]=stateOptions.hover.upColor||hoverColor;seriesDownPointAttr.select[upColorProp]=stateOptions.select.upColor||upColor;each(series.points,function(point){if(!point.options.color){ // Up color
	if(point.y>0){point.pointAttr=seriesDownPointAttr;point.color=upColor; // Down color (#3710, update to negative)
	}else {point.pointAttr=series.pointAttr;}}});}, /**
		 * Draw columns' connector lines
		 */getGraphPath:function getGraphPath(){var data=this.data,length=data.length,lineWidth=this.options.lineWidth+this.borderWidth,normalizer=mathRound(lineWidth)%2/2,path=[],M='M',L='L',prevArgs,pointArgs,i,d;for(i=1;i<length;i++){pointArgs=data[i].shapeArgs;prevArgs=data[i-1].shapeArgs;d=[M,prevArgs.x+prevArgs.width,prevArgs.y+normalizer,L,pointArgs.x,prevArgs.y+normalizer];if(data[i-1].y<0){d[2]+=prevArgs.height;d[5]+=prevArgs.height;}path=path.concat(d);}return path;}, /**
		 * Extremes are recorded in processData
		 */getExtremes:noop,drawGraph:Series.prototype.drawGraph}); /* ****************************************************************************
	 * End Waterfall series code                                                  *
	 *****************************************************************************/ /**
	 * Set the default options for polygon
	 */defaultPlotOptions.polygon=merge(defaultPlotOptions.scatter,{marker:{enabled:false}}); /**
	 * The polygon series class
	 */seriesTypes.polygon=extendClass(seriesTypes.scatter,{type:'polygon',fillGraph:true, // Close all segments
	getSegmentPath:function getSegmentPath(segment){return Series.prototype.getSegmentPath.call(this,segment).concat('z');},drawGraph:Series.prototype.drawGraph,drawLegendSymbol:Highcharts.LegendSymbolMixin.drawRectangle}); /* ****************************************************************************
	 * Start Bubble series code											          *
	 *****************************************************************************/ // 1 - set default options
	defaultPlotOptions.bubble=merge(defaultPlotOptions.scatter,{dataLabels:{formatter:function formatter(){ // #2945
	return this.point.z;},inside:true,verticalAlign:'middle'}, // displayNegative: true,
	marker:{ // fillOpacity: 0.5,
	lineColor:null, // inherit from series.color
	lineWidth:1},minSize:8,maxSize:'20%', // negativeColor: null,
	// sizeBy: 'area'
	softThreshold:false,states:{hover:{halo:{size:5}}},tooltip:{pointFormat:'({point.x}, {point.y}), Size: {point.z}'},turboThreshold:0,zThreshold:0,zoneAxis:'z'});var BubblePoint=extendClass(Point,{haloPath:function haloPath(){return Point.prototype.haloPath.call(this,this.shapeArgs.r+this.series.options.states.hover.halo.size);},ttBelow:false}); // 2 - Create the series object
	seriesTypes.bubble=extendClass(seriesTypes.scatter,{type:'bubble',pointClass:BubblePoint,pointArrayMap:['y','z'],parallelArrays:['x','y','z'],trackerGroups:['group','dataLabelsGroup'],bubblePadding:true,zoneAxis:'z', /**
		 * Mapping between SVG attributes and the corresponding options
		 */pointAttrToOptions:{stroke:'lineColor','stroke-width':'lineWidth',fill:'fillColor'}, /**
		 * Apply the fillOpacity to all fill positions
		 */applyOpacity:function applyOpacity(fill){var markerOptions=this.options.marker,fillOpacity=pick(markerOptions.fillOpacity,0.5); // When called from Legend.colorizeItem, the fill isn't predefined
	fill=fill||markerOptions.fillColor||this.color;if(fillOpacity!==1){fill=Color(fill).setOpacity(fillOpacity).get('rgba');}return fill;}, /**
		 * Extend the convertAttribs method by applying opacity to the fill
		 */convertAttribs:function convertAttribs(){var obj=Series.prototype.convertAttribs.apply(this,arguments);obj.fill=this.applyOpacity(obj.fill);return obj;}, /**
		 * Get the radius for each point based on the minSize, maxSize and each point's Z value. This
		 * must be done prior to Series.translate because the axis needs to add padding in 
		 * accordance with the point sizes.
		 */getRadii:function getRadii(zMin,zMax,minSize,maxSize){var len,i,pos,zData=this.zData,radii=[],options=this.options,sizeByArea=options.sizeBy!=='width',zThreshold=options.zThreshold,zRange=zMax-zMin,value,radius; // Set the shape type and arguments to be picked up in drawPoints
	for(i=0,len=zData.length;i<len;i++){value=zData[i]; // When sizing by threshold, the absolute value of z determines the size
	// of the bubble.
	if(options.sizeByAbsoluteValue){value=Math.abs(value-zThreshold);zMax=Math.max(zMax-zThreshold,Math.abs(zMin-zThreshold));zMin=0;}if(value===null){radius=null; // Issue #4419 - if value is less than zMin, push a radius that's always smaller than the minimum size
	}else if(value<zMin){radius=minSize/2-1;}else { // Relative size, a number between 0 and 1
	pos=zRange>0?(value-zMin)/zRange:0.5;if(sizeByArea&&pos>=0){pos=Math.sqrt(pos);}radius=math.ceil(minSize+pos*(maxSize-minSize))/2;}radii.push(radius);}this.radii=radii;}, /**
		 * Perform animation on the bubbles
		 */animate:function animate(init){var animation=this.options.animation;if(!init){ // run the animation
	each(this.points,function(point){var graphic=point.graphic,shapeArgs=point.shapeArgs;if(graphic&&shapeArgs){ // start values
	graphic.attr('r',1); // animate
	graphic.animate({r:shapeArgs.r},animation);}}); // delete this function to allow it only once
	this.animate=null;}}, /**
		 * Extend the base translate method to handle bubble size
		 */translate:function translate(){var i,data=this.data,point,radius,radii=this.radii; // Run the parent method
	seriesTypes.scatter.prototype.translate.call(this); // Set the shape type and arguments to be picked up in drawPoints
	i=data.length;while(i--){point=data[i];radius=radii?radii[i]:0; // #1737
	if(typeof radius==='number'&&radius>=this.minPxSize/2){ // Shape arguments
	point.shapeType='circle';point.shapeArgs={x:point.plotX,y:point.plotY,r:radius}; // Alignment box for the data label
	point.dlBox={x:point.plotX-radius,y:point.plotY-radius,width:2*radius,height:2*radius};}else { // below zThreshold or z = null
	point.shapeArgs=point.plotY=point.dlBox=UNDEFINED; // #1691
	}}}, /**
		 * Get the series' symbol in the legend
		 * 
		 * @param {Object} legend The legend object
		 * @param {Object} item The series (this) or point
		 */drawLegendSymbol:function drawLegendSymbol(legend,item){var radius=pInt(legend.itemStyle.fontSize)/2;item.legendSymbol=this.chart.renderer.circle(radius,legend.baseline-radius,radius).attr({zIndex:3}).add(item.legendGroup);item.legendSymbol.isMarker=true;},drawPoints:seriesTypes.column.prototype.drawPoints,alignDataLabel:seriesTypes.column.prototype.alignDataLabel,buildKDTree:noop,applyZones:noop}); /**
	 * Add logic to pad each axis with the amount of pixels
	 * necessary to avoid the bubbles to overflow.
	 */Axis.prototype.beforePadding=function(){var axis=this,axisLength=this.len,chart=this.chart,pxMin=0,pxMax=axisLength,isXAxis=this.isXAxis,dataKey=isXAxis?'xData':'yData',min=this.min,extremes={},smallestSize=math.min(chart.plotWidth,chart.plotHeight),zMin=Number.MAX_VALUE,zMax=-Number.MAX_VALUE,range=this.max-min,transA=axisLength/range,activeSeries=[]; // Handle padding on the second pass, or on redraw
	each(this.series,function(series){var seriesOptions=series.options,zData;if(series.bubblePadding&&(series.visible||!chart.options.chart.ignoreHiddenSeries)){ // Correction for #1673
	axis.allowZoomOutside=true; // Cache it
	activeSeries.push(series);if(isXAxis){ // because X axis is evaluated first
	// For each series, translate the size extremes to pixel values
	each(['minSize','maxSize'],function(prop){var length=seriesOptions[prop],isPercent=/%$/.test(length);length=pInt(length);extremes[prop]=isPercent?smallestSize*length/100:length;});series.minPxSize=extremes.minSize;series.maxPxSize=extremes.maxSize; // Find the min and max Z
	zData=series.zData;if(zData.length){ // #1735
	zMin=pick(seriesOptions.zMin,math.min(zMin,math.max(arrayMin(zData),seriesOptions.displayNegative===false?seriesOptions.zThreshold:-Number.MAX_VALUE)));zMax=pick(seriesOptions.zMax,math.max(zMax,arrayMax(zData)));}}}});each(activeSeries,function(series){var data=series[dataKey],i=data.length,radius;if(isXAxis){series.getRadii(zMin,zMax,series.minPxSize,series.maxPxSize);}if(range>0){while(i--){if(typeof data[i]==='number'){radius=series.radii[i];pxMin=Math.min((data[i]-min)*transA-radius,pxMin);pxMax=Math.max((data[i]-min)*transA+radius,pxMax);}}}});if(activeSeries.length&&range>0&&!this.isLog){pxMax-=axisLength;transA*=(axisLength+pxMin-pxMax)/axisLength;each([['min','userMin',pxMin],['max','userMax',pxMax]],function(keys){if(pick(axis.options[keys[0]],axis[keys[1]])===UNDEFINED){axis[keys[0]]+=keys[2]/transA;}});}}; /* ****************************************************************************
	 * End Bubble series code                                                     *
	 *****************************************************************************/(function(){ /**
		 * Extensions for polar charts. Additionally, much of the geometry required for polar charts is
		 * gathered in RadialAxes.js.
		 * 
		 */var seriesProto=Series.prototype,pointerProto=Pointer.prototype,colProto; /**
		 * Search a k-d tree by the point angle, used for shared tooltips in polar charts
		 */seriesProto.searchPointByAngle=function(e){var series=this,chart=series.chart,xAxis=series.xAxis,center=xAxis.pane.center,plotX=e.chartX-center[0]-chart.plotLeft,plotY=e.chartY-center[1]-chart.plotTop;return this.searchKDTree({clientX:180+Math.atan2(plotX,plotY)*(-180/Math.PI)});}; /**
		 * Wrap the buildKDTree function so that it searches by angle (clientX) in case of shared tooltip,
		 * and by two dimensional distance in case of non-shared.
		 */wrap(seriesProto,'buildKDTree',function(proceed){if(this.chart.polar){if(this.kdByAngle){this.searchPoint=this.searchPointByAngle;}else {this.kdDimensions=2;}}proceed.apply(this);}); /**
		 * Translate a point's plotX and plotY from the internal angle and radius measures to 
		 * true plotX, plotY coordinates
		 */seriesProto.toXY=function(point){var xy,chart=this.chart,plotX=point.plotX,plotY=point.plotY,clientX; // Save rectangular plotX, plotY for later computation
	point.rectPlotX=plotX;point.rectPlotY=plotY; // Find the polar plotX and plotY
	xy=this.xAxis.postTranslate(point.plotX,this.yAxis.len-plotY);point.plotX=point.polarPlotX=xy.x-chart.plotLeft;point.plotY=point.polarPlotY=xy.y-chart.plotTop; // If shared tooltip, record the angle in degrees in order to align X points. Otherwise,
	// use a standard k-d tree to get the nearest point in two dimensions.
	if(this.kdByAngle){clientX=(plotX/Math.PI*180+this.xAxis.pane.options.startAngle)%360;if(clientX<0){ // #2665
	clientX+=360;}point.clientX=clientX;}else {point.clientX=point.plotX;}}; /**
		 * Add some special init logic to areas and areasplines
		 */function initArea(proceed,chart,options){proceed.call(this,chart,options);if(this.chart.polar){ /**
				 * Overridden method to close a segment path. While in a cartesian plane the area 
				 * goes down to the threshold, in the polar chart it goes to the center.
				 */this.closeSegment=function(path){var center=this.xAxis.center;path.push('L',center[0],center[1]);}; // Instead of complicated logic to draw an area around the inner area in a stack,
	// just draw it behind
	this.closedStacks=true;}}if(seriesTypes.area){wrap(seriesTypes.area.prototype,'init',initArea);}if(seriesTypes.areaspline){wrap(seriesTypes.areaspline.prototype,'init',initArea);}if(seriesTypes.spline){ /**
			 * Overridden method for calculating a spline from one point to the next
			 */wrap(seriesTypes.spline.prototype,'getPointSpline',function(proceed,segment,point,i){var ret,smoothing=1.5, // 1 means control points midway between points, 2 means 1/3 from the point, 3 is 1/4 etc;
	denom=smoothing+1,plotX,plotY,lastPoint,nextPoint,lastX,lastY,nextX,nextY,leftContX,leftContY,rightContX,rightContY,distanceLeftControlPoint,distanceRightControlPoint,leftContAngle,rightContAngle,jointAngle;if(this.chart.polar){plotX=point.plotX;plotY=point.plotY;lastPoint=segment[i-1];nextPoint=segment[i+1]; // Connect ends
	if(this.connectEnds){if(!lastPoint){lastPoint=segment[segment.length-2]; // not the last but the second last, because the segment is already connected
	}if(!nextPoint){nextPoint=segment[1];}} // find control points
	if(lastPoint&&nextPoint){lastX=lastPoint.plotX;lastY=lastPoint.plotY;nextX=nextPoint.plotX;nextY=nextPoint.plotY;leftContX=(smoothing*plotX+lastX)/denom;leftContY=(smoothing*plotY+lastY)/denom;rightContX=(smoothing*plotX+nextX)/denom;rightContY=(smoothing*plotY+nextY)/denom;distanceLeftControlPoint=Math.sqrt(Math.pow(leftContX-plotX,2)+Math.pow(leftContY-plotY,2));distanceRightControlPoint=Math.sqrt(Math.pow(rightContX-plotX,2)+Math.pow(rightContY-plotY,2));leftContAngle=Math.atan2(leftContY-plotY,leftContX-plotX);rightContAngle=Math.atan2(rightContY-plotY,rightContX-plotX);jointAngle=Math.PI/2+(leftContAngle+rightContAngle)/2; // Ensure the right direction, jointAngle should be in the same quadrant as leftContAngle
	if(Math.abs(leftContAngle-jointAngle)>Math.PI/2){jointAngle-=Math.PI;} // Find the corrected control points for a spline straight through the point
	leftContX=plotX+Math.cos(jointAngle)*distanceLeftControlPoint;leftContY=plotY+Math.sin(jointAngle)*distanceLeftControlPoint;rightContX=plotX+Math.cos(Math.PI+jointAngle)*distanceRightControlPoint;rightContY=plotY+Math.sin(Math.PI+jointAngle)*distanceRightControlPoint; // Record for drawing in next point
	point.rightContX=rightContX;point.rightContY=rightContY;} // moveTo or lineTo
	if(!i){ret=['M',plotX,plotY];}else { // curve from last point to this
	ret=['C',lastPoint.rightContX||lastPoint.plotX,lastPoint.rightContY||lastPoint.plotY,leftContX||plotX,leftContY||plotY,plotX,plotY];lastPoint.rightContX=lastPoint.rightContY=null; // reset for updating series later
	}}else {ret=proceed.call(this,segment,point,i);}return ret;});} /**
		 * Extend translate. The plotX and plotY values are computed as if the polar chart were a
		 * cartesian plane, where plotX denotes the angle in radians and (yAxis.len - plotY) is the pixel distance from
		 * center. 
		 */wrap(seriesProto,'translate',function(proceed){var chart=this.chart,points,i; // Run uber method
	proceed.call(this); // Postprocess plot coordinates
	if(chart.polar){this.kdByAngle=chart.tooltip&&chart.tooltip.shared;if(!this.preventPostTranslate){points=this.points;i=points.length;while(i--){ // Translate plotX, plotY from angle and radius to true plot coordinates
	this.toXY(points[i]);}}}}); /** 
		 * Extend getSegmentPath to allow connecting ends across 0 to provide a closed circle in 
		 * line-like series.
		 */wrap(seriesProto,'getSegmentPath',function(proceed,segment){var points=this.points; // Connect the path
	if(this.chart.polar&&this.options.connectEnds!==false&&segment[segment.length-1]===points[points.length-1]&&points[0].y!==null){this.connectEnds=true; // re-used in splines
	segment=[].concat(segment,[points[0]]);} // Run uber method
	return proceed.call(this,segment);});function polarAnimate(proceed,init){var chart=this.chart,animation=this.options.animation,group=this.group,markerGroup=this.markerGroup,center=this.xAxis.center,plotLeft=chart.plotLeft,plotTop=chart.plotTop,attribs; // Specific animation for polar charts
	if(chart.polar){ // Enable animation on polar charts only in SVG. In VML, the scaling is different, plus animation
	// would be so slow it would't matter.
	if(chart.renderer.isSVG){if(animation===true){animation={};} // Initialize the animation
	if(init){ // Scale down the group and place it in the center
	attribs={translateX:center[0]+plotLeft,translateY:center[1]+plotTop,scaleX:0.001, // #1499
	scaleY:0.001};group.attr(attribs);if(markerGroup){ //markerGroup.attrSetters = group.attrSetters;
	markerGroup.attr(attribs);} // Run the animation
	}else {attribs={translateX:plotLeft,translateY:plotTop,scaleX:1,scaleY:1};group.animate(attribs,animation);if(markerGroup){markerGroup.animate(attribs,animation);} // Delete this function to allow it only once
	this.animate=null;}} // For non-polar charts, revert to the basic animation
	}else {proceed.call(this,init);}} // Define the animate method for regular series
	wrap(seriesProto,'animate',polarAnimate);if(seriesTypes.column){colProto=seriesTypes.column.prototype; /**
			* Define the animate method for columnseries
			*/wrap(colProto,'animate',polarAnimate); /**
			 * Extend the column prototype's translate method
			 */wrap(colProto,'translate',function(proceed){var xAxis=this.xAxis,len=this.yAxis.len,center=xAxis.center,startAngleRad=xAxis.startAngleRad,renderer=this.chart.renderer,start,points,point,i;this.preventPostTranslate=true; // Run uber method
	proceed.call(this); // Postprocess plot coordinates
	if(xAxis.isRadial){points=this.points;i=points.length;while(i--){point=points[i];start=point.barX+startAngleRad;point.shapeType='path';point.shapeArgs={d:renderer.symbols.arc(center[0],center[1],len-point.plotY,null,{start:start,end:start+point.pointWidth,innerR:len-pick(point.yBottom,len)})}; // Provide correct plotX, plotY for tooltip
	this.toXY(point);point.tooltipPos=[point.plotX,point.plotY];point.ttBelow=point.plotY>center[1];}}}); /**
			 * Align column data labels outside the columns. #1199.
			 */wrap(colProto,'alignDataLabel',function(proceed,point,dataLabel,options,alignTo,isNew){if(this.chart.polar){var angle=point.rectPlotX/Math.PI*180,align,verticalAlign; // Align nicely outside the perimeter of the columns
	if(options.align===null){if(angle>20&&angle<160){align='left'; // right hemisphere
	}else if(angle>200&&angle<340){align='right'; // left hemisphere
	}else {align='center'; // top or bottom
	}options.align=align;}if(options.verticalAlign===null){if(angle<45||angle>315){verticalAlign='bottom'; // top part
	}else if(angle>135&&angle<225){verticalAlign='top'; // bottom part
	}else {verticalAlign='middle'; // left or right
	}options.verticalAlign=verticalAlign;}seriesProto.alignDataLabel.call(this,point,dataLabel,options,alignTo,isNew);}else {proceed.call(this,point,dataLabel,options,alignTo,isNew);}});} /**
		 * Extend getCoordinates to prepare for polar axis values
		 */wrap(pointerProto,'getCoordinates',function(proceed,e){var chart=this.chart,ret={xAxis:[],yAxis:[]};if(chart.polar){each(chart.axes,function(axis){var isXAxis=axis.isXAxis,center=axis.center,x=e.chartX-center[0]-chart.plotLeft,y=e.chartY-center[1]-chart.plotTop;ret[isXAxis?'xAxis':'yAxis'].push({axis:axis,value:axis.translate(isXAxis?Math.PI-Math.atan2(x,y): // angle 
	Math.sqrt(Math.pow(x,2)+Math.pow(y,2)), // distance from center
	true)});});}else {ret=proceed.call(this,e);}return ret;});})();})(Highcharts);

/***/ },
/* 119 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(jQuery) {'use strict';if(typeof module!=='undefined'&&typeof exports!=='undefined'&&module.exports===exports){module.exports='highcharts-ng';}(function(){'use strict'; /*global angular: false, Highcharts: false */angular.module('highcharts-ng',[]).provider('highchartsNG',highchartsNGProvider).directive('highchart',['highchartsNG','$timeout',highchart]);function highchartsNGProvider(){var modules=[];var _basePath=false;var _lazyLoad=false;return {HIGHCHART:'highcharts.js',HIGHSTOCK:'stock/highstock.js',basePath:function basePath(p){_basePath=p;},lazyLoad:function lazyLoad(list){if(list===undefined){modules=[this.HIGHCHART];}else {modules=list;}_lazyLoad=true;},$get:['$window','$rootScope',function($window,$rootScope){if(!_basePath){_basePath=(window.location.protocol==='https:'?'https':'http')+'://code.highcharts.com/';}return highchartsNG($window,$rootScope,_lazyLoad,_basePath,modules);}]};}function highchartsNG($window,$rootScope,lazyload,basePath,modules){var readyQueue=[];var loading=false;return {lazyLoad:lazyload,ready:function ready(callback,thisArg){if(typeof $window.Highcharts!=='undefined'||!lazyload){callback();}else {readyQueue.push([callback,thisArg]);if(loading){return;}loading=true;var self=this;if(typeof jQuery==='undefined'){modules.unshift('adapters/standalone-framework.js');}var doWork=function doWork(){if(modules.length===0){loading=false;$rootScope.$apply(function(){angular.forEach(readyQueue,function(e){ // invoke callback passing 'thisArg'
	e[0].apply(e[1],[]);});});}else {var s=modules.shift();self.loadScript(s,doWork);}};doWork();}},loadScript:function loadScript(path,callback){var s=document.createElement('script');s.type='text/javascript';s.src=basePath+path;s.onload=callback;document.getElementsByTagName('body')[0].appendChild(s);}, //IE8 support
	indexOf:function indexOf(arr,find,i /*opt*/){if(i===undefined)i=0;if(i<0)i+=arr.length;if(i<0)i=0;for(var n=arr.length;i<n;i++){if(i in arr&&arr[i]===find)return i;}return -1;},prependMethod:function prependMethod(obj,method,func){var original=obj[method];obj[method]=function(){var args=Array.prototype.slice.call(arguments);func.apply(this,args);if(original){return original.apply(this,args);}else {return;}};},deepExtend:function deepExtend(destination,source){ //Slightly strange behaviour in edge cases (e.g. passing in non objects)
	//But does the job for current use cases.
	if(angular.isArray(source)){destination=angular.isArray(destination)?destination:[];for(var i=0;i<source.length;i++){destination[i]=deepExtend(destination[i]||{},source[i]);}}else if(angular.isObject(source)){destination=angular.isObject(destination)?destination:{};for(var property in source){destination[property]=deepExtend(destination[property]||{},source[property]);}}else {destination=source;}return destination;}};}function highchart(highchartsNGUtils,$timeout){ // acceptable shared state
	var seriesId=0;var ensureIds=function ensureIds(series){var changed=false;angular.forEach(series,function(s){if(!angular.isDefined(s.id)){s.id='series-'+seriesId++;changed=true;}});return changed;}; // immutable
	var axisNames=['xAxis','yAxis'];var chartTypeMap={'stock':'StockChart','map':'Map','chart':'Chart'};var getMergedOptions=function getMergedOptions(scope,element,config){var mergedOptions={};var defaultOptions={chart:{events:{}},title:{},subtitle:{},series:[],credits:{},plotOptions:{},navigator:{enabled:false},xAxis:{events:{}},yAxis:{events:{}}};if(config.options){mergedOptions=highchartsNGUtils.deepExtend(defaultOptions,config.options);}else {mergedOptions=defaultOptions;}mergedOptions.chart.renderTo=element[0];angular.forEach(axisNames,function(axisName){if(angular.isDefined(config[axisName])){mergedOptions[axisName]=highchartsNGUtils.deepExtend(mergedOptions[axisName]||{},config[axisName]);if(angular.isDefined(config[axisName].currentMin)||angular.isDefined(config[axisName].currentMax)){highchartsNGUtils.prependMethod(mergedOptions.chart.events,'selection',function(e){var thisChart=this;if(e[axisName]){scope.$apply(function(){scope.config[axisName].currentMin=e[axisName][0].min;scope.config[axisName].currentMax=e[axisName][0].max;});}else { //handle reset button - zoom out to all
	scope.$apply(function(){scope.config[axisName].currentMin=thisChart[axisName][0].dataMin;scope.config[axisName].currentMax=thisChart[axisName][0].dataMax;});}});highchartsNGUtils.prependMethod(mergedOptions.chart.events,'addSeries',function(e){scope.config[axisName].currentMin=this[axisName][0].min||scope.config[axisName].currentMin;scope.config[axisName].currentMax=this[axisName][0].max||scope.config[axisName].currentMax;});highchartsNGUtils.prependMethod(mergedOptions[axisName].events,'setExtremes',function(e){if(e.trigger&&e.trigger!=='zoom'){ // zoom trigger is handled by selection event
	$timeout(function(){scope.config[axisName].currentMin=e.min;scope.config[axisName].currentMax=e.max;scope.config[axisName].min=e.min; // set min and max to adjust scrollbar/navigator
	scope.config[axisName].max=e.max;},0);}});}}});if(config.title){mergedOptions.title=config.title;}if(config.subtitle){mergedOptions.subtitle=config.subtitle;}if(config.credits){mergedOptions.credits=config.credits;}if(config.size){if(config.size.width){mergedOptions.chart.width=config.size.width;}if(config.size.height){mergedOptions.chart.height=config.size.height;}}return mergedOptions;};var updateZoom=function updateZoom(axis,modelAxis){var extremes=axis.getExtremes();if(modelAxis.currentMin!==extremes.dataMin||modelAxis.currentMax!==extremes.dataMax){if(axis.setExtremes){axis.setExtremes(modelAxis.currentMin,modelAxis.currentMax,false);}else {axis.detachedsetExtremes(modelAxis.currentMin,modelAxis.currentMax,false);}}};var processExtremes=function processExtremes(chart,axis,axisName){if(axis.currentMin||axis.currentMax){chart[axisName][0].setExtremes(axis.currentMin,axis.currentMax,true);}};var chartOptionsWithoutEasyOptions=function chartOptionsWithoutEasyOptions(options){return angular.extend(highchartsNGUtils.deepExtend({},options),{data:null,visible:null});};var getChartType=function getChartType(scope){if(scope.config===undefined)return 'Chart';return chartTypeMap[(''+scope.config.chartType).toLowerCase()]||(scope.config.useHighStocks?'StockChart':'Chart');};var res={restrict:'EAC',replace:true,template:'<div></div>',scope:{config:'=',disableDataWatch:'='},link:function link(scope,element,attrs){ // We keep some chart-specific variables here as a closure
	// instead of storing them on 'scope'.
	// prevSeriesOptions is maintained by processSeries
	var prevSeriesOptions={};var processSeries=function processSeries(series){var i;var ids=[];if(series){var setIds=ensureIds(series);if(setIds&&!scope.disableDataWatch){ //If we have set some ids this will trigger another digest cycle.
	//In this scenario just return early and let the next cycle take care of changes
	return false;} //Find series to add or update
	angular.forEach(series,function(s){ids.push(s.id);var chartSeries=chart.get(s.id);if(chartSeries){if(!angular.equals(prevSeriesOptions[s.id],chartOptionsWithoutEasyOptions(s))){chartSeries.update(angular.copy(s),false);}else {if(s.visible!==undefined&&chartSeries.visible!==s.visible){chartSeries.setVisible(s.visible,false);}chartSeries.setData(angular.copy(s.data),false);}}else {chart.addSeries(angular.copy(s),false);}prevSeriesOptions[s.id]=chartOptionsWithoutEasyOptions(s);}); //  Shows no data text if all series are empty
	if(scope.config.noData){var chartContainsData=false;for(i=0;i<series.length;i++){if(series[i].data&&series[i].data.length>0){chartContainsData=true;break;}}if(!chartContainsData){chart.showLoading(scope.config.noData);}else {chart.hideLoading();}}} //Now remove any missing series
	for(i=chart.series.length-1;i>=0;i--){var s=chart.series[i];if(s.options.id!=='highcharts-navigator-series'&&highchartsNGUtils.indexOf(ids,s.options.id)<0){s.remove(false);}}return true;}; // chart is maintained by initChart
	var chart=false;var initChart=function initChart(){if(chart)chart.destroy();prevSeriesOptions={};var config=scope.config||{};var mergedOptions=getMergedOptions(scope,element,config);var func=config.func||undefined;var chartType=getChartType(scope);chart=new Highcharts[chartType](mergedOptions,func);for(var i=0;i<axisNames.length;i++){if(config[axisNames[i]]){processExtremes(chart,config[axisNames[i]],axisNames[i]);}}if(config.loading){chart.showLoading();}config.getHighcharts=function(){return chart;};};initChart();if(scope.disableDataWatch){scope.$watchCollection('config.series',function(newSeries,oldSeries){processSeries(newSeries);chart.redraw();});}else {scope.$watch('config.series',function(newSeries,oldSeries){var needsRedraw=processSeries(newSeries);if(needsRedraw){chart.redraw();}},true);}scope.$watch('config.title',function(newTitle){chart.setTitle(newTitle,true);},true);scope.$watch('config.subtitle',function(newSubtitle){chart.setTitle(true,newSubtitle);},true);scope.$watch('config.loading',function(loading){if(loading){chart.showLoading(loading===true?null:loading);}else {chart.hideLoading();}});scope.$watch('config.noData',function(noData){if(scope.config&&scope.config.loading){chart.showLoading(noData);}},true);scope.$watch('config.credits.enabled',function(enabled){if(enabled){chart.credits.show();}else if(chart.credits){chart.credits.hide();}});scope.$watch(getChartType,function(chartType,oldChartType){if(chartType===oldChartType)return;initChart();});angular.forEach(axisNames,function(axisName){scope.$watch('config.'+axisName,function(newAxes,oldAxes){if(newAxes===oldAxes||!newAxes){return;}if(angular.isArray(newAxes)){for(var axisIndex=0;axisIndex<newAxes.length;axisIndex++){var axis=newAxes[axisIndex];if(axisIndex<chart[axisName].length){chart[axisName][axisIndex].update(axis,false);updateZoom(chart[axisName][axisIndex],angular.copy(axis));}}}else { // update single axis
	chart[axisName][0].update(newAxes,false);updateZoom(chart[axisName][0],angular.copy(newAxes));}chart.redraw();},true);});scope.$watch('config.options',function(newOptions,oldOptions,scope){ //do nothing when called on registration
	if(newOptions===oldOptions)return;initChart();processSeries(scope.config.series);chart.redraw();},true);scope.$watch('config.size',function(newSize,oldSize){if(newSize===oldSize)return;if(newSize){chart.setSize(newSize.width||chart.chartWidth,newSize.height||chart.chartHeight);}},true);scope.$on('highchartsng.reflow',function(){chart.reflow();});scope.$on('$destroy',function(){if(chart){try{chart.destroy();}catch(ex){ // fail silently as highcharts will throw exception if element doesn't exist
	}$timeout(function(){element.remove();},0);}});}}; // override link fn if lazy loading is enabled
	if(highchartsNGUtils.lazyLoad){var oldLink=res.link;res.link=function(){var args=arguments;highchartsNGUtils.ready(function(){oldLink.apply(this,args);},this);};}return res;}})();
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 120 */
/***/ function(module, exports) {

	'use strict';angular.module('app',['ngRoute','ngSanitize','ui.select','datePicker','ui.calendar','ngDialog',"highcharts-ng"]);

/***/ },
/* 121 */
/***/ function(module, exports) {

	'use strict';angular.module('app').factory('httpRequestInterceptor',function(){return {request:function request(config){config.headers['Authorization']='Basic xxxxxxxxx';return config;}};});

/***/ },
/* 122 */
/***/ function(module, exports) {

	'use strict';angular.module('app').controller('MainController',['$scope',function($scope){$scope.navs=[{id:1,href:'#/dashboard',title:'DASHBOARD'},{id:2,href:'#/series',title:'SERIES'},{id:2,href:'#/film',title:'FILM'},{id:3,title:'DAILY',submenu:[{id:31,href:'#/daily',title:'DAILY CALENDAR'}]}];$scope.getSub=function(menu){$scope.navs.forEach(function(e){e.opensub=false;});if(menu.submenu){menu.opensub=true;}else {return false;}};}]);

/***/ },
/* 123 */
/***/ function(module, exports) {

	'use strict';angular.module('app').config(['$routeProvider','$httpProvider',function($routeProvider,$httpProvider){$httpProvider.interceptors.push('httpRequestInterceptor');$routeProvider.when('/dashboard',{templateUrl:'interface/dashboard/index.html',controller:'dashboardCtrl'}).when('/daily',{templateUrl:'interface/daily/index.html',controller:'dailyCtrl'}).when('/daily/detail/:date',{templateUrl:'interface/daily/detail.html',controller:'dailyDetailCtrl'}).when('/series',{templateUrl:'interface/series/index.html',controller:'seriesCtrl'}).when('/series/add',{templateUrl:'interface/series/add.html',controller:'seriesAddCtrl'}).when('/series/detail/:id',{templateUrl:'interface/series/detail.html',controller:'seriesDetailCtrl'}).when('/film',{templateUrl:'interface/film/index.html',controller:'filmCtrl'}).otherwise({redirectTo:'/dashboard'});}]);

/***/ },
/* 124 */
/***/ function(module, exports) {

	'use strict';angular.module('app').constant('appConstant',{series_status:[{id:'finish',name:'Finish'},{id:'giveup',name:'Give Up'},{id:'watching',name:'Watching'}],daily_type:[{id:'series',name:'Series'},{id:'book',name:'Book'},{id:'it',name:'IT'},{id:'film',name:'Film'},{id:'house',name:'House'},{id:'study',name:'Study'},{id:'job',name:'Job'},{id:'writing',name:'Writing'}],item_comment:[{id:'great',name:'Great'},{id:'good',name:'Good'},{id:'normal',name:'Normal'},{id:'bad',name:'Bad'},{id:'worst',name:'Worst'}]}).run(function($rootScope,appConstant){$rootScope.series_status=appConstant.series_status;$rootScope.daily_type=appConstant.daily_type;$rootScope.item_comment=appConstant.item_comment;});

/***/ },
/* 125 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var _moment=__webpack_require__(10);var _moment2=_interopRequireDefault(_moment);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}angular.module('app').factory('listService',['$http','$rootScope',function($http,$rootScope){var List=function List(path){var self=this;this.initialize=function(){$http.get('http://localhost:2003/'+path).then(function(res){console.log(res);self.rows=res.data;});};this.add=function(obj){if(!obj)return;$http.post('http://localhost:2003/'+path,obj).then(function(res){self.rows=res.data;});};this.initialize();};return List;}]);

/***/ },
/* 126 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var _moment=__webpack_require__(10);var _moment2=_interopRequireDefault(_moment);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}angular.module('app').factory('itemService',['$http','$rootScope',function($http,$rootScope){var ItemService=function ItemService(){this.getItem=function(path,id){return $http.get('http://localhost:2003/'+path+'/'+id);};};return ItemService;}]);

/***/ },
/* 127 */
/***/ function(module, exports) {

	'use strict';angular.module('app').factory('seriesListService',['$http',function($http){var SeriesList=function SeriesList(id,name){var self=this;var headers=[{id:1,name:'name',title:'NAME',clickable:true,href:'#/series/detail/'},{id:2,name:'date',title:'DATE'},{id:3,name:'status',title:'STATUS'}];this.initialize=function(){$http.get('http://localhost:2003/series').then(function(res){console.log(res.data);self.rows=res.data;self.headers=headers;});};this.add=function(name){var obj={};if(!name)return;obj.name=name;console.log('add series '+name);$http.post('http://localhost:2003/series',obj).then(function(res){self.rows=res.data;});};this.addItem=function(id,item,cb){$http.post('http://localhost:2003/series/'+id,item).then(function(res){alert('Success');cb();});};this.initialize();};return SeriesList;}]);

/***/ },
/* 128 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var _moment=__webpack_require__(10);var _moment2=_interopRequireDefault(_moment);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}angular.module('app').factory('seriesService',['$http','$rootScope',function($http,$rootScope){var Series=function Series(id){var self=this;this.initialize=function(){$http.get('http://localhost:2003/series/'+id).then(function(res){console.log(res.data);self._id=res.data._id;self.name=res.data.name;self.date=res.data.date;self.status=res.data.status;self.items=res.data.items;self.selected_status=self.status?$rootScope.series_status.filter(function(s){return s.id==self.status;})[0]:$rootScope.series_status[2];});};this.addNew=function(){self.items.push({num:null,date:(0,_moment2.default)(new Date()).format('YYYY-MM-DD')});};this.addItem=function(item){item.date=(0,_moment2.default)(item.date).format('YYYY-MM-DD');$http.post('http://localhost:2003/series/'+self._id,item).then(function(res){alert('Success');});};this.update=function(){self.date=(0,_moment2.default)(self.date).format('YYYY-MM-DD');self.status=self.selected_status;$http.put('http://localhost:2003/series/'+id,self).then(function(res){self.name=res.data.name;self.date=res.data.date;self.status=res.data.status;alert('Success');});};this.deleteItem=function(item){$http.delete('http://localhost:2003/series/'+self._id+'/'+item._id).then(function(res){self.items=res.data;alert('Success');});};this.updateItem=function(item){$http.post('http://localhost:2003/series/'+self._id+'/'+item._id,item).then(function(res){alert('Success');});};this.initialize();};return Series;}]);

/***/ },
/* 129 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var _moment=__webpack_require__(10);var _moment2=_interopRequireDefault(_moment);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}angular.module('app').factory('seriesItemService',['$http','$rootScope',function($http,$rootScope){var SeriesItem=function SeriesItem(id){var self=this;this.initialize=function(){if(!id)return;$http.get('http://localhost:2003/series/items/'+id).then(function(res){if(!res.data)return;self.seriesid=res.data.seriesid;self.num=res.data.item.num;self.comment=res.data.item.comment;});};this.initialize();};return SeriesItem;}]);

/***/ },
/* 130 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var _moment=__webpack_require__(10);var _moment2=_interopRequireDefault(_moment);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}angular.module('app').factory('bookService',['$http','$rootScope','ngDialog',function($http,$rootScope,ngDialog){var Book=function Book(id){var self=this;this.initialize=function(){if(!id)return;$http.get('http://localhost:2003/book/'+id).then(function(res){self._id=res.data._id;self.name=res.data.name;res.data.data&&(self.date=res.data.date);self.author=res.data.author;self.comment=res.data.comment;if(res.data.ref)self.ref=res.data.ref;});};this.addItem=function(item){item.date=(0,_moment2.default)(item.date).format('YYYY-MM-DD');$http.post('http://localhost:2003/book',item).then(function(res){self.items=res.data;alert('Success');});};this.initialize();};return Book;}]);

/***/ },
/* 131 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var _moment=__webpack_require__(10);var _moment2=_interopRequireDefault(_moment);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}angular.module('app').factory('itService',['$http','$rootScope',function($http,$rootScope){var IT=function IT(){var self=this;this.getItem=function(id){return $http.get('http://localhost:2003/it/'+id);};};return IT;}]);

/***/ },
/* 132 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var _moment=__webpack_require__(10);var _moment2=_interopRequireDefault(_moment);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}angular.module('app').factory('dailyService',['$http','$rootScope','seriesItemService','bookService','filmService','modelService',function($http,$rootScope,seriesItemService,bookService,filmService,modelService){var Daily=function Daily(date){var self=this;self.selectedtype={};self.newitem={};self.newsub={};this.initialize=function(){$http.get('http://localhost:2003/daily/'+date).then(function(res){self._id=res.data._id;self.date=res.data.date;self.items=res.data.items;self.items.forEach(function(item){recodeItem(item,function(result){item.contentName=result;});});});};this.addItem=function(newitem){if(!self.newitem||!self.newitem.type){alert('type something!');return;} //self.newitem.type = self.selectedtype;
	$http.post('http://localhost:2003/daily/'+date,self.newitem).then(function(res){self.items=res.data.items;self.items.forEach(function(item){recodeItem(item,function(result){item.contentName=result;});});self.newitem={};});};this.UpdateItem=function(newitem){ //self.newitem.type = self.selectedtype;
	$http.post('http://localhost:2003/daily/'+date+'/'+self.newitem._id,self.newitem).then(function(res){self.items=res.data.items;self.items.forEach(function(item){recodeItem(item,function(result){item.contentName=result;});});self.newitem={};});};this.newItem=function(){self.newitem={}; //self.selectedtype = null;
	self.newsub={};};this.deleteItem=function(){$http.delete('http://localhost:2003/daily/'+date+'/'+self.newitem._id).then(function(res){self.initialize();self.newitem={};});};this.getPieChartDate=function(items){var chartItems={};var chartItemsArray=[];items.forEach(function(item){if(!chartItems[item.type]){chartItems[item.type]=parseFloat(item.time);}else {chartItems[item.type]=parseFloat(chartItems[item.type])+parseFloat(item.time);}});for(var o in chartItems){chartItemsArray.push({name:o,y:chartItems[o]});}return chartItemsArray;};this.getItem=function(item){self.newitem={};self.newsub={};self.items.forEach(function(i){if(i._id==item._id){self.newitem=i;if(i.type=='series'){self.newsub=new seriesItemService(item._id);self.newsub.date=date;self.newsub.ref=item._id;}else if(i.type=='book'){self.newsub=new bookService(item._id);self.newsub.date=date;self.newsub.ref=item._id;}else if(i.type=='film'){filmService.getItem(item._id).then(function(res){res.data?self.newsub=res.data:self.newsub.date=self.date;});}return;}});};var recodeItem=function recodeItem(item,cb){var type=item.type;type=type.replace(/^[a-z]/,function(x){return x.toUpperCase();});switch(type){case 'Series':modelService.getItemByRouteAndId('series/items',item._id).then(function(res){var result=res.data&&res.data.seriesname+' '+res.data.item.num;cb(result);});break;case 'Book':case 'Film':modelService.getItemByRef(type,item._id).then(function(res){cb(res.data.name);});break;case 'House':case 'Study':case 'Writing':case 'It':case 'Job':if(type=='It')type='IT';modelService.getItem(type,item.content).then(function(res){cb(res.data.name);});break;}};this.initialize();};return Daily;}]);

/***/ },
/* 133 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var _moment=__webpack_require__(10);var _moment2=_interopRequireDefault(_moment);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}angular.module('app').factory('filmService',['$http','$rootScope',function($http,$rootScope){return {getItem:function getItem(id){return $http.get('http://localhost:2003/film/'+id);},addItem:function addItem(obj){return $http.post('http://localhost:2003/film/',obj);},updateItem:function updateItem(id,obj){return $http.put('http://localhost:2003/film/'+id,obj);}};}]);

/***/ },
/* 134 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var _moment=__webpack_require__(10);var _moment2=_interopRequireDefault(_moment);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}angular.module('app').factory('modelService',['$http',function($http){return {getList:function getList(type){return $http.get('http://localhost:2003/item?type='+type);},getItem:function getItem(type,id){return $http.get('http://localhost:2003/item/'+id+'?type='+type);},getItemByRef:function getItemByRef(type,id){return $http.get('http://localhost:2003/itembyref/'+id+'?type='+type);},getItemByRouteAndId:function getItemByRouteAndId(path,id){return $http.get('http://localhost:2003/'+path+'/'+id);},addItem:function addItem(type,obj){return $http.post('http://localhost:2003/item/'+'?type='+type,obj);},updateItem:function updateItem(type,id,obj){return $http.put('http://localhost:2003/item/'+id+'?type='+type,obj);},deleteItem:function deleteItem(type,id){return $http.delete('http://localhost:2003/item/'+id+'?type='+type);}};}]);

/***/ },
/* 135 */
/***/ function(module, exports) {

	'use strict';angular.module('app').factory('chartFactory',[function(){return {pie:function pie(title,name,data){return {options:{chart:{type:'pie'},credits:{enabled:false},plotOptions:{pie:{allowPointSelect:true,showInLegend:true}}},series:[{name:name,data:data}],title:{text:title},loading:false};}};}]);

/***/ },
/* 136 */
/***/ function(module, exports) {

	'use strict';angular.module('app').controller('dashboardCtrl',['$scope',function($scope){}]);

/***/ },
/* 137 */
/***/ function(module, exports) {

	'use strict';angular.module('app').controller('seriesCtrl',['$scope','$location','seriesListService',function($scope,$location,seriesListService){$scope.add=function(){$location.path('series/add');};$scope.list=new seriesListService();}]);

/***/ },
/* 138 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var _moment=__webpack_require__(10);var _moment2=_interopRequireDefault(_moment);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}angular.module('app').controller('seriesAddCtrl',['$scope','$location','$http','$timeout','seriesService',function($scope,$location,$http,$timeout,seriesService){$scope.newseries={};$scope.selectedseries={};$scope.add=function(){var obj={};obj.name=$scope.newseries.name;$http.post('http://localhost:2003/series',obj).then(function(res){$scope.series=res.data;});};$http.get('http://localhost:2003/series').then(function(res){$scope.series=res.data;});$scope.addItem=function(){var obj={};obj=$scope.newitem;obj.date=(0,_moment2.default)(obj.date).format('YYYY-MM-DD');$http.post('http://localhost:2003/series?id='+$scope.selectedseries._id,obj).then(function(res){console.log(res);});console.log($scope.selectedseries);};}]);

/***/ },
/* 139 */
/***/ function(module, exports) {

	'use strict';angular.module('app').controller('seriesDetailCtrl',['$scope','$location','$routeParams','seriesService',function($scope,$location,$routeParams,seriesService){var id=$routeParams.id;$scope.series=new seriesService(id);$scope.control={detail_editable:false,episode_editable:false};$scope.edit=function(){$scope.control.detail_editable=!$scope.control.detail_editable;};$scope.editEp=function(){$scope.control.episode_editable=!$scope.control.episode_editable;};$scope.addEp=function(){$scope.series.addNew();};}]);

/***/ },
/* 140 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var _moment=__webpack_require__(10);var _moment2=_interopRequireDefault(_moment);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}angular.module('app').controller('dailyCtrl',['$scope','$location',function($scope,$location){$scope.eventSources=[];$scope.uiConfig={calendar:{height:450,editable:true,header:{left:'month basicWeek basicDay agendaWeek agendaDay',center:'title',right:'today prev,next'},dayClick:function dayClick(date,jsEvent,view){$scope.alertEventOnClick(date,jsEvent,view);},eventDrop:$scope.alertOnDrop,eventResize:$scope.alertOnResize,events:[]}};$scope.alertEventOnClick=function(date,jsEvent,view){var _date=(0,_moment2.default)(date).format('YYYY-MM-DD');$location.path('/daily/detail/'+_date);};}]);

/***/ },
/* 141 */
/***/ function(module, exports) {

	'use strict';angular.module('app').controller('dailyDetailCtrl',['$scope','$routeParams','dailyService','chartFactory',function($scope,$routeParams,dailyService,chartFactory){var self=this;self.date=$routeParams.date;$scope.info={};$scope.control={item_editable:false,chart_show:false};$scope.newitem={};var init=function init(){$scope.daily=new dailyService(self.date);};$scope.chart=function(){if(!$scope.control.chart_show){var chartTimes=$scope.daily.getPieChartDate($scope.daily.items);$scope.highchartsNG=chartFactory.pie('TODAY','total time',chartTimes);}$scope.control.chart_show=!$scope.control.chart_show;};$scope.$on('DailyReRender',function(){init();});init();}]);

/***/ },
/* 142 */
/***/ function(module, exports) {

	'use strict';angular.module('app').controller('filmCtrl',['$scope','$location','modelService',function($scope,$location,modelService){$scope.list={headers:[{id:1,name:'name',title:'NAME'},{id:2,name:'date',title:'DATE'},{id:3,name:'comment',title:'COMMENT'}],rows:[]};modelService.getList('Film').then(function(res){console.log(res.data);$scope.list.rows=res.data;});}]);

/***/ },
/* 143 */
/***/ function(module, exports) {

	'use strict';angular.module('app').component('appInput',{templateUrl:'component/input/app.input.html',bindings:{val:'=',type:'@',editable:'<',title:'@',placeholder:'@'}});

/***/ },
/* 144 */
/***/ function(module, exports) {

	'use strict';angular.module('app').component('appSelect',{templateUrl:'component/select/app.select.html',bindings:{val:'=',list:'<',editable:'<',title:'@',placeholder:'@',showcol:'@'},controller:function controller(){var ctrl=this;ctrl.getName=function(id){console.log(id);var result=ctrl.list.filter(function(l){return l.id==id;})[0];if(result){return result.name;}else {return '';}};}});

/***/ },
/* 145 */
/***/ function(module, exports) {

	'use strict';angular.module('app').component('appTable',{templateUrl:'component/table/app.table.html',bindings:{list:'<'}});

/***/ },
/* 146 */
/***/ function(module, exports) {

	'use strict';angular.module('app').component('appSeriesEdit',{templateUrl:'component/series/series.component.html',bindings:{newseriesitem:'=',selectedseries:'<',date:'<',dailyitemid:'<'},controller:['$scope','seriesListService','seriesItemService','ngDialog',function($scope,seriesListService,seriesItemService,ngDialog){var ctrl=this;ctrl.seriesList=new seriesListService();ctrl.addItem=function(){if(!ctrl.dailyitemid){var dialogScope=$scope.$new();dialogScope.title='You must bind a daily item!';ngDialog.open({template:'component/message/message.html',scope:dialogScope});}else {ctrl.seriesList.addItem(ctrl.newseriesitem.seriesid,ctrl.newseriesitem,function(){$scope.$emit('DailyReRender');});}};}]});

/***/ },
/* 147 */
/***/ function(module, exports) {

	'use strict';angular.module('app').component('appBookEdit',{templateUrl:'component/series/book.component.html',bindings:{newitem:'=',date:'<',dailyitemid:'<'},controller:['$scope','modelService','ngDialog',function($scope,modelService,ngDialog){var ctrl=this;console.log(ctrl.newitem);ctrl.add=function(){if(!ctrl.dailyitemid){var dialogScope=$scope.$new();dialogScope.title='You must bind a daily item!';ngDialog.open({template:'component/message/message.html',scope:dialogScope});}else {modelService.addItem('Book',ctrl.newitem).then(function(res){$scope.$emit('DailyReRender');});}};ctrl.update=function(){modelService.updateItem('Book',ctrl.newitem._id,ctrl.newitem).then(function(res){$scope.$emit('DailyReRender');});};ctrl.delete=function(){modelService.deleteItem('Book',ctrl.newitem._id).then(function(res){$scope.$emit('DailyReRender');});};}]});

/***/ },
/* 148 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var _moment=__webpack_require__(10);var _moment2=_interopRequireDefault(_moment);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}angular.module('app').component('appFilmEdit',{templateUrl:'component/series/film.component.html',bindings:{newitem:'=',date:'<',dailyitemid:'<'},controller:['$scope','modelService','ngDialog',function($scope,modelService,ngDialog){var ctrl=this;ctrl.add=function(){if(!ctrl.dailyitemid){var dialogScope=$scope.$new();dialogScope.title='You must bind a daily item!';ngDialog.open({template:'component/message/message.html',scope:dialogScope});}else {ctrl.newitem.ref=ctrl.dailyitemid;ctrl.newitem.date&&(ctrl.newitem.date=(0,_moment2.default)(ctrl.newitem.date).format('YYYY-MM-DD'));modelService.addItem('Film',ctrl.newitem).then(function(res){$scope.$emit('DailyReRender');});}};ctrl.update=function(){ctrl.newitem.date&&(ctrl.newitem.date=(0,_moment2.default)(ctrl.newitem.date).format('YYYY-MM-DD'));modelService.updateItem('Film',ctrl.newitem._id,ctrl.newitem).then(function(res){$scope.$emit('DailyReRender');});};ctrl.delete=function(){modelService.deleteItem('Film',ctrl.newitem._id).then(function(res){$scope.$emit('DailyReRender');});};}]});

/***/ },
/* 149 */
/***/ function(module, exports) {

	'use strict';angular.module('app').component('appItemEdit',{templateUrl:'component/series/item.component.html',bindings:{val:'=',type:'@'},controller:['modelService',function(modelService){var ctrl=this;ctrl.add=function(){modelService.addItem(ctrl.type,{name:ctrl.newName}).then(function(res){alert('Success');getlist();});};var getlist=function getlist(){modelService.getList(ctrl.type).then(function(res){ctrl.list=res.data;});};getlist();}]});

/***/ }
/******/ ]);
//# sourceMappingURL=bundle.js.map